[
  {
    "execution_id": "exec-41d62868-4af7cf9a-1751108696",
    "timestamp": "2025-06-28T11:04:56.286440+00:00",
    "sacred_chain": {
      "input_data": "yansi",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'yansi' -> 'yansi'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "yansi",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "documentation_quality": 3.3333333333333335,
        "documentation_sources": [
          "crates_io",
          "docs_rs",
          "lib_rs"
        ],
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\target\\debug\\deps\\libyansi-890a5b39bec76537.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `if` statement can be collapsed\n   --> src\\style.rs:253:9\n    |\n253 | /         if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {\n254 | |             if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {\n255 | |                 return Ok(());\n256 | |             }\n257 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n    = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n    |\n253 ~         if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) && (self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT) {\n254 +             return Ok(());\n255 +         }\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::collapsible_if)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "collapse nested if block",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8129,
                        "byte_start": 7911,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 257,
                        "line_start": 253,
                        "suggested_replacement": "if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) && (self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT) {\n            return Ok(());\n        }",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {"
                          },
                          {
                            "highlight_end": 80,
                            "highlight_start": 1,
                            "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "                return Ok(());"
                          },
                          {
                            "highlight_end": 14,
                            "highlight_start": 1,
                            "text": "            }"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::collapsible_if",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `if` statement can be collapsed",
                "spans": [
                  {
                    "byte_end": 8129,
                    "byte_start": 7911,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 257,
                    "line_start": 253,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 92,
                        "highlight_start": 9,
                        "text": "        if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {"
                      },
                      {
                        "highlight_end": 80,
                        "highlight_start": 1,
                        "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                      },
                      {
                        "highlight_end": 31,
                        "highlight_start": 1,
                        "text": "                return Ok(());"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            }"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `if` statement can be collapsed\n   --> src\\style.rs:269:9\n    |\n269 | /         if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {\n270 | |             if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {\n271 | |                 return Cow::from(\"\");\n272 | |             }\n273 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n269 ~         if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) && (self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT) {\n270 +             return Cow::from(\"\");\n271 +         }\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "collapse nested if block",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8773,
                        "byte_start": 8548,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 273,
                        "line_start": 269,
                        "suggested_replacement": "if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) && (self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT) {\n            return Cow::from(\"\");\n        }",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {"
                          },
                          {
                            "highlight_end": 80,
                            "highlight_start": 1,
                            "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "                return Cow::from(\"\");"
                          },
                          {
                            "highlight_end": 14,
                            "highlight_start": 1,
                            "text": "            }"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::collapsible_if",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `if` statement can be collapsed",
                "spans": [
                  {
                    "byte_end": 8773,
                    "byte_start": 8548,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 273,
                    "line_start": 269,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 92,
                        "highlight_start": 9,
                        "text": "        if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {"
                      },
                      {
                        "highlight_end": 80,
                        "highlight_start": 1,
                        "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                      },
                      {
                        "highlight_end": 38,
                        "highlight_start": 1,
                        "text": "                return Cow::from(\"\");"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            }"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: sub-expression diverges\n   --> src\\macros.rs:156:1\n    |\n156 | / define_properties! {\n157 | |     /// Returns a styled value derived from `self` with the foreground set to\n158 | |     /// `value`.\n159 | |     ///\n...   |\n351 | |     whenever(Condition),\n352 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n    = note: `#[warn(clippy::diverging_sub_expression)]` on by default\n    = note: this warning originates in the macro `todo` which comes from the expansion of the macro `define_properties` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::diverging_sub_expression)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::diverging_sub_expression",
                  "explanation": null
                },
                "level": "warning",
                "message": "sub-expression diverges",
                "spans": [
                  {
                    "byte_end": 30093,
                    "byte_start": 30046,
                    "column_end": 56,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 30023,
                        "byte_start": 30006,
                        "column_end": 18,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 888,
                        "line_start": 888,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "macro_rules! todo {"
                          }
                        ]
                      },
                      "macro_decl_name": "todo!",
                      "span": {
                        "byte_end": 4131,
                        "byte_start": 4124,
                        "column_end": 45,
                        "column_start": 38,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 3866,
                            "byte_start": 3824,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 125,
                            "line_start": 125,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! check_property_exhaustiveness {"
                              }
                            ]
                          },
                          "macro_decl_name": "check_property_exhaustiveness!",
                          "span": {
                            "byte_end": 4478,
                            "byte_start": 4429,
                            "column_end": 60,
                            "column_start": 11,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 4266,
                                "byte_start": 4236,
                                "column_end": 31,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 139,
                                "line_start": 139,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "macro_rules! define_properties {"
                                  }
                                ]
                              },
                              "macro_decl_name": "define_properties!",
                              "span": {
                                "byte_end": 10787,
                                "byte_start": 4831,
                                "column_end": 2,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 352,
                                "line_start": 156,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "define_properties! {"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the foreground set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`red()`](Self::red()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`green()`](Self::green()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "    /// painted.fg(Color::White);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using [`white()`](Self::white())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// painted.white();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    fg(Color) {"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 27,
                                    "highlight_start": 1,
                                    "text": "        red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 40,
                                    "highlight_start": 1,
                                    "text": "        bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the background set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 62,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`on_red()`](Self::on_red()) and"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// [`on_green()`](Self::on_green()), which have the same functionality but"
                                  },
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "    /// are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bg(Color::Red);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using [`on_red()`](Self::on_red())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// painted.on_red();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    bg(Color) {"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 30,
                                    "highlight_start": 1,
                                    "text": "        on_red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "        on_yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        on_bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 1,
                                    "text": "        on_bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the styling [`Attribute`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 66,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use"
                                  },
                                  {
                                    "highlight_end": 77,
                                    "highlight_start": 1,
                                    "text": "    /// attribute-specific builder methods like [`bold()`](Self::bold()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`underline()`](Self::underline()), which have the same functionality"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// but are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using `attr()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Attribute};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// painted.attr(Attribute::Bold);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 61,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using using [`bold()`](Self::bold())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bold();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "    attr(Attribute) {"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bold => Attribute::Bold,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        dim => Attribute::Dim,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        italic => Attribute::Italic,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        underline => Attribute::Underline,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        blink => Attribute::Blink,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        rapid_blink => Attribute::RapidBlink,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        invert => Attribute::Invert,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        conceal => Attribute::Conceal,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        strike => Attribute::Strike,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the `yansi` [`Quirk`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use quirk-specific"
                                  },
                                  {
                                    "highlight_end": 58,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`mask()`](Self::mask()) and"
                                  },
                                  {
                                    "highlight_end": 76,
                                    "highlight_start": 1,
                                    "text": "    /// [`wrap()`](Self::wrap()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using `.quirk()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Quirk};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "    /// painted.quirk(Quirk::Wrap);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using [`wrap()`](Self::wrap())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.wrap();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 19,
                                    "highlight_start": 1,
                                    "text": "    quirk(Quirk) {"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        mask => Quirk::Mask,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        wrap => Quirk::Wrap,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        linger => Quirk::Linger,"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "        #[deprecated("
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "            since = \"1.0.1\","
                                  },
                                  {
                                    "highlight_end": 86,
                                    "highlight_start": 1,
                                    "text": "            note = \"renamed to `resetting()` due to conflicts with `Vec::clear()`.\\n\\"
                                  },
                                  {
                                    "highlight_end": 75,
                                    "highlight_start": 1,
                                    "text": "                The `clear()` method will be removed in a future release.\""
                                  },
                                  {
                                    "highlight_end": 11,
                                    "highlight_start": 1,
                                    "text": "        )]"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        clear => Quirk::Clear,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        resetting => Quirk::Resetting,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bright => Quirk::Bright,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_bright => Quirk::OnBright,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Conditionally enable styling based on whether the [`Condition`] `value`"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// applies. Replaces any previous condition."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 70,
                                    "highlight_start": 1,
                                    "text": "    /// See the [crate level docs](crate#per-style) for more details."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Enable styling `painted` only when both `stdout` and `stderr` are TTYs:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "    /// # #[cfg(feature = \"detect-tty\")] {"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Condition};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 74,
                                    "highlight_start": 1,
                                    "text": "    /// painted.red().on_yellow().whenever(Condition::STDOUTERR_ARE_TTY);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// # }"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    whenever(Condition),"
                                  },
                                  {
                                    "highlight_end": 2,
                                    "highlight_start": 1,
                                    "text": "}"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 142,
                            "line_start": 142,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 60,
                                "highlight_start": 11,
                                "text": "        $(check_property_exhaustiveness!($A $({ $($t)* })?);)*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 38,
                            "text": "                match { let _v: $A = todo!(); _v } {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 890,
                    "line_start": 890,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 9,
                        "text": "        $crate::panicking::panic(\"not yet implemented\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: sub-expression diverges\n   --> src\\macros.rs:156:1\n    |\n156 | / define_properties! {\n157 | |     /// Returns a styled value derived from `self` with the foreground set to\n158 | |     /// `value`.\n159 | |     ///\n...   |\n351 | |     whenever(Condition),\n352 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n    = note: this warning originates in the macro `todo` which comes from the expansion of the macro `define_properties` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::diverging_sub_expression",
                  "explanation": null
                },
                "level": "warning",
                "message": "sub-expression diverges",
                "spans": [
                  {
                    "byte_end": 30093,
                    "byte_start": 30046,
                    "column_end": 56,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 30023,
                        "byte_start": 30006,
                        "column_end": 18,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 888,
                        "line_start": 888,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "macro_rules! todo {"
                          }
                        ]
                      },
                      "macro_decl_name": "todo!",
                      "span": {
                        "byte_end": 4131,
                        "byte_start": 4124,
                        "column_end": 45,
                        "column_start": 38,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 3866,
                            "byte_start": 3824,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 125,
                            "line_start": 125,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! check_property_exhaustiveness {"
                              }
                            ]
                          },
                          "macro_decl_name": "check_property_exhaustiveness!",
                          "span": {
                            "byte_end": 4478,
                            "byte_start": 4429,
                            "column_end": 60,
                            "column_start": 11,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 4266,
                                "byte_start": 4236,
                                "column_end": 31,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 139,
                                "line_start": 139,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "macro_rules! define_properties {"
                                  }
                                ]
                              },
                              "macro_decl_name": "define_properties!",
                              "span": {
                                "byte_end": 10787,
                                "byte_start": 4831,
                                "column_end": 2,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 352,
                                "line_start": 156,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "define_properties! {"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the foreground set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`red()`](Self::red()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`green()`](Self::green()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "    /// painted.fg(Color::White);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using [`white()`](Self::white())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// painted.white();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    fg(Color) {"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 27,
                                    "highlight_start": 1,
                                    "text": "        red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 40,
                                    "highlight_start": 1,
                                    "text": "        bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the background set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 62,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`on_red()`](Self::on_red()) and"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// [`on_green()`](Self::on_green()), which have the same functionality but"
                                  },
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "    /// are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bg(Color::Red);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using [`on_red()`](Self::on_red())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// painted.on_red();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    bg(Color) {"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 30,
                                    "highlight_start": 1,
                                    "text": "        on_red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "        on_yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        on_bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 1,
                                    "text": "        on_bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the styling [`Attribute`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 66,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use"
                                  },
                                  {
                                    "highlight_end": 77,
                                    "highlight_start": 1,
                                    "text": "    /// attribute-specific builder methods like [`bold()`](Self::bold()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`underline()`](Self::underline()), which have the same functionality"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// but are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using `attr()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Attribute};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// painted.attr(Attribute::Bold);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 61,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using using [`bold()`](Self::bold())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bold();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "    attr(Attribute) {"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bold => Attribute::Bold,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        dim => Attribute::Dim,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        italic => Attribute::Italic,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        underline => Attribute::Underline,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        blink => Attribute::Blink,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        rapid_blink => Attribute::RapidBlink,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        invert => Attribute::Invert,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        conceal => Attribute::Conceal,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        strike => Attribute::Strike,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the `yansi` [`Quirk`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use quirk-specific"
                                  },
                                  {
                                    "highlight_end": 58,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`mask()`](Self::mask()) and"
                                  },
                                  {
                                    "highlight_end": 76,
                                    "highlight_start": 1,
                                    "text": "    /// [`wrap()`](Self::wrap()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using `.quirk()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Quirk};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "    /// painted.quirk(Quirk::Wrap);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using [`wrap()`](Self::wrap())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.wrap();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 19,
                                    "highlight_start": 1,
                                    "text": "    quirk(Quirk) {"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        mask => Quirk::Mask,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        wrap => Quirk::Wrap,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        linger => Quirk::Linger,"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "        #[deprecated("
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "            since = \"1.0.1\","
                                  },
                                  {
                                    "highlight_end": 86,
                                    "highlight_start": 1,
                                    "text": "            note = \"renamed to `resetting()` due to conflicts with `Vec::clear()`.\\n\\"
                                  },
                                  {
                                    "highlight_end": 75,
                                    "highlight_start": 1,
                                    "text": "                The `clear()` method will be removed in a future release.\""
                                  },
                                  {
                                    "highlight_end": 11,
                                    "highlight_start": 1,
                                    "text": "        )]"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        clear => Quirk::Clear,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        resetting => Quirk::Resetting,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bright => Quirk::Bright,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_bright => Quirk::OnBright,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Conditionally enable styling based on whether the [`Condition`] `value`"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// applies. Replaces any previous condition."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 70,
                                    "highlight_start": 1,
                                    "text": "    /// See the [crate level docs](crate#per-style) for more details."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Enable styling `painted` only when both `stdout` and `stderr` are TTYs:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "    /// # #[cfg(feature = \"detect-tty\")] {"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Condition};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 74,
                                    "highlight_start": 1,
                                    "text": "    /// painted.red().on_yellow().whenever(Condition::STDOUTERR_ARE_TTY);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// # }"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    whenever(Condition),"
                                  },
                                  {
                                    "highlight_end": 2,
                                    "highlight_start": 1,
                                    "text": "}"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 142,
                            "line_start": 142,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 60,
                                "highlight_start": 11,
                                "text": "        $(check_property_exhaustiveness!($A $({ $($t)* })?);)*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 38,
                            "text": "                match { let _v: $A = todo!(); _v } {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 890,
                    "line_start": 890,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 9,
                        "text": "        $crate::panicking::panic(\"not yet implemented\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: sub-expression diverges\n   --> src\\macros.rs:156:1\n    |\n156 | / define_properties! {\n157 | |     /// Returns a styled value derived from `self` with the foreground set to\n158 | |     /// `value`.\n159 | |     ///\n...   |\n351 | |     whenever(Condition),\n352 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n    = note: this warning originates in the macro `todo` which comes from the expansion of the macro `define_properties` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::diverging_sub_expression",
                  "explanation": null
                },
                "level": "warning",
                "message": "sub-expression diverges",
                "spans": [
                  {
                    "byte_end": 30093,
                    "byte_start": 30046,
                    "column_end": 56,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 30023,
                        "byte_start": 30006,
                        "column_end": 18,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 888,
                        "line_start": 888,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "macro_rules! todo {"
                          }
                        ]
                      },
                      "macro_decl_name": "todo!",
                      "span": {
                        "byte_end": 4131,
                        "byte_start": 4124,
                        "column_end": 45,
                        "column_start": 38,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 3866,
                            "byte_start": 3824,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 125,
                            "line_start": 125,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! check_property_exhaustiveness {"
                              }
                            ]
                          },
                          "macro_decl_name": "check_property_exhaustiveness!",
                          "span": {
                            "byte_end": 4478,
                            "byte_start": 4429,
                            "column_end": 60,
                            "column_start": 11,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 4266,
                                "byte_start": 4236,
                                "column_end": 31,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 139,
                                "line_start": 139,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "macro_rules! define_properties {"
                                  }
                                ]
                              },
                              "macro_decl_name": "define_properties!",
                              "span": {
                                "byte_end": 10787,
                                "byte_start": 4831,
                                "column_end": 2,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 352,
                                "line_start": 156,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "define_properties! {"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the foreground set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`red()`](Self::red()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`green()`](Self::green()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "    /// painted.fg(Color::White);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using [`white()`](Self::white())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// painted.white();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    fg(Color) {"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 27,
                                    "highlight_start": 1,
                                    "text": "        red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 40,
                                    "highlight_start": 1,
                                    "text": "        bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the background set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 62,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`on_red()`](Self::on_red()) and"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// [`on_green()`](Self::on_green()), which have the same functionality but"
                                  },
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "    /// are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bg(Color::Red);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using [`on_red()`](Self::on_red())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// painted.on_red();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    bg(Color) {"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 30,
                                    "highlight_start": 1,
                                    "text": "        on_red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "        on_yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        on_bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 1,
                                    "text": "        on_bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the styling [`Attribute`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 66,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use"
                                  },
                                  {
                                    "highlight_end": 77,
                                    "highlight_start": 1,
                                    "text": "    /// attribute-specific builder methods like [`bold()`](Self::bold()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`underline()`](Self::underline()), which have the same functionality"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// but are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using `attr()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Attribute};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// painted.attr(Attribute::Bold);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 61,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using using [`bold()`](Self::bold())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bold();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "    attr(Attribute) {"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bold => Attribute::Bold,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        dim => Attribute::Dim,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        italic => Attribute::Italic,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        underline => Attribute::Underline,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        blink => Attribute::Blink,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        rapid_blink => Attribute::RapidBlink,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        invert => Attribute::Invert,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        conceal => Attribute::Conceal,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        strike => Attribute::Strike,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the `yansi` [`Quirk`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use quirk-specific"
                                  },
                                  {
                                    "highlight_end": 58,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`mask()`](Self::mask()) and"
                                  },
                                  {
                                    "highlight_end": 76,
                                    "highlight_start": 1,
                                    "text": "    /// [`wrap()`](Self::wrap()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using `.quirk()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Quirk};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "    /// painted.quirk(Quirk::Wrap);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using [`wrap()`](Self::wrap())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.wrap();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 19,
                                    "highlight_start": 1,
                                    "text": "    quirk(Quirk) {"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        mask => Quirk::Mask,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        wrap => Quirk::Wrap,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        linger => Quirk::Linger,"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "        #[deprecated("
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "            since = \"1.0.1\","
                                  },
                                  {
                                    "highlight_end": 86,
                                    "highlight_start": 1,
                                    "text": "            note = \"renamed to `resetting()` due to conflicts with `Vec::clear()`.\\n\\"
                                  },
                                  {
                                    "highlight_end": 75,
                                    "highlight_start": 1,
                                    "text": "                The `clear()` method will be removed in a future release.\""
                                  },
                                  {
                                    "highlight_end": 11,
                                    "highlight_start": 1,
                                    "text": "        )]"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        clear => Quirk::Clear,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        resetting => Quirk::Resetting,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bright => Quirk::Bright,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_bright => Quirk::OnBright,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Conditionally enable styling based on whether the [`Condition`] `value`"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// applies. Replaces any previous condition."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 70,
                                    "highlight_start": 1,
                                    "text": "    /// See the [crate level docs](crate#per-style) for more details."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Enable styling `painted` only when both `stdout` and `stderr` are TTYs:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "    /// # #[cfg(feature = \"detect-tty\")] {"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Condition};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 74,
                                    "highlight_start": 1,
                                    "text": "    /// painted.red().on_yellow().whenever(Condition::STDOUTERR_ARE_TTY);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// # }"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    whenever(Condition),"
                                  },
                                  {
                                    "highlight_end": 2,
                                    "highlight_start": 1,
                                    "text": "}"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 142,
                            "line_start": 142,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 60,
                                "highlight_start": 11,
                                "text": "        $(check_property_exhaustiveness!($A $({ $($t)* })?);)*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 38,
                            "text": "                match { let _v: $A = todo!(); _v } {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 890,
                    "line_start": 890,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 9,
                        "text": "        $crate::panicking::panic(\"not yet implemented\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: sub-expression diverges\n   --> src\\macros.rs:156:1\n    |\n156 | / define_properties! {\n157 | |     /// Returns a styled value derived from `self` with the foreground set to\n158 | |     /// `value`.\n159 | |     ///\n...   |\n351 | |     whenever(Condition),\n352 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n    = note: this warning originates in the macro `todo` which comes from the expansion of the macro `define_properties` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::diverging_sub_expression",
                  "explanation": null
                },
                "level": "warning",
                "message": "sub-expression diverges",
                "spans": [
                  {
                    "byte_end": 30093,
                    "byte_start": 30046,
                    "column_end": 56,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 30023,
                        "byte_start": 30006,
                        "column_end": 18,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 888,
                        "line_start": 888,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "macro_rules! todo {"
                          }
                        ]
                      },
                      "macro_decl_name": "todo!",
                      "span": {
                        "byte_end": 4131,
                        "byte_start": 4124,
                        "column_end": 45,
                        "column_start": 38,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 3866,
                            "byte_start": 3824,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 125,
                            "line_start": 125,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! check_property_exhaustiveness {"
                              }
                            ]
                          },
                          "macro_decl_name": "check_property_exhaustiveness!",
                          "span": {
                            "byte_end": 4478,
                            "byte_start": 4429,
                            "column_end": 60,
                            "column_start": 11,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 4266,
                                "byte_start": 4236,
                                "column_end": 31,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 139,
                                "line_start": 139,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "macro_rules! define_properties {"
                                  }
                                ]
                              },
                              "macro_decl_name": "define_properties!",
                              "span": {
                                "byte_end": 10787,
                                "byte_start": 4831,
                                "column_end": 2,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 352,
                                "line_start": 156,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "define_properties! {"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the foreground set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`red()`](Self::red()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`green()`](Self::green()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "    /// painted.fg(Color::White);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using [`white()`](Self::white())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// painted.white();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    fg(Color) {"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 27,
                                    "highlight_start": 1,
                                    "text": "        red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 40,
                                    "highlight_start": 1,
                                    "text": "        bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the background set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 62,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`on_red()`](Self::on_red()) and"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// [`on_green()`](Self::on_green()), which have the same functionality but"
                                  },
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "    /// are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bg(Color::Red);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using [`on_red()`](Self::on_red())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// painted.on_red();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    bg(Color) {"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 30,
                                    "highlight_start": 1,
                                    "text": "        on_red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "        on_yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        on_bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 1,
                                    "text": "        on_bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the styling [`Attribute`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 66,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use"
                                  },
                                  {
                                    "highlight_end": 77,
                                    "highlight_start": 1,
                                    "text": "    /// attribute-specific builder methods like [`bold()`](Self::bold()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`underline()`](Self::underline()), which have the same functionality"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// but are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using `attr()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Attribute};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// painted.attr(Attribute::Bold);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 61,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using using [`bold()`](Self::bold())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bold();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "    attr(Attribute) {"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bold => Attribute::Bold,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        dim => Attribute::Dim,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        italic => Attribute::Italic,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        underline => Attribute::Underline,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        blink => Attribute::Blink,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        rapid_blink => Attribute::RapidBlink,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        invert => Attribute::Invert,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        conceal => Attribute::Conceal,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        strike => Attribute::Strike,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the `yansi` [`Quirk`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use quirk-specific"
                                  },
                                  {
                                    "highlight_end": 58,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`mask()`](Self::mask()) and"
                                  },
                                  {
                                    "highlight_end": 76,
                                    "highlight_start": 1,
                                    "text": "    /// [`wrap()`](Self::wrap()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using `.quirk()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Quirk};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "    /// painted.quirk(Quirk::Wrap);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using [`wrap()`](Self::wrap())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.wrap();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 19,
                                    "highlight_start": 1,
                                    "text": "    quirk(Quirk) {"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        mask => Quirk::Mask,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        wrap => Quirk::Wrap,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        linger => Quirk::Linger,"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "        #[deprecated("
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "            since = \"1.0.1\","
                                  },
                                  {
                                    "highlight_end": 86,
                                    "highlight_start": 1,
                                    "text": "            note = \"renamed to `resetting()` due to conflicts with `Vec::clear()`.\\n\\"
                                  },
                                  {
                                    "highlight_end": 75,
                                    "highlight_start": 1,
                                    "text": "                The `clear()` method will be removed in a future release.\""
                                  },
                                  {
                                    "highlight_end": 11,
                                    "highlight_start": 1,
                                    "text": "        )]"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        clear => Quirk::Clear,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        resetting => Quirk::Resetting,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bright => Quirk::Bright,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_bright => Quirk::OnBright,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Conditionally enable styling based on whether the [`Condition`] `value`"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// applies. Replaces any previous condition."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 70,
                                    "highlight_start": 1,
                                    "text": "    /// See the [crate level docs](crate#per-style) for more details."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Enable styling `painted` only when both `stdout` and `stderr` are TTYs:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "    /// # #[cfg(feature = \"detect-tty\")] {"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Condition};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 74,
                                    "highlight_start": 1,
                                    "text": "    /// painted.red().on_yellow().whenever(Condition::STDOUTERR_ARE_TTY);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// # }"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    whenever(Condition),"
                                  },
                                  {
                                    "highlight_end": 2,
                                    "highlight_start": 1,
                                    "text": "}"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 142,
                            "line_start": 142,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 60,
                                "highlight_start": 11,
                                "text": "        $(check_property_exhaustiveness!($A $({ $($t)* })?);)*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 38,
                            "text": "                match { let _v: $A = todo!(); _v } {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 890,
                    "line_start": 890,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 9,
                        "text": "        $crate::panicking::panic(\"not yet implemented\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `DWORD` contains a capitalized acronym\n  --> src\\windows.rs:10:10\n   |\n10 |     type DWORD = c_ulong;\n   |          ^^^^^ help: consider making the acronym lowercase, except the initial letter: `Dword`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::upper_case_acronyms)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 198,
                        "byte_start": 193,
                        "column_end": 15,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 10,
                        "line_start": 10,
                        "suggested_replacement": "Dword",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 10,
                            "text": "    type DWORD = c_ulong;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `DWORD` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 198,
                    "byte_start": 193,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 10,
                    "line_start": 10,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "    type DWORD = c_ulong;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `LPDWORD` contains a capitalized acronym\n  --> src\\windows.rs:11:10\n   |\n11 |     type LPDWORD = *mut DWORD;\n   |          ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Lpdword`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 226,
                        "byte_start": 219,
                        "column_end": 17,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 11,
                        "line_start": 11,
                        "suggested_replacement": "Lpdword",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 10,
                            "text": "    type LPDWORD = *mut DWORD;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `LPDWORD` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 226,
                    "byte_start": 219,
                    "column_end": 17,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 10,
                        "text": "    type LPDWORD = *mut DWORD;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `HANDLE` contains a capitalized acronym\n  --> src\\windows.rs:12:10\n   |\n12 |     type HANDLE = *mut c_void;\n   |          ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Handle`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 256,
                        "byte_start": 250,
                        "column_end": 16,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 12,
                        "line_start": 12,
                        "suggested_replacement": "Handle",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 10,
                            "text": "    type HANDLE = *mut c_void;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `HANDLE` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 256,
                    "byte_start": 250,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 12,
                    "line_start": 12,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    type HANDLE = *mut c_void;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `BOOL` contains a capitalized acronym\n  --> src\\windows.rs:13:10\n   |\n13 |     type BOOL = c_int;\n   |          ^^^^ help: consider making the acronym lowercase, except the initial letter: `Bool`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 285,
                        "byte_start": 281,
                        "column_end": 14,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 13,
                        "line_start": 13,
                        "suggested_replacement": "Bool",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 10,
                            "text": "    type BOOL = c_int;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `BOOL` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 285,
                    "byte_start": 281,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 13,
                    "line_start": 13,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "    type BOOL = c_int;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `LPCWSTR` contains a capitalized acronym\n  --> src\\windows.rs:14:10\n   |\n14 |     type LPCWSTR = *const WCHAR;\n   |          ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Lpcwstr`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 311,
                        "byte_start": 304,
                        "column_end": 17,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 14,
                        "line_start": 14,
                        "suggested_replacement": "Lpcwstr",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 10,
                            "text": "    type LPCWSTR = *const WCHAR;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `LPCWSTR` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 311,
                    "byte_start": 304,
                    "column_end": 17,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 10,
                        "text": "    type LPCWSTR = *const WCHAR;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `WCHAR` contains a capitalized acronym\n  --> src\\windows.rs:15:10\n   |\n15 |     type WCHAR = wchar_t;\n   |          ^^^^^ help: consider making the acronym lowercase, except the initial letter: `Wchar`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 342,
                        "byte_start": 337,
                        "column_end": 15,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 15,
                        "line_start": 15,
                        "suggested_replacement": "Wchar",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 10,
                            "text": "    type WCHAR = wchar_t;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `WCHAR` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 342,
                    "byte_start": 337,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 15,
                    "line_start": 15,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "    type WCHAR = wchar_t;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `LPVOID` contains a capitalized acronym\n  --> src\\windows.rs:17:10\n   |\n17 |     type LPVOID = *mut c_void;\n   |          ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Lpvoid`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 428,
                        "byte_start": 422,
                        "column_end": 16,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "Lpvoid",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 10,
                            "text": "    type LPVOID = *mut c_void;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `LPVOID` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 428,
                    "byte_start": 422,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    type LPVOID = *mut c_void;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `partial_cmp` on an `Ord` type\n   --> src\\style.rs:328:1\n    |\n328 | /  impl PartialOrd for Style {\n329 | |      fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n    | | ________________________________________________________________________-\n330 | ||         let Style {\n331 | ||             foreground: fg_a,\n332 | ||             background: bg_a,\n...   ||\n356 | ||         attrs_a.partial_cmp(&attrs_b)\n357 | ||     }\n    | ||_____- help: change this to: `{ Some(self.cmp(other)) }`\n358 | |  }\n    | |__^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n    = note: `#[warn(clippy::non_canonical_partial_ord_impl)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_canonical_partial_ord_impl)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10752,
                        "byte_start": 10078,
                        "column_end": 6,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 357,
                        "line_start": 329,
                        "suggested_replacement": "{ Some(self.cmp(other)) }",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 72,
                            "text": "    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {"
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "        let Style {"
                          },
                          {
                            "highlight_end": 30,
                            "highlight_start": 1,
                            "text": "            foreground: fg_a,"
                          },
                          {
                            "highlight_end": 30,
                            "highlight_start": 1,
                            "text": "            background: bg_a,"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            attributes: attrs_a,"
                          },
                          {
                            "highlight_end": 23,
                            "highlight_start": 1,
                            "text": "            quirks: _,"
                          },
                          {
                            "highlight_end": 26,
                            "highlight_start": 1,
                            "text": "            condition: _,"
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "        } = self;"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "        let Style {"
                          },
                          {
                            "highlight_end": 30,
                            "highlight_start": 1,
                            "text": "            foreground: fg_b,"
                          },
                          {
                            "highlight_end": 30,
                            "highlight_start": 1,
                            "text": "            background: bg_b,"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            attributes: attrs_b,"
                          },
                          {
                            "highlight_end": 23,
                            "highlight_start": 1,
                            "text": "            quirks: _,"
                          },
                          {
                            "highlight_end": 26,
                            "highlight_start": 1,
                            "text": "            condition: _,"
                          },
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "        } = other;"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          },
                          {
                            "highlight_end": 40,
                            "highlight_start": 1,
                            "text": "        match fg_a.partial_cmp(&fg_b) {"
                          },
                          {
                            "highlight_end": 51,
                            "highlight_start": 1,
                            "text": "            Some(core::cmp::Ordering::Equal) => {}"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            ord => return ord,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          },
                          {
                            "highlight_end": 40,
                            "highlight_start": 1,
                            "text": "        match bg_a.partial_cmp(&bg_b) {"
                          },
                          {
                            "highlight_end": 51,
                            "highlight_start": 1,
                            "text": "            Some(core::cmp::Ordering::Equal) => {}"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            ord => return ord,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "        attrs_a.partial_cmp(&attrs_b)"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_partial_ord_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `partial_cmp` on an `Ord` type",
                "spans": [
                  {
                    "byte_end": 10754,
                    "byte_start": 9979,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 358,
                    "line_start": 328,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "impl PartialOrd for Style {"
                      },
                      {
                        "highlight_end": 73,
                        "highlight_start": 1,
                        "text": "    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {"
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "        let Style {"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "            foreground: fg_a,"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "            background: bg_a,"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            attributes: attrs_a,"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "            quirks: _,"
                      },
                      {
                        "highlight_end": 26,
                        "highlight_start": 1,
                        "text": "            condition: _,"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "        } = self;"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "        let Style {"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "            foreground: fg_b,"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "            background: bg_b,"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            attributes: attrs_b,"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "            quirks: _,"
                      },
                      {
                        "highlight_end": 26,
                        "highlight_start": 1,
                        "text": "            condition: _,"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "        } = other;"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 40,
                        "highlight_start": 1,
                        "text": "        match fg_a.partial_cmp(&fg_b) {"
                      },
                      {
                        "highlight_end": 51,
                        "highlight_start": 1,
                        "text": "            Some(core::cmp::Ordering::Equal) => {}"
                      },
                      {
                        "highlight_end": 31,
                        "highlight_start": 1,
                        "text": "            ord => return ord,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 40,
                        "highlight_start": 1,
                        "text": "        match bg_a.partial_cmp(&bg_b) {"
                      },
                      {
                        "highlight_end": 51,
                        "highlight_start": 1,
                        "text": "            Some(core::cmp::Ordering::Equal) => {}"
                      },
                      {
                        "highlight_end": 31,
                        "highlight_start": 1,
                        "text": "            ord => return ord,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 38,
                        "highlight_start": 1,
                        "text": "        attrs_a.partial_cmp(&attrs_b)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:346:32\n    |\n346 |         match fg_a.partial_cmp(&fg_b) {\n    |                                ^^^^^ help: change this to: `fg_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10479,
                        "byte_start": 10474,
                        "column_end": 37,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 346,
                        "line_start": 346,
                        "suggested_replacement": "fg_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 32,
                            "text": "        match fg_a.partial_cmp(&fg_b) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 10479,
                    "byte_start": 10474,
                    "column_end": 37,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 346,
                    "line_start": 346,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 32,
                        "text": "        match fg_a.partial_cmp(&fg_b) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:351:32\n    |\n351 |         match bg_a.partial_cmp(&bg_b) {\n    |                                ^^^^^ help: change this to: `bg_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10612,
                        "byte_start": 10607,
                        "column_end": 37,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 351,
                        "line_start": 351,
                        "suggested_replacement": "bg_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 32,
                            "text": "        match bg_a.partial_cmp(&bg_b) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 10612,
                    "byte_start": 10607,
                    "column_end": 37,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 351,
                    "line_start": 351,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 32,
                        "text": "        match bg_a.partial_cmp(&bg_b) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:356:29\n    |\n356 |         attrs_a.partial_cmp(&attrs_b)\n    |                             ^^^^^^^^ help: change this to: `attrs_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10745,
                        "byte_start": 10737,
                        "column_end": 37,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 356,
                        "line_start": 356,
                        "suggested_replacement": "attrs_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 29,
                            "text": "        attrs_a.partial_cmp(&attrs_b)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 10745,
                    "byte_start": 10737,
                    "column_end": 37,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 356,
                    "line_start": 356,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 29,
                        "text": "        attrs_a.partial_cmp(&attrs_b)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:378:24\n    |\n378 |         match fg_a.cmp(&fg_b) {\n    |                        ^^^^^ help: change this to: `fg_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11225,
                        "byte_start": 11220,
                        "column_end": 29,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 378,
                        "line_start": 378,
                        "suggested_replacement": "fg_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 24,
                            "text": "        match fg_a.cmp(&fg_b) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 11225,
                    "byte_start": 11220,
                    "column_end": 29,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 378,
                    "line_start": 378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 24,
                        "text": "        match fg_a.cmp(&fg_b) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:383:24\n    |\n383 |         match bg_a.cmp(&bg_b) {\n    |                        ^^^^^ help: change this to: `bg_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11344,
                        "byte_start": 11339,
                        "column_end": 29,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 383,
                        "line_start": 383,
                        "suggested_replacement": "bg_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 24,
                            "text": "        match bg_a.cmp(&bg_b) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 11344,
                    "byte_start": 11339,
                    "column_end": 29,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 383,
                    "line_start": 383,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 24,
                        "text": "        match bg_a.cmp(&bg_b) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:388:21\n    |\n388 |         attrs_a.cmp(&attrs_b)\n    |                     ^^^^^^^^ help: change this to: `attrs_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11463,
                        "byte_start": 11455,
                        "column_end": 29,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 388,
                        "line_start": 388,
                        "suggested_replacement": "attrs_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 21,
                            "text": "        attrs_a.cmp(&attrs_b)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 11463,
                    "byte_start": 11455,
                    "column_end": 29,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 388,
                    "line_start": 388,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 21,
                        "text": "        attrs_a.cmp(&attrs_b)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `impl` can be derived\n   --> src\\color.rs:217:1\n    |\n217 | / impl Default for Color {\n218 | |     fn default() -> Self {\n219 | |         Color::Primary\n220 | |     }\n221 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\n    = note: `#[warn(clippy::derivable_impls)]` on by default\nhelp: replace the manual implementation with a derive attribute and mark the default variant\n    |\n9   + #[derive(Default)]\n10  ~ pub enum Color {\n11  |     /// Terminal primary color #9. (foreground code `39`, background code `49`).\n...\n17  |     /// foreground color.\n18  ~     #[default]\n19  ~     Primary,\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::derivable_impls)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the manual implementation with a derive attribute and mark the default variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7617,
                        "byte_start": 7534,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 222,
                        "line_start": 217,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 1,
                            "text": "impl Default for Color {"
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "    fn default() -> Self {"
                          },
                          {
                            "highlight_end": 23,
                            "highlight_start": 1,
                            "text": "        Color::Primary"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          },
                          {
                            "highlight_end": 2,
                            "highlight_start": 1,
                            "text": "}"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      },
                      {
                        "byte_end": 360,
                        "byte_start": 360,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 9,
                        "line_start": 9,
                        "suggested_replacement": "#[derive(Default)]\n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub enum Color {"
                          }
                        ]
                      },
                      {
                        "byte_end": 811,
                        "byte_start": 811,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "#[default]\n    ",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    Primary,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::derivable_impls",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `impl` can be derived",
                "spans": [
                  {
                    "byte_end": 7616,
                    "byte_start": 7534,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\color.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 221,
                    "line_start": 217,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "impl Default for Color {"
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "    fn default() -> Self {"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "        Color::Primary"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: methods called `new` usually take no `self`\n   --> src\\paint.rs:104:12\n    |\n104 |     fn new(self) -> Painted<Self> where Self: Sized {\n    |            ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention\n    = note: `#[warn(clippy::wrong_self_convention)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider choosing a less ambiguous name",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::wrong_self_convention)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::wrong_self_convention",
                  "explanation": null
                },
                "level": "warning",
                "message": "methods called `new` usually take no `self`",
                "spans": [
                  {
                    "byte_end": 3240,
                    "byte_start": 3236,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "src\\paint.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 104,
                    "line_start": 104,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    fn new(self) -> Painted<Self> where Self: Sized {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\paint.rs:200:18\n    |\n200 |             .map(|string| Cow::Borrowed(string))\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Cow::Borrowed`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n    = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_closure)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5979,
                        "byte_start": 5949,
                        "column_end": 48,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\paint.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 200,
                        "line_start": 200,
                        "suggested_replacement": "Cow::Borrowed",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 18,
                            "text": "            .map(|string| Cow::Borrowed(string))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 5979,
                    "byte_start": 5949,
                    "column_end": 48,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\paint.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 18,
                        "text": "            .map(|string| Cow::Borrowed(string))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\paint.rs:219:18\n    |\n219 |             .map(|string| Cow::Borrowed(string))\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Cow::Borrowed`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6576,
                        "byte_start": 6546,
                        "column_end": 48,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\paint.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 219,
                        "line_start": 219,
                        "suggested_replacement": "Cow::Borrowed",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 18,
                            "text": "            .map(|string| Cow::Borrowed(string))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 6576,
                    "byte_start": 6546,
                    "column_end": 48,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\paint.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 219,
                    "line_start": 219,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 18,
                        "text": "            .map(|string| Cow::Borrowed(string))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: a `const` item should not be interior mutable\n   --> src\\condition.rs:190:5\n    |\n190 |     pub const DEFAULT: AtomicCondition = AtomicCondition::from(Condition::DEFAULT);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const\n    = note: `#[warn(clippy::declare_interior_mutable_const)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::declare_interior_mutable_const)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::declare_interior_mutable_const",
                  "explanation": null
                },
                "level": "warning",
                "message": "a `const` item should not be interior mutable",
                "spans": [
                  {
                    "byte_end": 6698,
                    "byte_start": 6619,
                    "column_end": 84,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\condition.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 190,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 5,
                        "text": "    pub const DEFAULT: AtomicCondition = AtomicCondition::from(Condition::DEFAULT);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: transmute used without annotations\n   --> src\\condition.rs:202:34\n    |\n202 |             Condition(core::mem::transmute(self.0.load(Ordering::Acquire)))\n    |                                  ^^^^^^^^^ help: consider adding missing annotations: `transmute::<*mut (), fn() -> bool>`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_transmute_annotations\n    = note: `#[warn(clippy::missing_transmute_annotations)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_transmute_annotations",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::missing_transmute_annotations)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider adding missing annotations",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7034,
                        "byte_start": 7025,
                        "column_end": 43,
                        "column_start": 34,
                        "expansion": null,
                        "file_name": "src\\condition.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 202,
                        "line_start": 202,
                        "suggested_replacement": "transmute::<*mut (), fn() -> bool>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 34,
                            "text": "            Condition(core::mem::transmute(self.0.load(Ordering::Acquire)))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::missing_transmute_annotations",
                  "explanation": null
                },
                "level": "warning",
                "message": "transmute used without annotations",
                "spans": [
                  {
                    "byte_end": 7034,
                    "byte_start": 7025,
                    "column_end": 43,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\condition.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 34,
                        "text": "            Condition(core::mem::transmute(self.0.load(Ordering::Acquire)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `clone` on a `Copy` type\n  --> src\\set.rs:64:29\n   |\n64 |       fn clone(&self) -> Self {\n   |  _____________________________^\n65 | |         Self(self.0, self.1)\n66 | |     }\n   | |_____^ help: change this to: `{ *self }`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl\n   = note: `#[warn(clippy::non_canonical_clone_impl)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_canonical_clone_impl)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1385,
                        "byte_start": 1349,
                        "column_end": 6,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 66,
                        "line_start": 64,
                        "suggested_replacement": "{ *self }",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 29,
                            "text": "    fn clone(&self) -> Self {"
                          },
                          {
                            "highlight_end": 29,
                            "highlight_start": 1,
                            "text": "        Self(self.0, self.1)"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_clone_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `clone` on a `Copy` type",
                "spans": [
                  {
                    "byte_end": 1385,
                    "byte_start": 1349,
                    "column_end": 6,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\set.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 66,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 29,
                        "text": "    fn clone(&self) -> Self {"
                      },
                      {
                        "highlight_end": 29,
                        "highlight_start": 1,
                        "text": "        Self(self.0, self.1)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `partial_cmp` on an `Ord` type\n  --> src\\set.rs:77:1\n   |\n77 | /  impl<T> PartialOrd for Set<T> {\n78 | |      fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n   | | ________________________________________________________________________-\n79 | ||         self.1.partial_cmp(&other.1)\n80 | ||     }\n   | ||_____- help: change this to: `{ Some(self.cmp(other)) }`\n81 | |  }\n   | |__^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1670,
                        "byte_start": 1626,
                        "column_end": 6,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 80,
                        "line_start": 78,
                        "suggested_replacement": "{ Some(self.cmp(other)) }",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 72,
                            "text": "    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {"
                          },
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "        self.1.partial_cmp(&other.1)"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_partial_ord_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `partial_cmp` on an `Ord` type",
                "spans": [
                  {
                    "byte_end": 1672,
                    "byte_start": 1523,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\set.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 81,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 1,
                        "text": "impl<T> PartialOrd for Set<T> {"
                      },
                      {
                        "highlight_end": 73,
                        "highlight_start": 1,
                        "text": "    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {"
                      },
                      {
                        "highlight_end": 37,
                        "highlight_start": 1,
                        "text": "        self.1.partial_cmp(&other.1)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpb2ldz9dg/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpb2ldz9dg\\yansi-1.0.1\\target\\debug\\deps\\libyansi-09f9d916f6dc23df.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 14
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed."
        },
        "crate_metadata": {
          "name": "yansi",
          "version": "unknown",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": "",
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "ai_enrichment": {
          "provider": "azure",
          "model": "gpt-4o",
          "readme_summary": null,
          "use_case": null,
          "score": null,
          "factual_counterfactual": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-41d62868-4af7cf9a-1751108696",
      "timestamp": "2025-06-28T11:04:56.286440+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]