# Test the Rust crate pipeline with sample data
# Runs on schedule and manual dispatch

name: Test Pipeline

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      test_crates:
        description: 'Comma-separated list of crates to test'
        required: false
        default: 'tokio,serde,reqwest'
        type: string

jobs:
  test-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test environment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
      run: |
        # Create a test crate list
        if [ "${{ github.event.inputs.test_crates }}" != "" ]; then
          echo "${{ github.event.inputs.test_crates }}" | tr ',' '\n' > rust_crate_pipeline/test_crate_list.txt
        else
          echo "tokio" > rust_crate_pipeline/test_crate_list.txt
          echo "serde" >> rust_crate_pipeline/test_crate_list.txt
          echo "reqwest" >> rust_crate_pipeline/test_crate_list.txt
        fi
    
    - name: Run pipeline test
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
      run: |
        # Temporarily replace the crate list for testing
        cp rust_crate_pipeline/crate_list.txt rust_crate_pipeline/crate_list_backup.txt
        cp rust_crate_pipeline/test_crate_list.txt rust_crate_pipeline/crate_list.txt
        
        # Run the pipeline with a small batch
        python -m rust_crate_pipeline.main --batch-size 3 --max-retries 2
        
        # Restore the original crate list
        cp rust_crate_pipeline/crate_list_backup.txt rust_crate_pipeline/crate_list.txt
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: output/
    
    - name: Check test results
      run: |
        # Check if output files were created
        if [ -d "output" ]; then
          echo "✅ Pipeline test completed successfully"
          ls -la output/
        else
          echo "❌ Pipeline test failed - no output directory found"
          exit 1
        fi 