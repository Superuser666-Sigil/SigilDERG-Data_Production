[
  {
    "execution_id": "exec-64217a18-16faa732-1751266436",
    "timestamp": "2025-06-30T06:53:56.283479+00:00",
    "sacred_chain": {
      "input_data": "hickory-dns",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'hickory-dns' -> 'hickory-dns'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "hickory-dns",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/hickory-dns",
            "title": "hickory-dns v0.25.2",
            "content": {
              "raw_markdown": "#  hickory-dns v0.25.2\nHickory DNS is a safe and secure DNS server with DNSSEC support. Eventually this could be a replacement for BIND9. The DNSSEC support allows for live signing of all records, in it does not currently support records signed offline. The server supports dynamic DNS with SIG0 authenticated requests. Hickory DNS is based on the Tokio and Futures libraries, which means it should be easily integrated into other software that also use those libraries. \n  * [ #bind ](https://crates.io/keywords/bind)\n  * [ #dig ](https://crates.io/keywords/dig)\n  * [ #dns ](https://crates.io/keywords/dns)\n  * [ #dnssec ](https://crates.io/keywords/dnssec)\n  * [ #named ](https://crates.io/keywords/named)\n\n\n  * [ Readme ](https://crates.io/crates/hickory-dns)\n  * [ 14 Versions ](https://crates.io/crates/hickory-dns/versions)\n  * [ Dependencies ](https://crates.io/crates/hickory-dns/dependencies)\n  * [ Dependents ](https://crates.io/crates/hickory-dns/reverse_dependencies)\n\n\n## Metadata\nabout 2 months ago \nv1.71.1 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n77.9 KiB \n## Install\ncargo install hickory-dns\nRunning the above command will globally install the hickory-dns binary. \n### Install as library\nRun the following Cargo command in your project directory:\ncargo add hickory-dns\nOr add the following line to your Cargo.toml:\nhickory-dns = \"0.25.2\"\n## Homepage\n[ hickory-dns.org ](https://hickory-dns.org/)\n## Documentation\n[ docs.rs/hickory-dns ](https://docs.rs/hickory-dns)\n## Repository\n[ github.com/hickory-dns/hickory-dns ](https://github.com/hickory-dns/hickory-dns)\n## Owners\n## Categories\n  * [Network programming](https://crates.io/categories/network-programming)\n\n\n[ Report crate ](https://crates.io/support?crate=hickory-dns&inquire=crate-violation)\n### Stats Overview\n15,011 Downloads all time\n14 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  hickory-dns v0.25.2\nHickory DNS is a safe and secure DNS server with DNSSEC support. Eventually this could be a replacement for BIND9. The DNSSEC support allows for live signing of all records, in it does not currently support records signed offline. The server supports dynamic DNS with SIG0 authenticated requests. Hickory DNS is based on the Tokio and Futures libraries, which means it should be easily integrated into other software that also use those libraries. \n  *  #bind \u27e81\u27e9\n  *  #dig \u27e82\u27e9\n  *  #dns \u27e83\u27e9\n  *  #dnssec \u27e84\u27e9\n  *  #named \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  14 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 2 months ago \nv1.71.1 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n77.9 KiB \n## Install\ncargo install hickory-dns\nRunning the above command will globally install the hickory-dns binary. \n### Install as library\nRun the following Cargo command in your project directory:\ncargo add hickory-dns\nOr add the following line to your Cargo.toml:\nhickory-dns = \"0.25.2\"\n## Homepage\n hickory-dns.org \u27e812\u27e9\n## Documentation\n docs.rs/hickory-dns \u27e813\u27e9\n## Repository\n github.com/hickory-dns/hickory-dns \u27e814\u27e9\n## Owners\n## Categories\n  * Network programming\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n15,011 Downloads all time\n14 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/bind:  #bind \n\u27e82\u27e9 https://crates.io/keywords/dig:  #dig \n\u27e83\u27e9 https://crates.io/keywords/dns:  #dns \n\u27e84\u27e9 https://crates.io/keywords/dnssec:  #dnssec \n\u27e85\u27e9 https://crates.io/keywords/named:  #named \n\u27e86\u27e9 https://crates.io/crates/hickory-dns:  Readme \n\u27e87\u27e9 https://crates.io/crates/hickory-dns/versions:  14 Versions \n\u27e88\u27e9 https://crates.io/crates/hickory-dns/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/hickory-dns/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://hickory-dns.org/:  hickory-dns.org \n\u27e813\u27e9 https://docs.rs/hickory-dns:  docs.rs/hickory-dns \n\u27e814\u27e9 https://github.com/hickory-dns/hickory-dns:  github.com/hickory-dns/hickory-dns \n\u27e815\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e816\u27e9 https://crates.io/support?crate=hickory-dns&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 2009,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120226.0048289"
          },
          "docs_rs": {
            "url": "https://docs.rs/hickory-dns",
            "title": "Crate hickory_dnsCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/hickory-dns/latest/hickory_dns/all.html \"show sidebar\")\n# Crate hickory_dnsCopy item path\n[Settings](https://docs.rs/hickory-dns/latest/settings.html)\n[Help](https://docs.rs/hickory-dns/latest/help.html)\nSummary[Source](https://docs.rs/hickory-dns/latest/src/hickory_dns/lib.rs.html#8-848)\nExpand description\nConfiguration module for the server binary, `named`.\n## Structs[\u00a7](https://docs.rs/hickory-dns/latest/hickory_dns/#structs)\n\n[Config](https://docs.rs/hickory-dns/latest/hickory_dns/struct.Config.html \"struct hickory_dns::Config\")\n    Server configuration\n\n[ServerZoneConfig](https://docs.rs/hickory-dns/latest/hickory_dns/struct.ServerZoneConfig.html \"struct hickory_dns::ServerZoneConfig\")\n\n\n[TlsCertConfig](https://docs.rs/hickory-dns/latest/hickory_dns/struct.TlsCertConfig.html \"struct hickory_dns::TlsCertConfig\")\n    Configuration for a TLS certificate\n\n[ZoneConfig](https://docs.rs/hickory-dns/latest/hickory_dns/struct.ZoneConfig.html \"struct hickory_dns::ZoneConfig\")\n    Configuration for a zone\n## Enums[\u00a7](https://docs.rs/hickory-dns/latest/hickory_dns/#enums)\n\n[ExternalStoreConfig](https://docs.rs/hickory-dns/latest/hickory_dns/enum.ExternalStoreConfig.html \"enum hickory_dns::ExternalStoreConfig\")\n    Enumeration over store types for external nameservers.\n\n[ServerStoreConfig](https://docs.rs/hickory-dns/latest/hickory_dns/enum.ServerStoreConfig.html \"enum hickory_dns::ServerStoreConfig\")\n    Enumeration over store types for secondary nameservers.\n\n[ZoneTypeConfig](https://docs.rs/hickory-dns/latest/hickory_dns/enum.ZoneTypeConfig.html \"enum hickory_dns::ZoneTypeConfig\")\n    Enumeration over each zone type\u2019s configuration.\n",
              "markdown_with_citations": "[](https://docs.rs/hickory-dns/latest/hickory_dns/all.html \"show sidebar\")\n# Crate hickory_dnsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nConfiguration module for the server binary, `named`.\n## Structs\u00a7\u27e84\u27e9\n\nConfig\u27e85\u27e9\n    Server configuration\n\nServerZoneConfig\u27e86\u27e9\n\n\nTlsCertConfig\u27e87\u27e9\n    Configuration for a TLS certificate\n\nZoneConfig\u27e88\u27e9\n    Configuration for a zone\n## Enums\u00a7\u27e89\u27e9\n\nExternalStoreConfig\u27e810\u27e9\n    Enumeration over store types for external nameservers.\n\nServerStoreConfig\u27e811\u27e9\n    Enumeration over store types for secondary nameservers.\n\nZoneTypeConfig\u27e812\u27e9\n    Enumeration over each zone type\u2019s configuration.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/hickory-dns/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/hickory-dns/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/hickory-dns/latest/src/hickory_dns/lib.rs.html#8-848: Source\n\u27e84\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/#structs: \u00a7\n\u27e85\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.Config.html: struct hickory_dns::Config - Config\n\u27e86\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.ServerZoneConfig.html: struct hickory_dns::ServerZoneConfig - ServerZoneConfig\n\u27e87\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.TlsCertConfig.html: struct hickory_dns::TlsCertConfig - TlsCertConfig\n\u27e88\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.ZoneConfig.html: struct hickory_dns::ZoneConfig - ZoneConfig\n\u27e89\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/#enums: \u00a7\n\u27e810\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/enum.ExternalStoreConfig.html: enum hickory_dns::ExternalStoreConfig - ExternalStoreConfig\n\u27e811\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/enum.ServerStoreConfig.html: enum hickory_dns::ServerStoreConfig - ServerStoreConfig\n\u27e812\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/enum.ZoneTypeConfig.html: enum hickory_dns::ZoneTypeConfig - ZoneTypeConfig\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1675,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120226.8560374"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/hickory-dns",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [14 releases](https://lib.rs/crates/hickory-dns/versions)\n0.26.0-alpha.1 |  Jun 3, 2025   \n---|---  \n0.25.1 |  Mar 18, 2025   \n0.25.0-alpha.4 |  Nov 28, 2024   \n0.25.0-alpha.1 |  Jun 16, 2024   \n0.1.0 |  May 17, 2023   \n#**1603** in [Network programming](https://lib.rs/network-programming \"Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP.\")\nDownload history 64/week @ 2025-02-26 47/week @ 2025-03-05 59/week @ 2025-03-12 259/week @ 2025-03-19 64/week @ 2025-03-26 76/week @ 2025-04-02 47/week @ 2025-04-09 16/week @ 2025-04-16 26/week @ 2025-04-23 169/week @ 2025-04-30 134/week @ 2025-05-07 124/week @ 2025-05-14 28/week @ 2025-05-21 117/week @ 2025-05-28 48/week @ 2025-06-04 17/week @ 2025-06-11\n**221** downloads per month \n**MIT/Apache**\n2.5MB  **43K** SLoC\n# Overview\nHickory DNS provides a binary for hosting or forwarding DNS zones.\nThis a named implementation for DNS zone hosting, stub resolvers, and recursive resolvers. It is capable of performing signing all records in the zone for server DNSSEC RRSIG records associated with all records in a zone. There is also a ``hickory-dns`` binary that can be generated from the library with ````cargo``` install hickory-dns```. Dynamic updates are supported via ```SIG0``` (an mTLS authentication method is under development).\n**NOTICE** This project was rebranded from Trust-DNS to Hickory DNS and has been moved to the <https://github.com/hickory-dns/hickory-dns> organization and repo, this crate/binary has been moved to [hickory-dns](https://crates.io/crates/hickory-dns), from ```0.``24``` and onward, for prior versions see [trust-dns](https://lib.rs/crates/trust-dns).\n## Features\n  * Dynamic Update with sqlite journaling backend (SIG0)\n  * DNSSEC online signing (with NSEC and NSEC3)\n  * Forwarding stub resolver\n  * ANAME resolution, for zone mapping aliases to A and AAAA records\n  * Additionals section generation for aliasing record types\n\n\n## Optional protocol support\nThe following DNS protocols are optionally supported:\n  * Enable ``dns-over-rustls`` for DNS over TLS (DoT)\n  * Enable ``dns-over-https-rustls`` for DNS over HTTP/2 (DoH)\n  * Enable ``dns-over-quic`` for DNS over QUIC (DoQ)\n  * Enable ``dns-over-h3`` for DNS over HTTP/3 (DoH3)\n\n\n## DNSSEC status\nThe current root key is bundled into the system, and used by default. This gives validation of DNSKEY and DS records back to the root. NSEC and NSEC3 are implemented.\nZones will be automatically resigned on any record updates via dynamic DNS. To enable DNSSEC, enable the ``dnssec-ring`` feature.\n## Future goals\n  * Distributed dynamic DNS updates, with consensus\n  * mTLS based authorization for Dynamic Updates\n  * Online NSEC creation for queries\n  * Maybe NSEC5 support\n\n\n## Running\nWarning: Hickory DNS is still under development, running in production is not recommended.\n  * Verify the version\n\n```\n```./target/release/hickory-dns````` --`version``\n`\n```\n\n  * Get help\n\n```\n```./target/release/hickory-dns````` --`help``\n`\n```\n\n  * Launch ``hickory-dns`` server with test config\n\n\nNote that if the ```-`p`` parameter is not passed, the server will run on default DNS ports. There are separate port options for DoT and DoH servers, see ``hickory`-`dns `-``-`help``\n```\n```./target/release/hickory-dns````` -`c` ./tests/test-data/test_configs/example.toml`` -`z` ./tests/test-data/test_configs/`` -`p` 24141`\n`\n```\n\n  * Query the just launched server with ``dig``\n\n```\n```dig``` @127.0.0.1`` -`p` 24141 www.example.com`\n`\n```\n\n## Minimum Rust Version\nThe current minimum rustc version for this project is ```1.``70```\n## Versioning\nHickory DNS does it's best job to follow semver. Hickory DNS will be promoted to 1.0 upon stabilization of the publicly exposed APIs. This does not mean that Hickory DNS will necessarily break on upgrades between 0.x updates. Whenever possible, old APIs will be deprecated with notes on what replaced those deprecations. Hickory DNS will make a best effort to never break software which depends on it due to API changes, though this can not be guaranteed. Deprecated interfaces will be maintained for at minimum one major release after that in which they were deprecated (where possible), with the exception of the upgrade to 1.0 where all deprecated interfaces will be planned to be removed.\n#### Dependencies\n~**21\u201368MB** ~1.5M SLoC\n  * [cfg-if](https://lib.rs/crates/cfg-if \"1\")\n  * [clap](https://lib.rs/crates/clap \"new\") 4.0[+cargo](https://lib.rs/crates/clap/features#feature-cargo)[+derive](https://lib.rs/crates/clap/features#feature-derive)[+help](https://lib.rs/crates/clap/features#feature-help)[+std](https://lib.rs/crates/clap/features#feature-std)[+suggestions](https://lib.rs/crates/clap/features#feature-suggestions)\n  * [futures-util](https://lib.rs/crates/futures-util \"0.3.5\")[+std](https://lib.rs/crates/futures-util/features#feature-std)\n  * [hickory-client](https://lib.rs/crates/hickory-client \"new\") 0.26.0-alpha.1\n  * [hickory-proto](https://lib.rs/crates/hickory-proto \"new\") 0.26.0-alpha.1[+std](https://lib.rs/crates/hickory-proto/features#feature-std)\n  * [hickory-server](https://lib.rs/crates/hickory-server \"new\") 0.26.0-alpha.1[+toml](https://lib.rs/crates/hickory-server/features#feature-toml)\n  * [ipnet](https://lib.rs/crates/ipnet \"2.3.0\")[+serde](https://lib.rs/crates/ipnet/features#feature-serde)\n  * [sqlite](https://lib.rs/crates/hickory-dns/features#feature-sqlite \"default feature\") [rusqlite](https://lib.rs/crates/rusqlite \"obsolete\") 0.35[+bundled](https://lib.rs/crates/rusqlite/features#feature-bundled)[+time](https://lib.rs/crates/rusqlite/features#feature-time)\n  * [serde](https://lib.rs/crates/serde \"1.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * [socket2](https://lib.rs/crates/socket2 \"0.5\")\n  * [time](https://lib.rs/crates/time \"0.3\")\n  * [tokio](https://lib.rs/crates/tokio \"1.21\")[+time](https://lib.rs/crates/tokio/features#feature-time)[+rt](https://lib.rs/crates/tokio/features#feature-rt)[+signal](https://lib.rs/crates/tokio/features#feature-signal)\n  * [toml](https://lib.rs/crates/toml \"new\") 0.8.14\n  * [tracing](https://lib.rs/crates/tracing \"0.1.30\")\n  * [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3\")[+env-filter](https://lib.rs/crates/tracing-subscriber/features#feature-env-filter)[+fmt](https://lib.rs/crates/tracing-subscriber/features#feature-fmt)[+std](https://lib.rs/crates/tracing-subscriber/features#feature-std)\n  * [prometheus-metrics?](https://lib.rs/crates/hickory-dns/features#feature-prometheus-metrics \"optional feature\") [http](https://lib.rs/crates/http \"new\") 1.1\n  * [prometheus-metrics?](https://lib.rs/crates/hickory-dns/features#feature-prometheus-metrics \"optional feature\") [hyper](https://lib.rs/crates/hyper \"new\") 1.6[+server](https://lib.rs/crates/hyper/features#feature-server)\n  * [prometheus-metrics?](https://lib.rs/crates/hickory-dns/features#feature-prometheus-metrics \"optional feature\") [hyper-util](https://lib.rs/crates/hyper-util \"0.1.11\")[+server-auto](https://lib.rs/crates/hyper-util/features#feature-server-auto)[+server-graceful](https://lib.rs/crates/hyper-util/features#feature-server-graceful)[+tokio](https://lib.rs/crates/hyper-util/features#feature-tokio)\n  * [prometheus-metrics?](https://lib.rs/crates/hickory-dns/features#feature-prometheus-metrics \"optional feature\") [metrics-exporter-prometheus](https://lib.rs/crates/metrics-exporter-prometheus \"outdated\") 0.16.2[+http-listener](https://lib.rs/crates/metrics-exporter-prometheus/features#feature-http-listener)\n  * [prometheus-metrics?](https://lib.rs/crates/hickory-dns/features#feature-prometheus-metrics \"optional feature\") [tokio-util](https://lib.rs/crates/tokio-util \"0.7.9\")\n  * [libc](https://lib.rs/crates/libc \"0.2\") unix\n  * [metrics?](https://lib.rs/crates/hickory-dns/features#feature-metrics \"optional feature\") [metrics](https://lib.rs/crates/metrics \"new\") 0.24.1\n  * [metrics?](https://lib.rs/crates/hickory-dns/features#feature-metrics \"optional feature\") [metrics-process](https://lib.rs/crates/metrics-process \"new\") 2.4\n  * [tls-aws-lc-rs?](https://lib.rs/crates/hickory-dns/features#feature-tls-aws-lc-rs \"optional feature\") [tls-ring?](https://lib.rs/crates/hickory-dns/features#feature-tls-ring \"optional feature\") [rustls](https://lib.rs/crates/rustls \"new\") 0.23.23[+logging](https://lib.rs/crates/rustls/features#feature-logging)[+std](https://lib.rs/crates/rustls/features#feature-std)[+tls12](https://lib.rs/crates/rustls/features#feature-tls12)\n  * [dnssec-aws-lc-rs?](https://lib.rs/crates/hickory-dns/features#feature-dnssec-aws-lc-rs \"optional feature\") [dnssec-ring?](https://lib.rs/crates/hickory-dns/features#feature-dnssec-ring \"optional feature\") [rustls-pki-types](https://lib.rs/crates/rustls-pki-types \"1.10\")\n\n\n  * dev  [bytes](https://lib.rs/crates/bytes \"1\")\n  * dev  [futures-executor](https://lib.rs/crates/futures-executor \"0.3.5\")[+std](https://lib.rs/crates/futures-executor/features#feature-std)\n  * dev  [hickory-resolver](https://lib.rs/crates/hickory-resolver \"new\") 0.26.0-alpha.1\n  * dev  [prometheus-parse](https://lib.rs/crates/prometheus-parse \"0.2.5\")\n  * dev  [regex](https://lib.rs/crates/regex \"1.3.4\")\n  * dev  [reqwest](https://lib.rs/crates/reqwest \"new\") 0.12.12\n  * dev  [webpki-roots](https://lib.rs/crates/webpki-roots \"outdated\") 0.26\n\n\n#### [Other features](https://lib.rs/crates/hickory-dns/features)\n  * [ascii-art](https://lib.rs/crates/hickory-dns/features#feature-ascii-art)\n  * [blocklist](https://lib.rs/crates/hickory-dns/features#feature-blocklist)\n  * [h3-aws-lc-rs](https://lib.rs/crates/hickory-dns/features#feature-h3-aws-lc-rs)\n  * [h3-ring](https://lib.rs/crates/hickory-dns/features#feature-h3-ring)\n  * [https-aws-lc-rs](https://lib.rs/crates/hickory-dns/features#feature-https-aws-lc-rs)\n  * [https-ring](https://lib.rs/crates/hickory-dns/features#feature-https-ring)\n  * [quic-aws-lc-rs](https://lib.rs/crates/hickory-dns/features#feature-quic-aws-lc-rs)\n  * [quic-ring](https://lib.rs/crates/hickory-dns/features#feature-quic-ring)\n  * [recursor](https://lib.rs/crates/hickory-dns/features#feature-recursor)\n  * [resolver](https://lib.rs/crates/hickory-dns/features#feature-resolver)\n  * [rustls-platform-verifier](https://lib.rs/crates/hickory-dns/features#feature-rustls-platform-verifier)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  14 releases\u27e81\u27e9\n0.26.0-alpha.1 |  Jun 3, 2025   \n---|---  \n0.25.1 |  Mar 18, 2025   \n0.25.0-alpha.4 |  Nov 28, 2024   \n0.25.0-alpha.1 |  Jun 16, 2024   \n0.1.0 |  May 17, 2023   \n#**1603** in Network programming\u27e82\u27e9\nDownload history 64/week @ 2025-02-26 47/week @ 2025-03-05 59/week @ 2025-03-12 259/week @ 2025-03-19 64/week @ 2025-03-26 76/week @ 2025-04-02 47/week @ 2025-04-09 16/week @ 2025-04-16 26/week @ 2025-04-23 169/week @ 2025-04-30 134/week @ 2025-05-07 124/week @ 2025-05-14 28/week @ 2025-05-21 117/week @ 2025-05-28 48/week @ 2025-06-04 17/week @ 2025-06-11\n**221** downloads per month \n**MIT/Apache**\n2.5MB  **43K** SLoC\n# Overview\nHickory DNS provides a binary for hosting or forwarding DNS zones.\nThis a named implementation for DNS zone hosting, stub resolvers, and recursive resolvers. It is capable of performing signing all records in the zone for server DNSSEC RRSIG records associated with all records in a zone. There is also a ``hickory-dns`` binary that can be generated from the library with ````cargo``` install hickory-dns```. Dynamic updates are supported via ```SIG0``` (an mTLS authentication method is under development).\n**NOTICE** This project was rebranded from Trust-DNS to Hickory DNS and has been moved to the <https://github.com/hickory-dns/hickory-dns> organization and repo, this crate/binary has been moved to hickory-dns\u27e83\u27e9, from ```0.``24``` and onward, for prior versions see trust-dns\u27e84\u27e9.\n## Features\n  * Dynamic Update with sqlite journaling backend (SIG0)\n  * DNSSEC online signing (with NSEC and NSEC3)\n  * Forwarding stub resolver\n  * ANAME resolution, for zone mapping aliases to A and AAAA records\n  * Additionals section generation for aliasing record types\n\n\n## Optional protocol support\nThe following DNS protocols are optionally supported:\n  * Enable ``dns-over-rustls`` for DNS over TLS (DoT)\n  * Enable ``dns-over-https-rustls`` for DNS over HTTP/2 (DoH)\n  * Enable ``dns-over-quic`` for DNS over QUIC (DoQ)\n  * Enable ``dns-over-h3`` for DNS over HTTP/3 (DoH3)\n\n\n## DNSSEC status\nThe current root key is bundled into the system, and used by default. This gives validation of DNSKEY and DS records back to the root. NSEC and NSEC3 are implemented.\nZones will be automatically resigned on any record updates via dynamic DNS. To enable DNSSEC, enable the ``dnssec-ring`` feature.\n## Future goals\n  * Distributed dynamic DNS updates, with consensus\n  * mTLS based authorization for Dynamic Updates\n  * Online NSEC creation for queries\n  * Maybe NSEC5 support\n\n\n## Running\nWarning: Hickory DNS is still under development, running in production is not recommended.\n  * Verify the version\n\n```\n```./target/release/hickory-dns````` --`version``\n`\n```\n\n  * Get help\n\n```\n```./target/release/hickory-dns````` --`help``\n`\n```\n\n  * Launch ``hickory-dns`` server with test config\n\n\nNote that if the ```-`p`` parameter is not passed, the server will run on default DNS ports. There are separate port options for DoT and DoH servers, see ``hickory`-`dns `-``-`help``\n```\n```./target/release/hickory-dns````` -`c` ./tests/test-data/test_configs/example.toml`` -`z` ./tests/test-data/test_configs/`` -`p` 24141`\n`\n```\n\n  * Query the just launched server with ``dig``\n\n```\n```dig``` @127.0.0.1`` -`p` 24141 www.example.com`\n`\n```\n\n## Minimum Rust Version\nThe current minimum rustc version for this project is ```1.``70```\n## Versioning\nHickory DNS does it's best job to follow semver. Hickory DNS will be promoted to 1.0 upon stabilization of the publicly exposed APIs. This does not mean that Hickory DNS will necessarily break on upgrades between 0.x updates. Whenever possible, old APIs will be deprecated with notes on what replaced those deprecations. Hickory DNS will make a best effort to never break software which depends on it due to API changes, though this can not be guaranteed. Deprecated interfaces will be maintained for at minimum one major release after that in which they were deprecated (where possible), with the exception of the upgrade to 1.0 where all deprecated interfaces will be planned to be removed.\n#### Dependencies\n~**21\u201368MB** ~1.5M SLoC\n  * cfg-if\u27e85\u27e9\n  * clap\u27e86\u27e9 4.0+cargo\u27e87\u27e9+derive\u27e88\u27e9+help\u27e89\u27e9+std\u27e810\u27e9+suggestions\u27e811\u27e9\n  * futures-util\u27e812\u27e9+std\u27e813\u27e9\n  * hickory-client\u27e814\u27e9 0.26.0-alpha.1\n  * hickory-proto\u27e815\u27e9 0.26.0-alpha.1+std\u27e816\u27e9\n  * hickory-server\u27e817\u27e9 0.26.0-alpha.1+toml\u27e818\u27e9\n  * ipnet\u27e819\u27e9+serde\u27e820\u27e9\n  * sqlite\u27e821\u27e9 rusqlite\u27e822\u27e9 0.35+bundled\u27e823\u27e9+time\u27e824\u27e9\n  * serde\u27e825\u27e9+derive\u27e826\u27e9\n  * socket2\u27e827\u27e9\n  * time\u27e828\u27e9\n  * tokio\u27e829\u27e9+time\u27e830\u27e9+rt\u27e831\u27e9+signal\u27e832\u27e9\n  * toml\u27e833\u27e9 0.8.14\n  * tracing\u27e834\u27e9\n  * tracing-subscriber\u27e835\u27e9+env-filter\u27e836\u27e9+fmt\u27e837\u27e9+std\u27e838\u27e9\n  * prometheus-metrics?\u27e839\u27e9 http\u27e840\u27e9 1.1\n  * prometheus-metrics?\u27e839\u27e9 hyper\u27e841\u27e9 1.6+server\u27e842\u27e9\n  * prometheus-metrics?\u27e839\u27e9 hyper-util\u27e843\u27e9+server-auto\u27e844\u27e9+server-graceful\u27e845\u27e9+tokio\u27e846\u27e9\n  * prometheus-metrics?\u27e839\u27e9 metrics-exporter-prometheus\u27e847\u27e9 0.16.2+http-listener\u27e848\u27e9\n  * prometheus-metrics?\u27e839\u27e9 tokio-util\u27e849\u27e9\n  * libc\u27e850\u27e9 unix\n  * metrics?\u27e851\u27e9 metrics\u27e852\u27e9 0.24.1\n  * metrics?\u27e851\u27e9 metrics-process\u27e853\u27e9 2.4\n  * tls-aws-lc-rs?\u27e854\u27e9 tls-ring?\u27e855\u27e9 rustls\u27e856\u27e9 0.23.23+logging\u27e857\u27e9+std\u27e858\u27e9+tls12\u27e859\u27e9\n  * dnssec-aws-lc-rs?\u27e860\u27e9 dnssec-ring?\u27e861\u27e9 rustls-pki-types\u27e862\u27e9\n\n\n  * dev  bytes\u27e863\u27e9\n  * dev  futures-executor\u27e864\u27e9+std\u27e865\u27e9\n  * dev  hickory-resolver\u27e866\u27e9 0.26.0-alpha.1\n  * dev  prometheus-parse\u27e867\u27e9\n  * dev  regex\u27e868\u27e9\n  * dev  reqwest\u27e869\u27e9 0.12.12\n  * dev  webpki-roots\u27e870\u27e9 0.26\n\n\n#### Other features\u27e871\u27e9\n  * ascii-art\u27e872\u27e9\n  * blocklist\u27e873\u27e9\n  * h3-aws-lc-rs\u27e874\u27e9\n  * h3-ring\u27e875\u27e9\n  * https-aws-lc-rs\u27e876\u27e9\n  * https-ring\u27e877\u27e9\n  * quic-aws-lc-rs\u27e878\u27e9\n  * quic-ring\u27e879\u27e9\n  * recursor\u27e880\u27e9\n  * resolver\u27e881\u27e9\n  * rustls-platform-verifier\u27e882\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/hickory-dns/versions: 14 releases\n\u27e82\u27e9 https://lib.rs/network-programming: Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP. - Network programming\n\u27e83\u27e9 https://crates.io/crates/hickory-dns: hickory-dns\n\u27e84\u27e9 https://lib.rs/crates/trust-dns: trust-dns\n\u27e85\u27e9 https://lib.rs/crates/cfg-if: 1 - cfg-if\n\u27e86\u27e9 https://lib.rs/crates/clap: new - clap\n\u27e87\u27e9 https://lib.rs/crates/clap/features#feature-cargo: +cargo\n\u27e88\u27e9 https://lib.rs/crates/clap/features#feature-derive: +derive\n\u27e89\u27e9 https://lib.rs/crates/clap/features#feature-help: +help\n\u27e810\u27e9 https://lib.rs/crates/clap/features#feature-std: +std\n\u27e811\u27e9 https://lib.rs/crates/clap/features#feature-suggestions: +suggestions\n\u27e812\u27e9 https://lib.rs/crates/futures-util: 0.3.5 - futures-util\n\u27e813\u27e9 https://lib.rs/crates/futures-util/features#feature-std: +std\n\u27e814\u27e9 https://lib.rs/crates/hickory-client: new - hickory-client\n\u27e815\u27e9 https://lib.rs/crates/hickory-proto: new - hickory-proto\n\u27e816\u27e9 https://lib.rs/crates/hickory-proto/features#feature-std: +std\n\u27e817\u27e9 https://lib.rs/crates/hickory-server: new - hickory-server\n\u27e818\u27e9 https://lib.rs/crates/hickory-server/features#feature-toml: +toml\n\u27e819\u27e9 https://lib.rs/crates/ipnet: 2.3.0 - ipnet\n\u27e820\u27e9 https://lib.rs/crates/ipnet/features#feature-serde: +serde\n\u27e821\u27e9 https://lib.rs/crates/hickory-dns/features#feature-sqlite: default feature - sqlite\n\u27e822\u27e9 https://lib.rs/crates/rusqlite: obsolete - rusqlite\n\u27e823\u27e9 https://lib.rs/crates/rusqlite/features#feature-bundled: +bundled\n\u27e824\u27e9 https://lib.rs/crates/rusqlite/features#feature-time: +time\n\u27e825\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e826\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e827\u27e9 https://lib.rs/crates/socket2: 0.5 - socket2\n\u27e828\u27e9 https://lib.rs/crates/time: 0.3 - time\n\u27e829\u27e9 https://lib.rs/crates/tokio: 1.21 - tokio\n\u27e830\u27e9 https://lib.rs/crates/tokio/features#feature-time: +time\n\u27e831\u27e9 https://lib.rs/crates/tokio/features#feature-rt: +rt\n\u27e832\u27e9 https://lib.rs/crates/tokio/features#feature-signal: +signal\n\u27e833\u27e9 https://lib.rs/crates/toml: new - toml\n\u27e834\u27e9 https://lib.rs/crates/tracing: 0.1.30 - tracing\n\u27e835\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3 - tracing-subscriber\n\u27e836\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-env-filter: +env-filter\n\u27e837\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-fmt: +fmt\n\u27e838\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-std: +std\n\u27e839\u27e9 https://lib.rs/crates/hickory-dns/features#feature-prometheus-metrics: optional feature - prometheus-metrics?\n\u27e840\u27e9 https://lib.rs/crates/http: new - http\n\u27e841\u27e9 https://lib.rs/crates/hyper: new - hyper\n\u27e842\u27e9 https://lib.rs/crates/hyper/features#feature-server: +server\n\u27e843\u27e9 https://lib.rs/crates/hyper-util: 0.1.11 - hyper-util\n\u27e844\u27e9 https://lib.rs/crates/hyper-util/features#feature-server-auto: +server-auto\n\u27e845\u27e9 https://lib.rs/crates/hyper-util/features#feature-server-graceful: +server-graceful\n\u27e846\u27e9 https://lib.rs/crates/hyper-util/features#feature-tokio: +tokio\n\u27e847\u27e9 https://lib.rs/crates/metrics-exporter-prometheus: outdated - metrics-exporter-prometheus\n\u27e848\u27e9 https://lib.rs/crates/metrics-exporter-prometheus/features#feature-http-listener: +http-listener\n\u27e849\u27e9 https://lib.rs/crates/tokio-util: 0.7.9 - tokio-util\n\u27e850\u27e9 https://lib.rs/crates/libc: 0.2 - libc\n\u27e851\u27e9 https://lib.rs/crates/hickory-dns/features#feature-metrics: optional feature - metrics?\n\u27e852\u27e9 https://lib.rs/crates/metrics: new - metrics\n\u27e853\u27e9 https://lib.rs/crates/metrics-process: new - metrics-process\n\u27e854\u27e9 https://lib.rs/crates/hickory-dns/features#feature-tls-aws-lc-rs: optional feature - tls-aws-lc-rs?\n\u27e855\u27e9 https://lib.rs/crates/hickory-dns/features#feature-tls-ring: optional feature - tls-ring?\n\u27e856\u27e9 https://lib.rs/crates/rustls: new - rustls\n\u27e857\u27e9 https://lib.rs/crates/rustls/features#feature-logging: +logging\n\u27e858\u27e9 https://lib.rs/crates/rustls/features#feature-std: +std\n\u27e859\u27e9 https://lib.rs/crates/rustls/features#feature-tls12: +tls12\n\u27e860\u27e9 https://lib.rs/crates/hickory-dns/features#feature-dnssec-aws-lc-rs: optional feature - dnssec-aws-lc-rs?\n\u27e861\u27e9 https://lib.rs/crates/hickory-dns/features#feature-dnssec-ring: optional feature - dnssec-ring?\n\u27e862\u27e9 https://lib.rs/crates/rustls-pki-types: 1.10 - rustls-pki-types\n\u27e863\u27e9 https://lib.rs/crates/bytes: 1 - bytes\n\u27e864\u27e9 https://lib.rs/crates/futures-executor: 0.3.5 - futures-executor\n\u27e865\u27e9 https://lib.rs/crates/futures-executor/features#feature-std: +std\n\u27e866\u27e9 https://lib.rs/crates/hickory-resolver: new - hickory-resolver\n\u27e867\u27e9 https://lib.rs/crates/prometheus-parse: 0.2.5 - prometheus-parse\n\u27e868\u27e9 https://lib.rs/crates/regex: 1.3.4 - regex\n\u27e869\u27e9 https://lib.rs/crates/reqwest: new - reqwest\n\u27e870\u27e9 https://lib.rs/crates/webpki-roots: outdated - webpki-roots\n\u27e871\u27e9 https://lib.rs/crates/hickory-dns/features: Other features\n\u27e872\u27e9 https://lib.rs/crates/hickory-dns/features#feature-ascii-art: ascii-art\n\u27e873\u27e9 https://lib.rs/crates/hickory-dns/features#feature-blocklist: blocklist\n\u27e874\u27e9 https://lib.rs/crates/hickory-dns/features#feature-h3-aws-lc-rs: h3-aws-lc-rs\n\u27e875\u27e9 https://lib.rs/crates/hickory-dns/features#feature-h3-ring: h3-ring\n\u27e876\u27e9 https://lib.rs/crates/hickory-dns/features#feature-https-aws-lc-rs: https-aws-lc-rs\n\u27e877\u27e9 https://lib.rs/crates/hickory-dns/features#feature-https-ring: https-ring\n\u27e878\u27e9 https://lib.rs/crates/hickory-dns/features#feature-quic-aws-lc-rs: quic-aws-lc-rs\n\u27e879\u27e9 https://lib.rs/crates/hickory-dns/features#feature-quic-ring: quic-ring\n\u27e880\u27e9 https://lib.rs/crates/hickory-dns/features#feature-recursor: recursor\n\u27e881\u27e9 https://lib.rs/crates/hickory-dns/features#feature-resolver: resolver\n\u27e882\u27e9 https://lib.rs/crates/hickory-dns/features#feature-rustls-platform-verifier: rustls-platform-verifier\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 10420,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120227.4518397"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.2\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.2\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `compiler_builtins` which `alloc` depends on\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:23:1\n   |\n23 | extern crate alloc;\n   | ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `compiler_builtins` which `alloc` depends on",
                "spans": [
                  {
                    "byte_end": 1406,
                    "byte_start": 1387,
                    "column_end": 20,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "extern crate alloc;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:129:50\n    |\n129 | pub unsafe trait CloneStableDeref: StableDeref + Clone {}\n    |                                                  ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 6363,
                    "byte_start": 6358,
                    "column_end": 55,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 129,
                    "line_start": 129,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 50,
                        "text": "pub unsafe trait CloneStableDeref: StableDeref + Clone {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:157:17\n    |\n157 | unsafe impl<T: ?Sized> StableDeref for Box<T> {}\n    |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 7069,
                    "byte_start": 7064,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 157,
                    "line_start": 157,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "unsafe impl<T: ?Sized> StableDeref for Box<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:170:17\n    |\n170 | unsafe impl<T: ?Sized> StableDeref for Rc<T> {}\n    |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 7466,
                    "byte_start": 7461,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 170,
                    "line_start": 170,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "unsafe impl<T: ?Sized> StableDeref for Rc<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:172:17\n    |\n172 | unsafe impl<T: ?Sized> CloneStableDeref for Rc<T> {}\n    |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 7540,
                    "byte_start": 7535,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 172,
                    "line_start": 172,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "unsafe impl<T: ?Sized> CloneStableDeref for Rc<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:174:17\n    |\n174 | unsafe impl<T: ?Sized> StableDeref for Arc<T> {}\n    |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 7619,
                    "byte_start": 7614,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 174,
                    "line_start": 174,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "unsafe impl<T: ?Sized> StableDeref for Arc<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:176:17\n    |\n176 | unsafe impl<T: ?Sized> CloneStableDeref for Arc<T> {}\n    |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 7694,
                    "byte_start": 7689,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 176,
                    "line_start": 176,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "unsafe impl<T: ?Sized> CloneStableDeref for Arc<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:178:21\n    |\n178 | unsafe impl<'a, T: ?Sized> StableDeref for Ref<'a, T> {}\n    |                     ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 7753,
                    "byte_start": 7748,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 178,
                    "line_start": 178,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "unsafe impl<'a, T: ?Sized> StableDeref for Ref<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:179:21\n    |\n179 | unsafe impl<'a, T: ?Sized> StableDeref for RefMut<'a, T> {}\n    |                     ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 7810,
                    "byte_start": 7805,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 179,
                    "line_start": 179,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "unsafe impl<'a, T: ?Sized> StableDeref for RefMut<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:187:21\n    |\n187 | unsafe impl<'a, T: ?Sized> StableDeref for &'a T {}\n    |                     ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 8146,
                    "byte_start": 8141,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 187,
                    "line_start": 187,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "unsafe impl<'a, T: ?Sized> StableDeref for &'a T {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:188:21\n    |\n188 | unsafe impl<'a, T: ?Sized> CloneStableDeref for &'a T {}\n    |                     ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 8198,
                    "byte_start": 8193,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 188,
                    "line_start": 188,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "unsafe impl<'a, T: ?Sized> CloneStableDeref for &'a T {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:189:21\n    |\n189 | unsafe impl<'a, T: ?Sized> StableDeref for &'a mut T {}\n    |                     ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 8255,
                    "byte_start": 8250,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 189,
                    "line_start": 189,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "unsafe impl<'a, T: ?Sized> StableDeref for &'a mut T {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:157:16\n    |\n157 | unsafe impl<T: ?Sized> StableDeref for Box<T> {}\n    |                ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 7069,
                    "byte_start": 7063,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 157,
                    "line_start": 157,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "unsafe impl<T: ?Sized> StableDeref for Box<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: linking with `link.exe` failed: exit code: 0xc0000142\n  |\n  = note: \"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcrR1hmN\\\\symbols.o\" \"<2 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\icu_properties_data-ec373bf48f55f8b5\\\\build_script_build-ec373bf48f55f8b5.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"\n  = note: some arguments are omitted. use `--verbose` to show all linker arguments\n  = note: \n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcrR1hmN\\\\symbols.o\" \"<2 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\icu_properties_data-ec373bf48f55f8b5\\\\build_script_build-ec373bf48f55f8b5.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "some arguments are omitted. use `--verbose` to show all linker arguments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "linking with `link.exe` failed: exit code: 0xc0000142",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "note: `link.exe` returned an unexpected error\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "note",
                "message": "`link.exe` returned an unexpected error",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "note: the Visual Studio build tools may need to be repaired using the Visual Studio installer\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "note",
                "message": "the Visual Studio build tools may need to be repaired using the Visual Studio installer",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "note: or a necessary component may be missing from the \"C++ build tools\" workload\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "note",
                "message": "or a necessary component may be missing from the \"C++ build tools\" workload",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:170:16\n    |\n170 | unsafe impl<T: ?Sized> StableDeref for Rc<T> {}\n    |                ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 7466,
                    "byte_start": 7460,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 170,
                    "line_start": 170,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "unsafe impl<T: ?Sized> StableDeref for Rc<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:172:16\n    |\n172 | unsafe impl<T: ?Sized> CloneStableDeref for Rc<T> {}\n    |                ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 7540,
                    "byte_start": 7534,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 172,
                    "line_start": 172,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "unsafe impl<T: ?Sized> CloneStableDeref for Rc<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:174:16\n    |\n174 | unsafe impl<T: ?Sized> StableDeref for Arc<T> {}\n    |                ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 7619,
                    "byte_start": 7613,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 174,
                    "line_start": 174,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "unsafe impl<T: ?Sized> StableDeref for Arc<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:176:16\n    |\n176 | unsafe impl<T: ?Sized> CloneStableDeref for Arc<T> {}\n    |                ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 7694,
                    "byte_start": 7688,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 176,
                    "line_start": 176,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "unsafe impl<T: ?Sized> CloneStableDeref for Arc<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:178:20\n    |\n178 | unsafe impl<'a, T: ?Sized> StableDeref for Ref<'a, T> {}\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 7753,
                    "byte_start": 7747,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 178,
                    "line_start": 178,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "unsafe impl<'a, T: ?Sized> StableDeref for Ref<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:179:20\n    |\n179 | unsafe impl<'a, T: ?Sized> StableDeref for RefMut<'a, T> {}\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 7810,
                    "byte_start": 7804,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 179,
                    "line_start": 179,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "unsafe impl<'a, T: ?Sized> StableDeref for RefMut<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:187:20\n    |\n187 | unsafe impl<'a, T: ?Sized> StableDeref for &'a T {}\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 8146,
                    "byte_start": 8140,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 187,
                    "line_start": 187,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "unsafe impl<'a, T: ?Sized> StableDeref for &'a T {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:188:20\n    |\n188 | unsafe impl<'a, T: ?Sized> CloneStableDeref for &'a T {}\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 8198,
                    "byte_start": 8192,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 188,
                    "line_start": 188,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "unsafe impl<'a, T: ?Sized> CloneStableDeref for &'a T {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs:189:20\n    |\n189 | unsafe impl<'a, T: ?Sized> StableDeref for &'a mut T {}\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 8255,
                    "byte_start": 8249,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 189,
                    "line_start": 189,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "unsafe impl<'a, T: ?Sized> StableDeref for &'a mut T {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:296:3\n    |\n296 | #[derive(Debug)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 9878,
                    "byte_start": 9872,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 296,
                    "line_start": 296,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:309:9\n    |\n309 |         write!(f, \"Allocation error: {:?}\", self)\n    |         ^^^^^\n    |\nhelp: consider importing this macro\n    |\n113 + use core::write;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::write;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 10270,
                    "byte_start": 10265,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 309,
                    "line_start": 309,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        write!(f, \"Allocation error: {:?}\", self)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:323:54\n    |\n323 |         Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n    |                                                      ^^^^^\n    |\nhelp: consider importing this macro\n    |\n113 + use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 10633,
                    "byte_start": 10628,
                    "column_end": 59,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 323,
                    "line_start": 323,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 54,
                        "text": "        Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `cfg` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:254:12\n    |\n254 |         if cfg!(debug_assertions) {\n    |            ^^^\n...\n700 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: `cfg` is in scope, but it is an attribute: `#[cfg]`\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::cfg;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`cfg` is in scope, but it is an attribute: `#[cfg]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cfg;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `cfg` in this scope",
                "spans": [
                  {
                    "byte_end": 8851,
                    "byte_start": 8848,
                    "column_end": 15,
                    "column_start": 12,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 23051,
                            "byte_start": 23031,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 700,
                            "line_start": 700,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 254,
                    "line_start": 254,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 12,
                        "text": "        if cfg!(debug_assertions) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:255:13\n    |\n255 |             panic!($e);\n    |             ^^^^^\n...\n700 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 8890,
                    "byte_start": 8885,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 23051,
                            "byte_start": 23031,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 700,
                            "line_start": 700,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 255,
                    "line_start": 255,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "            panic!($e);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `cfg` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:254:12\n    |\n254 |         if cfg!(debug_assertions) {\n    |            ^^^\n...\n707 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: `cfg` is in scope, but it is an attribute: `#[cfg]`\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::cfg;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`cfg` is in scope, but it is an attribute: `#[cfg]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cfg;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `cfg` in this scope",
                "spans": [
                  {
                    "byte_end": 8851,
                    "byte_start": 8848,
                    "column_end": 15,
                    "column_start": 12,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 23293,
                            "byte_start": 23273,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 707,
                            "line_start": 707,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 254,
                    "line_start": 254,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 12,
                        "text": "        if cfg!(debug_assertions) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:255:13\n    |\n255 |             panic!($e);\n    |             ^^^^^\n...\n707 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 8890,
                    "byte_start": 8885,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 23293,
                            "byte_start": 23273,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 707,
                            "line_start": 707,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 255,
                    "line_start": 255,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "            panic!($e);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `cfg` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:254:12\n    |\n254 |         if cfg!(debug_assertions) {\n    |            ^^^\n...\n718 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: `cfg` is in scope, but it is an attribute: `#[cfg]`\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::cfg;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`cfg` is in scope, but it is an attribute: `#[cfg]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cfg;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `cfg` in this scope",
                "spans": [
                  {
                    "byte_end": 8851,
                    "byte_start": 8848,
                    "column_end": 15,
                    "column_start": 12,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 23598,
                            "byte_start": 23578,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 718,
                            "line_start": 718,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 254,
                    "line_start": 254,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 12,
                        "text": "        if cfg!(debug_assertions) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:255:13\n    |\n255 |             panic!($e);\n    |             ^^^^^\n...\n718 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 8890,
                    "byte_start": 8885,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 23598,
                            "byte_start": 23578,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 718,
                            "line_start": 718,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 255,
                    "line_start": 255,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "            panic!($e);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs:1:5\n  |\n1 | use std::env;\n  |     ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not be installed\n  = help: consider downloading the target with `rustup target add x86_64-pc-windows-msvc`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not be installed",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider downloading the target with `rustup target add x86_64-pc-windows-msvc`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 7,
                    "byte_start": 4,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "use std::env;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `cfg` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:254:12\n    |\n254 |         if cfg!(debug_assertions) {\n    |            ^^^\n...\n725 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: `cfg` is in scope, but it is an attribute: `#[cfg]`\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::cfg;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`cfg` is in scope, but it is an attribute: `#[cfg]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cfg;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `cfg` in this scope",
                "spans": [
                  {
                    "byte_end": 8851,
                    "byte_start": 8848,
                    "column_end": 15,
                    "column_start": 12,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 23825,
                            "byte_start": 23805,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 725,
                            "line_start": 725,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 254,
                    "line_start": 254,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 12,
                        "text": "        if cfg!(debug_assertions) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:255:13\n    |\n255 |             panic!($e);\n    |             ^^^^^\n...\n725 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 8890,
                    "byte_start": 8885,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 23825,
                            "byte_start": 23805,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 725,
                            "line_start": 725,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 255,
                    "line_start": 255,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "            panic!($e);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `cfg` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:254:12\n    |\n254 |         if cfg!(debug_assertions) {\n    |            ^^^\n...\n732 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: `cfg` is in scope, but it is an attribute: `#[cfg]`\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::cfg;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`cfg` is in scope, but it is an attribute: `#[cfg]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cfg;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `cfg` in this scope",
                "spans": [
                  {
                    "byte_end": 8851,
                    "byte_start": 8848,
                    "column_end": 15,
                    "column_start": 12,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 24045,
                            "byte_start": 24025,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 732,
                            "line_start": 732,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 254,
                    "line_start": 254,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 12,
                        "text": "        if cfg!(debug_assertions) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:255:13\n    |\n255 |             panic!($e);\n    |             ^^^^^\n...\n732 |             _ => debug_unreachable!(),\n    |                  -------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `debug_unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n113 + use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 8890,
                    "byte_start": 8885,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 8741,
                        "byte_start": 8711,
                        "column_end": 31,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "macro_rules! debug_unreachable {"
                          }
                        ]
                      },
                      "macro_decl_name": "debug_unreachable!",
                      "span": {
                        "byte_end": 8810,
                        "byte_start": 8764,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 8741,
                            "byte_start": 8711,
                            "column_end": 31,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 249,
                            "line_start": 249,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 31,
                                "highlight_start": 1,
                                "text": "macro_rules! debug_unreachable {"
                              }
                            ]
                          },
                          "macro_decl_name": "debug_unreachable!",
                          "span": {
                            "byte_end": 24045,
                            "byte_start": 24025,
                            "column_end": 38,
                            "column_start": 18,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 732,
                            "line_start": 732,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 18,
                                "text": "            _ => debug_unreachable!(),"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 251,
                        "line_start": 251,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        debug_unreachable!(\"entered unreachable code\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 255,
                    "line_start": 255,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "            panic!($e);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:784:9\n    |\n784 |         assert!(\n    |         ^^^^^^\n    |\nhelp: consider importing this macro\n    |\n113 + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 26140,
                    "byte_start": 26134,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 784,
                    "line_start": 784,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:889:9\n    |\n889 |         assert!(len <= A::size());\n    |         ^^^^^^\n    |\nhelp: consider importing this macro\n    |\n113 + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 29550,
                    "byte_start": 29544,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 889,
                    "line_start": 889,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(len <= A::size());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1038:9\n     |\n1038 |         assert!(start <= end);\n     |         ^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 34607,
                    "byte_start": 34601,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1038,
                    "line_start": 1038,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(start <= end);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1039:9\n     |\n1039 |         assert!(end <= len);\n     |         ^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 34638,
                    "byte_start": 34632,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1039,
                    "line_start": 1039,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(end <= len);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1179:13\n     |\n1179 |             assert!(new_cap >= len);\n     |             ^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 39585,
                    "byte_start": 39579,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1179,
                    "line_start": 1179,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            assert!(new_cap >= len);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1190:17\n     |\n1190 |                 debug_assert!(layout.size() > 0);\n     |                 ^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::debug_assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::debug_assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert` in this scope",
                "spans": [
                  {
                    "byte_end": 40118,
                    "byte_start": 40106,
                    "column_end": 29,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1190,
                    "line_start": 1190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 17,
                        "text": "                debug_assert!(layout.size() > 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1228:9\n     |\n1228 |         debug_assert_eq!(self.len(), self.capacity());\n     |         ^^^^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::debug_assert_eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 41672,
                    "byte_start": 41657,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1228,
                    "line_start": 1228,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.len(), self.capacity());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1354:13\n     |\n1354 |             assert!(index < len);\n     |             ^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 46054,
                    "byte_start": 46048,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1354,
                    "line_start": 1354,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            assert!(index < len);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1378:17\n     |\n1378 |                 panic!(\"index exceeds length\");\n     |                 ^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::panic;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 46913,
                    "byte_start": 46908,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1378,
                    "line_start": 1378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "                panic!(\"index exceeds length\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1400:9\n     |\n1400 |         assert!(lower_size_bound <= core::isize::MAX as usize); // Ensure offset is indexable\n     |         ^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 47706,
                    "byte_start": 47700,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1400,
                    "line_start": 1400,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(lower_size_bound <= core::isize::MAX as usize); // Ensure offset is indexable"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1401:9\n     |\n1401 |         assert!(index + lower_size_bound >= index); // Protect against overflow\n     |         ^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 47800,
                    "byte_start": 47794,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1401,
                    "line_start": 1401,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(index + lower_size_bound >= index); // Protect against overflow"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1405:9\n     |\n1405 |         assert!(index <= old_len);\n     |         ^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 47946,
                    "byte_start": 47940,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1405,
                    "line_start": 1405,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(index <= old_len);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1707:13\n     |\n1707 |             debug_assert!(!ptr.is_null(), \"Called `from_raw_parts` with null pointer.\");\n     |             ^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::debug_assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::debug_assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert` in this scope",
                "spans": [
                  {
                    "byte_end": 58758,
                    "byte_start": 58746,
                    "column_end": 25,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1707,
                    "line_start": 1707,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 13,
                        "text": "            debug_assert!(!ptr.is_null(), \"Called `from_raw_parts` with null pointer.\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1710:9\n     |\n1710 |         assert!(capacity > Self::inline_capacity());\n     |         ^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 58888,
                    "byte_start": 58882,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1710,
                    "line_start": 1710,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(capacity > Self::inline_capacity());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1777:9\n     |\n1777 |         assert!(index <= len);\n     |         ^^^^^^\n     |\nhelp: consider importing this macro\n     |\n113  + use core::assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 61314,
                    "byte_start": 61308,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1777,
                    "line_start": 1777,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(index <= len);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:289:9\n    |\n289 | impl<T: Clone> ExtendFromSlice<T> for Vec<T> {\n    |         ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::clone::Clone;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 9678,
                    "byte_start": 9673,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 289,
                    "line_start": 289,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "impl<T: Clone> ExtendFromSlice<T> for Vec<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:314:6\n    |\n314 | impl From<LayoutErr> for CollectionAllocErr {\n    |      ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::convert::From;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::convert::From;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 10346,
                    "byte_start": 10342,
                    "column_end": 10,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 314,
                    "line_start": 314,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 6,
                        "text": "impl From<LayoutErr> for CollectionAllocErr {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:320:26\n    |\n320 | fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {\n    |                          ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n113 + use crate::fmt::Result;\n    |\n113 + use core::fmt::Result;\n    |\n113 + use core::result::Result;\n    |\n113 + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 10504,
                    "byte_start": 10498,
                    "column_end": 32,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 320,
                    "line_start": 320,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 26,
                        "text": "fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:322:9\n    |\n322 |         Ok(x) => x,\n    |         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n113 + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 10565,
                    "byte_start": 10563,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 322,
                    "line_start": 322,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(x) => x,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:323:9\n    |\n323 |         Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n    |         ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n113 + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 10586,
                    "byte_start": 10583,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 323,
                    "line_start": 323,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:324:9\n    |\n324 |         Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),\n    |         ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n113 + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 10668,
                    "byte_start": 10665,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 324,
                    "line_start": 324,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:330:33\n    |\n330 | fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {\n    |                                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n113 + use crate::fmt::Result;\n    |\n113 + use core::fmt::Result;\n    |\n113 + use core::result::Result;\n    |\n113 + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 10937,
                    "byte_start": 10931,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 330,
                    "line_start": 330,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:365:34\n    |\n365 | unsafe impl<'a, T: Sync + Array> Sync for Drain<'a, T> {}\n    |                                  ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::marker::Sync;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 12052,
                    "byte_start": 12048,
                    "column_end": 38,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 365,
                    "line_start": 365,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 34,
                        "text": "unsafe impl<'a, T: Sync + Array> Sync for Drain<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:365:20\n    |\n365 | unsafe impl<'a, T: Sync + Array> Sync for Drain<'a, T> {}\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::marker::Sync;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 12038,
                    "byte_start": 12034,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 365,
                    "line_start": 365,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "unsafe impl<'a, T: Sync + Array> Sync for Drain<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:366:34\n    |\n366 | unsafe impl<'a, T: Send + Array> Send for Drain<'a, T> {}\n    |                                  ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::marker::Send;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 12110,
                    "byte_start": 12106,
                    "column_end": 38,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 366,
                    "line_start": 366,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 34,
                        "text": "unsafe impl<'a, T: Send + Array> Send for Drain<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:366:20\n    |\n366 | unsafe impl<'a, T: Send + Array> Send for Drain<'a, T> {}\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::marker::Send;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 12096,
                    "byte_start": 12092,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 366,
                    "line_start": 366,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "unsafe impl<'a, T: Send + Array> Send for Drain<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:368:25\n    |\n368 | impl<'a, T: 'a + Array> Iterator for Drain<'a, T> {\n    |                         ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::iter::Iterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 12164,
                    "byte_start": 12156,
                    "column_end": 33,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 368,
                    "line_start": 368,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 25,
                        "text": "impl<'a, T: 'a + Array> Iterator for Drain<'a, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:372:27\n    |\n372 |     fn next(&mut self) -> Option<T::Item> {\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n113 + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 12256,
                    "byte_start": 12250,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 372,
                    "line_start": 372,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<T::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:379:36\n    |\n379 |     fn size_hint(&self) -> (usize, Option<usize>) {\n    |                                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n113 + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 12430,
                    "byte_start": 12424,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 379,
                    "line_start": 379,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn size_hint(&self) -> (usize, Option<usize>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:384:25\n    |\n384 | impl<'a, T: 'a + Array> DoubleEndedIterator for Drain<'a, T> {\n    |                         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::iter::DoubleEndedIterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 12523,
                    "byte_start": 12504,
                    "column_end": 44,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 384,
                    "line_start": 384,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 25,
                        "text": "impl<'a, T: 'a + Array> DoubleEndedIterator for Drain<'a, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:386:32\n    |\n386 |     fn next_back(&mut self) -> Option<T::Item> {\n    |                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n113 + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 12594,
                    "byte_start": 12588,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 386,
                    "line_start": 386,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<T::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `ExactSizeIterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:393:20\n    |\n393 | impl<'a, T: Array> ExactSizeIterator for Drain<'a, T> {\n    |                    ^^^^^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::iter::ExactSizeIterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `ExactSizeIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 12756,
                    "byte_start": 12739,
                    "column_end": 37,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 393,
                    "line_start": 393,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 20,
                        "text": "impl<'a, T: Array> ExactSizeIterator for Drain<'a, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:402:25\n    |\n402 | impl<'a, T: 'a + Array> Drop for Drain<'a, T> {\n    |                         ^^^^ not found in this scope\n    |\nhelp: consider importing one of these traits\n    |\n113 + use crate::ops::Drop;\n    |\n113 + use core::ops::Drop;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 12934,
                    "byte_start": 12930,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 402,
                    "line_start": 402,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "impl<'a, T: 'a + Array> Drop for Drain<'a, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:404:23\n    |\n403 |     fn drop(&mut self) {\n    |        ---- a method by that name is available on `Self` here\n404 |         self.for_each(drop);\n    |                       ^^^^ not found in this scope\n    |\nhelp: consider importing one of these functions\n    |\n113 + use crate::mem::drop;\n    |\n113 + use core::mem::drop;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these functions",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::mem::drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::mem::drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `drop` in this scope",
                "spans": [
                  {
                    "byte_end": 12965,
                    "byte_start": 12961,
                    "column_end": 12,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": false,
                    "label": "a method by that name is available on `Self` here",
                    "line_end": 403,
                    "line_start": 403,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 8,
                        "text": "    fn drop(&mut self) {"
                      }
                    ]
                  },
                  {
                    "byte_end": 13005,
                    "byte_start": 13001,
                    "column_end": 27,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 404,
                    "line_start": 404,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 23,
                        "text": "        self.for_each(drop);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:741:30\n    |\n741 | unsafe impl<A: Array + Send> Send for SmallVecData<A> {}\n    |                              ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::marker::Send;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 24232,
                    "byte_start": 24228,
                    "column_end": 34,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 741,
                    "line_start": 741,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 30,
                        "text": "unsafe impl<A: Array + Send> Send for SmallVecData<A> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:741:24\n    |\n741 | unsafe impl<A: Array + Send> Send for SmallVecData<A> {}\n    |                        ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::marker::Send;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 24226,
                    "byte_start": 24222,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 741,
                    "line_start": 741,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "unsafe impl<A: Array + Send> Send for SmallVecData<A> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:742:30\n    |\n742 | unsafe impl<A: Array + Sync> Sync for SmallVecData<A> {}\n    |                              ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::marker::Sync;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 24289,
                    "byte_start": 24285,
                    "column_end": 34,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 742,
                    "line_start": 742,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 30,
                        "text": "unsafe impl<A: Array + Sync> Sync for SmallVecData<A> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:742:24\n    |\n742 | unsafe impl<A: Array + Sync> Sync for SmallVecData<A> {}\n    |                        ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n113 + use core::marker::Sync;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 24283,
                    "byte_start": 24279,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 742,
                    "line_start": 742,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "unsafe impl<A: Array + Sync> Sync for SmallVecData<A> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1132:30\n     |\n1132 |     pub fn pop(&mut self) -> Option<A::Item> {\n     |                              ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n113  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 38020,
                    "byte_start": 38014,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1132,
                    "line_start": 1132,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    pub fn pop(&mut self) -> Option<A::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1137:24\n     |\n1137 |                 return None;\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n113  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 38208,
                    "byte_start": 38204,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1137,
                    "line_start": 1137,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1141:13\n     |\n1141 |             Some(ptr::read(ptr.add(last_index)))\n     |             ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 38318,
                    "byte_start": 38314,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1141,
                    "line_start": 1141,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(ptr::read(ptr.add(last_index)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1175:51\n     |\n1175 |     pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {\n     |                                                   ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n113  + use crate::fmt::Result;\n     |\n113  + use core::fmt::Result;\n     |\n113  + use core::result::Result;\n     |\n113  + use alloc::fmt::Result;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 39420,
                    "byte_start": 39414,
                    "column_end": 57,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1175,
                    "line_start": 1175,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 51,
                        "text": "    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1182:28\n     |\n1182 |                     return Ok(());\n     |                            ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 39716,
                    "byte_start": 39714,
                    "column_end": 30,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1182,
                    "line_start": 1182,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 28,
                        "text": "                    return Ok(());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1211:13\n     |\n1211 |             Ok(())\n     |             ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 41138,
                    "byte_start": 41136,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1211,
                    "line_start": 1211,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1239:57\n     |\n1239 |     pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {\n     |                                                         ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n113  + use crate::fmt::Result;\n     |\n113  + use core::fmt::Result;\n     |\n113  + use core::result::Result;\n     |\n113  + use alloc::fmt::Result;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 42119,
                    "byte_start": 42113,
                    "column_end": 63,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1239,
                    "line_start": 1239,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 57,
                        "text": "    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1244:20\n     |\n1244 |             return Ok(());\n     |                    ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 42393,
                    "byte_start": 42391,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1244,
                    "line_start": 1244,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "            return Ok(());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1261:63\n     |\n1261 |     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {\n     |                                                               ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n113  + use crate::fmt::Result;\n     |\n113  + use core::fmt::Result;\n     |\n113  + use core::result::Result;\n     |\n113  + use alloc::fmt::Result;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 43042,
                    "byte_start": 43036,
                    "column_end": 69,
                    "column_start": 63,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1261,
                    "line_start": 1261,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 69,
                        "highlight_start": 63,
                        "text": "    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1264:20\n     |\n1264 |             return Ok(());\n     |                    ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 43179,
                    "byte_start": 43177,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1264,
                    "line_start": 1264,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "            return Ok(());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1430:21\n     |\n1430 |                     Some(x) => x,\n     |                     ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 48903,
                    "byte_start": 48899,
                    "column_end": 25,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1430,
                    "line_start": 1430,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 21,
                        "text": "                    Some(x) => x,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1464:17\n     |\n1464 |         impl<T> Drop for DropOnPanic<T> {\n     |                 ^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::ops::Drop;\n     |\n113  + use core::ops::Drop;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 50023,
                    "byte_start": 50019,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1464,
                    "line_start": 1464,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "        impl<T> Drop for DropOnPanic<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1504:32\n     |\n1504 |     pub fn into_inner(self) -> Result<A, Self> {\n     |                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n113  + use crate::fmt::Result;\n     |\n113  + use core::fmt::Result;\n     |\n113  + use core::result::Result;\n     |\n113  + use alloc::fmt::Result;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 51497,
                    "byte_start": 51491,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1504,
                    "line_start": 1504,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    pub fn into_inner(self) -> Result<A, Self> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1507:13\n     |\n1507 |             Err(self)\n     |             ^^^\n     |\nhelp: try calling `Err` as a method\n     |\n1507 -             Err(self)\n1507 +             self.Err()\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::result::Result::Err;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try calling `Err` as a method",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 51641,
                        "byte_start": 51632,
                        "column_end": 22,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1507,
                        "line_start": 1507,
                        "suggested_replacement": "self.Err()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 13,
                            "text": "            Err(self)"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 51635,
                    "byte_start": 51632,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1507,
                    "line_start": 1507,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(self)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1512:17\n     |\n1512 |                 Ok(data.into_inline().assume_init())\n     |                 ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 51783,
                    "byte_start": 51781,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1512,
                    "line_start": 1512,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(data.into_inline().assume_init())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1522:22\n     |\n1522 |     pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {\n     |                      ^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::ops::FnMut;\n     |\n113  + use core::ops::FnMut;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 52124,
                    "byte_start": 52119,
                    "column_end": 27,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1522,
                    "line_start": 1522,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 22,
                        "text": "    pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1540:26\n     |\n1540 |     pub fn retain_mut<F: FnMut(&mut A::Item) -> bool>(&mut self, f: F) {\n     |                          ^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::ops::FnMut;\n     |\n113  + use core::ops::FnMut;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 52747,
                    "byte_start": 52742,
                    "column_end": 31,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1540,
                    "line_start": 1540,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 26,
                        "text": "    pub fn retain_mut<F: FnMut(&mut A::Item) -> bool>(&mut self, f: F) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1547:18\n     |\n1547 |         A::Item: PartialEq<A::Item>,\n     |                  ^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::PartialEq;\n     |\n113  + use core::cmp::PartialEq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 52932,
                    "byte_start": 52923,
                    "column_end": 27,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1547,
                    "line_start": 1547,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 18,
                        "text": "        A::Item: PartialEq<A::Item>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1555:12\n     |\n1555 |         F: FnMut(&mut A::Item, &mut A::Item) -> bool,\n     |            ^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::ops::FnMut;\n     |\n113  + use core::ops::FnMut;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 53156,
                    "byte_start": 53151,
                    "column_end": 17,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1555,
                    "line_start": 1555,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 12,
                        "text": "        F: FnMut(&mut A::Item, &mut A::Item) -> bool,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1587:12\n     |\n1587 |         F: FnMut(&mut A::Item) -> K,\n     |            ^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::ops::FnMut;\n     |\n113  + use core::ops::FnMut;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 54067,
                    "byte_start": 54062,
                    "column_end": 17,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1587,
                    "line_start": 1587,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 12,
                        "text": "        F: FnMut(&mut A::Item) -> K,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1588:12\n     |\n1588 |         K: PartialEq<K>,\n     |            ^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::PartialEq;\n     |\n113  + use core::cmp::PartialEq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 54108,
                    "byte_start": 54099,
                    "column_end": 21,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1588,
                    "line_start": 1588,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 12,
                        "text": "        K: PartialEq<K>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1620:12\n     |\n1620 |         F: FnMut() -> A::Item,\n     |            ^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::ops::FnMut;\n     |\n113  + use core::ops::FnMut;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 55456,
                    "byte_start": 55451,
                    "column_end": 17,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1620,
                    "line_start": 1620,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 12,
                        "text": "        F: FnMut() -> A::Item,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Copy` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1736:14\n     |\n1736 |     A::Item: Copy,\n     |              ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::marker::Copy;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Copy;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Copy` in this scope",
                "spans": [
                  {
                    "byte_end": 59841,
                    "byte_start": 59837,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1736,
                    "line_start": 1736,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "    A::Item: Copy,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1800:14\n     |\n1800 |     A::Item: Clone,\n     |              ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::clone::Clone;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 61994,
                    "byte_start": 61989,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1800,
                    "line_start": 1800,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "    A::Item: Clone,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `AsRef` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1866:16\n     |\n1866 | impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {\n     |                ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::convert::AsRef;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::convert::AsRef;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `AsRef` in this scope",
                "spans": [
                  {
                    "byte_end": 63889,
                    "byte_start": 63884,
                    "column_end": 21,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1866,
                    "line_start": 1866,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 16,
                        "text": "impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `AsMut` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:1873:16\n     |\n1873 | impl<A: Array> AsMut<[A::Item]> for SmallVec<A> {\n     |                ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::convert::AsMut;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::convert::AsMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `AsMut` in this scope",
                "spans": [
                  {
                    "byte_end": 64012,
                    "byte_start": 64007,
                    "column_end": 21,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1873,
                    "line_start": 1873,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 16,
                        "text": "impl<A: Array> AsMut<[A::Item]> for SmallVec<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2024:20\n     |\n2024 | impl<'a, A: Array> From<&'a [A::Item]> for SmallVec<A>\n     |                    ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::convert::From;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::convert::From;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 67519,
                    "byte_start": 67515,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2024,
                    "line_start": 2024,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "impl<'a, A: Array> From<&'a [A::Item]> for SmallVec<A>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2026:14\n     |\n2026 |     A::Item: Clone,\n     |              ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::clone::Clone;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 67575,
                    "byte_start": 67570,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2026,
                    "line_start": 2026,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "    A::Item: Clone,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2041:16\n     |\n2041 | impl<A: Array> From<Vec<A::Item>> for SmallVec<A> {\n     |                ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::convert::From;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::convert::From;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 67902,
                    "byte_start": 67898,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2041,
                    "line_start": 2041,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "impl<A: Array> From<Vec<A::Item>> for SmallVec<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2048:16\n     |\n2048 | impl<A: Array> From<A> for SmallVec<A> {\n     |                ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::convert::From;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::convert::From;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 68057,
                    "byte_start": 68053,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2048,
                    "line_start": 2048,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "impl<A: Array> From<A> for SmallVec<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Copy` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2072:14\n     |\n2072 |     A::Item: Copy,\n     |              ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::marker::Copy;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Copy;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Copy` in this scope",
                "spans": [
                  {
                    "byte_end": 68635,
                    "byte_start": 68631,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2072,
                    "line_start": 2072,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "    A::Item: Copy,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Extend` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2088:16\n     |\n2088 | impl<A: Array> Extend<A::Item> for SmallVec<A> {\n     |                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::iter::Extend;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::iter::Extend;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Extend` in this scope",
                "spans": [
                  {
                    "byte_end": 69008,
                    "byte_start": 69002,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2088,
                    "line_start": 2088,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "impl<A: Array> Extend<A::Item> for SmallVec<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2099:24\n     |\n2099 |                 if let Some(out) = iter.next() {\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 69476,
                    "byte_start": 69472,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2099,
                    "line_start": 2099,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                if let Some(out) = iter.next() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2123:16\n     |\n2123 | impl<A: Array> Default for SmallVec<A> {\n     |                ^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::default::Default;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 69990,
                    "byte_start": 69983,
                    "column_end": 23,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2123,
                    "line_start": 2123,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 16,
                        "text": "impl<A: Array> Default for SmallVec<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2145:16\n     |\n2145 | impl<A: Array> Drop for SmallVec<A> {\n     |                ^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::ops::Drop;\n     |\n113  + use core::ops::Drop;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 70545,
                    "byte_start": 70541,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2145,
                    "line_start": 2145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "impl<A: Array> Drop for SmallVec<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function `drop` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2150:17\n     |\n2150 |                 drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));\n     |                 ^^^^ not found in this scope\n     |\nhelp: consider using the method on `Self`\n     |\n2150 |                 self.drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));\n     |                 +++++\nhelp: consider importing one of these functions\n     |\n113  + use crate::mem::drop;\n     |\n113  + use core::mem::drop;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using the method on `Self`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 70714,
                        "byte_start": 70714,
                        "column_end": 17,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2150,
                        "line_start": 2150,
                        "suggested_replacement": "self.",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 17,
                            "text": "                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these functions",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::mem::drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::mem::drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function `drop` in this scope",
                "spans": [
                  {
                    "byte_end": 70718,
                    "byte_start": 70714,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2150,
                    "line_start": 2150,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2158:16\n     |\n2158 | impl<A: Array> Clone for SmallVec<A>\n     |                ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::clone::Clone;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 70900,
                    "byte_start": 70895,
                    "column_end": 21,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2158,
                    "line_start": 2158,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 16,
                        "text": "impl<A: Array> Clone for SmallVec<A>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2160:14\n     |\n2160 |     A::Item: Clone,\n     |              ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::clone::Clone;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 70941,
                    "byte_start": 70936,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2160,
                    "line_start": 2160,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "    A::Item: Clone,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2183:26\n     |\n2183 | impl<A: Array, B: Array> PartialEq<SmallVec<B>> for SmallVec<A>\n     |                          ^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::PartialEq;\n     |\n113  + use core::cmp::PartialEq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 71583,
                    "byte_start": 71574,
                    "column_end": 35,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2183,
                    "line_start": 2183,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 26,
                        "text": "impl<A: Array, B: Array> PartialEq<SmallVec<B>> for SmallVec<A>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2185:14\n     |\n2185 |     A::Item: PartialEq<B::Item>,\n     |              ^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::PartialEq;\n     |\n113  + use core::cmp::PartialEq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 71641,
                    "byte_start": 71632,
                    "column_end": 23,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2185,
                    "line_start": 2185,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 14,
                        "text": "    A::Item: PartialEq<B::Item>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2193:16\n     |\n2193 | impl<A: Array> Eq for SmallVec<A> where A::Item: Eq {}\n     |                ^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::Eq;\n     |\n113  + use core::cmp::Eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::Eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::Eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Eq` in this scope",
                "spans": [
                  {
                    "byte_end": 71772,
                    "byte_start": 71770,
                    "column_end": 18,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2193,
                    "line_start": 2193,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 16,
                        "text": "impl<A: Array> Eq for SmallVec<A> where A::Item: Eq {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2193:50\n     |\n2193 | impl<A: Array> Eq for SmallVec<A> where A::Item: Eq {}\n     |                                                  ^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::Eq;\n     |\n113  + use core::cmp::Eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::Eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::Eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Eq` in this scope",
                "spans": [
                  {
                    "byte_end": 71806,
                    "byte_start": 71804,
                    "column_end": 52,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2193,
                    "line_start": 2193,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 50,
                        "text": "impl<A: Array> Eq for SmallVec<A> where A::Item: Eq {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialOrd` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2195:16\n     |\n2195 | impl<A: Array> PartialOrd for SmallVec<A>\n     |                ^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::PartialOrd;\n     |\n113  + use core::cmp::PartialOrd;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::PartialOrd;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::PartialOrd;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialOrd` in this scope",
                "spans": [
                  {
                    "byte_end": 71836,
                    "byte_start": 71826,
                    "column_end": 26,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2195,
                    "line_start": 2195,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 16,
                        "text": "impl<A: Array> PartialOrd for SmallVec<A>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialOrd` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2197:14\n     |\n2197 |     A::Item: PartialOrd,\n     |              ^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::PartialOrd;\n     |\n113  + use core::cmp::PartialOrd;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::PartialOrd;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::PartialOrd;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialOrd` in this scope",
                "spans": [
                  {
                    "byte_end": 71882,
                    "byte_start": 71872,
                    "column_end": 24,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2197,
                    "line_start": 2197,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 14,
                        "text": "    A::Item: PartialOrd,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2200:51\n     |\n2200 |     fn partial_cmp(&self, other: &SmallVec<A>) -> Option<cmp::Ordering> {\n     |                                                   ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n113  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 71956,
                    "byte_start": 71950,
                    "column_end": 57,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2200,
                    "line_start": 2200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 51,
                        "text": "    fn partial_cmp(&self, other: &SmallVec<A>) -> Option<cmp::Ordering> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `PartialOrd`\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2201:9\n     |\n2201 |         PartialOrd::partial_cmp(&**self, &**other)\n     |         ^^^^^^^^^^ use of undeclared type `PartialOrd`\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::PartialOrd;\n     |\n113  + use core::cmp::PartialOrd;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::PartialOrd;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::PartialOrd;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `PartialOrd`",
                "spans": [
                  {
                    "byte_end": 71992,
                    "byte_start": 71982,
                    "column_end": 19,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `PartialOrd`",
                    "line_end": 2201,
                    "line_start": 2201,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 9,
                        "text": "        PartialOrd::partial_cmp(&**self, &**other)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Ord` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2205:16\n     |\n2205 | impl<A: Array> Ord for SmallVec<A>\n     |                ^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::Ord;\n     |\n113  + use core::cmp::Ord;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Ord` in this scope",
                "spans": [
                  {
                    "byte_end": 72052,
                    "byte_start": 72049,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2205,
                    "line_start": 2205,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "impl<A: Array> Ord for SmallVec<A>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Ord` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2207:14\n     |\n2207 |     A::Item: Ord,\n     |              ^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::Ord;\n     |\n113  + use core::cmp::Ord;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Ord` in this scope",
                "spans": [
                  {
                    "byte_end": 72091,
                    "byte_start": 72088,
                    "column_end": 17,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2207,
                    "line_start": 2207,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 14,
                        "text": "    A::Item: Ord,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `Ord`\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2211:9\n     |\n2211 |         Ord::cmp(&**self, &**other)\n     |         ^^^ use of undeclared type `Ord`\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::cmp::Ord;\n     |\n113  + use core::cmp::Ord;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `Ord`",
                "spans": [
                  {
                    "byte_end": 72178,
                    "byte_start": 72175,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `Ord`",
                    "line_end": 2211,
                    "line_start": 2211,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Ord::cmp(&**self, &**other)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2224:23\n     |\n2224 | unsafe impl<A: Array> Send for SmallVec<A> where A::Item: Send {}\n     |                       ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::marker::Send;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 72386,
                    "byte_start": 72382,
                    "column_end": 27,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2224,
                    "line_start": 2224,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 23,
                        "text": "unsafe impl<A: Array> Send for SmallVec<A> where A::Item: Send {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2224:59\n     |\n2224 | unsafe impl<A: Array> Send for SmallVec<A> where A::Item: Send {}\n     |                                                           ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::marker::Send;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 72422,
                    "byte_start": 72418,
                    "column_end": 63,
                    "column_start": 59,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2224,
                    "line_start": 2224,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 59,
                        "text": "unsafe impl<A: Array> Send for SmallVec<A> where A::Item: Send {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2246:24\n     |\n2246 | impl<A: Array + Clone> Clone for IntoIter<A>\n     |                        ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::clone::Clone;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 72938,
                    "byte_start": 72933,
                    "column_end": 29,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2246,
                    "line_start": 2246,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 24,
                        "text": "impl<A: Array + Clone> Clone for IntoIter<A>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2246:17\n     |\n2246 | impl<A: Array + Clone> Clone for IntoIter<A>\n     |                 ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::clone::Clone;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 72931,
                    "byte_start": 72926,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2246,
                    "line_start": 2246,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "impl<A: Array + Clone> Clone for IntoIter<A>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2248:14\n     |\n2248 |     A::Item: Clone,\n     |              ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::clone::Clone;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 72979,
                    "byte_start": 72974,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2248,
                    "line_start": 2248,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "    A::Item: Clone,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2255:16\n     |\n2255 | impl<A: Array> Drop for IntoIter<A> {\n     |                ^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::ops::Drop;\n     |\n113  + use core::ops::Drop;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 73100,
                    "byte_start": 73096,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2255,
                    "line_start": 2255,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "impl<A: Array> Drop for IntoIter<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2261:16\n     |\n2261 | impl<A: Array> Iterator for IntoIter<A> {\n     |                ^^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::iter::Iterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 73201,
                    "byte_start": 73193,
                    "column_end": 24,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2261,
                    "line_start": 2261,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 16,
                        "text": "impl<A: Array> Iterator for IntoIter<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2265:27\n     |\n2265 |     fn next(&mut self) -> Option<A::Item> {\n     |                           ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n113  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 73292,
                    "byte_start": 73286,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2265,
                    "line_start": 2265,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<A::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2267:13\n     |\n2267 |             None\n     |             ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n113  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 73358,
                    "byte_start": 73354,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2267,
                    "line_start": 2267,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2272:17\n     |\n2272 |                 Some(ptr::read(self.data.as_ptr().add(current)))\n     |                 ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 73496,
                    "byte_start": 73492,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2272,
                    "line_start": 2272,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(ptr::read(self.data.as_ptr().add(current)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2278:36\n     |\n2278 |     fn size_hint(&self) -> (usize, Option<usize>) {\n     |                                    ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n113  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 73627,
                    "byte_start": 73621,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2278,
                    "line_start": 2278,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn size_hint(&self) -> (usize, Option<usize>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2280:16\n     |\n2280 |         (size, Some(size))\n     |                ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 73701,
                    "byte_start": 73697,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2280,
                    "line_start": 2280,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        (size, Some(size))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2284:16\n     |\n2284 | impl<A: Array> DoubleEndedIterator for IntoIter<A> {\n     |                ^^^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::iter::DoubleEndedIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 73752,
                    "byte_start": 73733,
                    "column_end": 35,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2284,
                    "line_start": 2284,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 16,
                        "text": "impl<A: Array> DoubleEndedIterator for IntoIter<A> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2286:32\n     |\n2286 |     fn next_back(&mut self) -> Option<A::Item> {\n     |                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n113  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 73822,
                    "byte_start": 73816,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2286,
                    "line_start": 2286,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<A::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2288:13\n     |\n2288 |             None\n     |             ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n113  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 73888,
                    "byte_start": 73884,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2288,
                    "line_start": 2288,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2292:17\n     |\n2292 |                 Some(ptr::read(self.data.as_ptr().add(self.end)))\n     |                 ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n113  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 73978,
                    "byte_start": 73974,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2292,
                    "line_start": 2292,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(ptr::read(self.data.as_ptr().add(self.end)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `ExactSizeIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2298:16\n     |\n2298 | impl<A: Array> ExactSizeIterator for IntoIter<A> {}\n     |                ^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::iter::ExactSizeIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `ExactSizeIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 74089,
                    "byte_start": 74072,
                    "column_end": 33,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2298,
                    "line_start": 2298,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 16,
                        "text": "impl<A: Array> ExactSizeIterator for IntoIter<A> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2384:10\n     |\n2384 | impl<'a> Drop for SetLenOnDrop<'a> {\n     |          ^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n113  + use crate::ops::Drop;\n     |\n113  + use core::ops::Drop;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use crate::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 76412,
                    "byte_start": 76408,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2384,
                    "line_start": 2384,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "impl<'a> Drop for SetLenOnDrop<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Copy` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2470:14\n     |\n2470 |     A::Item: Copy,\n     |              ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::marker::Copy;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Copy;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Copy` in this scope",
                "spans": [
                  {
                    "byte_end": 79286,
                    "byte_start": 79282,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2470,
                    "line_start": 2470,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "    A::Item: Copy,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2484:30\n     |\n2484 |     fn new(ptr: *const T) -> Option<Self> {\n     |                              ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n113  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 79567,
                    "byte_start": 79561,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2484,
                    "line_start": 2484,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn new(ptr: *const T) -> Option<Self> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2493:9\n     |\n2493 | impl<T> Clone for ConstNonNull<T> {\n     |         ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::clone::Clone;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 79722,
                    "byte_start": 79717,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2493,
                    "line_start": 2493,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "impl<T> Clone for ConstNonNull<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Copy` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2500:9\n     |\n2500 | impl<T> Copy for ConstNonNull<T> {}\n     |         ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n113  + use core::marker::Copy;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4400,
                        "byte_start": 4400,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "use core::marker::Copy;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[allow(deprecated)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Copy` in this scope",
                "spans": [
                  {
                    "byte_end": 79824,
                    "byte_start": 79820,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 2500,
                    "line_start": 2500,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "impl<T> Copy for ConstNonNull<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n85 | impl_write_num!(u8, i8, test_u8);\n   | -------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of unresolved module or unlinked crate `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3507,
                        "byte_start": 3475,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 85,
                        "line_start": 85,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u8, i8, test_u8);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n86 | impl_write_num!(u16, i16, test_u16);\n   | ----------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of unresolved module or unlinked crate `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3544,
                        "byte_start": 3509,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u16, i16, test_u16);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0432]: unresolved import `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n85 | impl_write_num!(u8, i8, test_u8);\n   | -------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0432",
                  "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
                },
                "level": "error",
                "message": "unresolved import `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3507,
                        "byte_start": 3475,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 85,
                        "line_start": 85,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u8, i8, test_u8);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n87 | impl_write_num!(u32, i32, test_u32);\n   | ----------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of unresolved module or unlinked crate `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3581,
                        "byte_start": 3546,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u32, i32, test_u32);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0432]: unresolved import `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n86 | impl_write_num!(u16, i16, test_u16);\n   | ----------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0432",
                  "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
                },
                "level": "error",
                "message": "unresolved import `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3544,
                        "byte_start": 3509,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u16, i16, test_u16);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n88 | impl_write_num!(u64, i64, test_u64);\n   | ----------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of unresolved module or unlinked crate `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3618,
                        "byte_start": 3583,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u64, i64, test_u64);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0432]: unresolved import `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n87 | impl_write_num!(u32, i32, test_u32);\n   | ----------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0432",
                  "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
                },
                "level": "error",
                "message": "unresolved import `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3581,
                        "byte_start": 3546,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u32, i32, test_u32);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n89 | impl_write_num!(u128, i128, test_u128);\n   | -------------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of unresolved module or unlinked crate `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3658,
                        "byte_start": 3620,
                        "column_end": 39,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u128, i128, test_u128);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0432]: unresolved import `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n88 | impl_write_num!(u64, i64, test_u64);\n   | ----------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0432",
                  "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
                },
                "level": "error",
                "message": "unresolved import `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3618,
                        "byte_start": 3583,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u64, i64, test_u64);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of unresolved module or unlinked crate `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n90 | impl_write_num!(usize, isize, test_usize);\n   | ----------------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of unresolved module or unlinked crate `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3701,
                        "byte_start": 3660,
                        "column_end": 42,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 90,
                        "line_start": 90,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "impl_write_num!(usize, isize, test_usize);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0432]: unresolved import `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n89 | impl_write_num!(u128, i128, test_u128);\n   | -------------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0432",
                  "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
                },
                "level": "error",
                "message": "unresolved import `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3658,
                        "byte_start": 3620,
                        "column_end": 39,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u128, i128, test_u128);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0432]: unresolved import `rand`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:74:17\n   |\n74 |             use rand::{rngs::SmallRng, Rng, SeedableRng};\n   |                 ^^^^ use of unresolved module or unlinked crate `rand`\n...\n90 | impl_write_num!(usize, isize, test_usize);\n   | ----------------------------------------- in this macro invocation\n   |\n   = help: if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you wanted to use a crate named `rand`, use `cargo add rand` to add it to your `Cargo.toml`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0432",
                  "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
                },
                "level": "error",
                "message": "unresolved import `rand`",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3097,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3701,
                        "byte_start": 3660,
                        "column_end": 42,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 90,
                        "line_start": 90,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "impl_write_num!(usize, isize, test_usize);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "use of unresolved module or unlinked crate `rand`",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "            use rand::{rngs::SmallRng, Rng, SeedableRng};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `matches` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs:39:12\n   |\n39 |         if matches!(self.result, Ordering::Equal) && !self.string.is_empty() {\n   |            ^^^^^^^\n   |\nhelp: consider importing this macro\n   |\n5  + use core::matches;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::matches;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use core::cmp::Ordering;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `matches` in this scope",
                "spans": [
                  {
                    "byte_end": 1126,
                    "byte_start": 1119,
                    "column_end": 19,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 12,
                        "text": "        if matches!(self.result, Ordering::Equal) && !self.string.is_empty() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:23:21\n   |\n23 |                     debug_assert_eq!(*self, 0);\n   |                     ^^^^^^^^^^^^^^^\n...\n85 | impl_write_num!(u8, i8, test_u8);\n   | -------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   |\n5  + use core::debug_assert_eq;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 919,
                    "byte_start": 904,
                    "column_end": 36,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3507,
                        "byte_start": 3475,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 85,
                        "line_start": 85,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u8, i8, test_u8);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 21,
                        "text": "                    debug_assert_eq!(*self, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `test` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:50:11\n   |\n50 |         #[test]\n   |           ^^^^\n...\n85 | impl_write_num!(u8, i8, test_u8);\n   | -------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `test` in this scope",
                "spans": [
                  {
                    "byte_end": 1907,
                    "byte_start": 1903,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3507,
                        "byte_start": 3475,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 85,
                        "line_start": 85,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u8, i8, test_u8);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "        #[test]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:23:21\n   |\n23 |                     debug_assert_eq!(*self, 0);\n   |                     ^^^^^^^^^^^^^^^\n...\n86 | impl_write_num!(u16, i16, test_u16);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   |\n5  + use core::debug_assert_eq;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 919,
                    "byte_start": 904,
                    "column_end": 36,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3544,
                        "byte_start": 3509,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u16, i16, test_u16);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 21,
                        "text": "                    debug_assert_eq!(*self, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `test` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:50:11\n   |\n50 |         #[test]\n   |           ^^^^\n...\n86 | impl_write_num!(u16, i16, test_u16);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `test` in this scope",
                "spans": [
                  {
                    "byte_end": 1907,
                    "byte_start": 1903,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3544,
                        "byte_start": 3509,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u16, i16, test_u16);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "        #[test]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:23:21\n   |\n23 |                     debug_assert_eq!(*self, 0);\n   |                     ^^^^^^^^^^^^^^^\n...\n87 | impl_write_num!(u32, i32, test_u32);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   |\n5  + use core::debug_assert_eq;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 919,
                    "byte_start": 904,
                    "column_end": 36,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3581,
                        "byte_start": 3546,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u32, i32, test_u32);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 21,
                        "text": "                    debug_assert_eq!(*self, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `test` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:50:11\n   |\n50 |         #[test]\n   |           ^^^^\n...\n87 | impl_write_num!(u32, i32, test_u32);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `test` in this scope",
                "spans": [
                  {
                    "byte_end": 1907,
                    "byte_start": 1903,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3581,
                        "byte_start": 3546,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u32, i32, test_u32);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "        #[test]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:23:21\n   |\n23 |                     debug_assert_eq!(*self, 0);\n   |                     ^^^^^^^^^^^^^^^\n...\n88 | impl_write_num!(u64, i64, test_u64);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   |\n5  + use core::debug_assert_eq;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 919,
                    "byte_start": 904,
                    "column_end": 36,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3618,
                        "byte_start": 3583,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u64, i64, test_u64);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 21,
                        "text": "                    debug_assert_eq!(*self, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `test` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:50:11\n   |\n50 |         #[test]\n   |           ^^^^\n...\n88 | impl_write_num!(u64, i64, test_u64);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `test` in this scope",
                "spans": [
                  {
                    "byte_end": 1907,
                    "byte_start": 1903,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3618,
                        "byte_start": 3583,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u64, i64, test_u64);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "        #[test]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:23:21\n   |\n23 |                     debug_assert_eq!(*self, 0);\n   |                     ^^^^^^^^^^^^^^^\n...\n89 | impl_write_num!(u128, i128, test_u128);\n   | -------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   |\n5  + use core::debug_assert_eq;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 919,
                    "byte_start": 904,
                    "column_end": 36,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3658,
                        "byte_start": 3620,
                        "column_end": 39,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u128, i128, test_u128);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 21,
                        "text": "                    debug_assert_eq!(*self, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `test` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:50:11\n   |\n50 |         #[test]\n   |           ^^^^\n...\n89 | impl_write_num!(u128, i128, test_u128);\n   | -------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `test` in this scope",
                "spans": [
                  {
                    "byte_end": 1907,
                    "byte_start": 1903,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3658,
                        "byte_start": 3620,
                        "column_end": 39,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u128, i128, test_u128);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "        #[test]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#critical-section@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\critical-section-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "critical_section",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\critical-section-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libcritical_section-515b2e07b29d6266.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:23:21\n   |\n23 |                     debug_assert_eq!(*self, 0);\n   |                     ^^^^^^^^^^^^^^^\n...\n90 | impl_write_num!(usize, isize, test_usize);\n   | ----------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   |\n5  + use core::debug_assert_eq;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 919,
                    "byte_start": 904,
                    "column_end": 36,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3701,
                        "byte_start": 3660,
                        "column_end": 42,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 90,
                        "line_start": 90,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "impl_write_num!(usize, isize, test_usize);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 21,
                        "text": "                    debug_assert_eq!(*self, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `test` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:50:11\n   |\n50 |         #[test]\n   |           ^^^^\n...\n90 | impl_write_num!(usize, isize, test_usize);\n   | ----------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `test` in this scope",
                "spans": [
                  {
                    "byte_end": 1907,
                    "byte_start": 1903,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3701,
                        "byte_start": 3660,
                        "column_end": 42,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 90,
                        "line_start": 90,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "impl_write_num!(usize, isize, test_usize);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "        #[test]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `test` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:234:3\n    |\n234 | #[test]\n    |   ^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `test` in this scope",
                "spans": [
                  {
                    "byte_end": 7672,
                    "byte_start": 7668,
                    "column_end": 7,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 234,
                    "line_start": 234,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 7,
                        "highlight_start": 3,
                        "text": "#[test]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:421:9\n    |\n421 |         assert_eq!(actual_str, $expected_str, $($arg)*);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:237:9\n    |\n237 |         assert_writeable_eq!(&writeables[0], \"\");\n    |         ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 13887,
                    "byte_start": 13878,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7831,
                                "byte_start": 7791,
                                "column_end": 49,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 237,
                                "line_start": 237,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[0], \"\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 421,
                    "line_start": 421,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_str, $expected_str, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:422:9\n    |\n422 |         assert_eq!(actual_str, $crate::Writeable::write_to_string(actual_writeable), $($arg)+);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:237:9\n    |\n237 |         assert_writeable_eq!(&writeables[0], \"\");\n    |         ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 13944,
                    "byte_start": 13935,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7831,
                                "byte_start": 7791,
                                "column_end": 49,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 237,
                                "line_start": 237,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[0], \"\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 422,
                    "line_start": 422,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_str, $crate::Writeable::write_to_string(actual_writeable), $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:425:9\n    |\n425 |         assert!(\n    |         ^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:237:9\n    |\n237 |         assert_writeable_eq!(&writeables[0], \"\");\n    |         ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 14158,
                    "byte_start": 14152,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7831,
                                "byte_start": 7791,
                                "column_end": 49,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 237,
                                "line_start": 237,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[0], \"\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 425,
                    "line_start": 425,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:431:13\n    |\n431 |             assert!(\n    |             ^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:237:9\n    |\n237 |         assert_writeable_eq!(&writeables[0], \"\");\n    |         ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 14382,
                    "byte_start": 14376,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7831,
                                "byte_start": 7791,
                                "column_end": 49,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 237,
                                "line_start": 237,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[0], \"\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 431,
                    "line_start": 431,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:437:9\n    |\n437 |         assert_eq!(actual_writeable.to_string(), $expected_str);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:237:9\n    |\n237 |         assert_writeable_eq!(&writeables[0], \"\");\n    |         ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 14587,
                    "byte_start": 14578,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7831,
                                "byte_start": 7791,
                                "column_end": 49,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 237,
                                "line_start": 237,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[0], \"\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 437,
                    "line_start": 437,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_writeable.to_string(), $expected_str);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:439:9\n    |\n439 |         assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:237:9\n    |\n237 |         assert_writeable_eq!(&writeables[0], \"\");\n    |         ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 14759,
                    "byte_start": 14750,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7831,
                                "byte_start": 7791,
                                "column_end": 49,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 237,
                                "line_start": 237,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[0], \"\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 439,
                    "line_start": 439,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:441:9\n    |\n441 |         assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:237:9\n    |\n237 |         assert_writeable_eq!(&writeables[0], \"\");\n    |         ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 14933,
                    "byte_start": 14924,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7831,
                                "byte_start": 7791,
                                "column_end": 49,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 237,
                                "line_start": 237,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[0], \"\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 441,
                    "line_start": 441,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:444:13\n    |\n444 |             assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);\n    |             ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:237:9\n    |\n237 |         assert_writeable_eq!(&writeables[0], \"\");\n    |         ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 15137,
                    "byte_start": 15128,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7831,
                                "byte_start": 7791,
                                "column_end": 49,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 237,
                                "line_start": 237,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[0], \"\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 444,
                    "line_start": 444,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "            assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:421:9\n    |\n421 |         assert_eq!(actual_str, $expected_str, $($arg)*);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:238:9\n    |\n238 |         assert_writeable_eq!(&writeables[1], \"abc\");\n    |         ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 13887,
                    "byte_start": 13878,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7884,
                                "byte_start": 7841,
                                "column_end": 52,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 238,
                                "line_start": 238,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[1], \"abc\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 421,
                    "line_start": 421,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_str, $expected_str, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:422:9\n    |\n422 |         assert_eq!(actual_str, $crate::Writeable::write_to_string(actual_writeable), $($arg)+);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:238:9\n    |\n238 |         assert_writeable_eq!(&writeables[1], \"abc\");\n    |         ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 13944,
                    "byte_start": 13935,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7884,
                                "byte_start": 7841,
                                "column_end": 52,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 238,
                                "line_start": 238,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[1], \"abc\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 422,
                    "line_start": 422,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_str, $crate::Writeable::write_to_string(actual_writeable), $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:425:9\n    |\n425 |         assert!(\n    |         ^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:238:9\n    |\n238 |         assert_writeable_eq!(&writeables[1], \"abc\");\n    |         ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 14158,
                    "byte_start": 14152,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7884,
                                "byte_start": 7841,
                                "column_end": 52,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 238,
                                "line_start": 238,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[1], \"abc\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 425,
                    "line_start": 425,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:431:13\n    |\n431 |             assert!(\n    |             ^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:238:9\n    |\n238 |         assert_writeable_eq!(&writeables[1], \"abc\");\n    |         ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 14382,
                    "byte_start": 14376,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7884,
                                "byte_start": 7841,
                                "column_end": 52,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 238,
                                "line_start": 238,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[1], \"abc\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 431,
                    "line_start": 431,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:437:9\n    |\n437 |         assert_eq!(actual_writeable.to_string(), $expected_str);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:238:9\n    |\n238 |         assert_writeable_eq!(&writeables[1], \"abc\");\n    |         ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 14587,
                    "byte_start": 14578,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7884,
                                "byte_start": 7841,
                                "column_end": 52,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 238,
                                "line_start": 238,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[1], \"abc\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 437,
                    "line_start": 437,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_writeable.to_string(), $expected_str);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:439:9\n    |\n439 |         assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:238:9\n    |\n238 |         assert_writeable_eq!(&writeables[1], \"abc\");\n    |         ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 14759,
                    "byte_start": 14750,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7884,
                                "byte_start": 7841,
                                "column_end": 52,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 238,
                                "line_start": 238,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[1], \"abc\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 439,
                    "line_start": 439,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:441:9\n    |\n441 |         assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:238:9\n    |\n238 |         assert_writeable_eq!(&writeables[1], \"abc\");\n    |         ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 14933,
                    "byte_start": 14924,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7884,
                                "byte_start": 7841,
                                "column_end": 52,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 238,
                                "line_start": 238,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[1], \"abc\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 441,
                    "line_start": 441,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:444:13\n    |\n444 |             assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);\n    |             ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:238:9\n    |\n238 |         assert_writeable_eq!(&writeables[1], \"abc\");\n    |         ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 15137,
                    "byte_start": 15128,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7884,
                                "byte_start": 7841,
                                "column_end": 52,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 238,
                                "line_start": 238,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[1], \"abc\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 444,
                    "line_start": 444,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "            assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:239:9\n    |\n239 |         assert!(matches!(writeables[0].write_to_string(), Cow::Borrowed(_)));\n    |         ^^^^^^\n    |\nhelp: consider importing this macro\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 7900,
                    "byte_start": 7894,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 239,
                    "line_start": 239,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(matches!(writeables[0].write_to_string(), Cow::Borrowed(_)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:240:9\n    |\n240 |         assert!(matches!(writeables[1].write_to_string(), Cow::Borrowed(_)));\n    |         ^^^^^^\n    |\nhelp: consider importing this macro\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 7978,
                    "byte_start": 7972,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 240,
                    "line_start": 240,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(matches!(writeables[1].write_to_string(), Cow::Borrowed(_)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:421:9\n    |\n421 |         assert_eq!(actual_str, $expected_str, $($arg)*);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:255:9\n    |\n255 |         assert_writeable_eq!(&chars[i], s);\n    |         ---------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 13887,
                    "byte_start": 13878,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 8436,
                                "byte_start": 8402,
                                "column_end": 43,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 255,
                                "line_start": 255,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&chars[i], s);"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 421,
                    "line_start": 421,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_str, $expected_str, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:422:9\n    |\n422 |         assert_eq!(actual_str, $crate::Writeable::write_to_string(actual_writeable), $($arg)+);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:255:9\n    |\n255 |         assert_writeable_eq!(&chars[i], s);\n    |         ---------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 13944,
                    "byte_start": 13935,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 8436,
                                "byte_start": 8402,
                                "column_end": 43,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 255,
                                "line_start": 255,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&chars[i], s);"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 422,
                    "line_start": 422,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_str, $crate::Writeable::write_to_string(actual_writeable), $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:425:9\n    |\n425 |         assert!(\n    |         ^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:255:9\n    |\n255 |         assert_writeable_eq!(&chars[i], s);\n    |         ---------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 14158,
                    "byte_start": 14152,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 8436,
                                "byte_start": 8402,
                                "column_end": 43,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 255,
                                "line_start": 255,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&chars[i], s);"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 425,
                    "line_start": 425,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:431:13\n    |\n431 |             assert!(\n    |             ^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:255:9\n    |\n255 |         assert_writeable_eq!(&chars[i], s);\n    |         ---------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 14382,
                    "byte_start": 14376,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 8436,
                                "byte_start": 8402,
                                "column_end": 43,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 255,
                                "line_start": 255,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&chars[i], s);"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 431,
                    "line_start": 431,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:437:9\n    |\n437 |         assert_eq!(actual_writeable.to_string(), $expected_str);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:255:9\n    |\n255 |         assert_writeable_eq!(&chars[i], s);\n    |         ---------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 14587,
                    "byte_start": 14578,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 8436,
                                "byte_start": 8402,
                                "column_end": 43,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 255,
                                "line_start": 255,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&chars[i], s);"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 437,
                    "line_start": 437,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_writeable.to_string(), $expected_str);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:439:9\n    |\n439 |         assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:255:9\n    |\n255 |         assert_writeable_eq!(&chars[i], s);\n    |         ---------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 14759,
                    "byte_start": 14750,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 8436,
                                "byte_start": 8402,
                                "column_end": 43,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 255,
                                "line_start": 255,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&chars[i], s);"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 439,
                    "line_start": 439,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:441:9\n    |\n441 |         assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);\n    |         ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:255:9\n    |\n255 |         assert_writeable_eq!(&chars[i], s);\n    |         ---------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 14933,
                    "byte_start": 14924,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 8436,
                                "byte_start": 8402,
                                "column_end": 43,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 255,
                                "line_start": 255,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&chars[i], s);"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 441,
                    "line_start": 441,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:444:13\n    |\n444 |             assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);\n    |             ^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:255:9\n    |\n255 |         assert_writeable_eq!(&chars[i], s);\n    |         ---------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 15137,
                    "byte_start": 15128,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 8436,
                                "byte_start": 8402,
                                "column_end": 43,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 255,
                                "line_start": 255,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&chars[i], s);"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 444,
                    "line_start": 444,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "            assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:257:13\n    |\n257 |             assert_eq!(\n    |             ^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 8493,
                    "byte_start": 8484,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 257,
                    "line_start": 257,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "            assert_eq!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs:7:3\n  |\n7 | #[derive(Debug)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 226,
                    "byte_start": 220,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 7,
                    "line_start": 7,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:350:3\n    |\n350 | #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 12197,
                    "byte_start": 12191,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 350,
                    "line_start": 350,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:408:3\n    |\n408 | #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 13856,
                    "byte_start": 13850,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 408,
                    "line_start": 408,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `test` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:540:3\n    |\n540 | #[test]\n    |   ^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `test` in this scope",
                "spans": [
                  {
                    "byte_end": 19148,
                    "byte_start": 19144,
                    "column_end": 7,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 540,
                    "line_start": 540,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 7,
                        "highlight_start": 3,
                        "text": "#[test]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:487:9\n    |\n487 |         assert_eq!(actual_str, $expected_str, $($arg)*);\n    |         ^^^^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16574,
                    "byte_start": 16565,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 487,
                    "line_start": 487,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_str, $expected_str, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:488:9\n    |\n488 |         assert_eq!(actual_error, Result::<(), _>::from($expected_result).err(), $($arg)*);\n    |         ^^^^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16631,
                    "byte_start": 16622,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 488,
                    "line_start": 488,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_error, Result::<(), _>::from($expected_result).err(), $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:491:17\n    |\n491 |                 assert_eq!(actual_cow_str, $expected_str, $($arg)+);\n    |                 ^^^^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16841,
                    "byte_start": 16832,
                    "column_end": 26,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 491,
                    "line_start": 491,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 17,
                        "text": "                assert_eq!(actual_cow_str, $expected_str, $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:495:17\n    |\n495 |                 assert_eq!(actual_cow_str, $expected_str, $($arg)+);\n    |                 ^^^^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16989,
                    "byte_start": 16980,
                    "column_end": 26,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 495,
                    "line_start": 495,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 17,
                        "text": "                assert_eq!(actual_cow_str, $expected_str, $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:499:9\n    |\n499 |         assert_eq!(actual_result, Result::<(), _>::from($expected_result), $($arg)*);\n    |         ^^^^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17098,
                    "byte_start": 17089,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 499,
                    "line_start": 499,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_result, Result::<(), _>::from($expected_result), $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:501:9\n    |\n501 |         assert!(\n    |         ^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 17249,
                    "byte_start": 17243,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 501,
                    "line_start": 501,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:507:13\n    |\n507 |             assert!(\n    |             ^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 17505,
                    "byte_start": 17499,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 507,
                    "line_start": 507,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:514:9\n    |\n514 |         assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);\n    |         ^^^^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17821,
                    "byte_start": 17812,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 514,
                    "line_start": 514,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:516:9\n    |\n516 |         assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);\n    |         ^^^^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17975,
                    "byte_start": 17966,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 516,
                    "line_start": 516,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:519:13\n    |\n519 |             assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);\n    |             ^^^^^^^^^\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 18159,
                    "byte_start": 18150,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 519,
                    "line_start": 519,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "            assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:487:9\n    |\n487 |         assert_eq!(actual_str, $expected_str, $($arg)*);\n    |         ^^^^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16574,
                    "byte_start": 16565,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 487,
                    "line_start": 487,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_str, $expected_str, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:488:9\n    |\n488 |         assert_eq!(actual_error, Result::<(), _>::from($expected_result).err(), $($arg)*);\n    |         ^^^^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16631,
                    "byte_start": 16622,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 488,
                    "line_start": 488,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_error, Result::<(), _>::from($expected_result).err(), $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:491:17\n    |\n491 |                 assert_eq!(actual_cow_str, $expected_str, $($arg)+);\n    |                 ^^^^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16841,
                    "byte_start": 16832,
                    "column_end": 26,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 491,
                    "line_start": 491,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 17,
                        "text": "                assert_eq!(actual_cow_str, $expected_str, $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:495:17\n    |\n495 |                 assert_eq!(actual_cow_str, $expected_str, $($arg)+);\n    |                 ^^^^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16989,
                    "byte_start": 16980,
                    "column_end": 26,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 495,
                    "line_start": 495,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 17,
                        "text": "                assert_eq!(actual_cow_str, $expected_str, $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:499:9\n    |\n499 |         assert_eq!(actual_result, Result::<(), _>::from($expected_result), $($arg)*);\n    |         ^^^^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17098,
                    "byte_start": 17089,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 499,
                    "line_start": 499,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_result, Result::<(), _>::from($expected_result), $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:501:9\n    |\n501 |         assert!(\n    |         ^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 17249,
                    "byte_start": 17243,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 501,
                    "line_start": 501,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:507:13\n    |\n507 |             assert!(\n    |             ^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 17505,
                    "byte_start": 17499,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 507,
                    "line_start": 507,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:514:9\n    |\n514 |         assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);\n    |         ^^^^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17821,
                    "byte_start": 17812,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 514,
                    "line_start": 514,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:516:9\n    |\n516 |         assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);\n    |         ^^^^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17975,
                    "byte_start": 17966,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 516,
                    "line_start": 516,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:519:13\n    |\n519 |             assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);\n    |             ^^^^^^^^^\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 18159,
                    "byte_start": 18150,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 519,
                    "line_start": 519,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "            assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:487:9\n    |\n487 |         assert_eq!(actual_str, $expected_str, $($arg)*);\n    |         ^^^^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16574,
                    "byte_start": 16565,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 487,
                    "line_start": 487,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_str, $expected_str, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:488:9\n    |\n488 |         assert_eq!(actual_error, Result::<(), _>::from($expected_result).err(), $($arg)*);\n    |         ^^^^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16631,
                    "byte_start": 16622,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 488,
                    "line_start": 488,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_error, Result::<(), _>::from($expected_result).err(), $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:491:17\n    |\n491 |                 assert_eq!(actual_cow_str, $expected_str, $($arg)+);\n    |                 ^^^^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16841,
                    "byte_start": 16832,
                    "column_end": 26,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 491,
                    "line_start": 491,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 17,
                        "text": "                assert_eq!(actual_cow_str, $expected_str, $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:495:17\n    |\n495 |                 assert_eq!(actual_cow_str, $expected_str, $($arg)+);\n    |                 ^^^^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16989,
                    "byte_start": 16980,
                    "column_end": 26,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 495,
                    "line_start": 495,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 17,
                        "text": "                assert_eq!(actual_cow_str, $expected_str, $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:499:9\n    |\n499 |         assert_eq!(actual_result, Result::<(), _>::from($expected_result), $($arg)*);\n    |         ^^^^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17098,
                    "byte_start": 17089,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 499,
                    "line_start": 499,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_result, Result::<(), _>::from($expected_result), $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:501:9\n    |\n501 |         assert!(\n    |         ^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 17249,
                    "byte_start": 17243,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 501,
                    "line_start": 501,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:507:13\n    |\n507 |             assert!(\n    |             ^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 17505,
                    "byte_start": 17499,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 507,
                    "line_start": 507,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            assert!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:514:9\n    |\n514 |         assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);\n    |         ^^^^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17821,
                    "byte_start": 17812,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 514,
                    "line_start": 514,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Equal, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:516:9\n    |\n516 |         assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);\n    |         ^^^^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17975,
                    "byte_start": 17966,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 516,
                    "line_start": 516,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(ordering, core::cmp::Ordering::Less, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:519:13\n    |\n519 |             assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);\n    |             ^^^^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 18159,
                    "byte_start": 18150,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 519,
                    "line_start": 519,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "            assert_eq!(ordering, core::cmp::Ordering::Greater, $($arg)*);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:536:9\n    |\n536 |         assert_eq!(actual_parts, $expected_parts, $($arg)+);\n    |         ^^^^^^^^^\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_parts_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this macro\n    |\n5   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 19087,
                    "byte_start": 19078,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18393,
                        "byte_start": 18351,
                        "column_end": 43,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 527,
                        "line_start": 527,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_parts_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                      "span": {
                        "byte_end": 18815,
                        "byte_start": 18704,
                        "column_end": 120,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 19444,
                            "byte_start": 19368,
                            "column_end": 81,
                            "column_start": 5,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 546,
                            "line_start": 546,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 81,
                                "highlight_start": 5,
                                "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 532,
                        "line_start": 532,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 120,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 536,
                    "line_start": 536,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(actual_parts, $expected_parts, $($arg)+);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:109:3\n    |\n109 | #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 3518,
                    "byte_start": 3512,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 109,
                    "line_start": 109,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, PartialEq, Eq, Copy, Clone)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:183:3\n    |\n183 | #[derive(Clone, Copy, Debug, PartialEq)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 5862,
                    "byte_start": 5856,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 183,
                    "line_start": 183,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Copy, Debug, PartialEq)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `Drain<'a, T>` is not an iterator\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:400:38\n    |\n400 | impl<'a, T: Array> FusedIterator for Drain<'a, T> {}\n    |                                      ^^^^^^^^^^^^ `Drain<'a, T>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `Drain<'a, T>`\nnote: required by a bound in `FusedIterator`\n   --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n    |\n32  | pub trait FusedIterator: Iterator {}\n    |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `Drain<'a, T>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`Drain<'a, T>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 12901,
                    "byte_start": 12889,
                    "column_end": 50,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "`Drain<'a, T>` is not an iterator",
                    "line_end": 400,
                    "line_start": 400,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 38,
                        "text": "impl<'a, T: Array> FusedIterator for Drain<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `IntoIter<A>` is not an iterator\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2299:34\n     |\n2299 | impl<A: Array> FusedIterator for IntoIter<A> {}\n     |                                  ^^^^^^^^^^^ `IntoIter<A>` is not an iterator\n     |\n     = help: the trait `Iterator` is not implemented for `IntoIter<A>`\nnote: required by a bound in `FusedIterator`\n    --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n     |\n32   | pub trait FusedIterator: Iterator {}\n     |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `IntoIter<A>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`IntoIter<A>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 74153,
                    "byte_start": 74142,
                    "column_end": 45,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "`IntoIter<A>` is not an iterator",
                    "line_end": 2299,
                    "line_start": 2299,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 34,
                        "text": "impl<A: Array> FusedIterator for IntoIter<A> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `IntoIter<A>` is not an iterator\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs:2316:21\n     |\n2316 |     type IntoIter = IntoIter<A>;\n     |                     ^^^^^^^^^^^ `IntoIter<A>` is not an iterator\n     |\n     = help: the trait `Iterator` is not implemented for `IntoIter<A>`\nnote: required by a bound in `core::iter::IntoIterator::IntoIter`\n    --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs:292:20\n     |\n292  |     type IntoIter: Iterator<Item = Self::Item>;\n     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `IntoIterator::IntoIter`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `IntoIter<A>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `core::iter::IntoIterator::IntoIter`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9231,
                        "byte_start": 9204,
                        "column_end": 47,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs",
                        "is_primary": true,
                        "label": "required by this bound in `IntoIterator::IntoIter`",
                        "line_end": 292,
                        "line_start": 292,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 20,
                            "text": "    type IntoIter: Iterator<Item = Self::Item>;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`IntoIter<A>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 74790,
                    "byte_start": 74779,
                    "column_end": 32,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "`IntoIter<A>` is not an iterator",
                    "line_end": 2316,
                    "line_start": 2316,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 21,
                        "text": "    type IntoIter = IntoIter<A>;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0277, E0405, E0412, E0425, E0433, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0277, E0405, E0412, E0425, E0433, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0277`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0277`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#litemap@0.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\litemap-0.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "litemap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\litemap-0.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\liblitemap-7aeda5f850b6e105.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs:18:20\n   |\n18 |             return Ok(());\n   |                    ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n5  + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use core::cmp::Ordering;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 583,
                    "byte_start": 581,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 18,
                    "line_start": 18,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "            return Ok(());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs:24:9\n   |\n24 |         Ok(())\n   |         ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n5  + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use core::cmp::Ordering;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 825,
                    "byte_start": 823,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 24,
                    "line_start": 24,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `AsRef` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs:30:34\n   |\n30 |     pub fn new(string: &'a (impl AsRef<[u8]> + ?Sized)) -> Self {\n   |                                  ^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n5  + use core::convert::AsRef;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::convert::AsRef;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use core::cmp::Ordering;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `AsRef` in this scope",
                "spans": [
                  {
                    "byte_end": 922,
                    "byte_start": 917,
                    "column_end": 39,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 34,
                        "text": "    pub fn new(string: &'a (impl AsRef<[u8]> + ?Sized)) -> Self {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs:30:49\n   |\n30 |     pub fn new(string: &'a (impl AsRef<[u8]> + ?Sized)) -> Self {\n   |                                                 ^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use core::cmp::Ordering;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 937,
                    "byte_start": 932,
                    "column_end": 54,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 49,
                        "text": "    pub fn new(string: &'a (impl AsRef<[u8]> + ?Sized)) -> Self {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:48\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n85 | impl_write_num!(u8, i8, test_u8);\n   | -------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 387,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3507,
                        "byte_start": 3475,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 85,
                        "line_start": 85,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u8, i8, test_u8);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:48\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n85 | impl_write_num!(u8, i8, test_u8);\n   | -------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1435,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3507,
                        "byte_start": 3475,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 85,
                        "line_start": 85,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u8, i8, test_u8);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:48\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n86 | impl_write_num!(u16, i16, test_u16);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 387,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3544,
                        "byte_start": 3509,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u16, i16, test_u16);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:48\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n86 | impl_write_num!(u16, i16, test_u16);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1435,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3544,
                        "byte_start": 3509,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u16, i16, test_u16);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:48\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n87 | impl_write_num!(u32, i32, test_u32);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 387,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3581,
                        "byte_start": 3546,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u32, i32, test_u32);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:48\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n87 | impl_write_num!(u32, i32, test_u32);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1435,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3581,
                        "byte_start": 3546,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u32, i32, test_u32);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:48\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n88 | impl_write_num!(u64, i64, test_u64);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 387,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3618,
                        "byte_start": 3583,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u64, i64, test_u64);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:48\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n88 | impl_write_num!(u64, i64, test_u64);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1435,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3618,
                        "byte_start": 3583,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u64, i64, test_u64);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:48\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n89 | impl_write_num!(u128, i128, test_u128);\n   | -------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 387,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3658,
                        "byte_start": 3620,
                        "column_end": 39,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u128, i128, test_u128);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:48\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n89 | impl_write_num!(u128, i128, test_u128);\n   | -------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1435,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3658,
                        "byte_start": 3620,
                        "column_end": 39,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u128, i128, test_u128);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:48\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n90 | impl_write_num!(usize, isize, test_usize);\n   | ----------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 387,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3701,
                        "byte_start": 3660,
                        "column_end": 42,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 90,
                        "line_start": 90,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "impl_write_num!(usize, isize, test_usize);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:48\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                                ^^^^^ not found in this scope\n...\n90 | impl_write_num!(usize, isize, test_usize);\n   | ----------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1435,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3701,
                        "byte_start": 3660,
                        "column_end": 42,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 90,
                        "line_start": 90,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "impl_write_num!(usize, isize, test_usize);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:94:34\n   |\n94 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n   |                                  ^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 3781,
                    "byte_start": 3776,
                    "column_end": 39,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 94,
                    "line_start": 94,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 34,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:127:34\n    |\n127 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                  ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 4530,
                    "byte_start": 4525,
                    "column_end": 39,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 127,
                    "line_start": 127,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 34,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:149:34\n    |\n149 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                  ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5019,
                    "byte_start": 5014,
                    "column_end": 39,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 149,
                    "line_start": 149,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 34,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:171:22\n    |\n171 | impl<T: Writeable + ?Sized> Writeable for &T {\n    |                      ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5567,
                    "byte_start": 5562,
                    "column_end": 27,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 171,
                    "line_start": 171,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 22,
                        "text": "impl<T: Writeable + ?Sized> Writeable for &T {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:173:34\n    |\n173 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                  ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5640,
                    "byte_start": 5635,
                    "column_end": 39,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 173,
                    "line_start": 173,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 34,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:178:40\n    |\n178 |     fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                        ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5776,
                    "byte_start": 5771,
                    "column_end": 45,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 178,
                    "line_start": 178,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 40,
                        "text": "    fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:200:22\n    |\n200 |         impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {\n    |                      ^^^^^ not found in this scope\n...\n229 | impl_write_smart_pointer!(Cow<'a, T>, T: alloc::borrow::ToOwned);\n    | ---------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6319,
                    "byte_start": 6314,
                    "column_end": 27,
                    "column_start": 22,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7521,
                        "byte_start": 7457,
                        "column_end": 65,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 229,
                        "line_start": 229,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 1,
                            "text": "impl_write_smart_pointer!(Cow<'a, T>, T: alloc::borrow::ToOwned);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 22,
                        "text": "        impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:202:42\n    |\n202 |             fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                          ^^^^^ not found in this scope\n...\n229 | impl_write_smart_pointer!(Cow<'a, T>, T: alloc::borrow::ToOwned);\n    | ---------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6436,
                    "byte_start": 6431,
                    "column_end": 47,
                    "column_start": 42,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7521,
                        "byte_start": 7457,
                        "column_end": 65,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 229,
                        "line_start": 229,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 1,
                            "text": "impl_write_smart_pointer!(Cow<'a, T>, T: alloc::borrow::ToOwned);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 42,
                        "text": "            fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:206:48\n    |\n206 |             fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                                ^^^^^ not found in this scope\n...\n229 | impl_write_smart_pointer!(Cow<'a, T>, T: alloc::borrow::ToOwned);\n    | ---------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6635,
                    "byte_start": 6630,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7521,
                        "byte_start": 7457,
                        "column_end": 65,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 229,
                        "line_start": 229,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 1,
                            "text": "impl_write_smart_pointer!(Cow<'a, T>, T: alloc::borrow::ToOwned);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:200:22\n    |\n200 |         impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {\n    |                      ^^^^^ not found in this scope\n...\n230 | impl_write_smart_pointer!(alloc::boxed::Box<T>);\n    | ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6319,
                    "byte_start": 6314,
                    "column_end": 27,
                    "column_start": 22,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7570,
                            "byte_start": 7523,
                            "column_end": 48,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 230,
                            "line_start": 230,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 48,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::boxed::Box<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 22,
                        "text": "        impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:202:42\n    |\n202 |             fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                          ^^^^^ not found in this scope\n...\n230 | impl_write_smart_pointer!(alloc::boxed::Box<T>);\n    | ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6436,
                    "byte_start": 6431,
                    "column_end": 47,
                    "column_start": 42,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7570,
                            "byte_start": 7523,
                            "column_end": 48,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 230,
                            "line_start": 230,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 48,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::boxed::Box<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 42,
                        "text": "            fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:206:48\n    |\n206 |             fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                                ^^^^^ not found in this scope\n...\n230 | impl_write_smart_pointer!(alloc::boxed::Box<T>);\n    | ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6635,
                    "byte_start": 6630,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7570,
                            "byte_start": 7523,
                            "column_end": 48,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 230,
                            "line_start": 230,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 48,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::boxed::Box<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:200:22\n    |\n200 |         impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {\n    |                      ^^^^^ not found in this scope\n...\n231 | impl_write_smart_pointer!(alloc::rc::Rc<T>);\n    | ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6319,
                    "byte_start": 6314,
                    "column_end": 27,
                    "column_start": 22,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7615,
                            "byte_start": 7572,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 231,
                            "line_start": 231,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::rc::Rc<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 22,
                        "text": "        impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:202:42\n    |\n202 |             fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                          ^^^^^ not found in this scope\n...\n231 | impl_write_smart_pointer!(alloc::rc::Rc<T>);\n    | ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6436,
                    "byte_start": 6431,
                    "column_end": 47,
                    "column_start": 42,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7615,
                            "byte_start": 7572,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 231,
                            "line_start": 231,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::rc::Rc<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 42,
                        "text": "            fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:206:48\n    |\n206 |             fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                                ^^^^^ not found in this scope\n...\n231 | impl_write_smart_pointer!(alloc::rc::Rc<T>);\n    | ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6635,
                    "byte_start": 6630,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7615,
                            "byte_start": 7572,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 231,
                            "line_start": 231,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::rc::Rc<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:200:22\n    |\n200 |         impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {\n    |                      ^^^^^ not found in this scope\n...\n232 | impl_write_smart_pointer!(alloc::sync::Arc<T>);\n    | ---------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6319,
                    "byte_start": 6314,
                    "column_end": 27,
                    "column_start": 22,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7663,
                            "byte_start": 7617,
                            "column_end": 47,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 232,
                            "line_start": 232,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::sync::Arc<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 22,
                        "text": "        impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:202:42\n    |\n202 |             fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                          ^^^^^ not found in this scope\n...\n232 | impl_write_smart_pointer!(alloc::sync::Arc<T>);\n    | ---------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6436,
                    "byte_start": 6431,
                    "column_end": 47,
                    "column_start": 42,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7663,
                            "byte_start": 7617,
                            "column_end": 47,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 232,
                            "line_start": 232,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::sync::Arc<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 42,
                        "text": "            fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:206:48\n    |\n206 |             fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                                ^^^^^ not found in this scope\n...\n232 | impl_write_smart_pointer!(alloc::sync::Arc<T>);\n    | ---------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6635,
                    "byte_start": 6630,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7663,
                            "byte_start": 7617,
                            "column_end": 47,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 232,
                            "line_start": 232,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::sync::Arc<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "            fn write_to_parts<W: PartsWrite + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:430:16\n    |\n430 |         if let Some(upper) = length_hint.1 {\n    |                ^^^^ not found in this scope\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:237:9\n    |\n237 |         assert_writeable_eq!(&writeables[0], \"\");\n    |         ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 14338,
                    "byte_start": 14334,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7831,
                                "byte_start": 7791,
                                "column_end": 49,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 237,
                                "line_start": 237,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[0], \"\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 430,
                    "line_start": 430,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(upper) = length_hint.1 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:430:16\n    |\n430 |         if let Some(upper) = length_hint.1 {\n    |                ^^^^ not found in this scope\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:238:9\n    |\n238 |         assert_writeable_eq!(&writeables[1], \"abc\");\n    |         ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 14338,
                    "byte_start": 14334,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 7884,
                                "byte_start": 7841,
                                "column_end": 52,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 238,
                                "line_start": 238,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&writeables[1], \"abc\");"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 430,
                    "line_start": 430,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(upper) = length_hint.1 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:430:16\n    |\n430 |         if let Some(upper) = length_hint.1 {\n    |                ^^^^ not found in this scope\n    |\n   ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:255:9\n    |\n255 |         assert_writeable_eq!(&chars[i], s);\n    |         ---------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_writeable_eq` which comes from the expansion of the macro `assert_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:5:1\n    |\n5   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 14338,
                    "byte_start": 14334,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 13276,
                        "byte_start": 13244,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 410,
                        "line_start": 410,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_writeable_eq!",
                      "span": {
                        "byte_end": 13580,
                        "byte_start": 13497,
                        "column_end": 92,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 13276,
                            "byte_start": 13244,
                            "column_end": 33,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 410,
                            "line_start": 410,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_writeable_eq!",
                          "span": {
                            "byte_end": 13413,
                            "byte_start": 13347,
                            "column_end": 75,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 13276,
                                "byte_start": 13244,
                                "column_end": 33,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 410,
                                "line_start": 410,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_writeable_eq!",
                              "span": {
                                "byte_end": 8436,
                                "byte_start": 8402,
                                "column_end": 43,
                                "column_start": 9,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 255,
                                "line_start": 255,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 9,
                                    "text": "        assert_writeable_eq!(&chars[i], s);"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 412,
                            "line_start": 412,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 75,
                                "highlight_start": 9,
                                "text": "        $crate::assert_writeable_eq!($actual_writeable, $expected_str, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 415,
                        "line_start": 415,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 9,
                            "text": "        $crate::assert_writeable_eq!(@internal, $actual_writeable, $expected_str, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 430,
                    "line_start": 430,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(upper) = length_hint.1 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Box` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:272:16\n    |\n272 |     let arr: &[Box<str>] = &[\"\".into(), \"abc\".into()];\n    |                ^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n5   + use crate::impls::alloc::boxed::Box;\n    |\n5   + use alloc::boxed::Box;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these structs",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::impls::alloc::boxed::Box;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::boxed::Box;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Box` in this scope",
                "spans": [
                  {
                    "byte_end": 8885,
                    "byte_start": 8882,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 272,
                    "line_start": 272,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "    let arr: &[Box<str>] = &[\"\".into(), \"abc\".into()];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:14:18\n   |\n14 |                 (Some(c), Some(d)) => c.checked_add(d),\n   |                  ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n5  + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 470,
                    "byte_start": 466,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "                (Some(c), Some(d)) => c.checked_add(d),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:14:27\n   |\n14 |                 (Some(c), Some(d)) => c.checked_add(d),\n   |                           ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n5  + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 479,
                    "byte_start": 475,
                    "column_end": 31,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 27,
                        "text": "                (Some(c), Some(d)) => c.checked_add(d),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:15:22\n   |\n15 |                 _ => None,\n   |                      ^^^^ not found in this scope\n   |\nhelp: consider importing this unit variant\n   |\n5  + use core::option::Option::None;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 530,
                    "byte_start": 526,
                    "column_end": 26,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 15,
                    "line_start": 15,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 22,
                        "text": "                _ => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:30:12\n   |\n30 |         I: Iterator<Item = LengthHint>,\n   |            ^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n5  + use core::iter::Iterator;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 815,
                    "byte_start": 807,
                    "column_end": 20,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 12,
                        "text": "        I: Iterator<Item = LengthHint>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `Ord`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:101:13\n    |\n101 |             Ord::min(self.0, other.0),\n    |             ^^^ use of undeclared type `Ord`\n    |\nhelp: consider importing this trait\n    |\n5   + use core::cmp::Ord;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `Ord`",
                "spans": [
                  {
                    "byte_end": 2725,
                    "byte_start": 2722,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `Ord`",
                    "line_end": 101,
                    "line_start": 101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Ord::min(self.0, other.0),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:103:18\n    |\n103 |                 (Some(c), Some(d)) => Some(Ord::max(c, d)),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2808,
                    "byte_start": 2804,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "                (Some(c), Some(d)) => Some(Ord::max(c, d)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:103:27\n    |\n103 |                 (Some(c), Some(d)) => Some(Ord::max(c, d)),\n    |                           ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2817,
                    "byte_start": 2813,
                    "column_end": 31,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 27,
                        "text": "                (Some(c), Some(d)) => Some(Ord::max(c, d)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:103:39\n    |\n103 |                 (Some(c), Some(d)) => Some(Ord::max(c, d)),\n    |                                       ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2829,
                    "byte_start": 2825,
                    "column_end": 43,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 39,
                        "text": "                (Some(c), Some(d)) => Some(Ord::max(c, d)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `Ord`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:103:44\n    |\n103 |                 (Some(c), Some(d)) => Some(Ord::max(c, d)),\n    |                                            ^^^ use of undeclared type `Ord`\n    |\nhelp: consider importing this trait\n    |\n5   + use core::cmp::Ord;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `Ord`",
                "spans": [
                  {
                    "byte_end": 2833,
                    "byte_start": 2830,
                    "column_end": 47,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `Ord`",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 44,
                        "text": "                (Some(c), Some(d)) => Some(Ord::max(c, d)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:104:22\n    |\n104 |                 _ => None,\n    |                      ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n5   + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 2872,
                    "byte_start": 2868,
                    "column_end": 26,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 104,
                    "line_start": 104,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 22,
                        "text": "                _ => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs:119:12\n    |\n119 |         I: Iterator<Item = usize>,\n    |            ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::iter::Iterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::LengthHint;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 3156,
                    "byte_start": 3148,
                    "column_end": 20,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\ops.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 119,
                    "line_start": 119,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 12,
                        "text": "        I: Iterator<Item = usize>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs:9:51\n  |\n9 | pub struct CoreWriteAsPartsWrite<W: fmt::Write + ?Sized>(pub W);\n  |                                                   ^^^^^ not found in this scope\n  |\nhelp: consider importing this trait\n  |\n5 + use core::marker::Sized;\n  |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 338,
                    "byte_start": 333,
                    "column_end": 56,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 51,
                        "text": "pub struct CoreWriteAsPartsWrite<W: fmt::Write + ?Sized>(pub W);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs:11:23\n   |\n11 | impl<W: fmt::Write + ?Sized> fmt::Write for CoreWriteAsPartsWrite<W> {\n   |                       ^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 376,
                    "byte_start": 371,
                    "column_end": 28,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 23,
                        "text": "impl<W: fmt::Write + ?Sized> fmt::Write for CoreWriteAsPartsWrite<W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs:23:23\n   |\n23 | impl<W: fmt::Write + ?Sized> PartsWrite for CoreWriteAsPartsWrite<W> {\n   |                       ^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n5  + use core::marker::Sized;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 657,
                    "byte_start": 652,
                    "column_end": 28,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 23,
                        "text": "impl<W: fmt::Write + ?Sized> PartsWrite for CoreWriteAsPartsWrite<W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs:30:21\n   |\n30 |         mut f: impl FnMut(&mut Self::SubPartsWrite) -> fmt::Result,\n   |                     ^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n5  + use core::ops::FnMut;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 850,
                    "byte_start": 845,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "        mut f: impl FnMut(&mut Self::SubPartsWrite) -> fmt::Result,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\testing.rs:37:21\n   |\n37 |         mut f: impl FnMut(&mut Self::SubPartsWrite) -> fmt::Result,\n   |                     ^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n5  + use core::ops::FnMut;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\testing.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 1035,
                    "byte_start": 1030,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\testing.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "        mut f: impl FnMut(&mut Self::SubPartsWrite) -> fmt::Result,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\testing.rs:45:9\n   |\n45 |         Ok(())\n   |         ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n5  + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\testing.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1289,
                    "byte_start": 1287,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\testing.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\testing.rs:67:42\n   |\n67 | ) -> (String, Vec<(usize, usize, Part)>, Option<W::Error>) {\n   |                                          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n5  + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\testing.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1890,
                    "byte_start": 1884,
                    "column_end": 48,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\testing.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 42,
                        "text": ") -> (String, Vec<(usize, usize, Part)>, Option<W::Error>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:150:38\n    |\n150 |     fn try_write_to<W: fmt::Write + ?Sized>(\n    |                                      ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5254,
                    "byte_start": 5249,
                    "column_end": 43,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 150,
                    "line_start": 150,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 38,
                        "text": "    fn try_write_to<W: fmt::Write + ?Sized>("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:153:10\n    |\n153 |     ) -> Result<Result<(), Self::Error>, fmt::Error> {\n    |          ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 5309,
                    "byte_start": 5303,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 153,
                    "line_start": 153,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    ) -> Result<Result<(), Self::Error>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:153:17\n    |\n153 |     ) -> Result<Result<(), Self::Error>, fmt::Error> {\n    |                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 5316,
                    "byte_start": 5310,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 153,
                    "line_start": 153,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    ) -> Result<Result<(), Self::Error>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:164:44\n    |\n164 |     fn try_write_to_parts<S: PartsWrite + ?Sized>(\n    |                                            ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5766,
                    "byte_start": 5761,
                    "column_end": 49,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 44,
                        "text": "    fn try_write_to_parts<S: PartsWrite + ?Sized>("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:167:10\n    |\n167 |     ) -> Result<Result<(), Self::Error>, fmt::Error>;\n    |          ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 5821,
                    "byte_start": 5815,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 167,
                    "line_start": 167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    ) -> Result<Result<(), Self::Error>, fmt::Error>;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:167:17\n    |\n167 |     ) -> Result<Result<(), Self::Error>, fmt::Error>;\n    |                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 5828,
                    "byte_start": 5822,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 167,
                    "line_start": 167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    ) -> Result<Result<(), Self::Error>, fmt::Error>;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:195:38\n    |\n195 |     fn try_write_to_string(&self) -> Result<Cow<str>, (Self::Error, Cow<str>)> {\n    |                                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 6847,
                    "byte_start": 6841,
                    "column_end": 44,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 195,
                    "line_start": 195,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 38,
                        "text": "    fn try_write_to_string(&self) -> Result<Cow<str>, (Self::Error, Cow<str>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:198:20\n    |\n198 |             return Ok(Cow::Borrowed(\"\"));\n    |                    ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 6983,
                    "byte_start": 6981,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 198,
                    "line_start": 198,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "            return Ok(Cow::Borrowed(\"\"));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:203:42\n    |\n203 |             .unwrap_or_else(|fmt::Error| Ok(()))\n    |                                          ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 7180,
                    "byte_start": 7178,
                    "column_end": 44,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 203,
                    "line_start": 203,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 42,
                        "text": "            .unwrap_or_else(|fmt::Error| Ok(()))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:205:13\n    |\n205 |             Ok(()) => Ok(Cow::Owned(output)),\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 7210,
                    "byte_start": 7208,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 205,
                    "line_start": 205,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(()) => Ok(Cow::Owned(output)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:205:23\n    |\n205 |             Ok(()) => Ok(Cow::Owned(output)),\n    |                       ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 7220,
                    "byte_start": 7218,
                    "column_end": 25,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 205,
                    "line_start": 205,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 23,
                        "text": "            Ok(()) => Ok(Cow::Owned(output)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:206:13\n    |\n206 |             Err(e) => Err((e, Cow::Owned(output))),\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 7257,
                    "byte_start": 7254,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(e) => Err((e, Cow::Owned(output))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:206:23\n    |\n206 |             Err(e) => Err((e, Cow::Owned(output))),\n    |                       ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 7267,
                    "byte_start": 7264,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "            Err(e) => Err((e, Cow::Owned(output))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:287:42\n    |\n287 |             .unwrap_or_else(|fmt::Error| Ok(()));\n    |                                          ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 10561,
                    "byte_start": 10559,
                    "column_end": 44,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 287,
                    "line_start": 287,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 42,
                        "text": "            .unwrap_or_else(|fmt::Error| Ok(()));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:292:29\n    |\n292 | impl<T, E> TryWriteable for Result<T, E>\n    |                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 10641,
                    "byte_start": 10635,
                    "column_end": 35,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 292,
                    "line_start": 292,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 29,
                        "text": "impl<T, E> TryWriteable for Result<T, E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:295:20\n    |\n295 |     E: Writeable + Clone,\n    |                    ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::clone::Clone;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 10696,
                    "byte_start": 10691,
                    "column_end": 25,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 295,
                    "line_start": 295,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 20,
                        "text": "    E: Writeable + Clone,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:300:38\n    |\n300 |     fn try_write_to<W: fmt::Write + ?Sized>(\n    |                                      ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 10777,
                    "byte_start": 10772,
                    "column_end": 43,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 300,
                    "line_start": 300,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 38,
                        "text": "    fn try_write_to<W: fmt::Write + ?Sized>("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:303:10\n    |\n303 |     ) -> Result<Result<(), Self::Error>, fmt::Error> {\n    |          ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 10832,
                    "byte_start": 10826,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 303,
                    "line_start": 303,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    ) -> Result<Result<(), Self::Error>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:303:17\n    |\n303 |     ) -> Result<Result<(), Self::Error>, fmt::Error> {\n    |                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 10839,
                    "byte_start": 10833,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 303,
                    "line_start": 303,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    ) -> Result<Result<(), Self::Error>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:305:13\n    |\n305 |             Ok(t) => t.write_to(sink).map(Ok),\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 10907,
                    "byte_start": 10905,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 305,
                    "line_start": 305,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(t) => t.write_to(sink).map(Ok),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:305:43\n    |\n305 |             Ok(t) => t.write_to(sink).map(Ok),\n    |                                           ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 10937,
                    "byte_start": 10935,
                    "column_end": 45,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 305,
                    "line_start": 305,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 43,
                        "text": "            Ok(t) => t.write_to(sink).map(Ok),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:306:13\n    |\n306 |             Err(e) => e.write_to(sink).map(|()| Err(e.clone())),\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 10955,
                    "byte_start": 10952,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 306,
                    "line_start": 306,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(e) => e.write_to(sink).map(|()| Err(e.clone())),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:306:49\n    |\n306 |             Err(e) => e.write_to(sink).map(|()| Err(e.clone())),\n    |                                                 ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 10991,
                    "byte_start": 10988,
                    "column_end": 52,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 306,
                    "line_start": 306,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 49,
                        "text": "            Err(e) => e.write_to(sink).map(|()| Err(e.clone())),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:311:44\n    |\n311 |     fn try_write_to_parts<S: PartsWrite + ?Sized>(\n    |                                            ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 11084,
                    "byte_start": 11079,
                    "column_end": 49,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 311,
                    "line_start": 311,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 44,
                        "text": "    fn try_write_to_parts<S: PartsWrite + ?Sized>("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:314:10\n    |\n314 |     ) -> Result<Result<(), Self::Error>, fmt::Error> {\n    |          ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 11139,
                    "byte_start": 11133,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 314,
                    "line_start": 314,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    ) -> Result<Result<(), Self::Error>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:314:17\n    |\n314 |     ) -> Result<Result<(), Self::Error>, fmt::Error> {\n    |                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 11146,
                    "byte_start": 11140,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 314,
                    "line_start": 314,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    ) -> Result<Result<(), Self::Error>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:316:13\n    |\n316 |             Ok(t) => t.write_to_parts(sink).map(Ok),\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11214,
                    "byte_start": 11212,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 316,
                    "line_start": 316,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(t) => t.write_to_parts(sink).map(Ok),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:316:49\n    |\n316 |             Ok(t) => t.write_to_parts(sink).map(Ok),\n    |                                                 ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11250,
                    "byte_start": 11248,
                    "column_end": 51,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 316,
                    "line_start": 316,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 49,
                        "text": "            Ok(t) => t.write_to_parts(sink).map(Ok),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:317:13\n    |\n317 |             Err(e) => sink\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 11268,
                    "byte_start": 11265,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 317,
                    "line_start": 317,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(e) => sink"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:319:27\n    |\n319 |                 .map(|()| Err(e.clone())),\n    |                           ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 11380,
                    "byte_start": 11377,
                    "column_end": 30,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 319,
                    "line_start": 319,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 27,
                        "text": "                .map(|()| Err(e.clone())),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:326:13\n    |\n326 |             Ok(t) => t.writeable_length_hint(),\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11512,
                    "byte_start": 11510,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 326,
                    "line_start": 326,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(t) => t.writeable_length_hint(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:327:13\n    |\n327 |             Err(e) => e.writeable_length_hint(),\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 11561,
                    "byte_start": 11558,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 327,
                    "line_start": 327,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(e) => e.writeable_length_hint(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:332:38\n    |\n332 |     fn try_write_to_string(&self) -> Result<Cow<str>, (Self::Error, Cow<str>)> {\n    |                                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 11669,
                    "byte_start": 11663,
                    "column_end": 44,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 332,
                    "line_start": 332,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 38,
                        "text": "    fn try_write_to_string(&self) -> Result<Cow<str>, (Self::Error, Cow<str>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:334:13\n    |\n334 |             Ok(t) => Ok(t.write_to_string()),\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11742,
                    "byte_start": 11740,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 334,
                    "line_start": 334,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(t) => Ok(t.write_to_string()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:334:22\n    |\n334 |             Ok(t) => Ok(t.write_to_string()),\n    |                      ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11751,
                    "byte_start": 11749,
                    "column_end": 24,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 334,
                    "line_start": 334,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 22,
                        "text": "            Ok(t) => Ok(t.write_to_string()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:335:13\n    |\n335 |             Err(e) => Err((e.clone(), e.write_to_string())),\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 11789,
                    "byte_start": 11786,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 335,
                    "line_start": 335,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(e) => Err((e.clone(), e.write_to_string())),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:335:23\n    |\n335 |             Err(e) => Err((e.clone(), e.write_to_string())),\n    |                       ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 11799,
                    "byte_start": 11796,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 335,
                    "line_start": 335,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "            Err(e) => Err((e.clone(), e.write_to_string())),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:342:13\n    |\n342 |             Ok(t) => t.writeable_cmp_bytes(other),\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11963,
                    "byte_start": 11961,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 342,
                    "line_start": 342,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(t) => t.writeable_cmp_bytes(other),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:343:13\n    |\n343 |             Err(e) => e.writeable_cmp_bytes(other),\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 12015,
                    "byte_start": 12012,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 343,
                    "line_start": 343,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(e) => e.writeable_cmp_bytes(other),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:360:34\n    |\n360 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                  ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 12549,
                    "byte_start": 12544,
                    "column_end": 39,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 360,
                    "line_start": 360,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 34,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:362:13\n    |\n362 |             Ok(Ok(())) => Ok(()),\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12645,
                    "byte_start": 12643,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 362,
                    "line_start": 362,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(Ok(())) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:362:16\n    |\n362 |             Ok(Ok(())) => Ok(()),\n    |                ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12648,
                    "byte_start": 12646,
                    "column_end": 18,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 362,
                    "line_start": 362,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 16,
                        "text": "            Ok(Ok(())) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:362:27\n    |\n362 |             Ok(Ok(())) => Ok(()),\n    |                           ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12659,
                    "byte_start": 12657,
                    "column_end": 29,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 362,
                    "line_start": 362,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 27,
                        "text": "            Ok(Ok(())) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:363:13\n    |\n363 |             Ok(Err(infallible)) => match infallible {},\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12679,
                    "byte_start": 12677,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 363,
                    "line_start": 363,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(Err(infallible)) => match infallible {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:363:16\n    |\n363 |             Ok(Err(infallible)) => match infallible {},\n    |                ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 12683,
                    "byte_start": 12680,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 363,
                    "line_start": 363,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "            Ok(Err(infallible)) => match infallible {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:364:13\n    |\n364 |             Err(e) => Err(e),\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 12736,
                    "byte_start": 12733,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 364,
                    "line_start": 364,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(e) => Err(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:364:23\n    |\n364 |             Err(e) => Err(e),\n    |                       ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 12746,
                    "byte_start": 12743,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 364,
                    "line_start": 364,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "            Err(e) => Err(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:369:40\n    |\n369 |     fn write_to_parts<S: PartsWrite + ?Sized>(&self, sink: &mut S) -> fmt::Result {\n    |                                        ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 12826,
                    "byte_start": 12821,
                    "column_end": 45,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 369,
                    "line_start": 369,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 40,
                        "text": "    fn write_to_parts<S: PartsWrite + ?Sized>(&self, sink: &mut S) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:371:13\n    |\n371 |             Ok(Ok(())) => Ok(()),\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12928,
                    "byte_start": 12926,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 371,
                    "line_start": 371,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(Ok(())) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:371:16\n    |\n371 |             Ok(Ok(())) => Ok(()),\n    |                ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12931,
                    "byte_start": 12929,
                    "column_end": 18,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 371,
                    "line_start": 371,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 16,
                        "text": "            Ok(Ok(())) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:371:27\n    |\n371 |             Ok(Ok(())) => Ok(()),\n    |                           ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12942,
                    "byte_start": 12940,
                    "column_end": 29,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 371,
                    "line_start": 371,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 27,
                        "text": "            Ok(Ok(())) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:372:13\n    |\n372 |             Ok(Err(infallible)) => match infallible {},\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12962,
                    "byte_start": 12960,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 372,
                    "line_start": 372,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(Err(infallible)) => match infallible {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:372:16\n    |\n372 |             Ok(Err(infallible)) => match infallible {},\n    |                ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 12966,
                    "byte_start": 12963,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 372,
                    "line_start": 372,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "            Ok(Err(infallible)) => match infallible {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:373:13\n    |\n373 |             Err(e) => Err(e),\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 13019,
                    "byte_start": 13016,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 373,
                    "line_start": 373,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(e) => Err(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:373:23\n    |\n373 |             Err(e) => Err(e),\n    |                       ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 13029,
                    "byte_start": 13026,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 373,
                    "line_start": 373,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "            Err(e) => Err(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:385:13\n    |\n385 |             Ok(s) => s,\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 13280,
                    "byte_start": 13278,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 385,
                    "line_start": 385,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(s) => s,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:386:13\n    |\n386 |             Err((infallible, _)) => match infallible {},\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 13305,
                    "byte_start": 13302,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 386,
                    "line_start": 386,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err((infallible, _)) => match infallible {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:420:38\n    |\n420 |     fn try_write_to<W: fmt::Write + ?Sized>(\n    |                                      ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 14222,
                    "byte_start": 14217,
                    "column_end": 43,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 420,
                    "line_start": 420,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 38,
                        "text": "    fn try_write_to<W: fmt::Write + ?Sized>("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:423:10\n    |\n423 |     ) -> Result<Result<(), Infallible>, fmt::Error> {\n    |          ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 14277,
                    "byte_start": 14271,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 423,
                    "line_start": 423,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    ) -> Result<Result<(), Infallible>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:423:17\n    |\n423 |     ) -> Result<Result<(), Infallible>, fmt::Error> {\n    |                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 14284,
                    "byte_start": 14278,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 423,
                    "line_start": 423,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    ) -> Result<Result<(), Infallible>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:424:35\n    |\n424 |         self.0.write_to(sink).map(Ok)\n    |                                   ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 14352,
                    "byte_start": 14350,
                    "column_end": 37,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 424,
                    "line_start": 424,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 35,
                        "text": "        self.0.write_to(sink).map(Ok)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:428:44\n    |\n428 |     fn try_write_to_parts<S: PartsWrite + ?Sized>(\n    |                                            ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n5   + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 14423,
                    "byte_start": 14418,
                    "column_end": 49,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 428,
                    "line_start": 428,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 44,
                        "text": "    fn try_write_to_parts<S: PartsWrite + ?Sized>("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:431:10\n    |\n431 |     ) -> Result<Result<(), Infallible>, fmt::Error> {\n    |          ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 14478,
                    "byte_start": 14472,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 431,
                    "line_start": 431,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    ) -> Result<Result<(), Infallible>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:431:17\n    |\n431 |     ) -> Result<Result<(), Infallible>, fmt::Error> {\n    |                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 14485,
                    "byte_start": 14479,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 431,
                    "line_start": 431,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    ) -> Result<Result<(), Infallible>, fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:432:41\n    |\n432 |         self.0.write_to_parts(sink).map(Ok)\n    |                                         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 14559,
                    "byte_start": 14557,
                    "column_end": 43,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 432,
                    "line_start": 432,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 41,
                        "text": "        self.0.write_to_parts(sink).map(Ok)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:441:38\n    |\n441 |     fn try_write_to_string(&self) -> Result<Cow<str>, (Infallible, Cow<str>)> {\n    |                                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 14737,
                    "byte_start": 14731,
                    "column_end": 44,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 441,
                    "line_start": 441,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 38,
                        "text": "    fn try_write_to_string(&self) -> Result<Cow<str>, (Infallible, Cow<str>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:442:9\n    |\n442 |         Ok(self.0.write_to_string())\n    |         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 14784,
                    "byte_start": 14782,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 442,
                    "line_start": 442,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(self.0.write_to_string())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:542:21\n    |\n542 |     let mut result: Result<&str, usize> = Ok(\"success\");\n    |                     ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n5   + use crate::try_writeable::alloc::fmt::Result;\n    |\n5   + use core::fmt::Result;\n    |\n5   + use core::result::Result;\n    |\n5   + use alloc::fmt::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use crate::try_writeable::alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      },
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use alloc::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 19209,
                    "byte_start": 19203,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 542,
                    "line_start": 542,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "    let mut result: Result<&str, usize> = Ok(\"success\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:542:43\n    |\n542 |     let mut result: Result<&str, usize> = Ok(\"success\");\n    |                                           ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 19227,
                    "byte_start": 19225,
                    "column_end": 45,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 542,
                    "line_start": 542,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 43,
                        "text": "    let mut result: Result<&str, usize> = Ok(\"success\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:490:13\n    |\n490 |             Ok(actual_cow_str) => {\n    |             ^^ not found in this scope\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 16794,
                    "byte_start": 16792,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 490,
                    "line_start": 490,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(actual_cow_str) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:492:17\n    |\n492 |                 Ok(())\n    |                 ^^ not found in this scope\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 16903,
                    "byte_start": 16901,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 492,
                    "line_start": 492,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:494:13\n    |\n494 |             Err((e, actual_cow_str)) => {\n    |             ^^^ not found in this scope\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 16937,
                    "byte_start": 16934,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 494,
                    "line_start": 494,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err((e, actual_cow_str)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:496:17\n    |\n496 |                 Err(e)\n    |                 ^^^ not found in this scope\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 17052,
                    "byte_start": 17049,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 496,
                    "line_start": 496,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err(e)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:506:16\n    |\n506 |         if let Some(upper) = length_hint.1 {\n    |                ^^^^ not found in this scope\n...\n543 |     assert_try_writeable_eq!(result, \"success\");\n    |     ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 17461,
                    "byte_start": 17457,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "$crate::assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 15836,
                                "byte_start": 15762,
                                "column_end": 83,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 15691,
                                    "byte_start": 15655,
                                    "column_end": 37,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 473,
                                    "line_start": 473,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 37,
                                        "highlight_start": 1,
                                        "text": "macro_rules! assert_try_writeable_eq {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "assert_try_writeable_eq!",
                                  "span": {
                                    "byte_end": 19287,
                                    "byte_start": 19244,
                                    "column_end": 48,
                                    "column_start": 5,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 543,
                                    "line_start": 543,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 48,
                                        "highlight_start": 5,
                                        "text": "    assert_try_writeable_eq!(result, \"success\");"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 475,
                                "line_start": 475,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 83,
                                    "highlight_start": 9,
                                    "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, Ok(()))"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 506,
                    "line_start": 506,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(upper) = length_hint.1 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:544:14\n    |\n544 |     result = Err(44);\n    |              ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 19305,
                    "byte_start": 19302,
                    "column_end": 17,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 544,
                    "line_start": 544,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 14,
                        "text": "    result = Err(44);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:490:13\n    |\n490 |             Ok(actual_cow_str) => {\n    |             ^^ not found in this scope\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 16794,
                    "byte_start": 16792,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 490,
                    "line_start": 490,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(actual_cow_str) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:492:17\n    |\n492 |                 Ok(())\n    |                 ^^ not found in this scope\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 16903,
                    "byte_start": 16901,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 492,
                    "line_start": 492,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:494:13\n    |\n494 |             Err((e, actual_cow_str)) => {\n    |             ^^^ not found in this scope\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 16937,
                    "byte_start": 16934,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 494,
                    "line_start": 494,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err((e, actual_cow_str)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:496:17\n    |\n496 |                 Err(e)\n    |                 ^^^ not found in this scope\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 17052,
                    "byte_start": 17049,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 496,
                    "line_start": 496,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err(e)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:506:16\n    |\n506 |         if let Some(upper) = length_hint.1 {\n    |                ^^^^ not found in this scope\n...\n545 |     assert_try_writeable_eq!(result, \"44\", Err(44));\n    |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 17461,
                    "byte_start": 17457,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 16235,
                        "byte_start": 16130,
                        "column_end": 114,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 15691,
                            "byte_start": 15655,
                            "column_end": 37,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 473,
                            "line_start": 473,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 37,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_eq!",
                          "span": {
                            "byte_end": 16023,
                            "byte_start": 15935,
                            "column_end": 97,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 15691,
                                "byte_start": 15655,
                                "column_end": 37,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 473,
                                "line_start": 473,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_eq!",
                              "span": {
                                "byte_end": 19362,
                                "byte_start": 19315,
                                "column_end": 52,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 545,
                                "line_start": 545,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_eq!(result, \"44\", Err(44));"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 478,
                            "line_start": 478,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 97,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_eq!($actual_writeable, $expected_str, $expected_result, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 114,
                            "highlight_start": 9,
                            "text": "        $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 506,
                    "line_start": 506,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(upper) = length_hint.1 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:490:13\n    |\n490 |             Ok(actual_cow_str) => {\n    |             ^^ not found in this scope\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 16794,
                    "byte_start": 16792,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 490,
                    "line_start": 490,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(actual_cow_str) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:492:17\n    |\n492 |                 Ok(())\n    |                 ^^ not found in this scope\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 16903,
                    "byte_start": 16901,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 492,
                    "line_start": 492,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:494:13\n    |\n494 |             Err((e, actual_cow_str)) => {\n    |             ^^^ not found in this scope\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 16937,
                    "byte_start": 16934,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 494,
                    "line_start": 494,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err((e, actual_cow_str)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:496:17\n    |\n496 |                 Err(e)\n    |                 ^^^ not found in this scope\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 17052,
                    "byte_start": 17049,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 496,
                    "line_start": 496,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err(e)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:506:16\n    |\n506 |         if let Some(upper) = length_hint.1 {\n    |                ^^^^ not found in this scope\n...\n546 |     assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])\n    |     ---------------------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `$crate::assert_try_writeable_eq` which comes from the expansion of the macro `assert_try_writeable_parts_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider importing this tuple variant\n    |\n5   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 203,
                        "byte_start": 203,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::*;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 17461,
                    "byte_start": 17457,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 15691,
                        "byte_start": 15655,
                        "column_end": 37,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 473,
                        "line_start": 473,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "macro_rules! assert_try_writeable_eq {"
                          }
                        ]
                      },
                      "macro_decl_name": "$crate::assert_try_writeable_eq!",
                      "span": {
                        "byte_end": 19068,
                        "byte_start": 18963,
                        "column_end": 133,
                        "column_start": 28,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 18393,
                            "byte_start": 18351,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 527,
                            "line_start": 527,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! assert_try_writeable_parts_eq {"
                              }
                            ]
                          },
                          "macro_decl_name": "$crate::assert_try_writeable_parts_eq!",
                          "span": {
                            "byte_end": 18815,
                            "byte_start": 18704,
                            "column_end": 120,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 18393,
                                "byte_start": 18351,
                                "column_end": 43,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 527,
                                "line_start": 527,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "macro_rules! assert_try_writeable_parts_eq {"
                                  }
                                ]
                              },
                              "macro_decl_name": "assert_try_writeable_parts_eq!",
                              "span": {
                                "byte_end": 19444,
                                "byte_start": 19368,
                                "column_end": 81,
                                "column_start": 5,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 546,
                                "line_start": 546,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 5,
                                    "text": "    assert_try_writeable_parts_eq!(result, \"44\", Err(44), [(0, 2, Part::ERROR)])"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 532,
                            "line_start": 532,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 120,
                                "highlight_start": 9,
                                "text": "        $crate::assert_try_writeable_parts_eq!($actual_writeable, $expected_str, $expected_result, $expected_parts, \"\")"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 535,
                        "line_start": 535,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 133,
                            "highlight_start": 28,
                            "text": "        let actual_parts = $crate::assert_try_writeable_eq!(@internal, $actual_writeable, $expected_str, $expected_result, $($arg)*);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 506,
                    "line_start": 506,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(upper) = length_hint.1 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:111:38\n    |\n111 | pub struct LengthHint(pub usize, pub Option<usize>);\n    |                                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n78  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3616,
                    "byte_start": 3610,
                    "column_end": 44,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 111,
                    "line_start": 111,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 38,
                        "text": "pub struct LengthHint(pub usize, pub Option<usize>);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:115:17\n    |\n115 |         Self(0, None)\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n78  + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3698,
                    "byte_start": 3694,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 115,
                    "line_start": 115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "        Self(0, None)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:120:17\n    |\n120 |         Self(n, Some(n))\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n78  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3809,
                    "byte_start": 3805,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 120,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "        Self(n, Some(n))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:125:17\n    |\n125 |         Self(n, None)\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n78  + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3927,
                    "byte_start": 3923,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "        Self(n, None)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:130:17\n    |\n130 |         Self(0, Some(n))\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n78  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4040,
                    "byte_start": 4036,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 130,
                    "line_start": 130,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "        Self(0, Some(n))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `Ord`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:135:14\n    |\n135 |         Self(Ord::min(n, m), Some(Ord::max(n, m)))\n    |              ^^^ use of undeclared type `Ord`\n    |\nhelp: consider importing this trait\n    |\n78  + use core::cmp::Ord;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `Ord`",
                "spans": [
                  {
                    "byte_end": 4172,
                    "byte_start": 4169,
                    "column_end": 17,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `Ord`",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 14,
                        "text": "        Self(Ord::min(n, m), Some(Ord::max(n, m)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:135:30\n    |\n135 |         Self(Ord::min(n, m), Some(Ord::max(n, m)))\n    |                              ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n78  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4189,
                    "byte_start": 4185,
                    "column_end": 34,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 30,
                        "text": "        Self(Ord::min(n, m), Some(Ord::max(n, m)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `Ord`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:135:35\n    |\n135 |         Self(Ord::min(n, m), Some(Ord::max(n, m)))\n    |                                   ^^^ use of undeclared type `Ord`\n    |\nhelp: consider importing this trait\n    |\n78  + use core::cmp::Ord;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::cmp::Ord;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `Ord`",
                "spans": [
                  {
                    "byte_end": 4193,
                    "byte_start": 4190,
                    "column_end": 38,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `Ord`",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 35,
                        "text": "        Self(Ord::min(n, m), Some(Ord::max(n, m)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:157:19\n    |\n157 |         self.1 == Some(0)\n    |                   ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n78  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4864,
                    "byte_start": 4860,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 157,
                    "line_start": 157,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "        self.1 == Some(0)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:202:39\n    |\n202 |     type SubPartsWrite: PartsWrite + ?Sized;\n    |                                       ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n78  + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6417,
                    "byte_start": 6412,
                    "column_end": 44,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 39,
                        "text": "    type SubPartsWrite: PartsWrite + ?Sized;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:207:17\n    |\n207 |         f: impl FnMut(&mut Self::SubPartsWrite) -> fmt::Result,\n    |                 ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n78  + use core::ops::FnMut;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 6498,
                    "byte_start": 6493,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 207,
                    "line_start": 207,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "        f: impl FnMut(&mut Self::SubPartsWrite) -> fmt::Result,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:216:34\n    |\n216 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                  ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n78  + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 6914,
                    "byte_start": 6909,
                    "column_end": 39,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 216,
                    "line_start": 216,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 34,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:223:40\n    |\n223 |     fn write_to_parts<S: PartsWrite + ?Sized>(&self, sink: &mut S) -> fmt::Result {\n    |                                        ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n78  + use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2366,
                        "byte_start": 2366,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::borrow::Cow;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 7299,
                    "byte_start": 7294,
                    "column_end": 45,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 223,
                    "line_start": 223,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 40,
                        "text": "    fn write_to_parts<S: PartsWrite + ?Sized>(&self, sink: &mut S) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0463, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0463, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0463`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0463`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_normalizer_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_normalizer_data-1.5.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: linking with `link.exe` failed: exit code: 1102\n  |\n  = note: \"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcKfsvbs\\\\symbols.o\" \"<2 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\icu_normalizer_data-c7e015324e0ef577\\\\build_script_build-c7e015324e0ef577.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"\n  = note: some arguments are omitted. use `--verbose` to show all linker arguments\n  = note: Microsoft (R) Incremental Linker Version 14.44.35209.0\u240d\n          Copyright (C) Microsoft Corporation.  All rights reserved.\u240d\n          \u240d\n          LINK : fatal error LNK1102: out of memory\u240d\n          \n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcKfsvbs\\\\symbols.o\" \"<2 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\icu_normalizer_data-c7e015324e0ef577\\\\build_script_build-c7e015324e0ef577.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "some arguments are omitted. use `--verbose` to show all linker arguments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "Microsoft (R) Incremental Linker Version 14.44.35209.0\r\nCopyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\nLINK : fatal error LNK1102: out of memory\r\n",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "linking with `link.exe` failed: exit code: 1102",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: linking with `link.exe` failed: exit code: 1102\n  |\n  = note: \"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcvCAbBC\\\\symbols.o\" \"<2 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\windows_x86_64_msvc-733c1e19d91d737a\\\\build_script_build-733c1e19d91d737a.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"\n  = note: some arguments are omitted. use `--verbose` to show all linker arguments\n  = note: Microsoft (R) Incremental Linker Version 14.44.35209.0\u240d\n          Copyright (C) Microsoft Corporation.  All rights reserved.\u240d\n          \u240d\n          LINK : fatal error LNK1102: out of memory\u240d\n          \n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcvCAbBC\\\\symbols.o\" \"<2 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\windows_x86_64_msvc-733c1e19d91d737a\\\\build_script_build-733c1e19d91d737a.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "some arguments are omitted. use `--verbose` to show all linker arguments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "Microsoft (R) Incremental Linker Version 14.44.35209.0\r\nCopyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\nLINK : fatal error LNK1102: out of memory\r\n",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "linking with `link.exe` failed: exit code: 1102",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:216:33\n    |\n216 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                 ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 6914,
                    "byte_start": 6908,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 216,
                    "line_start": 216,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs:223:39\n    |\n223 |     fn write_to_parts<S: PartsWrite + ?Sized>(&self, sink: &mut S) -> fmt::Result {\n    |                                       ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 7299,
                    "byte_start": 7293,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 223,
                    "line_start": 223,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "    fn write_to_parts<S: PartsWrite + ?Sized>(&self, sink: &mut S) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs:30:48\n   |\n30 |     pub fn new(string: &'a (impl AsRef<[u8]> + ?Sized)) -> Self {\n   |                                                ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 937,
                    "byte_start": 931,
                    "column_end": 54,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\cmp.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 48,
                        "text": "    pub fn new(string: &'a (impl AsRef<[u8]> + ?Sized)) -> Self {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:47\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n85 | impl_write_num!(u8, i8, test_u8);\n   | -------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 386,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3507,
                        "byte_start": 3475,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 85,
                        "line_start": 85,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u8, i8, test_u8);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:47\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n85 | impl_write_num!(u8, i8, test_u8);\n   | -------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1434,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3507,
                        "byte_start": 3475,
                        "column_end": 33,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 85,
                        "line_start": 85,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u8, i8, test_u8);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:47\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n86 | impl_write_num!(u16, i16, test_u16);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 386,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3544,
                        "byte_start": 3509,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u16, i16, test_u16);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:47\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n86 | impl_write_num!(u16, i16, test_u16);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1434,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3544,
                        "byte_start": 3509,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u16, i16, test_u16);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:47\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n87 | impl_write_num!(u32, i32, test_u32);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 386,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3581,
                        "byte_start": 3546,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u32, i32, test_u32);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:47\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n87 | impl_write_num!(u32, i32, test_u32);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1434,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3581,
                        "byte_start": 3546,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u32, i32, test_u32);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:47\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n88 | impl_write_num!(u64, i64, test_u64);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 386,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3618,
                        "byte_start": 3583,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u64, i64, test_u64);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:47\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n88 | impl_write_num!(u64, i64, test_u64);\n   | ----------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1434,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3618,
                        "byte_start": 3583,
                        "column_end": 36,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u64, i64, test_u64);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:47\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n89 | impl_write_num!(u128, i128, test_u128);\n   | -------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 386,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3658,
                        "byte_start": 3620,
                        "column_end": 39,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u128, i128, test_u128);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:47\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n89 | impl_write_num!(u128, i128, test_u128);\n   | -------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1434,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3658,
                        "byte_start": 3620,
                        "column_end": 39,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "impl_write_num!(u128, i128, test_u128);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:11:47\n   |\n11 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n90 | impl_write_num!(usize, isize, test_usize);\n   | ----------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 392,
                    "byte_start": 386,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3701,
                        "byte_start": 3660,
                        "column_end": 42,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 90,
                        "line_start": 90,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "impl_write_num!(usize, isize, test_usize);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:37:47\n   |\n37 |             fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {\n   |                                               ^^^^^^\n...\n90 | impl_write_num!(usize, isize, test_usize);\n   | ----------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `impl_write_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1434,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 260,
                        "byte_start": 233,
                        "column_end": 28,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_num!",
                      "span": {
                        "byte_end": 3701,
                        "byte_start": 3660,
                        "column_end": 42,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 90,
                        "line_start": 90,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "impl_write_num!(usize, isize, test_usize);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "            fn write_to<W: core::fmt::Write + ?Sized>(&self, sink: &mut W) -> core::fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:94:33\n   |\n94 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n   |                                 ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 3781,
                    "byte_start": 3775,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 94,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:127:33\n    |\n127 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                 ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 4530,
                    "byte_start": 4524,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 127,
                    "line_start": 127,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:149:33\n    |\n149 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                 ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 5019,
                    "byte_start": 5013,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 149,
                    "line_start": 149,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:171:21\n    |\n171 | impl<T: Writeable + ?Sized> Writeable for &T {\n    |                     ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 5567,
                    "byte_start": 5561,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 171,
                    "line_start": 171,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "impl<T: Writeable + ?Sized> Writeable for &T {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:200:21\n    |\n200 |         impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {\n    |                     ^^^^^^\n...\n229 | impl_write_smart_pointer!(Cow<'a, T>, T: alloc::borrow::ToOwned);\n    | ---------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 6319,
                    "byte_start": 6313,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7521,
                        "byte_start": 7457,
                        "column_end": 65,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 229,
                        "line_start": 229,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 1,
                            "text": "impl_write_smart_pointer!(Cow<'a, T>, T: alloc::borrow::ToOwned);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "        impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:200:21\n    |\n200 |         impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {\n    |                     ^^^^^^\n...\n230 | impl_write_smart_pointer!(alloc::boxed::Box<T>);\n    | ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 6319,
                    "byte_start": 6313,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7570,
                            "byte_start": 7523,
                            "column_end": 48,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 230,
                            "line_start": 230,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 48,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::boxed::Box<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "        impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:200:21\n    |\n200 |         impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {\n    |                     ^^^^^^\n...\n231 | impl_write_smart_pointer!(alloc::rc::Rc<T>);\n    | ------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 6319,
                    "byte_start": 6313,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7615,
                            "byte_start": 7572,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 231,
                            "line_start": 231,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::rc::Rc<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "        impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs:200:21\n    |\n200 |         impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {\n    |                     ^^^^^^\n...\n232 | impl_write_smart_pointer!(alloc::sync::Arc<T>);\n    | ---------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `impl_write_smart_pointer` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 6319,
                    "byte_start": 6313,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 6248,
                        "byte_start": 6211,
                        "column_end": 38,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 198,
                        "line_start": 198,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write_smart_pointer {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_write_smart_pointer!",
                      "span": {
                        "byte_end": 7445,
                        "byte_start": 7401,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 6248,
                            "byte_start": 6211,
                            "column_end": 38,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 198,
                            "line_start": 198,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 38,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_write_smart_pointer {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_write_smart_pointer!",
                          "span": {
                            "byte_end": 7663,
                            "byte_start": 7617,
                            "column_end": 47,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 232,
                            "line_start": 232,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "impl_write_smart_pointer!(alloc::sync::Arc<T>);"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 225,
                        "line_start": 225,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        impl_write_smart_pointer!($ty, T: Writeable);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\impls.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "        impl<'a, T: ?Sized + Writeable + $extra_bound> Writeable for $ty {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs:9:50\n  |\n9 | pub struct CoreWriteAsPartsWrite<W: fmt::Write + ?Sized>(pub W);\n  |                                                  ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 338,
                    "byte_start": 332,
                    "column_end": 56,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 50,
                        "text": "pub struct CoreWriteAsPartsWrite<W: fmt::Write + ?Sized>(pub W);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs:11:22\n   |\n11 | impl<W: fmt::Write + ?Sized> fmt::Write for CoreWriteAsPartsWrite<W> {\n   |                      ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 376,
                    "byte_start": 370,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "impl<W: fmt::Write + ?Sized> fmt::Write for CoreWriteAsPartsWrite<W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs:23:22\n   |\n23 | impl<W: fmt::Write + ?Sized> PartsWrite for CoreWriteAsPartsWrite<W> {\n   |                      ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 657,
                    "byte_start": 651,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\parts_write_adapter.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "impl<W: fmt::Write + ?Sized> PartsWrite for CoreWriteAsPartsWrite<W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs:360:33\n    |\n360 |     fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {\n    |                                 ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 12549,
                    "byte_start": 12543,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\try_writeable.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 360,
                    "line_start": 360,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "    fn write_to<W: fmt::Write + ?Sized>(&self, sink: &mut W) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0412, E0425, E0432, E0433, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0412, E0425, E0432, E0433, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_locid_transform_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_locid_transform_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_locid_transform_data-1.5.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_locid_transform_data-eaec9c1dd7d647c1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_locid_transform_data-eaec9c1dd7d647c1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.11.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.11.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\portable-atomic-881aa6cab3b892bf\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\portable-atomic-881aa6cab3b892bf\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.11.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.11.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\portable-atomic-881aa6cab3b892bf\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\portable-atomic-881aa6cab3b892bf\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#litemap@0.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\litemap-0.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "litemap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\litemap-0.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\liblitemap-7aeda5f850b6e105.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_locid_transform_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_locid_transform_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_locid_transform_data-1.5.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_locid_transform_data-eaec9c1dd7d647c1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_locid_transform_data-eaec9c1dd7d647c1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#critical-section@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\critical-section-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "critical_section",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\critical-section-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libcritical_section-515b2e07b29d6266.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libstable_deref_trait-76760dee044b7fe8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\portable-atomic-f37ffd9f87b2e527\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_locid_transform_data@1.5.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_locid_transform_data-b8081aef7530ab37\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#write16@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\write16-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "write16",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\write16-1.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libwrite16-be1327344fecf400.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const_generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libsmallvec-257a448feb6ecbd3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "writeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\writeable-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libwriteable-274860958142ca12.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_normalizer_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_normalizer_data-1.5.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_normalizer_data-c7e015324e0ef577\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_normalizer_data-c7e015324e0ef577\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@1.5.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_normalizer_data-7a43d637c3ded58b\\out"
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: linking with `link.exe` failed: exit code: 1102\n  |\n  = note: \"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcWoQNpy\\\\symbols.o\" \"<2 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\serde-471aa95ae6d8b360\\\\build_script_build-471aa95ae6d8b360.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"\n  = note: some arguments are omitted. use `--verbose` to show all linker arguments\n  = note: LINK : fatal error LNK1102: out of memory\u240d\n          \n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcWoQNpy\\\\symbols.o\" \"<2 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\serde-471aa95ae6d8b360\\\\build_script_build-471aa95ae6d8b360.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "some arguments are omitted. use `--verbose` to show all linker arguments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "LINK : fatal error LNK1102: out of memory\r\n",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "linking with `link.exe` failed: exit code: 1102",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:86:3\n   |\n86 | #[derive(Debug, Clone)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 4005,
                    "byte_start": 3999,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 86,
                    "line_start": 86,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, Clone)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:48:3\n   |\n48 | #[derive(Debug, Clone)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1778,
                    "byte_start": 1772,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, Clone)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:34:9\n   |\n34 |         write!(f, \"byte sequence not well-formed UTF-8\")\n   |         ^^^^^\n   |\nhelp: consider importing this macro\n   |\n17 + use core::write;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::write;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 1242,
                    "byte_start": 1237,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 34,
                    "line_start": 34,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        write!(f, \"byte sequence not well-formed UTF-8\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:28:3\n   |\n28 | #[derive(Debug, PartialEq)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1043,
                    "byte_start": 1037,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, PartialEq)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:24:3\n   |\n24 | #[derive(Clone, Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1121,
                    "byte_start": 1115,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 24,
                    "line_start": 24,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:31:10\n   |\n31 | impl<'a> Iterator for Utf8CharIndices<'a> {\n   |          ^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n20 + use core::iter::Iterator;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf8Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 1306,
                    "byte_start": 1298,
                    "column_end": 18,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 31,
                    "line_start": 31,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 10,
                        "text": "impl<'a> Iterator for Utf8CharIndices<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:35:27\n   |\n35 |     fn next(&mut self) -> Option<(usize, char)> {\n   |                           ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n20 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf8Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1411,
                    "byte_start": 1405,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 35,
                    "line_start": 35,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<(usize, char)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:39:13\n   |\n39 |             Some(ch) => {\n   |             ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n20 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf8Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1549,
                    "byte_start": 1545,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(ch) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:43:17\n   |\n43 |                 Some((index, ch))\n   |                 ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n20 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf8Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1727,
                    "byte_start": 1723,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 43,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some((index, ch))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:54:36\n   |\n54 |     fn size_hint(&self) -> (usize, Option<usize>) {\n   |                                    ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n20 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf8Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1904,
                    "byte_start": 1898,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 54,
                    "line_start": 54,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn size_hint(&self) -> (usize, Option<usize>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:59:26\n   |\n59 |     fn last(mut self) -> Option<(usize, char)> {\n   |                          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n20 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf8Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1997,
                    "byte_start": 1991,
                    "column_end": 32,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 26,
                        "text": "    fn last(mut self) -> Option<(usize, char)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:65:10\n   |\n65 | impl<'a> DoubleEndedIterator for Utf8CharIndices<'a> {\n   |          ^^^^^^^^^^^^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n20 + use core::iter::DoubleEndedIterator;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf8Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 2129,
                    "byte_start": 2110,
                    "column_end": 29,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 10,
                        "text": "impl<'a> DoubleEndedIterator for Utf8CharIndices<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:67:32\n   |\n67 |     fn next_back(&mut self) -> Option<(usize, char)> {\n   |                                ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n20 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf8Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2207,
                    "byte_start": 2201,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<(usize, char)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:33:45\n   |\n33 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {\n   |                                             ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n17 + use core::fmt::Result;\n   |\n17 + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 1204,
                    "byte_start": 1198,
                    "column_end": 51,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 45,
                        "text": "    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:68:36\n   |\n68 |     fn next_fallback(&mut self) -> Option<Result<char, Utf8CharsError>> {\n   |                                    ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n17 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2337,
                    "byte_start": 2331,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 68,
                    "line_start": 68,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn next_fallback(&mut self) -> Option<Result<char, Utf8CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:68:43\n   |\n68 |     fn next_fallback(&mut self) -> Option<Result<char, Utf8CharsError>> {\n   |                                           ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n17 + use core::fmt::Result;\n   |\n17 + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 2344,
                    "byte_start": 2338,
                    "column_end": 49,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 68,
                    "line_start": 68,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 43,
                        "text": "    fn next_fallback(&mut self) -> Option<Result<char, Utf8CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:70:20\n   |\n70 |             return None;\n   |                    ^^^^ not found in this scope\n   |\nhelp: consider importing this unit variant\n   |\n17 + use core::option::Option::None;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 2432,
                    "byte_start": 2428,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 70,
                    "line_start": 70,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:75:20\n   |\n75 |             return Some(Ok(char::from(first)));\n   |                    ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2583,
                    "byte_start": 2579,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Ok(char::from(first)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:75:25\n   |\n75 |             return Some(Ok(char::from(first)));\n   |                         ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2586,
                    "byte_start": 2584,
                    "column_end": 27,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 25,
                        "text": "            return Some(Ok(char::from(first)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:79:20\n   |\n79 |             return Some(Err(Utf8CharsError));\n   |                    ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2774,
                    "byte_start": 2770,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Err(Utf8CharsError));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:79:25\n   |\n79 |             return Some(Err(Utf8CharsError));\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2778,
                    "byte_start": 2775,
                    "column_end": 28,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 25,
                        "text": "            return Some(Err(Utf8CharsError));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:91:20\n   |\n91 |             return Some(Err(Utf8CharsError));\n   |                    ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3222,
                    "byte_start": 3218,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 91,
                    "line_start": 91,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Err(Utf8CharsError));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:91:25\n   |\n91 |             return Some(Err(Utf8CharsError));\n   |                         ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 3226,
                    "byte_start": 3223,
                    "column_end": 28,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 91,
                    "line_start": 91,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 25,
                        "text": "            return Some(Err(Utf8CharsError));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:96:20\n   |\n96 |             return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n   |                    ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3442,
                    "byte_start": 3438,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 96,
                    "line_start": 96,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:96:25\n   |\n96 |             return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n   |                         ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 3445,
                    "byte_start": 3443,
                    "column_end": 27,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 96,
                    "line_start": 96,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 25,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:100:20\n    |\n100 |             return Some(Err(Utf8CharsError));\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3615,
                    "byte_start": 3611,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 100,
                    "line_start": 100,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Err(Utf8CharsError));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:100:25\n    |\n100 |             return Some(Err(Utf8CharsError));\n    |                         ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 3619,
                    "byte_start": 3616,
                    "column_end": 28,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 100,
                    "line_start": 100,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 25,
                        "text": "            return Some(Err(Utf8CharsError));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:105:20\n    |\n105 |             return Some(Err(Utf8CharsError));\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3814,
                    "byte_start": 3810,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 105,
                    "line_start": 105,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Err(Utf8CharsError));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:105:25\n    |\n105 |             return Some(Err(Utf8CharsError));\n    |                         ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 3818,
                    "byte_start": 3815,
                    "column_end": 28,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 105,
                    "line_start": 105,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 25,
                        "text": "            return Some(Err(Utf8CharsError));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:112:20\n    |\n112 |             return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4101,
                    "byte_start": 4097,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 112,
                    "line_start": 112,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:112:25\n    |\n112 |             return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n    |                         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 4104,
                    "byte_start": 4102,
                    "column_end": 27,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 112,
                    "line_start": 112,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 25,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:118:9\n    |\n118 |         Some(Err(Utf8CharsError))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4398,
                    "byte_start": 4394,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 118,
                    "line_start": 118,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(Err(Utf8CharsError))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:118:14\n    |\n118 |         Some(Err(Utf8CharsError))\n    |              ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 4402,
                    "byte_start": 4399,
                    "column_end": 17,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 118,
                    "line_start": 118,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 14,
                        "text": "        Some(Err(Utf8CharsError))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:122:10\n    |\n122 | impl<'a> Iterator for ErrorReportingUtf8Chars<'a> {\n    |          ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n17  + use core::iter::Iterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 4446,
                    "byte_start": 4438,
                    "column_end": 18,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 122,
                    "line_start": 122,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 10,
                        "text": "impl<'a> Iterator for ErrorReportingUtf8Chars<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:123:17\n    |\n123 |     type Item = Result<char, Utf8CharsError>;\n    |                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n17  + use core::fmt::Result;\n    |\n17  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 4503,
                    "byte_start": 4497,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 123,
                    "line_start": 123,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    type Item = Result<char, Utf8CharsError>;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:126:27\n    |\n126 |     fn next(&mut self) -> Option<Result<char, Utf8CharsError>> {\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n17  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4574,
                    "byte_start": 4568,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 126,
                    "line_start": 126,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<Result<char, Utf8CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:126:34\n    |\n126 |     fn next(&mut self) -> Option<Result<char, Utf8CharsError>> {\n    |                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n17  + use core::fmt::Result;\n    |\n17  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 4581,
                    "byte_start": 4575,
                    "column_end": 40,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 126,
                    "line_start": 126,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 34,
                        "text": "    fn next(&mut self) -> Option<Result<char, Utf8CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:136:24\n    |\n136 |                 return Some(Ok(char::from(first)));\n    |                        ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4952,
                    "byte_start": 4948,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some(Ok(char::from(first)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:136:29\n    |\n136 |                 return Some(Ok(char::from(first)));\n    |                             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 4955,
                    "byte_start": 4953,
                    "column_end": 31,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 29,
                        "text": "                return Some(Ok(char::from(first)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:145:24\n    |\n145 |                 return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n    |                        ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5371,
                    "byte_start": 5367,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 145,
                    "line_start": 145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:145:29\n    |\n145 |                 return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n    |                             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 5374,
                    "byte_start": 5372,
                    "column_end": 31,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 145,
                    "line_start": 145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 29,
                        "text": "                return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:162:24\n    |\n162 |                 return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n    |                        ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 6159,
                    "byte_start": 6155,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 162,
                    "line_start": 162,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:162:29\n    |\n162 |                 return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n    |                             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 6162,
                    "byte_start": 6160,
                    "column_end": 31,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 162,
                    "line_start": 162,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 29,
                        "text": "                return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:178:20\n    |\n178 |             return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 6839,
                    "byte_start": 6835,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 178,
                    "line_start": 178,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:178:25\n    |\n178 |             return Some(Ok(unsafe { char::from_u32_unchecked(point) }));\n    |                         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 6842,
                    "byte_start": 6840,
                    "column_end": 27,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 178,
                    "line_start": 178,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 25,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(point) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:184:10\n    |\n184 | impl<'a> DoubleEndedIterator for ErrorReportingUtf8Chars<'a> {\n    |          ^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n17  + use core::iter::DoubleEndedIterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 6965,
                    "byte_start": 6946,
                    "column_end": 29,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 184,
                    "line_start": 184,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 10,
                        "text": "impl<'a> DoubleEndedIterator for ErrorReportingUtf8Chars<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:186:32\n    |\n186 |     fn next_back(&mut self) -> Option<Result<char, Utf8CharsError>> {\n    |                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n17  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 7051,
                    "byte_start": 7045,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 186,
                    "line_start": 186,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<Result<char, Utf8CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:186:39\n    |\n186 |     fn next_back(&mut self) -> Option<Result<char, Utf8CharsError>> {\n    |                                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n17  + use core::fmt::Result;\n    |\n17  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 7058,
                    "byte_start": 7052,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 186,
                    "line_start": 186,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "    fn next_back(&mut self) -> Option<Result<char, Utf8CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:188:20\n    |\n188 |             return None;\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n17  + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 7146,
                    "byte_start": 7142,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 188,
                    "line_start": 188,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:209:9\n    |\n209 |         Some(Err(Utf8CharsError))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7845,
                    "byte_start": 7841,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 209,
                    "line_start": 209,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(Err(Utf8CharsError))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:209:14\n    |\n209 |         Some(Err(Utf8CharsError))\n    |              ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range8;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 7849,
                    "byte_start": 7846,
                    "column_end": 17,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 209,
                    "line_start": 209,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 14,
                        "text": "        Some(Err(Utf8CharsError))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:106:36\n    |\n106 |     fn next_fallback(&mut self) -> Option<char> {\n    |                                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n39  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4522,
                    "byte_start": 4516,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 106,
                    "line_start": 106,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn next_fallback(&mut self) -> Option<char> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:108:20\n    |\n108 |             return None;\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n39  + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 4593,
                    "byte_start": 4589,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:113:20\n    |\n113 |             return Some(char::from(first));\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4744,
                    "byte_start": 4740,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(char::from(first));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:117:20\n    |\n117 |             return Some('\\u{FFFD}');\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4931,
                    "byte_start": 4927,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 117,
                    "line_start": 117,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some('\\u{FFFD}');"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:129:20\n    |\n129 |             return Some('\\u{FFFD}');\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5370,
                    "byte_start": 5366,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 129,
                    "line_start": 129,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some('\\u{FFFD}');"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:134:20\n    |\n134 |             return Some(unsafe { char::from_u32_unchecked(point) });\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5581,
                    "byte_start": 5577,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 134,
                    "line_start": 134,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(unsafe { char::from_u32_unchecked(point) });"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:138:20\n    |\n138 |             return Some('\\u{FFFD}');\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5750,
                    "byte_start": 5746,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some('\\u{FFFD}');"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:143:20\n    |\n143 |             return Some('\\u{FFFD}');\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5940,
                    "byte_start": 5936,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some('\\u{FFFD}');"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:150:20\n    |\n150 |             return Some(unsafe { char::from_u32_unchecked(point) });\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 6218,
                    "byte_start": 6214,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 150,
                    "line_start": 150,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(unsafe { char::from_u32_unchecked(point) });"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:156:9\n    |\n156 |         Some('\\u{FFFD}')\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 6511,
                    "byte_start": 6507,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 156,
                    "line_start": 156,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some('\\u{FFFD}')"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:160:10\n    |\n160 | impl<'a> Iterator for Utf8Chars<'a> {\n    |          ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n39  + use core::iter::Iterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 6550,
                    "byte_start": 6542,
                    "column_end": 18,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 160,
                    "line_start": 160,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 10,
                        "text": "impl<'a> Iterator for Utf8Chars<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:164:27\n    |\n164 |     fn next(&mut self) -> Option<char> {\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n39  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 6640,
                    "byte_start": 6634,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<char> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:180:24\n    |\n180 |                 return Some(char::from(first));\n    |                        ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7350,
                    "byte_start": 7346,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 180,
                    "line_start": 180,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some(char::from(first));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:189:24\n    |\n189 |                 return Some(unsafe { char::from_u32_unchecked(point) });\n    |                        ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7765,
                    "byte_start": 7761,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 189,
                    "line_start": 189,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some(unsafe { char::from_u32_unchecked(point) });"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:206:24\n    |\n206 |                 return Some(unsafe { char::from_u32_unchecked(point) });\n    |                        ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 8549,
                    "byte_start": 8545,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some(unsafe { char::from_u32_unchecked(point) });"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:222:20\n    |\n222 |             return Some(unsafe { char::from_u32_unchecked(point) });\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 9225,
                    "byte_start": 9221,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 222,
                    "line_start": 222,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(unsafe { char::from_u32_unchecked(point) });"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:228:10\n    |\n228 | impl<'a> DoubleEndedIterator for Utf8Chars<'a> {\n    |          ^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n39  + use core::iter::DoubleEndedIterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 9347,
                    "byte_start": 9328,
                    "column_end": 29,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 228,
                    "line_start": 228,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 10,
                        "text": "impl<'a> DoubleEndedIterator for Utf8Chars<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:230:32\n    |\n230 |     fn next_back(&mut self) -> Option<char> {\n    |                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n39  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 9419,
                    "byte_start": 9413,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 230,
                    "line_start": 230,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<char> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:232:20\n    |\n232 |             return None;\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n39  + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 9490,
                    "byte_start": 9486,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 232,
                    "line_start": 232,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:253:9\n    |\n253 |         Some('\\u{FFFD}')\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n39  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1442,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf8CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 10175,
                    "byte_start": 10171,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 253,
                    "line_start": 253,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some('\\u{FFFD}')"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `Utf8Chars<'_>` is not an iterator\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs:257:24\n    |\n257 | impl FusedIterator for Utf8Chars<'_> {}\n    |                        ^^^^^^^^^^^^^ `Utf8Chars<'_>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `Utf8Chars<'_>`\nnote: required by a bound in `FusedIterator`\n   --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n    |\n32  | pub trait FusedIterator: Iterator {}\n    |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `Utf8Chars<'_>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`Utf8Chars<'_>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 10233,
                    "byte_start": 10220,
                    "column_end": 37,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "`Utf8Chars<'_>` is not an iterator",
                    "line_end": 257,
                    "line_start": 257,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 24,
                        "text": "impl FusedIterator for Utf8Chars<'_> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `Utf8CharIndices<'_>` is not an iterator\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs:75:24\n   |\n75 | impl FusedIterator for Utf8CharIndices<'_> {}\n   |                        ^^^^^^^^^^^^^^^^^^^ `Utf8CharIndices<'_>` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `Utf8CharIndices<'_>`\nnote: required by a bound in `FusedIterator`\n  --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n   |\n32 | pub trait FusedIterator: Iterator {}\n   |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `Utf8CharIndices<'_>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`Utf8CharIndices<'_>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 2419,
                    "byte_start": 2400,
                    "column_end": 43,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\indices.rs",
                    "is_primary": true,
                    "label": "`Utf8CharIndices<'_>` is not an iterator",
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 24,
                        "text": "impl FusedIterator for Utf8CharIndices<'_> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `ErrorReportingUtf8Chars<'_>` is not an iterator\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs:213:24\n    |\n213 | impl FusedIterator for ErrorReportingUtf8Chars<'_> {}\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ErrorReportingUtf8Chars<'_>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `ErrorReportingUtf8Chars<'_>`\nnote: required by a bound in `FusedIterator`\n   --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n    |\n32  | pub trait FusedIterator: Iterator {}\n    |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `ErrorReportingUtf8Chars<'_>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`ErrorReportingUtf8Chars<'_>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 7926,
                    "byte_start": 7899,
                    "column_end": 51,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\report.rs",
                    "is_primary": true,
                    "label": "`ErrorReportingUtf8Chars<'_>` is not an iterator",
                    "line_end": 213,
                    "line_start": 213,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 24,
                        "text": "impl FusedIterator for ErrorReportingUtf8Chars<'_> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0277, E0405, E0412, E0425, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0277, E0405, E0412, E0425, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8_iter-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0277`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0277`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_locid_transform_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_locid_transform_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "icu_locid_transform_data",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_locid_transform_data-1.5.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libicu_locid_transform_data-0dee584a4eb0b33e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0786`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0786`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.27\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.27\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.27\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.27\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.2\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\getrandom-40ae42995f4a20b7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\getrandom-40ae42995f4a20b7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.27\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0786`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0786`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:41:3\n   |\n41 | #[derive(Debug, Clone)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1465,
                    "byte_start": 1459,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 41,
                    "line_start": 41,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, Clone)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:45:3\n   |\n45 | #[derive(Debug, Clone)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1707,
                    "byte_start": 1701,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, Clone)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:38:9\n   |\n38 |         write!(f, \"unpaired surrogate\")\n   |         ^^^^^\n   |\nhelp: consider importing this macro\n   |\n17 + use core::write;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::write;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 1484,
                    "byte_start": 1479,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        write!(f, \"unpaired surrogate\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:32:3\n   |\n32 | #[derive(Debug, PartialEq)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1283,
                    "byte_start": 1277,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, PartialEq)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs:22:9\n   |\n22 |         println!(\"cargo:rustc-cfg=slab_no_track_caller\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 877,
                    "byte_start": 870,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=slab_no_track_caller\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:24:3\n   |\n24 | #[derive(Clone, Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1122,
                    "byte_start": 1116,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 24,
                    "line_start": 24,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs:19:9\n   |\n19 |         println!(\"cargo:rustc-cfg=slab_no_const_vec_new\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 771,
                    "byte_start": 764,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 19,
                    "line_start": 19,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=slab_no_const_vec_new\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs:8:13\n  |\n8 |             println!(\n  |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 337,
                    "byte_start": 330,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 8,
                    "line_start": 8,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `autocfg`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs:2:21\n  |\n2 |     let cfg = match autocfg::AutoCfg::new() {\n  |                     ^^^^^^^ can't find crate\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `autocfg`",
                "spans": [
                  {
                    "byte_end": 39,
                    "byte_start": 32,
                    "column_end": 28,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 2,
                    "line_start": 2,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 21,
                        "text": "    let cfg = match autocfg::AutoCfg::new() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:31:10\n   |\n31 | impl<'a> Iterator for Utf16CharIndices<'a> {\n   |          ^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n20 + use core::iter::Iterator;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf16Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 1309,
                    "byte_start": 1301,
                    "column_end": 18,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 31,
                    "line_start": 31,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 10,
                        "text": "impl<'a> Iterator for Utf16CharIndices<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:35:27\n   |\n35 |     fn next(&mut self) -> Option<(usize, char)> {\n   |                           ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n20 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf16Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1415,
                    "byte_start": 1409,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 35,
                    "line_start": 35,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<(usize, char)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:39:13\n   |\n39 |             Some(ch) => {\n   |             ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n20 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf16Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1553,
                    "byte_start": 1549,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(ch) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:43:17\n   |\n43 |                 Some((index, ch))\n   |                 ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n20 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf16Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1731,
                    "byte_start": 1727,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 43,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some((index, ch))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:54:36\n   |\n54 |     fn size_hint(&self) -> (usize, Option<usize>) {\n   |                                    ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n20 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf16Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1908,
                    "byte_start": 1902,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 54,
                    "line_start": 54,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn size_hint(&self) -> (usize, Option<usize>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:59:26\n   |\n59 |     fn last(mut self) -> Option<(usize, char)> {\n   |                          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n20 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf16Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2001,
                    "byte_start": 1995,
                    "column_end": 32,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 26,
                        "text": "    fn last(mut self) -> Option<(usize, char)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:65:10\n   |\n65 | impl<'a> DoubleEndedIterator for Utf16CharIndices<'a> {\n   |          ^^^^^^^^^^^^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n20 + use core::iter::DoubleEndedIterator;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf16Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 2133,
                    "byte_start": 2114,
                    "column_end": 29,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 10,
                        "text": "impl<'a> DoubleEndedIterator for Utf16CharIndices<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:67:32\n   |\n67 |     fn next_back(&mut self) -> Option<(usize, char)> {\n   |                                ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n20 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1002,
                        "byte_start": 1002,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use super::Utf16Chars;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2212,
                    "byte_start": 2206,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<(usize, char)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:37:45\n   |\n37 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {\n   |                                             ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n17 + use core::fmt::Result;\n   |\n17 + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 1446,
                    "byte_start": 1440,
                    "column_end": 51,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 45,
                        "text": "    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:67:70\n   |\n67 |     fn surrogate_next(&mut self, surrogate_base: u16, first: u16) -> Result<char, Utf16CharsError> {\n   |                                                                      ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n17 + use core::fmt::Result;\n   |\n17 + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 2338,
                    "byte_start": 2332,
                    "column_end": 76,
                    "column_start": 70,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 76,
                        "highlight_start": 70,
                        "text": "    fn surrogate_next(&mut self, surrogate_base: u16, first: u16) -> Result<char, Utf16CharsError> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:69:20\n   |\n69 |             if let Some((&low, tail_tail)) = self.remaining.split_first() {\n   |                    ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2436,
                    "byte_start": 2432,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 69,
                    "line_start": 69,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            if let Some((&low, tail_tail)) = self.remaining.split_first() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:72:28\n   |\n72 |                     return Ok(unsafe {\n   |                            ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2629,
                    "byte_start": 2627,
                    "column_end": 30,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 28,
                        "text": "                    return Ok(unsafe {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:81:9\n   |\n81 |         Err(Utf16CharsError)\n   |         ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2944,
                    "byte_start": 2941,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(Utf16CharsError)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:85:53\n   |\n85 |     fn surrogate_next_back(&mut self, last: u16) -> Result<char, Utf16CharsError> {\n   |                                                     ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n17 + use core::fmt::Result;\n   |\n17 + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 3048,
                    "byte_start": 3042,
                    "column_end": 59,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 85,
                    "line_start": 85,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 53,
                        "text": "    fn surrogate_next_back(&mut self, last: u16) -> Result<char, Utf16CharsError> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:87:20\n   |\n87 |             if let Some((&high, head_head)) = self.remaining.split_last() {\n   |                    ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3153,
                    "byte_start": 3149,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            if let Some((&high, head_head)) = self.remaining.split_last() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:90:28\n   |\n90 |                     return Ok(unsafe {\n   |                            ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 3347,
                    "byte_start": 3345,
                    "column_end": 30,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 90,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 28,
                        "text": "                    return Ok(unsafe {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:99:9\n   |\n99 |         Err(Utf16CharsError)\n   |         ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n17 + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 3662,
                    "byte_start": 3659,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 99,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(Utf16CharsError)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:103:10\n    |\n103 | impl<'a> Iterator for ErrorReportingUtf16Chars<'a> {\n    |          ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n17  + use core::iter::Iterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 3706,
                    "byte_start": 3698,
                    "column_end": 18,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 10,
                        "text": "impl<'a> Iterator for ErrorReportingUtf16Chars<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:104:17\n    |\n104 |     type Item = Result<char, Utf16CharsError>;\n    |                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n17  + use core::fmt::Result;\n    |\n17  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 3764,
                    "byte_start": 3758,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 104,
                    "line_start": 104,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    type Item = Result<char, Utf16CharsError>;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:107:27\n    |\n107 |     fn next(&mut self) -> Option<Result<char, Utf16CharsError>> {\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n17  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3844,
                    "byte_start": 3838,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<Result<char, Utf16CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:107:34\n    |\n107 |     fn next(&mut self) -> Option<Result<char, Utf16CharsError>> {\n    |                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n17  + use core::fmt::Result;\n    |\n17  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 3851,
                    "byte_start": 3845,
                    "column_end": 40,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 34,
                        "text": "    fn next(&mut self) -> Option<Result<char, Utf16CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:117:20\n    |\n117 |             return Some(Ok(unsafe { char::from_u32_unchecked(u32::from(first)) }));\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4428,
                    "byte_start": 4424,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 117,
                    "line_start": 117,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(u32::from(first)) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:117:25\n    |\n117 |             return Some(Ok(unsafe { char::from_u32_unchecked(u32::from(first)) }));\n    |                         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 4431,
                    "byte_start": 4429,
                    "column_end": 27,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 117,
                    "line_start": 117,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 25,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(u32::from(first)) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:119:9\n    |\n119 |         Some(self.surrogate_next(surrogate_base, first))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4511,
                    "byte_start": 4507,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 119,
                    "line_start": 119,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(self.surrogate_next(surrogate_base, first))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:123:10\n    |\n123 | impl<'a> DoubleEndedIterator for ErrorReportingUtf16Chars<'a> {\n    |          ^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n17  + use core::iter::DoubleEndedIterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 4593,
                    "byte_start": 4574,
                    "column_end": 29,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 123,
                    "line_start": 123,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 10,
                        "text": "impl<'a> DoubleEndedIterator for ErrorReportingUtf16Chars<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:125:32\n    |\n125 |     fn next_back(&mut self) -> Option<Result<char, Utf16CharsError>> {\n    |                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n17  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4688,
                    "byte_start": 4682,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<Result<char, Utf16CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:125:39\n    |\n125 |     fn next_back(&mut self) -> Option<Result<char, Utf16CharsError>> {\n    |                                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n17  + use core::fmt::Result;\n    |\n17  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      },
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 4695,
                    "byte_start": 4689,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "    fn next_back(&mut self) -> Option<Result<char, Utf16CharsError>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:129:20\n    |\n129 |             return Some(Ok(unsafe { char::from_u32_unchecked(u32::from(last)) }));\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4891,
                    "byte_start": 4887,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 129,
                    "line_start": 129,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(u32::from(last)) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:129:25\n    |\n129 |             return Some(Ok(unsafe { char::from_u32_unchecked(u32::from(last)) }));\n    |                         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 4894,
                    "byte_start": 4892,
                    "column_end": 27,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 129,
                    "line_start": 129,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 25,
                        "text": "            return Some(Ok(unsafe { char::from_u32_unchecked(u32::from(last)) }));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:131:9\n    |\n131 |         Some(self.surrogate_next_back(last))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n17  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 687,
                        "byte_start": 687,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use crate::in_inclusive_range16;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4973,
                    "byte_start": 4969,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 131,
                    "line_start": 131,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(self.surrogate_next_back(last))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:65:20\n   |\n65 |             if let Some((&low, tail_tail)) = self.remaining.split_first() {\n   |                    ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n29 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2127,
                    "byte_start": 2123,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            if let Some((&low, tail_tail)) = self.remaining.split_first() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:83:20\n   |\n83 |             if let Some((&high, head_head)) = self.remaining.split_last() {\n   |                    ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n29 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2805,
                    "byte_start": 2801,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 83,
                    "line_start": 83,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            if let Some((&high, head_head)) = self.remaining.split_last() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:99:10\n   |\n99 | impl<'a> Iterator for Utf16Chars<'a> {\n   |          ^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n29 + use core::iter::Iterator;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 3344,
                    "byte_start": 3336,
                    "column_end": 18,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 99,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 10,
                        "text": "impl<'a> Iterator for Utf16Chars<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:103:27\n    |\n103 |     fn next(&mut self) -> Option<char> {\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n29  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3443,
                    "byte_start": 3437,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<char> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:113:20\n    |\n113 |             return Some(unsafe { char::from_u32_unchecked(u32::from(first)) });\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n29  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4054,
                    "byte_start": 4050,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(unsafe { char::from_u32_unchecked(u32::from(first)) });"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:115:9\n    |\n115 |         Some(self.surrogate_next(surrogate_base, first))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n29  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4133,
                    "byte_start": 4129,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 115,
                    "line_start": 115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(self.surrogate_next(surrogate_base, first))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:119:10\n    |\n119 | impl<'a> DoubleEndedIterator for Utf16Chars<'a> {\n    |          ^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n29  + use core::iter::DoubleEndedIterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 4215,
                    "byte_start": 4196,
                    "column_end": 29,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 119,
                    "line_start": 119,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 10,
                        "text": "impl<'a> DoubleEndedIterator for Utf16Chars<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:121:32\n    |\n121 |     fn next_back(&mut self) -> Option<char> {\n    |                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n29  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4296,
                    "byte_start": 4290,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 121,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<char> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:125:20\n    |\n125 |             return Some(unsafe { char::from_u32_unchecked(u32::from(last)) });\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n29  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4474,
                    "byte_start": 4470,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return Some(unsafe { char::from_u32_unchecked(u32::from(last)) });"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:127:9\n    |\n127 |         Some(self.surrogate_next_back(last))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n29  + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1054,
                        "byte_start": 1054,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub use crate::indices::Utf16CharIndices;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4552,
                    "byte_start": 4548,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 127,
                    "line_start": 127,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(self.surrogate_next_back(last))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `Utf16Chars<'_>` is not an iterator\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs:131:24\n    |\n131 | impl FusedIterator for Utf16Chars<'_> {}\n    |                        ^^^^^^^^^^^^^^ `Utf16Chars<'_>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `Utf16Chars<'_>`\nnote: required by a bound in `FusedIterator`\n   --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n    |\n32  | pub trait FusedIterator: Iterator {}\n    |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `Utf16Chars<'_>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`Utf16Chars<'_>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 4631,
                    "byte_start": 4617,
                    "column_end": 38,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "`Utf16Chars<'_>` is not an iterator",
                    "line_end": 131,
                    "line_start": 131,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 24,
                        "text": "impl FusedIterator for Utf16Chars<'_> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `Utf16CharIndices<'_>` is not an iterator\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs:75:24\n   |\n75 | impl FusedIterator for Utf16CharIndices<'_> {}\n   |                        ^^^^^^^^^^^^^^^^^^^^ `Utf16CharIndices<'_>` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `Utf16CharIndices<'_>`\nnote: required by a bound in `FusedIterator`\n  --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n   |\n32 | pub trait FusedIterator: Iterator {}\n   |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `Utf16CharIndices<'_>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`Utf16CharIndices<'_>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 2425,
                    "byte_start": 2405,
                    "column_end": 44,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\indices.rs",
                    "is_primary": true,
                    "label": "`Utf16CharIndices<'_>` is not an iterator",
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 24,
                        "text": "impl FusedIterator for Utf16CharIndices<'_> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `ErrorReportingUtf16Chars<'_>` is not an iterator\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs:135:24\n    |\n135 | impl FusedIterator for ErrorReportingUtf16Chars<'_> {}\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ErrorReportingUtf16Chars<'_>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `ErrorReportingUtf16Chars<'_>`\nnote: required by a bound in `FusedIterator`\n   --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n    |\n32  | pub trait FusedIterator: Iterator {}\n    |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `ErrorReportingUtf16Chars<'_>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`ErrorReportingUtf16Chars<'_>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 5066,
                    "byte_start": 5038,
                    "column_end": 52,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\report.rs",
                    "is_primary": true,
                    "label": "`ErrorReportingUtf16Chars<'_>` is not an iterator",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 24,
                        "text": "impl FusedIterator for ErrorReportingUtf16Chars<'_> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs:3:9\n  |\n3 |         Ok(cfg) => cfg,\n  |         ^^ not found in this scope\n  |\nhelp: consider importing this tuple variant\n  |\n1 + use core::result::Result::Ok;\n  |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Ok;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 68,
                    "byte_start": 66,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 3,
                    "line_start": 3,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(cfg) => cfg,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs:4:9\n  |\n4 |         Err(e) => {\n  |         ^^^ not found in this scope\n  |\nhelp: consider importing this tuple variant\n  |\n1 + use core::result::Result::Err;\n  |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Err;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 93,
                    "byte_start": 90,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 4,
                    "line_start": 4,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(e) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0277, E0405, E0412, E0425, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0277, E0405, E0412, E0425, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf16_iter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf16_iter-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0277`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0277`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0463, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0463, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0463`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0463`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_properties_data-1.5.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_properties_data-ec373bf48f55f8b5\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\icu_properties_data-ec373bf48f55f8b5\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_normalizer_data-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "icu_normalizer_data",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\icu_normalizer_data-1.5.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libicu_normalizer_data-803fa561f43ebe18.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: linking with `link.exe` failed: exit code: 1105\n  |\n  = note: \"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcR7DXUz\\\\symbols.o\" \"<4 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\crossbeam-utils-eac37113d2f8721b\\\\build_script_build-eac37113d2f8721b.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"\n  = note: some arguments are omitted. use `--verbose` to show all linker arguments\n  = note: LINK : fatal error LNK1105: cannot close file 'C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build_script_build-eac37113d2f8721b.exe'; error code 1224\u240d\n          \n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcR7DXUz\\\\symbols.o\" \"<4 object files omitted>\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp_fowlotz\\\\hickory-dns-0.26.0-alpha.1\\\\target\\\\debug\\\\build\\\\crossbeam-utils-eac37113d2f8721b\\\\build_script_build-eac37113d2f8721b.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "some arguments are omitted. use `--verbose` to show all linker arguments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "LINK : fatal error LNK1105: cannot close file 'C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build_script_build-eac37113d2f8721b.exe'; error code 1224\r\n",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "linking with `link.exe` failed: exit code: 1105",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\windows_x86_64_msvc-c891fe87d5045004\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\windows_x86_64_msvc-c891fe87d5045004\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.11.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "portable_atomic",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.11.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libportable_atomic-401146a1b06134e8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\zerocopy-e11468a8281a2a9d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\build\\zerocopy-e11468a8281a2a9d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_fowlotz\\hickory-dns-0.26.0-alpha.1\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 351
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "hickory-dns",
          "version": "0.26.0-alpha.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/hickory-dns/latest/hickory_dns/all.html \"show sidebar\")\n# Crate hickory_dnsCopy item path\n[Settings](https://docs.rs/hickory-dns/latest/settings.html)\n[Help](https://docs.rs/hickory-dns/latest/help.html)\nSummary[Source](https://docs.rs/hickory-dns/latest/src/hickory_dns/lib.rs.html#8-848)\nExpand description\nConfiguration module for the server binary, `named`.\n## Structs[\u00a7](https://docs.rs/hickory-dns/latest/hickory_dns/#structs)\n\n[Config](https://docs.rs/hickory-dns/latest/hickory_dns/struct.Config.html \"struct hickory_dns::Config\")\n    Server configuration\n\n[ServerZoneConfig](https://docs.rs/hickory-dns/latest/hickory_dns/struct.ServerZoneConfig.html \"struct hickory_dns::ServerZoneConfig\")\n\n\n[TlsCertConfig](https://docs.rs/hickory-dns/latest/hickory_dns/struct.TlsCertConfig.html \"struct hickory_dns::TlsCertConfig\")\n    Configuration for a TLS certificate\n\n[ZoneConfig](https://docs.rs/hickory-dns/latest/hickory_dns/struct.ZoneConfig.html \"struct hickory_dns::ZoneConfig\")\n    Configuration for a zone\n## Enums[\u00a7](https://docs.rs/hickory-dns/latest/hickory_dns/#enums)\n\n[ExternalStoreConfig](https://docs.rs/hickory-dns/latest/hickory_dns/enum.ExternalStoreConfig.html \"enum hickory_dns::ExternalStoreConfig\")\n    Enumeration over store types for external nameservers.\n\n[ServerStoreConfig](https://docs.rs/hickory-dns/latest/hickory_dns/enum.ServerStoreConfig.html \"enum hickory_dns::ServerStoreConfig\")\n    Enumeration over store types for secondary nameservers.\n\n[ZoneTypeConfig](https://docs.rs/hickory-dns/latest/hickory_dns/enum.ZoneTypeConfig.html \"enum hickory_dns::ZoneTypeConfig\")\n    Enumeration over each zone type\u2019s configuration.\n",
            "markdown_with_citations": "[](https://docs.rs/hickory-dns/latest/hickory_dns/all.html \"show sidebar\")\n# Crate hickory_dnsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nConfiguration module for the server binary, `named`.\n## Structs\u00a7\u27e84\u27e9\n\nConfig\u27e85\u27e9\n    Server configuration\n\nServerZoneConfig\u27e86\u27e9\n\n\nTlsCertConfig\u27e87\u27e9\n    Configuration for a TLS certificate\n\nZoneConfig\u27e88\u27e9\n    Configuration for a zone\n## Enums\u00a7\u27e89\u27e9\n\nExternalStoreConfig\u27e810\u27e9\n    Enumeration over store types for external nameservers.\n\nServerStoreConfig\u27e811\u27e9\n    Enumeration over store types for secondary nameservers.\n\nZoneTypeConfig\u27e812\u27e9\n    Enumeration over each zone type\u2019s configuration.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/hickory-dns/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/hickory-dns/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/hickory-dns/latest/src/hickory_dns/lib.rs.html#8-848: Source\n\u27e84\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/#structs: \u00a7\n\u27e85\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.Config.html: struct hickory_dns::Config - Config\n\u27e86\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.ServerZoneConfig.html: struct hickory_dns::ServerZoneConfig - ServerZoneConfig\n\u27e87\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.TlsCertConfig.html: struct hickory_dns::TlsCertConfig - TlsCertConfig\n\u27e88\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.ZoneConfig.html: struct hickory_dns::ZoneConfig - ZoneConfig\n\u27e89\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/#enums: \u00a7\n\u27e810\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/enum.ExternalStoreConfig.html: enum hickory_dns::ExternalStoreConfig - ExternalStoreConfig\n\u27e811\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/enum.ServerStoreConfig.html: enum hickory_dns::ServerStoreConfig - ServerStoreConfig\n\u27e812\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/enum.ZoneTypeConfig.html: enum hickory_dns::ZoneTypeConfig - ZoneTypeConfig\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "hickory-dns",
          "version": "0.26.0-alpha.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/hickory-dns/latest/hickory_dns/all.html \"show sidebar\")\n# Crate hickory_dnsCopy item path\n[Settings](https://docs.rs/hickory-dns/latest/settings.html)\n[Help](https://docs.rs/hickory-dns/latest/help.html)\nSummary[Source](https://docs.rs/hickory-dns/latest/src/hickory_dns/lib.rs.html#8-848)\nExpand description\nConfiguration module for the server binary, `named`.\n## Structs[\u00a7](https://docs.rs/hickory-dns/latest/hickory_dns/#structs)\n\n[Config](https://docs.rs/hickory-dns/latest/hickory_dns/struct.Config.html \"struct hickory_dns::Config\")\n    Server configuration\n\n[ServerZoneConfig](https://docs.rs/hickory-dns/latest/hickory_dns/struct.ServerZoneConfig.html \"struct hickory_dns::ServerZoneConfig\")\n\n\n[TlsCertConfig](https://docs.rs/hickory-dns/latest/hickory_dns/struct.TlsCertConfig.html \"struct hickory_dns::TlsCertConfig\")\n    Configuration for a TLS certificate\n\n[ZoneConfig](https://docs.rs/hickory-dns/latest/hickory_dns/struct.ZoneConfig.html \"struct hickory_dns::ZoneConfig\")\n    Configuration for a zone\n## Enums[\u00a7](https://docs.rs/hickory-dns/latest/hickory_dns/#enums)\n\n[ExternalStoreConfig](https://docs.rs/hickory-dns/latest/hickory_dns/enum.ExternalStoreConfig.html \"enum hickory_dns::ExternalStoreConfig\")\n    Enumeration over store types for external nameservers.\n\n[ServerStoreConfig](https://docs.rs/hickory-dns/latest/hickory_dns/enum.ServerStoreConfig.html \"enum hickory_dns::ServerStoreConfig\")\n    Enumeration over store types for secondary nameservers.\n\n[ZoneTypeConfig](https://docs.rs/hickory-dns/latest/hickory_dns/enum.ZoneTypeConfig.html \"enum hickory_dns::ZoneTypeConfig\")\n    Enumeration over each zone type\u2019s configuration.\n",
            "markdown_with_citations": "[](https://docs.rs/hickory-dns/latest/hickory_dns/all.html \"show sidebar\")\n# Crate hickory_dnsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nConfiguration module for the server binary, `named`.\n## Structs\u00a7\u27e84\u27e9\n\nConfig\u27e85\u27e9\n    Server configuration\n\nServerZoneConfig\u27e86\u27e9\n\n\nTlsCertConfig\u27e87\u27e9\n    Configuration for a TLS certificate\n\nZoneConfig\u27e88\u27e9\n    Configuration for a zone\n## Enums\u00a7\u27e89\u27e9\n\nExternalStoreConfig\u27e810\u27e9\n    Enumeration over store types for external nameservers.\n\nServerStoreConfig\u27e811\u27e9\n    Enumeration over store types for secondary nameservers.\n\nZoneTypeConfig\u27e812\u27e9\n    Enumeration over each zone type\u2019s configuration.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/hickory-dns/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/hickory-dns/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/hickory-dns/latest/src/hickory_dns/lib.rs.html#8-848: Source\n\u27e84\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/#structs: \u00a7\n\u27e85\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.Config.html: struct hickory_dns::Config - Config\n\u27e86\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.ServerZoneConfig.html: struct hickory_dns::ServerZoneConfig - ServerZoneConfig\n\u27e87\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.TlsCertConfig.html: struct hickory_dns::TlsCertConfig - TlsCertConfig\n\u27e88\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/struct.ZoneConfig.html: struct hickory_dns::ZoneConfig - ZoneConfig\n\u27e89\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/#enums: \u00a7\n\u27e810\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/enum.ExternalStoreConfig.html: enum hickory_dns::ExternalStoreConfig - ExternalStoreConfig\n\u27e811\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/enum.ServerStoreConfig.html: enum hickory_dns::ServerStoreConfig - ServerStoreConfig\n\u27e812\u27e9 https://docs.rs/hickory-dns/latest/hickory_dns/enum.ZoneTypeConfig.html: enum hickory_dns::ZoneTypeConfig - ZoneTypeConfig\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `hickory-dns` crate provides configuration utilities for DNS server setups, specifically targeting the `named` server binary. It includes structured configurations for server zones, TLS certificates, and DNS zones, along with enums for managing external and secondary nameserver storage types and zone-specific configurations. This makes it suitable for flexible and secure DNS server management.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 3.0,
          "factual_counterfactual": "### Pair 1: Configuration Capabilities  \n\u2705 **Factual:** The `hickory-dns` crate provides a `Config` struct that allows users to define server-level configurations, including TLS certificate settings and zone-specific parameters.  \n\u274c **Counterfactual:** The `hickory-dns` crate automatically generates TLS certificates for server configurations without requiring user input or external tools.  \n\n---\n\n### Pair 2: Zone Management  \n\u2705 **Factual:** The `ZoneConfig` struct in `hickory-dns` enables users to define and manage DNS zones, specifying details such as zone types through the `ZoneTypeConfig` enum.  \n\u274c **Counterfactual:** The `hickory-dns` crate supports dynamic zone creation at runtime without requiring pre-defined configurations in the `ZoneConfig` struct.  \n\n---\n\n### Pair 3: External Store Integration  \n\u2705 **Factual:** The `ExternalStoreConfig` enum in `hickory-dns` provides options for integrating external nameservers, allowing users to specify different store types for external DNS records.  \n\u274c **Counterfactual:** The `hickory-dns` crate includes built-in support for cloud-based DNS providers like AWS Route 53 and Google Cloud DNS through the `ExternalStoreConfig` enum.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-64217a18-16faa732-1751266436",
      "timestamp": "2025-06-30T06:53:56.283479+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]