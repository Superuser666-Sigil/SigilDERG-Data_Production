[
  {
    "execution_id": "exec-529c11cb-8b3bff54-1751263609",
    "timestamp": "2025-06-30T06:06:49.845365+00:00",
    "sacred_chain": {
      "input_data": "amqp",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'amqp' -> 'amqp'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "amqp",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/amqp",
            "title": "amqp v0.1.3",
            "content": {
              "raw_markdown": "#  amqp v0.1.3\nAMQP/RabbitMQ protocol client \n  * [ #rabbitmq ](https://crates.io/keywords/rabbitmq)\n  * [ #amqp ](https://crates.io/keywords/amqp)\n  * [ #queue ](https://crates.io/keywords/queue)\n\n\n  * [ Readme ](https://crates.io/crates/amqp)\n  * [ 18 Versions ](https://crates.io/crates/amqp/versions)\n  * [ Dependencies ](https://crates.io/crates/amqp/dependencies)\n  * [ Dependents ](https://crates.io/crates/amqp/reverse_dependencies)\n\n\n## Metadata\nover 6 years ago \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n20 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add amqp\nOr add the following line to your Cargo.toml:\namqp = \"0.1.3\"\n## Repository\n[ github.com/Antti/rust-amqp ](https://github.com/Antti/rust-amqp)\n## Owners\n[ Report crate ](https://crates.io/support?crate=amqp&inquire=crate-violation)\n### Stats Overview\n126,757 Downloads all time\n18 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  amqp v0.1.3\nAMQP/RabbitMQ protocol client \n  *  #rabbitmq \u27e81\u27e9\n  *  #amqp \u27e82\u27e9\n  *  #queue \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  18 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\nover 6 years ago \n MIT \u27e88\u27e9 OR  Apache-2.0 \u27e89\u27e9\n20 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add amqp\nOr add the following line to your Cargo.toml:\namqp = \"0.1.3\"\n## Repository\n github.com/Antti/rust-amqp \u27e810\u27e9\n## Owners\n Report crate \u27e811\u27e9\n### Stats Overview\n126,757 Downloads all time\n18 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/rabbitmq:  #rabbitmq \n\u27e82\u27e9 https://crates.io/keywords/amqp:  #amqp \n\u27e83\u27e9 https://crates.io/keywords/queue:  #queue \n\u27e84\u27e9 https://crates.io/crates/amqp:  Readme \n\u27e85\u27e9 https://crates.io/crates/amqp/versions:  18 Versions \n\u27e86\u27e9 https://crates.io/crates/amqp/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/amqp/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://github.com/Antti/rust-amqp:  github.com/Antti/rust-amqp \n\u27e811\u27e9 https://crates.io/support?crate=amqp&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1077,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117399.7541367"
          },
          "docs_rs": {
            "url": "https://docs.rs/amqp",
            "title": "Crate amqpCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/amqp/latest/amqp/all.html \"show sidebar\")\n# Crate amqpCopy item path\n[Settings](https://docs.rs/amqp/latest/settings.html)\n[Help](https://docs.rs/amqp/latest/help.html)\nSummary[Source](https://docs.rs/amqp/latest/src/amqp/lib.rs.html#1-107)\nExpand description\n#rust-amqp [![Build Status](https://travis-ci.org/Antti/rust-amqp.svg)](https: //travis-ci.org/Antti/rust-amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n### [\u00a7](https://docs.rs/amqp/latest/amqp/#what-it-currently-can-do)What it currently can do:\nConnect to server Open/close channels Declare queues/exchanges All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\nHave a look at the examples in examples folder.\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#connecting-to-the-server--openning-channel)Connecting to the server & openning channel:\n> Note: Currently it can\u2019t connect using TLS connections.\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nuse amqp::session::Session;\nuse amqp::table;\nlet mut session = Session::open_url(\"amqp://localhost/\").unwrap();\nlet mut channel = session.open_channel(1).unwrap();\n```\n\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#declaring-queue)Declaring queue:\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nuse amqp::table;\nThe arguments come in following order:\nqueue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete:\nbool, nowait: bool, arguments: Table\nlet queue_declare = channel.queue_declare(\"my_queue_name\", false, true,\nfalse, false, false, table::new());\n```\n\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#publishing-message)Publishing message:\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nchannel.basic_publish(\"\", \"my_queue_name\", true, false,\namqp::protocol::basic::BasicProperties{ content_type:\nSome(\"text\".to_string()), ..Default::default()}, (b\"Hello from\nrust!\").to_vec());\n```\n\nThis will send message: \u201cHello from rust!\u201d to the queue named \u201cmy_queue_name\u201d.\nThe messages have type of Vec, so if you want to send string, first you must convert it to Vec.\n### [\u00a7](https://docs.rs/amqp/latest/amqp/#development-notes)Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nTo generate a new spec, run:\n```\nmake\n```\n\nTo build project, use cargo:\n```\ncargo build\n```\n\nTo build examples:\n```\ncargo test\n```\n\n## Modules[\u00a7](https://docs.rs/amqp/latest/amqp/#modules)\n\n[protocol](https://docs.rs/amqp/latest/amqp/protocol/index.html \"mod amqp::protocol\")\n\n## Structs[\u00a7](https://docs.rs/amqp/latest/amqp/#structs)\n\n[Channel](https://docs.rs/amqp/latest/amqp/struct.Channel.html \"struct amqp::Channel\")\n\n\n[ConsumeBuilder](https://docs.rs/amqp/latest/amqp/struct.ConsumeBuilder.html \"struct amqp::ConsumeBuilder\")\n\n\n[GetResult](https://docs.rs/amqp/latest/amqp/struct.GetResult.html \"struct amqp::GetResult\")\n\n\n[Options](https://docs.rs/amqp/latest/amqp/struct.Options.html \"struct amqp::Options\")\n\n\n[QueueBuilder](https://docs.rs/amqp/latest/amqp/struct.QueueBuilder.html \"struct amqp::QueueBuilder\")\n\n\n[Session](https://docs.rs/amqp/latest/amqp/struct.Session.html \"struct amqp::Session\")\n\n## Enums[\u00a7](https://docs.rs/amqp/latest/amqp/#enums)\n\n[AMQPError](https://docs.rs/amqp/latest/amqp/enum.AMQPError.html \"enum amqp::AMQPError\")\n\n\n[AMQPScheme](https://docs.rs/amqp/latest/amqp/enum.AMQPScheme.html \"enum amqp::AMQPScheme\")\n\n\n[TableEntry](https://docs.rs/amqp/latest/amqp/enum.TableEntry.html \"enum amqp::TableEntry\")\n\n## Constants[\u00a7](https://docs.rs/amqp/latest/amqp/#constants)\n\n[VERSION](https://docs.rs/amqp/latest/amqp/constant.VERSION.html \"constant amqp::VERSION\")\n\n## Traits[\u00a7](https://docs.rs/amqp/latest/amqp/#traits)\n\n[Basic](https://docs.rs/amqp/latest/amqp/trait.Basic.html \"trait amqp::Basic\")\n\n\n[Consumer](https://docs.rs/amqp/latest/amqp/trait.Consumer.html \"trait amqp::Consumer\")\n\n## Type Aliases[\u00a7](https://docs.rs/amqp/latest/amqp/#types)\n\n[Table](https://docs.rs/amqp/latest/amqp/type.Table.html \"type amqp::Table\")\n\n",
              "markdown_with_citations": "[](https://docs.rs/amqp/latest/amqp/all.html \"show sidebar\")\n# Crate amqpCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n#rust-amqp ![Build Status\u27e84\u27e9](https: //travis-ci.org/Antti/rust-amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n### \u00a7\u27e85\u27e9What it currently can do:\nConnect to server Open/close channels Declare queues/exchanges All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\nHave a look at the examples in examples folder.\n#### \u00a7\u27e86\u27e9Connecting to the server & openning channel:\n> Note: Currently it can\u2019t connect using TLS connections.\n\u24d8\u27e87\u27e9```\nuse amqp::session::Session;\nuse amqp::table;\nlet mut session = Session::open_url(\"amqp://localhost/\").unwrap();\nlet mut channel = session.open_channel(1).unwrap();\n```\n\n#### \u00a7\u27e88\u27e9Declaring queue:\n\u24d8\u27e87\u27e9```\nuse amqp::table;\nThe arguments come in following order:\nqueue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete:\nbool, nowait: bool, arguments: Table\nlet queue_declare = channel.queue_declare(\"my_queue_name\", false, true,\nfalse, false, false, table::new());\n```\n\n#### \u00a7\u27e89\u27e9Publishing message:\n\u24d8\u27e87\u27e9```\nchannel.basic_publish(\"\", \"my_queue_name\", true, false,\namqp::protocol::basic::BasicProperties{ content_type:\nSome(\"text\".to_string()), ..Default::default()}, (b\"Hello from\nrust!\").to_vec());\n```\n\nThis will send message: \u201cHello from rust!\u201d to the queue named \u201cmy_queue_name\u201d.\nThe messages have type of Vec, so if you want to send string, first you must convert it to Vec.\n### \u00a7\u27e810\u27e9Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nTo generate a new spec, run:\n```\nmake\n```\n\nTo build project, use cargo:\n```\ncargo build\n```\n\nTo build examples:\n```\ncargo test\n```\n\n## Modules\u00a7\u27e811\u27e9\n\nprotocol\u27e812\u27e9\n\n## Structs\u00a7\u27e813\u27e9\n\nChannel\u27e814\u27e9\n\n\nConsumeBuilder\u27e815\u27e9\n\n\nGetResult\u27e816\u27e9\n\n\nOptions\u27e817\u27e9\n\n\nQueueBuilder\u27e818\u27e9\n\n\nSession\u27e819\u27e9\n\n## Enums\u00a7\u27e820\u27e9\n\nAMQPError\u27e821\u27e9\n\n\nAMQPScheme\u27e822\u27e9\n\n\nTableEntry\u27e823\u27e9\n\n## Constants\u00a7\u27e824\u27e9\n\nVERSION\u27e825\u27e9\n\n## Traits\u00a7\u27e826\u27e9\n\nBasic\u27e827\u27e9\n\n\nConsumer\u27e828\u27e9\n\n## Type Aliases\u00a7\u27e829\u27e9\n\nTable\u27e830\u27e9\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/amqp/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/amqp/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/amqp/latest/src/amqp/lib.rs.html#1-107: Source\n\u27e84\u27e9 https://travis-ci.org/Antti/rust-amqp.svg: ![Build Status\n\u27e85\u27e9 https://docs.rs/amqp/latest/amqp/#what-it-currently-can-do: \u00a7\n\u27e86\u27e9 https://docs.rs/amqp/latest/amqp/#connecting-to-the-server--openning-channel: \u00a7\n\u27e87\u27e9 https://docs.rs/amqp/latest/amqp/: This example is not tested - \u24d8\n\u27e88\u27e9 https://docs.rs/amqp/latest/amqp/#declaring-queue: \u00a7\n\u27e89\u27e9 https://docs.rs/amqp/latest/amqp/#publishing-message: \u00a7\n\u27e810\u27e9 https://docs.rs/amqp/latest/amqp/#development-notes: \u00a7\n\u27e811\u27e9 https://docs.rs/amqp/latest/amqp/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/amqp/latest/amqp/protocol/index.html: mod amqp::protocol - protocol\n\u27e813\u27e9 https://docs.rs/amqp/latest/amqp/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/amqp/latest/amqp/struct.Channel.html: struct amqp::Channel - Channel\n\u27e815\u27e9 https://docs.rs/amqp/latest/amqp/struct.ConsumeBuilder.html: struct amqp::ConsumeBuilder - ConsumeBuilder\n\u27e816\u27e9 https://docs.rs/amqp/latest/amqp/struct.GetResult.html: struct amqp::GetResult - GetResult\n\u27e817\u27e9 https://docs.rs/amqp/latest/amqp/struct.Options.html: struct amqp::Options - Options\n\u27e818\u27e9 https://docs.rs/amqp/latest/amqp/struct.QueueBuilder.html: struct amqp::QueueBuilder - QueueBuilder\n\u27e819\u27e9 https://docs.rs/amqp/latest/amqp/struct.Session.html: struct amqp::Session - Session\n\u27e820\u27e9 https://docs.rs/amqp/latest/amqp/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/amqp/latest/amqp/enum.AMQPError.html: enum amqp::AMQPError - AMQPError\n\u27e822\u27e9 https://docs.rs/amqp/latest/amqp/enum.AMQPScheme.html: enum amqp::AMQPScheme - AMQPScheme\n\u27e823\u27e9 https://docs.rs/amqp/latest/amqp/enum.TableEntry.html: enum amqp::TableEntry - TableEntry\n\u27e824\u27e9 https://docs.rs/amqp/latest/amqp/#constants: \u00a7\n\u27e825\u27e9 https://docs.rs/amqp/latest/amqp/constant.VERSION.html: constant amqp::VERSION - VERSION\n\u27e826\u27e9 https://docs.rs/amqp/latest/amqp/#traits: \u00a7\n\u27e827\u27e9 https://docs.rs/amqp/latest/amqp/trait.Basic.html: trait amqp::Basic - Basic\n\u27e828\u27e9 https://docs.rs/amqp/latest/amqp/trait.Consumer.html: trait amqp::Consumer - Consumer\n\u27e829\u27e9 https://docs.rs/amqp/latest/amqp/#types: \u00a7\n\u27e830\u27e9 https://docs.rs/amqp/latest/amqp/type.Table.html: type amqp::Table - Table\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4303,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117400.5698456"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/amqp",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [17 releases](https://lib.rs/crates/amqp/versions)\nUses old Rust 2015\n0.1.3 |  Jan 24, 2019   \n---|---  \n0.1.2 |  Oct 16, 2018   \n0.1.1 |  Feb 22, 2018   \n0.1.0 |  May 8, 2017   \n0.0.3 |  Nov 20, 2014   \n#**1219** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 27/week @ 2024-11-15 51/week @ 2024-11-22 34/week @ 2024-11-29 71/week @ 2024-12-06 66/week @ 2024-12-13 9/week @ 2024-12-20 10/week @ 2024-12-27 31/week @ 2025-01-03 71/week @ 2025-01-10 66/week @ 2025-01-17 47/week @ 2025-01-24 70/week @ 2025-01-31 84/week @ 2025-02-07 53/week @ 2025-02-14 90/week @ 2025-02-21 93/week @ 2025-02-28\n**335** downloads per month Used in [rabbiteer](https://lib.rs/crates/rabbiteer)\n**MIT/Apache**\n56KB  1K  SLoC\n# rust-amqp [![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/Antti/rust-amqp.svg?branch=master)](https://travis-ci.org/Antti/rust-amqp) [![Crates.io](https://img.shields.io/crates/v/amqp.svg)](https://crates.io/crates/amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n## What it currently can do:\n  * Connect to server\n  * Open/close channels\n  * Declare queues/exchanges\n  * All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\n\n\nHave a look at the examples in ``examples/`` folder.\n### Connecting to the server & openning channel:\n```\n``extern` `crate` amqp`;`\n`use` `amqp`::``Session`;`\n`let` `mut` session `=` `Session`::``open_url`(```\"`amqp://localhost//`\"```)``.``unwrap``(``)``;`\n`let` `mut` channel `=` session`.``open_channel``(``1``)``.``unwrap``(``)``;`\n`\n```\n\n> Note: This library supports TLS connections, via OpenSSL. However, this is an optional feature that is enabled by default but can be disabled at build-time (via ````cargo````` --`no-default-features```` on the command-line, or with ``default`-`features `=` `false``` in your ``Cargo.toml``).\n### Declaring queue:\n```\n```//`The arguments come in following order:`\n``//`queue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete: bool, nowait: bool, arguments: Table`\n`let` queue_declare `=` channel`.``queue_declare``(```\"`my_queue_name`\"```,` `false``,` `true``,` `false``,` `false``,` `false``,` `Table`::``new`(``)``)``;`\n`\n```\n\n### Publishing message:\n```\n`channel`.``basic_publish``(```\"``\"```,` ``\"`my_queue_name`\"```,` `true``,` `false``,`\n  `protocol`::```basic`::``BasicProperties``{` content_type`:` `Some``(```\"`text`\"```.``to_string``(``)``)``,` `..``Default```::``default`(``)````}```,` `(```b``\"`Hello from rust!`\"```)``.``to_vec``(``)``)``;`\n`\n```\n\nThis will send message: \"Hello from rust!\" to the queue named \"my_queue_name\".\nThe messages have type of ````Vec``<``u8``>````, so if you want to send string, first you must convert it to ````Vec``<``u8``>````.\n## Known issues:\n  * We don't handle frames sent to channel 0 after the session was established.\n  * Asynchronous methods are not handled properly see #18.\n  * There are still few places where we call ``unwrap``, not handling error responses properly.\n\n\n## Missing things:\n  * There's no facility to re-establish connection\n  * No heartbeats support\n  * Not all the amqp methods are implemented in a rust interface. You can still call them manually.\n\n\n## Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nYou need to have rustfmt installed to generate protocol.rs To generate a new spec, run:\n```\n```make``\n`\n```\n\nTo build the project and run the testsuite, use cargo:\n```\n```cargo``` build`\n``cargo``` test`\n`\n```\n\nMoreover, there are several source examples to show library usage, and an interactive one to quickly test the library. They can be run directly from cargo:\n```\n```cargo``` run`` --`example` interactive`\n`\n```\n\n## OpenSSL\nOn MacOS X If you have problems with OpenSSL during complication, regarding missing headers or linkage, try:\n```\n```brew``` install openssl`\n``export` `OPENSSL_INCLUDE_DIR``=````````brew```` --`prefix` openssl```/include`\n``export` `OPENSSL_LIB_DIR``=````````brew```` --`prefix` openssl```/lib`\n``cargo``` clean`\n``cargo``` test`\n`\n```\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/antti/rust-amqp/blob/bb1fd14c0cf546fce72118cb1ec703db53e76859/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/antti/rust-amqp/blob/bb1fd14c0cf546fce72118cb1ec703db53e76859/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~8\u201315MB  ~234K SLoC\n  * [amq-proto](https://lib.rs/crates/amq-proto \"0.1.0\")\n  * [env_logger](https://lib.rs/crates/env_logger \"obsolete\") 0.3\n  * [log](https://lib.rs/crates/log \"obsolete\") 0.3\n  * [tls?](https://lib.rs/crates/amqp/features#feature-tls \"optional feature\") [openssl](https://lib.rs/crates/openssl \"obsolete\") 0.7[+tlsv1_1](https://lib.rs/crates/openssl/features#feature-tlsv1_1)[+tlsv1_2](https://lib.rs/crates/openssl/features#feature-tlsv1_2)\n  * [url](https://lib.rs/crates/url \"obsolete\") 1.2\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  17 releases\u27e81\u27e9\nUses old Rust 2015\n0.1.3 |  Jan 24, 2019   \n---|---  \n0.1.2 |  Oct 16, 2018   \n0.1.1 |  Feb 22, 2018   \n0.1.0 |  May 8, 2017   \n0.0.3 |  Nov 20, 2014   \n#**1219** in Asynchronous\u27e82\u27e9\nDownload history 27/week @ 2024-11-15 51/week @ 2024-11-22 34/week @ 2024-11-29 71/week @ 2024-12-06 66/week @ 2024-12-13 9/week @ 2024-12-20 10/week @ 2024-12-27 31/week @ 2025-01-03 71/week @ 2025-01-10 66/week @ 2025-01-17 47/week @ 2025-01-24 70/week @ 2025-01-31 84/week @ 2025-02-07 53/week @ 2025-02-14 90/week @ 2025-02-21 93/week @ 2025-02-28\n**335** downloads per month Used in rabbiteer\u27e83\u27e9\n**MIT/Apache**\n56KB  1K  SLoC\n# rust-amqp ![Build Status\u27e84\u27e9](https://travis-ci.org/Antti/rust-amqp) ![Crates.io\u27e85\u27e9](https://crates.io/crates/amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n## What it currently can do:\n  * Connect to server\n  * Open/close channels\n  * Declare queues/exchanges\n  * All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\n\n\nHave a look at the examples in ``examples/`` folder.\n### Connecting to the server & openning channel:\n```\n``extern` `crate` amqp`;`\n`use` `amqp`::``Session`;`\n`let` `mut` session `=` `Session`::``open_url`(```\"`amqp://localhost//`\"```)``.``unwrap``(``)``;`\n`let` `mut` channel `=` session`.``open_channel``(``1``)``.``unwrap``(``)``;`\n`\n```\n\n> Note: This library supports TLS connections, via OpenSSL. However, this is an optional feature that is enabled by default but can be disabled at build-time (via ````cargo````` --`no-default-features```` on the command-line, or with ``default`-`features `=` `false``` in your ``Cargo.toml``).\n### Declaring queue:\n```\n```//`The arguments come in following order:`\n``//`queue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete: bool, nowait: bool, arguments: Table`\n`let` queue_declare `=` channel`.``queue_declare``(```\"`my_queue_name`\"```,` `false``,` `true``,` `false``,` `false``,` `false``,` `Table`::``new`(``)``)``;`\n`\n```\n\n### Publishing message:\n```\n`channel`.``basic_publish``(```\"``\"```,` ``\"`my_queue_name`\"```,` `true``,` `false``,`\n  `protocol`::```basic`::``BasicProperties``{` content_type`:` `Some``(```\"`text`\"```.``to_string``(``)``)``,` `..``Default```::``default`(``)````}```,` `(```b``\"`Hello from rust!`\"```)``.``to_vec``(``)``)``;`\n`\n```\n\nThis will send message: \"Hello from rust!\" to the queue named \"my_queue_name\".\nThe messages have type of ````Vec``<``u8``>````, so if you want to send string, first you must convert it to ````Vec``<``u8``>````.\n## Known issues:\n  * We don't handle frames sent to channel 0 after the session was established.\n  * Asynchronous methods are not handled properly see #18.\n  * There are still few places where we call ``unwrap``, not handling error responses properly.\n\n\n## Missing things:\n  * There's no facility to re-establish connection\n  * No heartbeats support\n  * Not all the amqp methods are implemented in a rust interface. You can still call them manually.\n\n\n## Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nYou need to have rustfmt installed to generate protocol.rs To generate a new spec, run:\n```\n```make``\n`\n```\n\nTo build the project and run the testsuite, use cargo:\n```\n```cargo``` build`\n``cargo``` test`\n`\n```\n\nMoreover, there are several source examples to show library usage, and an interactive one to quickly test the library. They can be run directly from cargo:\n```\n```cargo``` run`` --`example` interactive`\n`\n```\n\n## OpenSSL\nOn MacOS X If you have problems with OpenSSL during complication, regarding missing headers or linkage, try:\n```\n```brew``` install openssl`\n``export` `OPENSSL_INCLUDE_DIR``=````````brew```` --`prefix` openssl```/include`\n``export` `OPENSSL_LIB_DIR``=````````brew```` --`prefix` openssl```/lib`\n``cargo``` clean`\n``cargo``` test`\n`\n```\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e86\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e87\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~8\u201315MB  ~234K SLoC\n  * amq-proto\u27e88\u27e9\n  * env_logger\u27e89\u27e9 0.3\n  * log\u27e810\u27e9 0.3\n  * tls?\u27e811\u27e9 openssl\u27e812\u27e9 0.7+tlsv1_1\u27e813\u27e9+tlsv1_2\u27e814\u27e9\n  * url\u27e815\u27e9 1.2\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/amqp/versions: 17 releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/rabbiteer: rabbiteer\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/Antti/rust-amqp.svg?branch=master: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/amqp.svg: ![Crates.io\n\u27e86\u27e9 https://github.com/antti/rust-amqp/blob/bb1fd14c0cf546fce72118cb1ec703db53e76859/LICENSE-APACHE: LICENSE-APACHE\n\u27e87\u27e9 https://github.com/antti/rust-amqp/blob/bb1fd14c0cf546fce72118cb1ec703db53e76859/LICENSE-MIT: LICENSE-MIT\n\u27e88\u27e9 https://lib.rs/crates/amq-proto: 0.1.0 - amq-proto\n\u27e89\u27e9 https://lib.rs/crates/env_logger: obsolete - env_logger\n\u27e810\u27e9 https://lib.rs/crates/log: obsolete - log\n\u27e811\u27e9 https://lib.rs/crates/amqp/features#feature-tls: optional feature - tls?\n\u27e812\u27e9 https://lib.rs/crates/openssl: obsolete - openssl\n\u27e813\u27e9 https://lib.rs/crates/openssl/features#feature-tlsv1_1: +tlsv1_1\n\u27e814\u27e9 https://lib.rs/crates/openssl/features#feature-tlsv1_2: +tlsv1_2\n\u27e815\u27e9 https://lib.rs/crates/url: obsolete - url\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5727,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117400.9524885"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libtinyvec_macros-497427804be4e0f4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matches@0.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matches",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.10\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libmatches-44e87a210167b842.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi-build@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-build-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-build-0.1.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbuild-1dcf362043ad40ec.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbuild-1dcf362043ad40ec.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-1.0.1\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libpercent_encoding-5f25c374b89ea156.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8-ranges@0.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8-ranges-0.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_ranges",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8-ranges-0.1.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libutf8_ranges-35d05d09e77c9245.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-0.5.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbyteorder-580fe845fcbb8161.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liblog-dae577fc2dcb9112.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bit-vec@0.4.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit-vec-0.4.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bit_vec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit-vec-0.4.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbit_vec-4d3b6f9ad77ce25f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustc-demangle@0.1.25",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.25\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_demangle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.25\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\librustc_demangle-2c59e9af3e30c70e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.3.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "use_std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liblog-076b714481008388.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.5.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libautocfg-ff5884693664d457.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libautocfg-ff5884693664d457.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.174\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.174\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\libc-3975fc4c41c56526\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\libc-3975fc4c41c56526\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#kernel32-sys@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\kernel32-sys-03ef0eff97ced5d6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\kernel32-sys-03ef0eff97ced5d6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "freebsd11",
                "libc_const_extern_fn"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\libc-f8c1eb4327bd75a1\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#kernel32-sys@0.2.2",
              "linked_libs": [
                "dylib=kernel32"
              ],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\kernel32-sys-677f1890fbc00605\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-bidi@0.3.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_bidi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "hardcoded-data",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libunicode_bidi-5281c40a462114c0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.174\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.174\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liblibc-980d952702f3e3fd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\num-traits-0cbb3969529bcec6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\num-traits-0cbb3969529bcec6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@0.1.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-0.1.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-0.1.11\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libmemchr-1fc0ad76b3e9c144.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_syntax",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.3.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libregex_syntax-9744da09d1da875a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_total_cmp"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\num-traits-9498b50f6e487171\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbacktrace-d69b0d538ae281e2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "tinyvec_macros"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libtinyvec-eb2320a67abf7dfb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aho-corasick@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aho_corasick",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-0.5.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libaho_corasick-e9466f429908c1ff.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#error-chain@0.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "error_chain",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "backtrace",
                "default",
                "example_generated"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liberror_chain-14bf4be8a50f7c7e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libnum_traits-68b4662226979ac7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-normalization@0.1.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_normalization",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libunicode_normalization-51a4b38b5ab23570.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.1.43",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.1.43\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.1.43\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libnum_traits-6f773de209d76324.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#enum_primitive@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\enum_primitive-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "enum_primitive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\enum_primitive-0.1.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libenum_primitive-1dc96af8183f5c8b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#idna@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\idna-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "idna",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\idna-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libidna-e7967ae250d291fd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#url@1.7.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\url-1.7.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "url",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\url-1.7.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liburl-8665cc2f068fb845.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.2.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.2.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.2.8\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libwinapi-b85acda13bcb8fb7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#kernel32-sys@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "kernel32",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libkernel32-e294b5dc3c07ba66.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thread-id@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread-id-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thread_id",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread-id-2.0.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libthread_id-f6267e75445e7446.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thread_local@0.2.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-0.2.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thread_local",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-0.2.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libthread_local-e3876a69db29bc4f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex@0.1.80",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-0.1.80\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-0.1.80\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libregex-fd0be817fc7e1946.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#env_logger@0.3.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\env_logger-0.3.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "env_logger",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\env_logger-0.3.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "regex"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libenv_logger-483d99b607a80c4e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:87:9\n   |\n87 |         try!(writer.write_u16::<BigEndian>(self.class_id));\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n   |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |         required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1931,
                        "byte_start": 1881,
                        "column_end": 59,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.class_id));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1931,
                        "byte_start": 1881,
                        "column_end": 59,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.class_id));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:88:9\n   |\n88 |         try!(writer.write_u16::<BigEndian>(self.method_id));\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n   |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |         required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1992,
                        "byte_start": 1941,
                        "column_end": 60,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.method_id));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1992,
                        "byte_start": 1941,
                        "column_end": 60,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.method_id));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:89:9\n   |\n89 |         try!(writer.write_all(self.arguments.inner()));\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n   |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |         required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2048,
                        "byte_start": 2002,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.arguments.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2048,
                        "byte_start": 2002,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.arguments.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:99:24\n   |\n99 |         let class_id = try!(reader.read_u16::<BigEndian>());\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                        |\n   |                        the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2475,
                        "byte_start": 2439,
                        "column_end": 60,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 99,
                        "line_start": 99,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 24,
                            "text": "        let class_id = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2475,
                        "byte_start": 2439,
                        "column_end": 60,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 99,
                        "line_start": 99,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 24,
                            "text": "        let class_id = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:100:25\n    |\n100 |         let method_id = try!(reader.read_u16::<BigEndian>());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                         |\n    |                         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2537,
                        "byte_start": 2501,
                        "column_end": 61,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 25,
                            "text": "        let method_id = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2537,
                        "byte_start": 2501,
                        "column_end": 61,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 25,
                            "text": "        let method_id = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:102:9\n    |\n102 |         try!(reader.read_to_end(&mut arguments));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2623,
                        "byte_start": 2583,
                        "column_end": 49,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 102,
                        "line_start": 102,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_to_end(&mut arguments));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2623,
                        "byte_start": 2583,
                        "column_end": 49,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 102,
                        "line_start": 102,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_to_end(&mut arguments));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:122:9\n    |\n122 |         try!(reader.read_exact(&mut header));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3137,
                        "byte_start": 3101,
                        "column_end": 45,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 122,
                        "line_start": 122,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_exact(&mut header));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3137,
                        "byte_start": 3101,
                        "column_end": 45,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 122,
                        "line_start": 122,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_exact(&mut header));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:127:9\n    |\n127 |         try!(reader.read_exact(&mut payload));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3447,
                        "byte_start": 3410,
                        "column_end": 46,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 127,
                        "line_start": 127,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_exact(&mut payload));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3447,
                        "byte_start": 3410,
                        "column_end": 46,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 127,
                        "line_start": 127,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_exact(&mut payload));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:128:25\n    |\n128 |         let frame_end = try!(reader.read_u8());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^\n    |                         |\n    |                         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3495,
                        "byte_start": 3473,
                        "column_end": 47,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 25,
                            "text": "        let frame_end = try!(reader.read_u8());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3495,
                        "byte_start": 3473,
                        "column_end": 47,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 25,
                            "text": "        let frame_end = try!(reader.read_u8());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:147:9\n    |\n147 |         try!(writer.write_u8(self.frame_type as u8));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4187,
                        "byte_start": 4143,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 147,
                        "line_start": 147,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u8(self.frame_type as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4187,
                        "byte_start": 4143,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 147,
                        "line_start": 147,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u8(self.frame_type as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:148:9\n    |\n148 |         try!(writer.write_u16::<BigEndian>(self.channel));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4246,
                        "byte_start": 4197,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 148,
                        "line_start": 148,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.channel));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4246,
                        "byte_start": 4197,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 148,
                        "line_start": 148,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.channel));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:149:9\n    |\n149 |         try!(writer.write_u32::<BigEndian>(self.payload.inner().len() as u32));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4326,
                        "byte_start": 4256,
                        "column_end": 79,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 149,
                        "line_start": 149,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u32::<BigEndian>(self.payload.inner().len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4326,
                        "byte_start": 4256,
                        "column_end": 79,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 149,
                        "line_start": 149,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u32::<BigEndian>(self.payload.inner().len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:150:9\n    |\n150 |         try!(writer.write_all(self.payload.inner()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4380,
                        "byte_start": 4336,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 150,
                        "line_start": 150,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.payload.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4380,
                        "byte_start": 4336,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 150,
                        "line_start": 150,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.payload.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:151:9\n    |\n151 |         try!(writer.write_u8(0xCE));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4417,
                        "byte_start": 4390,
                        "column_end": 36,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u8(0xCE));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4417,
                        "byte_start": 4390,
                        "column_end": 36,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u8(0xCE));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:168:29\n    |\n168 |         let content_class = try!(reader.read_u16::<BigEndian>());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                             |\n    |                             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4865,
                        "byte_start": 4829,
                        "column_end": 65,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 29,
                            "text": "        let content_class = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4865,
                        "byte_start": 4829,
                        "column_end": 65,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 29,
                            "text": "        let content_class = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:169:22\n    |\n169 |         let weight = try!(reader.read_u16::<BigEndian>()); //0 all the time for now\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                      |\n    |                      the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                      required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4924,
                        "byte_start": 4888,
                        "column_end": 58,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 22,
                            "text": "        let weight = try!(reader.read_u16::<BigEndian>()); //0 all the time for now"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4924,
                        "byte_start": 4888,
                        "column_end": 58,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 22,
                            "text": "        let weight = try!(reader.read_u16::<BigEndian>()); //0 all the time for now"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:170:25\n    |\n170 |         let body_size = try!(reader.read_u64::<BigEndian>());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                         |\n    |                         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5011,
                        "byte_start": 4975,
                        "column_end": 61,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 170,
                        "line_start": 170,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 25,
                            "text": "        let body_size = try!(reader.read_u64::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5011,
                        "byte_start": 4975,
                        "column_end": 61,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 170,
                        "line_start": 170,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 25,
                            "text": "        let body_size = try!(reader.read_u64::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:171:32\n    |\n171 |         let properties_flags = try!(reader.read_u16::<BigEndian>());\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                                |\n    |                                the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                                required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5080,
                        "byte_start": 5044,
                        "column_end": 68,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 171,
                        "line_start": 171,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 32,
                            "text": "        let properties_flags = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5080,
                        "byte_start": 5044,
                        "column_end": 68,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 171,
                        "line_start": 171,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 32,
                            "text": "        let properties_flags = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:173:9\n    |\n173 |         try!(reader.read_to_end(&mut properties));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5168,
                        "byte_start": 5127,
                        "column_end": 50,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 173,
                        "line_start": 173,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_to_end(&mut properties));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5168,
                        "byte_start": 5127,
                        "column_end": 50,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 173,
                        "line_start": 173,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_to_end(&mut properties));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:185:9\n    |\n185 |         try!(writer.write_u16::<BigEndian>(self.content_class));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5623,
                        "byte_start": 5568,
                        "column_end": 64,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 185,
                        "line_start": 185,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.content_class));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5623,
                        "byte_start": 5568,
                        "column_end": 64,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 185,
                        "line_start": 185,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.content_class));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:186:9\n    |\n186 |         try!(writer.write_u16::<BigEndian>(self.weight)); //0 all the time for now\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5681,
                        "byte_start": 5633,
                        "column_end": 57,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 186,
                        "line_start": 186,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.weight)); //0 all the time for now"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5681,
                        "byte_start": 5633,
                        "column_end": 57,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 186,
                        "line_start": 186,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.weight)); //0 all the time for now"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:187:9\n    |\n187 |         try!(writer.write_u64::<BigEndian>(self.body_size));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5767,
                        "byte_start": 5716,
                        "column_end": 60,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 187,
                        "line_start": 187,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u64::<BigEndian>(self.body_size));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5767,
                        "byte_start": 5716,
                        "column_end": 60,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 187,
                        "line_start": 187,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u64::<BigEndian>(self.body_size));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:188:9\n    |\n188 |         try!(writer.write_u16::<BigEndian>(self.properties_flags));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5835,
                        "byte_start": 5777,
                        "column_end": 67,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 188,
                        "line_start": 188,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.properties_flags));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5835,
                        "byte_start": 5777,
                        "column_end": 67,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 188,
                        "line_start": 188,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.properties_flags));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:189:9\n    |\n189 |         try!(writer.write_all(self.properties.inner()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5892,
                        "byte_start": 5845,
                        "column_end": 56,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.properties.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5892,
                        "byte_start": 5845,
                        "column_end": 56,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.properties.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:41:37\n   |\n41 |     let (entry, entry_size) = match try!(reader.read_u8()) {\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^\n   |                                     |\n   |                                     the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                     required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 883,
                        "byte_start": 861,
                        "column_end": 59,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 41,
                        "line_start": 41,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 37,
                            "text": "    let (entry, entry_size) = match try!(reader.read_u8()) {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 883,
                        "byte_start": 861,
                        "column_end": 59,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 41,
                        "line_start": 41,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 37,
                            "text": "    let (entry, entry_size) = match try!(reader.read_u8()) {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:42:36\n   |\n42 |         b't' => (TableEntry::Bool(!try!(reader.read_u8()) != 0), 1),\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^\n   |                                    |\n   |                                    the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                    required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 943,
                        "byte_start": 921,
                        "column_end": 58,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 42,
                        "line_start": 42,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 36,
                            "text": "        b't' => (TableEntry::Bool(!try!(reader.read_u8()) != 0), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 943,
                        "byte_start": 921,
                        "column_end": 58,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 42,
                        "line_start": 42,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 36,
                            "text": "        b't' => (TableEntry::Bool(!try!(reader.read_u8()) != 0), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:43:44\n   |\n43 |         b'b' => (TableEntry::ShortShortInt(try!(reader.read_i8())), 1),\n   |                                            ^^^^^^^^^^^^^^^^^^^^^^\n   |                                            |\n   |                                            the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                            required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1020,
                        "byte_start": 998,
                        "column_end": 66,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 44,
                            "text": "        b'b' => (TableEntry::ShortShortInt(try!(reader.read_i8())), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1020,
                        "byte_start": 998,
                        "column_end": 66,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 44,
                            "text": "        b'b' => (TableEntry::ShortShortInt(try!(reader.read_i8())), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:44:45\n   |\n44 |         b'B' => (TableEntry::ShortShortUint(try!(reader.read_u8())), 1),\n   |                                             ^^^^^^^^^^^^^^^^^^^^^^\n   |                                             |\n   |                                             the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                             required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1093,
                        "byte_start": 1071,
                        "column_end": 67,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 44,
                        "line_start": 44,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 45,
                            "text": "        b'B' => (TableEntry::ShortShortUint(try!(reader.read_u8())), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1093,
                        "byte_start": 1071,
                        "column_end": 67,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 44,
                        "line_start": 44,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 45,
                            "text": "        b'B' => (TableEntry::ShortShortUint(try!(reader.read_u8())), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:45:39\n   |\n45 |         b'U' => (TableEntry::ShortInt(try!(reader.read_i16::<BigEndian>())), 2),\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                       |\n   |                                       the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                       required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1174,
                        "byte_start": 1138,
                        "column_end": 75,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 39,
                            "text": "        b'U' => (TableEntry::ShortInt(try!(reader.read_i16::<BigEndian>())), 2),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1174,
                        "byte_start": 1138,
                        "column_end": 75,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 39,
                            "text": "        b'U' => (TableEntry::ShortInt(try!(reader.read_i16::<BigEndian>())), 2),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:46:40\n   |\n46 |         b'u' => (TableEntry::ShortUint(try!(reader.read_u16::<BigEndian>())), 2),\n   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                        |\n   |                                        the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1256,
                        "byte_start": 1220,
                        "column_end": 76,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 40,
                            "text": "        b'u' => (TableEntry::ShortUint(try!(reader.read_u16::<BigEndian>())), 2),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1256,
                        "byte_start": 1220,
                        "column_end": 76,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 40,
                            "text": "        b'u' => (TableEntry::ShortUint(try!(reader.read_u16::<BigEndian>())), 2),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:47:38\n   |\n47 |         b'I' => (TableEntry::LongInt(try!(reader.read_i32::<BigEndian>())), 4),\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                      |\n   |                                      the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                      required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1336,
                        "byte_start": 1300,
                        "column_end": 74,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 38,
                            "text": "        b'I' => (TableEntry::LongInt(try!(reader.read_i32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1336,
                        "byte_start": 1300,
                        "column_end": 74,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 38,
                            "text": "        b'I' => (TableEntry::LongInt(try!(reader.read_i32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:48:39\n   |\n48 |         b'i' => (TableEntry::LongUint(try!(reader.read_u32::<BigEndian>())), 4),\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                       |\n   |                                       the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                       required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1417,
                        "byte_start": 1381,
                        "column_end": 75,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 48,
                        "line_start": 48,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 39,
                            "text": "        b'i' => (TableEntry::LongUint(try!(reader.read_u32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1417,
                        "byte_start": 1381,
                        "column_end": 75,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 48,
                        "line_start": 48,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 39,
                            "text": "        b'i' => (TableEntry::LongUint(try!(reader.read_u32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:49:42\n   |\n49 |         b'L' => (TableEntry::LongLongInt(try!(reader.read_i64::<BigEndian>())), 8),\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                          |\n   |                                          the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                          required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1501,
                        "byte_start": 1465,
                        "column_end": 78,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 49,
                        "line_start": 49,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 42,
                            "text": "        b'L' => (TableEntry::LongLongInt(try!(reader.read_i64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1501,
                        "byte_start": 1465,
                        "column_end": 78,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 49,
                        "line_start": 49,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 42,
                            "text": "        b'L' => (TableEntry::LongLongInt(try!(reader.read_i64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:50:43\n   |\n50 |         b'l' => (TableEntry::LongLongUint(try!(reader.read_u64::<BigEndian>())), 8),\n   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                           |\n   |                                           the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                           required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1586,
                        "byte_start": 1550,
                        "column_end": 79,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 43,
                            "text": "        b'l' => (TableEntry::LongLongUint(try!(reader.read_u64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1586,
                        "byte_start": 1550,
                        "column_end": 79,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 43,
                            "text": "        b'l' => (TableEntry::LongLongUint(try!(reader.read_u64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:51:36\n   |\n51 |         b'f' => (TableEntry::Float(try!(reader.read_f32::<BigEndian>())), 4),\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                    |\n   |                                    the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                    required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1664,
                        "byte_start": 1628,
                        "column_end": 72,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 72,
                            "highlight_start": 36,
                            "text": "        b'f' => (TableEntry::Float(try!(reader.read_f32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1664,
                        "byte_start": 1628,
                        "column_end": 72,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 72,
                            "highlight_start": 36,
                            "text": "        b'f' => (TableEntry::Float(try!(reader.read_f32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:52:37\n   |\n52 |         b'd' => (TableEntry::Double(try!(reader.read_f64::<BigEndian>())), 8),\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                     |\n   |                                     the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                     required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1743,
                        "byte_start": 1707,
                        "column_end": 73,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 37,
                            "text": "        b'd' => (TableEntry::Double(try!(reader.read_f64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1743,
                        "byte_start": 1707,
                        "column_end": 73,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 37,
                            "text": "        b'd' => (TableEntry::Double(try!(reader.read_f64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:54:38\n   |\n54 |             TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n   |                                      |\n   |                                      the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                      required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1828,
                        "byte_start": 1806,
                        "column_end": 60,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 54,
                        "line_start": 54,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 38,
                            "text": "            TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1828,
                        "byte_start": 1806,
                        "column_end": 60,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 54,
                        "line_start": 54,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 38,
                            "text": "            TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:54:62\n   |\n54 |             TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))\n   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                                              |\n   |                                                              the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                                              required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1866,
                        "byte_start": 1830,
                        "column_end": 98,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 54,
                        "line_start": 54,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 98,
                            "highlight_start": 62,
                            "text": "            TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1866,
                        "byte_start": 1830,
                        "column_end": 98,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 54,
                        "line_start": 54,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 98,
                            "highlight_start": 62,
                            "text": "            TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:63:24\n   |\n63 |             let size = try!(reader.read_u32::<BigEndian>()) as usize;\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                        |\n   |                        the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2191,
                        "byte_start": 2155,
                        "column_end": 60,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 24,
                            "text": "            let size = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2191,
                        "byte_start": 2155,
                        "column_end": 60,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 24,
                            "text": "            let size = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:65:13\n   |\n65 |             try!(reader.read(&mut buffer[..]));\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |             |\n   |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |             required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2303,
                        "byte_start": 2269,
                        "column_end": 47,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 13,
                            "text": "            try!(reader.read(&mut buffer[..]));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2303,
                        "byte_start": 2269,
                        "column_end": 47,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 13,
                            "text": "            try!(reader.read(&mut buffer[..]));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:71:29\n   |\n71 |             let array_len = try!(reader.read_u32::<BigEndian>()) as usize;\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                             |\n   |                             the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                             required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2555,
                        "byte_start": 2519,
                        "column_end": 65,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 71,
                        "line_start": 71,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 29,
                            "text": "            let array_len = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2555,
                        "byte_start": 2519,
                        "column_end": 65,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 71,
                        "line_start": 71,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 29,
                            "text": "            let array_len = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:82:40\n   |\n82 |         b'T' => (TableEntry::Timestamp(try!(reader.read_u64::<BigEndian>())), 8),\n   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                        |\n   |                                        the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3011,
                        "byte_start": 2975,
                        "column_end": 76,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 82,
                        "line_start": 82,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 40,
                            "text": "        b'T' => (TableEntry::Timestamp(try!(reader.read_u64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3011,
                        "byte_start": 2975,
                        "column_end": 76,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 82,
                        "line_start": 82,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 40,
                            "text": "        b'T' => (TableEntry::Timestamp(try!(reader.read_u64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:100:13\n    |\n100 |             try!(writer.write_u8(b't'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3637,
                        "byte_start": 3610,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b't'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3637,
                        "byte_start": 3610,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b't'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:101:13\n    |\n101 |             try!(writer.write_u8(val as u8));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3683,
                        "byte_start": 3651,
                        "column_end": 45,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(val as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3683,
                        "byte_start": 3651,
                        "column_end": 45,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(val as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:104:13\n    |\n104 |             try!(writer.write_u8(b'b'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3778,
                        "byte_start": 3751,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 104,
                        "line_start": 104,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'b'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3778,
                        "byte_start": 3751,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 104,
                        "line_start": 104,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'b'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:105:13\n    |\n105 |             try!(writer.write_i8(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3818,
                        "byte_start": 3792,
                        "column_end": 39,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i8(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3818,
                        "byte_start": 3792,
                        "column_end": 39,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i8(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:108:13\n    |\n108 |             try!(writer.write_u8(b'B'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3914,
                        "byte_start": 3887,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 108,
                        "line_start": 108,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'B'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3914,
                        "byte_start": 3887,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 108,
                        "line_start": 108,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'B'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:109:13\n    |\n109 |             try!(writer.write_u8(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3954,
                        "byte_start": 3928,
                        "column_end": 39,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 109,
                        "line_start": 109,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3954,
                        "byte_start": 3928,
                        "column_end": 39,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 109,
                        "line_start": 109,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:112:13\n    |\n112 |             try!(writer.write_u8(b'U'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4044,
                        "byte_start": 4017,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 112,
                        "line_start": 112,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'U'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4044,
                        "byte_start": 4017,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 112,
                        "line_start": 112,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'U'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:113:13\n    |\n113 |             try!(writer.write_i16::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4098,
                        "byte_start": 4058,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i16::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4098,
                        "byte_start": 4058,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i16::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:116:13\n    |\n116 |             try!(writer.write_u8(b'u'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4189,
                        "byte_start": 4162,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 116,
                        "line_start": 116,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'u'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4189,
                        "byte_start": 4162,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 116,
                        "line_start": 116,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'u'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:117:13\n    |\n117 |             try!(writer.write_u16::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4243,
                        "byte_start": 4203,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 117,
                        "line_start": 117,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u16::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4243,
                        "byte_start": 4203,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 117,
                        "line_start": 117,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u16::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:120:13\n    |\n120 |             try!(writer.write_u8(b'I'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4332,
                        "byte_start": 4305,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'I'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4332,
                        "byte_start": 4305,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'I'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:121:13\n    |\n121 |             try!(writer.write_i32::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4386,
                        "byte_start": 4346,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4386,
                        "byte_start": 4346,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:124:13\n    |\n124 |             try!(writer.write_u8(b'i'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4476,
                        "byte_start": 4449,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 124,
                        "line_start": 124,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'i'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4476,
                        "byte_start": 4449,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 124,
                        "line_start": 124,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'i'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:125:13\n    |\n125 |             try!(writer.write_u32::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4530,
                        "byte_start": 4490,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 125,
                        "line_start": 125,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4530,
                        "byte_start": 4490,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 125,
                        "line_start": 125,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:128:13\n    |\n128 |             try!(writer.write_u8(b'L'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4623,
                        "byte_start": 4596,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'L'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4623,
                        "byte_start": 4596,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'L'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:129:13\n    |\n129 |             try!(writer.write_i64::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4677,
                        "byte_start": 4637,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 129,
                        "line_start": 129,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4677,
                        "byte_start": 4637,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 129,
                        "line_start": 129,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:132:13\n    |\n132 |             try!(writer.write_u8(b'l'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4771,
                        "byte_start": 4744,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 132,
                        "line_start": 132,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'l'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4771,
                        "byte_start": 4744,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 132,
                        "line_start": 132,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'l'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:133:13\n    |\n133 |             try!(writer.write_u64::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4825,
                        "byte_start": 4785,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 133,
                        "line_start": 133,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4825,
                        "byte_start": 4785,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 133,
                        "line_start": 133,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:136:13\n    |\n136 |             try!(writer.write_u8(b'f'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4912,
                        "byte_start": 4885,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 136,
                        "line_start": 136,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'f'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4912,
                        "byte_start": 4885,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 136,
                        "line_start": 136,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'f'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:137:13\n    |\n137 |             try!(writer.write_f32::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4966,
                        "byte_start": 4926,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 137,
                        "line_start": 137,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_f32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4966,
                        "byte_start": 4926,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 137,
                        "line_start": 137,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_f32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:140:13\n    |\n140 |             try!(writer.write_u8(b'd'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5054,
                        "byte_start": 5027,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 140,
                        "line_start": 140,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'd'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5054,
                        "byte_start": 5027,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 140,
                        "line_start": 140,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'd'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:141:13\n    |\n141 |             try!(writer.write_f64::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5108,
                        "byte_start": 5068,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 141,
                        "line_start": 141,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_f64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5108,
                        "byte_start": 5068,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 141,
                        "line_start": 141,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_f64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:144:13\n    |\n144 |             try!(writer.write_u8(b'D'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5211,
                        "byte_start": 5184,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 144,
                        "line_start": 144,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'D'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5211,
                        "byte_start": 5184,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 144,
                        "line_start": 144,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'D'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:145:13\n    |\n145 |             try!(writer.write_u8(scale));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5253,
                        "byte_start": 5225,
                        "column_end": 41,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 145,
                        "line_start": 145,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(scale));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5253,
                        "byte_start": 5225,
                        "column_end": 41,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 145,
                        "line_start": 145,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(scale));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:146:13\n    |\n146 |             try!(writer.write_u32::<BigEndian>(value));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5309,
                        "byte_start": 5267,
                        "column_end": 55,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 146,
                        "line_start": 146,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(value));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5309,
                        "byte_start": 5267,
                        "column_end": 55,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 146,
                        "line_start": 146,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(value));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:154:13\n    |\n154 |             try!(writer.write_u8(b'S'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5597,
                        "byte_start": 5570,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 154,
                        "line_start": 154,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'S'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5597,
                        "byte_start": 5570,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 154,
                        "line_start": 154,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'S'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:155:13\n    |\n155 |             try!(writer.write_u32::<BigEndian>(str.len() as u32));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5664,
                        "byte_start": 5611,
                        "column_end": 66,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 155,
                        "line_start": 155,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(str.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5664,
                        "byte_start": 5611,
                        "column_end": 66,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 155,
                        "line_start": 155,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(str.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:156:13\n    |\n156 |             try!(writer.write_all(str.as_bytes()));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5716,
                        "byte_start": 5678,
                        "column_end": 51,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 156,
                        "line_start": 156,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_all(str.as_bytes()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5716,
                        "byte_start": 5678,
                        "column_end": 51,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 156,
                        "line_start": 156,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_all(str.as_bytes()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:159:13\n    |\n159 |             try!(writer.write_u8(b'A'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5812,
                        "byte_start": 5785,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 159,
                        "line_start": 159,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'A'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5812,
                        "byte_start": 5785,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 159,
                        "line_start": 159,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'A'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:164:13\n    |\n164 |             try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6042,
                        "byte_start": 5982,
                        "column_end": 73,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 164,
                        "line_start": 164,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6042,
                        "byte_start": 5982,
                        "column_end": 73,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 164,
                        "line_start": 164,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:165:13\n    |\n165 |             try!(writer.write(&tmp_buffer));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6087,
                        "byte_start": 6056,
                        "column_end": 44,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 165,
                        "line_start": 165,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 13,
                            "text": "            try!(writer.write(&tmp_buffer));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6087,
                        "byte_start": 6056,
                        "column_end": 44,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 165,
                        "line_start": 165,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 13,
                            "text": "            try!(writer.write(&tmp_buffer));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:168:13\n    |\n168 |             try!(writer.write_u8(b'T'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6178,
                        "byte_start": 6151,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'T'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6178,
                        "byte_start": 6151,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'T'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:169:13\n    |\n169 |             try!(writer.write_u64::<BigEndian>(val))\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6232,
                        "byte_start": 6192,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u64::<BigEndian>(val))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6232,
                        "byte_start": 6192,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u64::<BigEndian>(val))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:172:13\n    |\n172 |             try!(writer.write_u8(b'F'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6329,
                        "byte_start": 6302,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 172,
                        "line_start": 172,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'F'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6329,
                        "byte_start": 6302,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 172,
                        "line_start": 172,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'F'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:175:29\n    |\n175 |         TableEntry::Void => try!(writer.write_u8(b'V')),\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                             |\n    |                             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6443,
                        "byte_start": 6416,
                        "column_end": 56,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 175,
                        "line_start": 175,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 29,
                            "text": "        TableEntry::Void => try!(writer.write_u8(b'V')),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6443,
                        "byte_start": 6416,
                        "column_end": 56,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 175,
                        "line_start": 175,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 29,
                            "text": "        TableEntry::Void => try!(writer.write_u8(b'V')),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:182:21\n    |\n182 |     let table_len = try!(reader.read_u32::<BigEndian>()) as usize;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6636,
                        "byte_start": 6600,
                        "column_end": 57,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 182,
                        "line_start": 182,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 21,
                            "text": "    let table_len = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6636,
                        "byte_start": 6600,
                        "column_end": 57,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 182,
                        "line_start": 182,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 21,
                            "text": "    let table_len = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:187:30\n    |\n187 |         let field_name_len = try!(reader.read_u8()) as usize;\n    |                              ^^^^^^^^^^^^^^^^^^^^^^\n    |                              |\n    |                              the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6812,
                        "byte_start": 6790,
                        "column_end": 52,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 187,
                        "line_start": 187,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 30,
                            "text": "        let field_name_len = try!(reader.read_u8()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6812,
                        "byte_start": 6790,
                        "column_end": 52,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 187,
                        "line_start": 187,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 30,
                            "text": "        let field_name_len = try!(reader.read_u8()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:189:9\n    |\n189 |         try!(reader.read(&mut field_name[..]));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6934,
                        "byte_start": 6896,
                        "column_end": 47,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 9,
                            "text": "        try!(reader.read(&mut field_name[..]));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6934,
                        "byte_start": 6896,
                        "column_end": 47,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 9,
                            "text": "        try!(reader.read(&mut field_name[..]));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:204:9\n    |\n204 |         try!(tmp_buffer.write_u8(field_name.len() as u8));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7802,
                        "byte_start": 7753,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 204,
                        "line_start": 204,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(tmp_buffer.write_u8(field_name.len() as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7802,
                        "byte_start": 7753,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 204,
                        "line_start": 204,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(tmp_buffer.write_u8(field_name.len() as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:205:9\n    |\n205 |         try!(tmp_buffer.write_all(field_name.as_bytes()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7861,
                        "byte_start": 7812,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 205,
                        "line_start": 205,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(tmp_buffer.write_all(field_name.as_bytes()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7861,
                        "byte_start": 7812,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 205,
                        "line_start": 205,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(tmp_buffer.write_all(field_name.as_bytes()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:208:5\n    |\n208 |     try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7996,
                        "byte_start": 7936,
                        "column_end": 65,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 208,
                        "line_start": 208,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 5,
                            "text": "    try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7996,
                        "byte_start": 7936,
                        "column_end": 65,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 208,
                        "line_start": 208,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 5,
                            "text": "    try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:209:5\n    |\n209 |     try!(writer.write_all(&tmp_buffer));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8037,
                        "byte_start": 8002,
                        "column_end": 40,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 209,
                        "line_start": 209,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 5,
                            "text": "    try!(writer.write_all(&tmp_buffer));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8037,
                        "byte_start": 8002,
                        "column_end": 40,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 209,
                        "line_start": 209,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 5,
                            "text": "    try!(writer.write_all(&tmp_buffer));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:23:9\n   |\n23 |         self.cursor.read_u8().map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 659,
                    "byte_start": 618,
                    "column_end": 50,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 9,
                        "text": "        self.cursor.read_u8().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:23:39\n   |\n23 |         self.cursor.read_u8().map_err(From::from)\n   |                                       ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 658,
                    "byte_start": 648,
                    "column_end": 49,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 39,
                        "text": "        self.cursor.read_u8().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:28:9\n   |\n28 |         self.cursor.read_u32::<BigEndian>().map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 810,
                    "byte_start": 755,
                    "column_end": 64,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 64,
                        "highlight_start": 9,
                        "text": "        self.cursor.read_u32::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:28:53\n   |\n28 |         self.cursor.read_u32::<BigEndian>().map_err(From::from)\n   |                                                     ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 809,
                    "byte_start": 799,
                    "column_end": 63,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 53,
                        "text": "        self.cursor.read_u32::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:33:9\n   |\n33 |         self.cursor.read_u64::<BigEndian>().map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 965,
                    "byte_start": 910,
                    "column_end": 64,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 64,
                        "highlight_start": 9,
                        "text": "        self.cursor.read_u64::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:33:53\n   |\n33 |         self.cursor.read_u64::<BigEndian>().map_err(From::from)\n   |                                                     ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 964,
                    "byte_start": 954,
                    "column_end": 63,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 53,
                        "text": "        self.cursor.read_u64::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:38:9\n   |\n38 |         self.cursor.read_u16::<BigEndian>().map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 1117,
                    "byte_start": 1062,
                    "column_end": 64,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 64,
                        "highlight_start": 9,
                        "text": "        self.cursor.read_u16::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:38:53\n   |\n38 |         self.cursor.read_u16::<BigEndian>().map_err(From::from)\n   |                                                     ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 1116,
                    "byte_start": 1106,
                    "column_end": 63,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 53,
                        "text": "        self.cursor.read_u16::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:45:42\n   |\n45 |         self.cursor.read(&mut buffer[..])?;\n   |                     ---------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                     |\n   |                     this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n   |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n   |\n1  | / error_chain! {\n2  | |     errors {\n3  | |         Protocol(t: String) {\n4  | |             description(\"protocol error\")\n...  |\n12 | | }\n   | |_^\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 1351,
                    "byte_start": 1330,
                    "column_end": 42,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 21,
                        "text": "        self.cursor.read(&mut buffer[..])?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 1352,
                    "byte_start": 1351,
                    "column_end": 43,
                    "column_start": 42,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 1352,
                        "byte_start": 1351,
                        "column_end": 43,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 42,
                            "text": "        self.cursor.read(&mut buffer[..])?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 42,
                        "text": "        self.cursor.read(&mut buffer[..])?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:53:42\n   |\n53 |         self.cursor.read(&mut buffer[..])?;\n   |                     ---------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                     |\n   |                     this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n   |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n   |\n1  | / error_chain! {\n2  | |     errors {\n3  | |         Protocol(t: String) {\n4  | |             description(\"protocol error\")\n...  |\n12 | | }\n   | |_^\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 1646,
                    "byte_start": 1625,
                    "column_end": 42,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 21,
                        "text": "        self.cursor.read(&mut buffer[..])?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 1647,
                    "byte_start": 1646,
                    "column_end": 43,
                    "column_start": 42,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 1647,
                        "byte_start": 1646,
                        "column_end": 43,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 42,
                            "text": "        self.cursor.read(&mut buffer[..])?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 42,
                        "text": "        self.cursor.read(&mut buffer[..])?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:93:9\n   |\n93 |         self.data.write_u8(*data).map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 2892,
                    "byte_start": 2847,
                    "column_end": 54,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 93,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 9,
                        "text": "        self.data.write_u8(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:93:43\n   |\n93 |         self.data.write_u8(*data).map_err(From::from)\n   |                                           ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 2891,
                    "byte_start": 2881,
                    "column_end": 53,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 93,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 43,
                        "text": "        self.data.write_u8(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:98:9\n   |\n98 |         self.data.write_u32::<BigEndian>(*data).map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3057,
                    "byte_start": 2998,
                    "column_end": 68,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 9,
                        "text": "        self.data.write_u32::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:98:57\n   |\n98 |         self.data.write_u32::<BigEndian>(*data).map_err(From::from)\n   |                                                         ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3056,
                    "byte_start": 3046,
                    "column_end": 67,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 57,
                        "text": "        self.data.write_u32::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:103:9\n    |\n103 |         self.data.write_u64::<BigEndian>(*data).map_err(From::from)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3226,
                    "byte_start": 3167,
                    "column_end": 68,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 9,
                        "text": "        self.data.write_u64::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:103:57\n    |\n103 |         self.data.write_u64::<BigEndian>(*data).map_err(From::from)\n    |                                                         ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3225,
                    "byte_start": 3215,
                    "column_end": 67,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 57,
                        "text": "        self.data.write_u64::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:108:9\n    |\n108 |         self.data.write_u16::<BigEndian>(*data).map_err(From::from)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3392,
                    "byte_start": 3333,
                    "column_end": 68,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 9,
                        "text": "        self.data.write_u16::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:108:57\n    |\n108 |         self.data.write_u16::<BigEndian>(*data).map_err(From::from)\n    |                                                         ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3391,
                    "byte_start": 3381,
                    "column_end": 67,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 57,
                        "text": "        self.data.write_u16::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:113:45\n    |\n113 |         self.data.write_u8(data.len() as u8)?;\n    |                   --------------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                   |\n    |                   this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n    |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n    |\n1   | / error_chain! {\n2   | |     errors {\n3   | |         Protocol(t: String) {\n4   | |             description(\"protocol error\")\n...   |\n12  | | }\n    | |_^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 3540,
                    "byte_start": 3514,
                    "column_end": 45,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 19,
                        "text": "        self.data.write_u8(data.len() as u8)?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 3541,
                    "byte_start": 3540,
                    "column_end": 46,
                    "column_start": 45,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 3541,
                        "byte_start": 3540,
                        "column_end": 46,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 45,
                            "text": "        self.data.write_u8(data.len() as u8)?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 45,
                        "text": "        self.data.write_u8(data.len() as u8)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:114:45\n    |\n114 |         self.data.write_all(data.as_bytes())?;\n    |                   --------------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                   |\n    |                   this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n    |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n    |\n1   | / error_chain! {\n2   | |     errors {\n3   | |         Protocol(t: String) {\n4   | |             description(\"protocol error\")\n...   |\n12  | | }\n    | |_^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 3587,
                    "byte_start": 3561,
                    "column_end": 45,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 114,
                    "line_start": 114,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 19,
                        "text": "        self.data.write_all(data.as_bytes())?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 3588,
                    "byte_start": 3587,
                    "column_end": 46,
                    "column_start": 45,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 3588,
                        "byte_start": 3587,
                        "column_end": 46,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 114,
                        "line_start": 114,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 45,
                            "text": "        self.data.write_all(data.as_bytes())?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 114,
                    "line_start": 114,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 45,
                        "text": "        self.data.write_all(data.as_bytes())?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:120:60\n    |\n120 |         self.data.write_u32::<BigEndian>(data.len() as u32)?;\n    |                   -----------------------------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                   |\n    |                   this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n    |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n    |\n1   | / error_chain! {\n2   | |     errors {\n3   | |         Protocol(t: String) {\n4   | |             description(\"protocol error\")\n...   |\n12  | | }\n    | |_^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 3766,
                    "byte_start": 3725,
                    "column_end": 60,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 120,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 19,
                        "text": "        self.data.write_u32::<BigEndian>(data.len() as u32)?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 3767,
                    "byte_start": 3766,
                    "column_end": 61,
                    "column_start": 60,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 3767,
                        "byte_start": 3766,
                        "column_end": 61,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 60,
                            "text": "        self.data.write_u32::<BigEndian>(data.len() as u32)?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 120,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 60,
                        "text": "        self.data.write_u32::<BigEndian>(data.len() as u32)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:121:45\n    |\n121 |         self.data.write_all(data.as_bytes())?;\n    |                   --------------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                   |\n    |                   this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n    |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n    |\n1   | / error_chain! {\n2   | |     errors {\n3   | |         Protocol(t: String) {\n4   | |             description(\"protocol error\")\n...   |\n12  | | }\n    | |_^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 3813,
                    "byte_start": 3787,
                    "column_end": 45,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 121,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 19,
                        "text": "        self.data.write_all(data.as_bytes())?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 3814,
                    "byte_start": 3813,
                    "column_end": 46,
                    "column_start": 45,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 3814,
                        "byte_start": 3813,
                        "column_end": 46,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 45,
                            "text": "        self.data.write_all(data.as_bytes())?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 121,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 45,
                        "text": "        self.data.write_all(data.as_bytes())?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:148:23\n    |\n148 |             let res = self.data.write_all(&self.bits.to_bytes()).map_err(From::from);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 4659,
                    "byte_start": 4597,
                    "column_end": 85,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 85,
                        "highlight_start": 23,
                        "text": "            let res = self.data.write_all(&self.bits.to_bytes()).map_err(From::from);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:148:74\n    |\n148 |             let res = self.data.write_all(&self.bits.to_bytes()).map_err(From::from);\n    |                                                                          ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 4658,
                    "byte_start": 4648,
                    "column_end": 84,
                    "column_start": 74,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 74,
                        "text": "            let res = self.data.write_all(&self.bits.to_bytes()).map_err(From::from);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0277`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0277`.",
                "spans": []
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.174\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.174\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\libc-3975fc4c41c56526\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\libc-3975fc4c41c56526\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "freebsd11",
                "libc_const_extern_fn"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\libc-f8c1eb4327bd75a1\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi-build@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-build-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-build-0.1.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbuild-1dcf362043ad40ec.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbuild-1dcf362043ad40ec.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.5.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libautocfg-ff5884693664d457.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libautocfg-ff5884693664d457.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.2.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.2.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.2.8\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libwinapi-b85acda13bcb8fb7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libtinyvec_macros-497427804be4e0f4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liblog-dae577fc2dcb9112.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf8-ranges@0.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8-ranges-0.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8_ranges",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf8-ranges-0.1.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libutf8_ranges-35d05d09e77c9245.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustc-demangle@0.1.25",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.25\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_demangle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.25\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\librustc_demangle-2c59e9af3e30c70e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_syntax",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.3.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libregex_syntax-9744da09d1da875a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matches@0.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matches",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.10\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libmatches-44e87a210167b842.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-bidi@0.3.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_bidi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "hardcoded-data",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libunicode_bidi-5281c40a462114c0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-1.0.1\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libpercent_encoding-5f25c374b89ea156.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bit-vec@0.4.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit-vec-0.4.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bit_vec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bit-vec-0.4.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbit_vec-4d3b6f9ad77ce25f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-0.5.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbyteorder-580fe845fcbb8161.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.174\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.174\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liblibc-980d952702f3e3fd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#kernel32-sys@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\kernel32-sys-03ef0eff97ced5d6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\kernel32-sys-03ef0eff97ced5d6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\num-traits-0cbb3969529bcec6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\num-traits-0cbb3969529bcec6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "tinyvec_macros"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libtinyvec-eb2320a67abf7dfb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.3.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "use_std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liblog-076b714481008388.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#kernel32-sys@0.2.2",
              "linked_libs": [
                "dylib=kernel32"
              ],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\kernel32-sys-677f1890fbc00605\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_total_cmp"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\build\\num-traits-9498b50f6e487171\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@0.1.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-0.1.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-0.1.11\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libmemchr-1fc0ad76b3e9c144.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-normalization@0.1.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_normalization",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libunicode_normalization-51a4b38b5ab23570.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#kernel32-sys@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "kernel32",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libkernel32-e294b5dc3c07ba66.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libnum_traits-68b4662226979ac7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aho-corasick@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aho_corasick",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-0.5.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libaho_corasick-e9466f429908c1ff.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#idna@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\idna-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "idna",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\idna-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libidna-e7967ae250d291fd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thread-id@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread-id-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thread_id",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread-id-2.0.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libthread_id-f6267e75445e7446.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.1.43",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.1.43\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.1.43\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libnum_traits-6f773de209d76324.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libbacktrace-d69b0d538ae281e2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#url@1.7.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\url-1.7.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "url",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\url-1.7.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liburl-8665cc2f068fb845.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thread_local@0.2.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-0.2.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thread_local",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-0.2.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libthread_local-e3876a69db29bc4f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#enum_primitive@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\enum_primitive-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "enum_primitive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\enum_primitive-0.1.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libenum_primitive-1dc96af8183f5c8b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#error-chain@0.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "error_chain",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "backtrace",
                "default",
                "example_generated"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\liberror_chain-14bf4be8a50f7c7e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex@0.1.80",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-0.1.80\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-0.1.80\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libregex-fd0be817fc7e1946.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#env_logger@0.3.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\env_logger-0.3.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "env_logger",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\env_logger-0.3.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "regex"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpc46hydiw\\amqp-0.1.3\\target\\debug\\deps\\libenv_logger-483d99b607a80c4e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:87:9\n   |\n87 |         try!(writer.write_u16::<BigEndian>(self.class_id));\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n   |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |         required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1931,
                        "byte_start": 1881,
                        "column_end": 59,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.class_id));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1931,
                        "byte_start": 1881,
                        "column_end": 59,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.class_id));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:88:9\n   |\n88 |         try!(writer.write_u16::<BigEndian>(self.method_id));\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n   |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |         required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1992,
                        "byte_start": 1941,
                        "column_end": 60,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.method_id));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1992,
                        "byte_start": 1941,
                        "column_end": 60,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.method_id));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:89:9\n   |\n89 |         try!(writer.write_all(self.arguments.inner()));\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n   |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |         required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2048,
                        "byte_start": 2002,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.arguments.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2048,
                        "byte_start": 2002,
                        "column_end": 55,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.arguments.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:99:24\n   |\n99 |         let class_id = try!(reader.read_u16::<BigEndian>());\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                        |\n   |                        the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2475,
                        "byte_start": 2439,
                        "column_end": 60,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 99,
                        "line_start": 99,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 24,
                            "text": "        let class_id = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2475,
                        "byte_start": 2439,
                        "column_end": 60,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 99,
                        "line_start": 99,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 24,
                            "text": "        let class_id = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:100:25\n    |\n100 |         let method_id = try!(reader.read_u16::<BigEndian>());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                         |\n    |                         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2537,
                        "byte_start": 2501,
                        "column_end": 61,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 25,
                            "text": "        let method_id = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2537,
                        "byte_start": 2501,
                        "column_end": 61,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 25,
                            "text": "        let method_id = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:102:9\n    |\n102 |         try!(reader.read_to_end(&mut arguments));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2623,
                        "byte_start": 2583,
                        "column_end": 49,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 102,
                        "line_start": 102,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_to_end(&mut arguments));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2623,
                        "byte_start": 2583,
                        "column_end": 49,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 102,
                        "line_start": 102,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_to_end(&mut arguments));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:122:9\n    |\n122 |         try!(reader.read_exact(&mut header));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3137,
                        "byte_start": 3101,
                        "column_end": 45,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 122,
                        "line_start": 122,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_exact(&mut header));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3137,
                        "byte_start": 3101,
                        "column_end": 45,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 122,
                        "line_start": 122,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_exact(&mut header));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:127:9\n    |\n127 |         try!(reader.read_exact(&mut payload));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3447,
                        "byte_start": 3410,
                        "column_end": 46,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 127,
                        "line_start": 127,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_exact(&mut payload));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3447,
                        "byte_start": 3410,
                        "column_end": 46,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 127,
                        "line_start": 127,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_exact(&mut payload));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:128:25\n    |\n128 |         let frame_end = try!(reader.read_u8());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^\n    |                         |\n    |                         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3495,
                        "byte_start": 3473,
                        "column_end": 47,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 25,
                            "text": "        let frame_end = try!(reader.read_u8());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3495,
                        "byte_start": 3473,
                        "column_end": 47,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 25,
                            "text": "        let frame_end = try!(reader.read_u8());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:147:9\n    |\n147 |         try!(writer.write_u8(self.frame_type as u8));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4187,
                        "byte_start": 4143,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 147,
                        "line_start": 147,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u8(self.frame_type as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4187,
                        "byte_start": 4143,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 147,
                        "line_start": 147,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u8(self.frame_type as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:148:9\n    |\n148 |         try!(writer.write_u16::<BigEndian>(self.channel));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4246,
                        "byte_start": 4197,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 148,
                        "line_start": 148,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.channel));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4246,
                        "byte_start": 4197,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 148,
                        "line_start": 148,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.channel));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:149:9\n    |\n149 |         try!(writer.write_u32::<BigEndian>(self.payload.inner().len() as u32));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4326,
                        "byte_start": 4256,
                        "column_end": 79,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 149,
                        "line_start": 149,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u32::<BigEndian>(self.payload.inner().len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4326,
                        "byte_start": 4256,
                        "column_end": 79,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 149,
                        "line_start": 149,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u32::<BigEndian>(self.payload.inner().len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:150:9\n    |\n150 |         try!(writer.write_all(self.payload.inner()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4380,
                        "byte_start": 4336,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 150,
                        "line_start": 150,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.payload.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4380,
                        "byte_start": 4336,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 150,
                        "line_start": 150,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.payload.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:151:9\n    |\n151 |         try!(writer.write_u8(0xCE));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4417,
                        "byte_start": 4390,
                        "column_end": 36,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u8(0xCE));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4417,
                        "byte_start": 4390,
                        "column_end": 36,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u8(0xCE));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:168:29\n    |\n168 |         let content_class = try!(reader.read_u16::<BigEndian>());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                             |\n    |                             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4865,
                        "byte_start": 4829,
                        "column_end": 65,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 29,
                            "text": "        let content_class = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4865,
                        "byte_start": 4829,
                        "column_end": 65,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 29,
                            "text": "        let content_class = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:169:22\n    |\n169 |         let weight = try!(reader.read_u16::<BigEndian>()); //0 all the time for now\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                      |\n    |                      the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                      required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4924,
                        "byte_start": 4888,
                        "column_end": 58,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 22,
                            "text": "        let weight = try!(reader.read_u16::<BigEndian>()); //0 all the time for now"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4924,
                        "byte_start": 4888,
                        "column_end": 58,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 22,
                            "text": "        let weight = try!(reader.read_u16::<BigEndian>()); //0 all the time for now"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:170:25\n    |\n170 |         let body_size = try!(reader.read_u64::<BigEndian>());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                         |\n    |                         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5011,
                        "byte_start": 4975,
                        "column_end": 61,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 170,
                        "line_start": 170,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 25,
                            "text": "        let body_size = try!(reader.read_u64::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5011,
                        "byte_start": 4975,
                        "column_end": 61,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 170,
                        "line_start": 170,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 25,
                            "text": "        let body_size = try!(reader.read_u64::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:171:32\n    |\n171 |         let properties_flags = try!(reader.read_u16::<BigEndian>());\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                                |\n    |                                the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                                required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5080,
                        "byte_start": 5044,
                        "column_end": 68,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 171,
                        "line_start": 171,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 32,
                            "text": "        let properties_flags = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5080,
                        "byte_start": 5044,
                        "column_end": 68,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 171,
                        "line_start": 171,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 32,
                            "text": "        let properties_flags = try!(reader.read_u16::<BigEndian>());"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:173:9\n    |\n173 |         try!(reader.read_to_end(&mut properties));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5168,
                        "byte_start": 5127,
                        "column_end": 50,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 173,
                        "line_start": 173,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_to_end(&mut properties));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5168,
                        "byte_start": 5127,
                        "column_end": 50,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 173,
                        "line_start": 173,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 9,
                            "text": "        try!(reader.read_to_end(&mut properties));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:185:9\n    |\n185 |         try!(writer.write_u16::<BigEndian>(self.content_class));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5623,
                        "byte_start": 5568,
                        "column_end": 64,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 185,
                        "line_start": 185,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.content_class));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5623,
                        "byte_start": 5568,
                        "column_end": 64,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 185,
                        "line_start": 185,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.content_class));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:186:9\n    |\n186 |         try!(writer.write_u16::<BigEndian>(self.weight)); //0 all the time for now\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5681,
                        "byte_start": 5633,
                        "column_end": 57,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 186,
                        "line_start": 186,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.weight)); //0 all the time for now"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5681,
                        "byte_start": 5633,
                        "column_end": 57,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 186,
                        "line_start": 186,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.weight)); //0 all the time for now"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:187:9\n    |\n187 |         try!(writer.write_u64::<BigEndian>(self.body_size));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5767,
                        "byte_start": 5716,
                        "column_end": 60,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 187,
                        "line_start": 187,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u64::<BigEndian>(self.body_size));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5767,
                        "byte_start": 5716,
                        "column_end": 60,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 187,
                        "line_start": 187,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u64::<BigEndian>(self.body_size));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:188:9\n    |\n188 |         try!(writer.write_u16::<BigEndian>(self.properties_flags));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5835,
                        "byte_start": 5777,
                        "column_end": 67,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 188,
                        "line_start": 188,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.properties_flags));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5835,
                        "byte_start": 5777,
                        "column_end": 67,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 188,
                        "line_start": 188,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_u16::<BigEndian>(self.properties_flags));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs:189:9\n    |\n189 |         try!(writer.write_all(self.properties.inner()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5892,
                        "byte_start": 5845,
                        "column_end": 56,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.properties.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5892,
                        "byte_start": 5845,
                        "column_end": 56,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\framing.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 9,
                            "text": "        try!(writer.write_all(self.properties.inner()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:41:37\n   |\n41 |     let (entry, entry_size) = match try!(reader.read_u8()) {\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^\n   |                                     |\n   |                                     the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                     required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 883,
                        "byte_start": 861,
                        "column_end": 59,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 41,
                        "line_start": 41,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 37,
                            "text": "    let (entry, entry_size) = match try!(reader.read_u8()) {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 883,
                        "byte_start": 861,
                        "column_end": 59,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 41,
                        "line_start": 41,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 37,
                            "text": "    let (entry, entry_size) = match try!(reader.read_u8()) {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:42:36\n   |\n42 |         b't' => (TableEntry::Bool(!try!(reader.read_u8()) != 0), 1),\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^\n   |                                    |\n   |                                    the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                    required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 943,
                        "byte_start": 921,
                        "column_end": 58,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 42,
                        "line_start": 42,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 36,
                            "text": "        b't' => (TableEntry::Bool(!try!(reader.read_u8()) != 0), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 943,
                        "byte_start": 921,
                        "column_end": 58,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 42,
                        "line_start": 42,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 36,
                            "text": "        b't' => (TableEntry::Bool(!try!(reader.read_u8()) != 0), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:43:44\n   |\n43 |         b'b' => (TableEntry::ShortShortInt(try!(reader.read_i8())), 1),\n   |                                            ^^^^^^^^^^^^^^^^^^^^^^\n   |                                            |\n   |                                            the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                            required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1020,
                        "byte_start": 998,
                        "column_end": 66,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 44,
                            "text": "        b'b' => (TableEntry::ShortShortInt(try!(reader.read_i8())), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1020,
                        "byte_start": 998,
                        "column_end": 66,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 44,
                            "text": "        b'b' => (TableEntry::ShortShortInt(try!(reader.read_i8())), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:44:45\n   |\n44 |         b'B' => (TableEntry::ShortShortUint(try!(reader.read_u8())), 1),\n   |                                             ^^^^^^^^^^^^^^^^^^^^^^\n   |                                             |\n   |                                             the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                             required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1093,
                        "byte_start": 1071,
                        "column_end": 67,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 44,
                        "line_start": 44,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 45,
                            "text": "        b'B' => (TableEntry::ShortShortUint(try!(reader.read_u8())), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1093,
                        "byte_start": 1071,
                        "column_end": 67,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 44,
                        "line_start": 44,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 45,
                            "text": "        b'B' => (TableEntry::ShortShortUint(try!(reader.read_u8())), 1),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:45:39\n   |\n45 |         b'U' => (TableEntry::ShortInt(try!(reader.read_i16::<BigEndian>())), 2),\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                       |\n   |                                       the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                       required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1174,
                        "byte_start": 1138,
                        "column_end": 75,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 39,
                            "text": "        b'U' => (TableEntry::ShortInt(try!(reader.read_i16::<BigEndian>())), 2),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1174,
                        "byte_start": 1138,
                        "column_end": 75,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 39,
                            "text": "        b'U' => (TableEntry::ShortInt(try!(reader.read_i16::<BigEndian>())), 2),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:46:40\n   |\n46 |         b'u' => (TableEntry::ShortUint(try!(reader.read_u16::<BigEndian>())), 2),\n   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                        |\n   |                                        the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1256,
                        "byte_start": 1220,
                        "column_end": 76,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 40,
                            "text": "        b'u' => (TableEntry::ShortUint(try!(reader.read_u16::<BigEndian>())), 2),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1256,
                        "byte_start": 1220,
                        "column_end": 76,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 40,
                            "text": "        b'u' => (TableEntry::ShortUint(try!(reader.read_u16::<BigEndian>())), 2),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:47:38\n   |\n47 |         b'I' => (TableEntry::LongInt(try!(reader.read_i32::<BigEndian>())), 4),\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                      |\n   |                                      the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                      required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1336,
                        "byte_start": 1300,
                        "column_end": 74,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 38,
                            "text": "        b'I' => (TableEntry::LongInt(try!(reader.read_i32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1336,
                        "byte_start": 1300,
                        "column_end": 74,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 38,
                            "text": "        b'I' => (TableEntry::LongInt(try!(reader.read_i32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:48:39\n   |\n48 |         b'i' => (TableEntry::LongUint(try!(reader.read_u32::<BigEndian>())), 4),\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                       |\n   |                                       the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                       required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1417,
                        "byte_start": 1381,
                        "column_end": 75,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 48,
                        "line_start": 48,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 39,
                            "text": "        b'i' => (TableEntry::LongUint(try!(reader.read_u32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1417,
                        "byte_start": 1381,
                        "column_end": 75,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 48,
                        "line_start": 48,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 39,
                            "text": "        b'i' => (TableEntry::LongUint(try!(reader.read_u32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:49:42\n   |\n49 |         b'L' => (TableEntry::LongLongInt(try!(reader.read_i64::<BigEndian>())), 8),\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                          |\n   |                                          the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                          required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1501,
                        "byte_start": 1465,
                        "column_end": 78,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 49,
                        "line_start": 49,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 42,
                            "text": "        b'L' => (TableEntry::LongLongInt(try!(reader.read_i64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1501,
                        "byte_start": 1465,
                        "column_end": 78,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 49,
                        "line_start": 49,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 42,
                            "text": "        b'L' => (TableEntry::LongLongInt(try!(reader.read_i64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:50:43\n   |\n50 |         b'l' => (TableEntry::LongLongUint(try!(reader.read_u64::<BigEndian>())), 8),\n   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                           |\n   |                                           the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                           required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1586,
                        "byte_start": 1550,
                        "column_end": 79,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 43,
                            "text": "        b'l' => (TableEntry::LongLongUint(try!(reader.read_u64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1586,
                        "byte_start": 1550,
                        "column_end": 79,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 43,
                            "text": "        b'l' => (TableEntry::LongLongUint(try!(reader.read_u64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:51:36\n   |\n51 |         b'f' => (TableEntry::Float(try!(reader.read_f32::<BigEndian>())), 4),\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                    |\n   |                                    the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                    required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1664,
                        "byte_start": 1628,
                        "column_end": 72,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 72,
                            "highlight_start": 36,
                            "text": "        b'f' => (TableEntry::Float(try!(reader.read_f32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1664,
                        "byte_start": 1628,
                        "column_end": 72,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 72,
                            "highlight_start": 36,
                            "text": "        b'f' => (TableEntry::Float(try!(reader.read_f32::<BigEndian>())), 4),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:52:37\n   |\n52 |         b'd' => (TableEntry::Double(try!(reader.read_f64::<BigEndian>())), 8),\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                     |\n   |                                     the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                     required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1743,
                        "byte_start": 1707,
                        "column_end": 73,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 37,
                            "text": "        b'd' => (TableEntry::Double(try!(reader.read_f64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1743,
                        "byte_start": 1707,
                        "column_end": 73,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 37,
                            "text": "        b'd' => (TableEntry::Double(try!(reader.read_f64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:54:38\n   |\n54 |             TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n   |                                      |\n   |                                      the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                      required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1828,
                        "byte_start": 1806,
                        "column_end": 60,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 54,
                        "line_start": 54,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 38,
                            "text": "            TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1828,
                        "byte_start": 1806,
                        "column_end": 60,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 54,
                        "line_start": 54,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 38,
                            "text": "            TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:54:62\n   |\n54 |             TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))\n   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                                              |\n   |                                                              the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                                              required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1866,
                        "byte_start": 1830,
                        "column_end": 98,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 54,
                        "line_start": 54,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 98,
                            "highlight_start": 62,
                            "text": "            TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1866,
                        "byte_start": 1830,
                        "column_end": 98,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 54,
                        "line_start": 54,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 98,
                            "highlight_start": 62,
                            "text": "            TableEntry::DecimalValue(try!(reader.read_u8()), try!(reader.read_u32::<BigEndian>()))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:63:24\n   |\n63 |             let size = try!(reader.read_u32::<BigEndian>()) as usize;\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                        |\n   |                        the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2191,
                        "byte_start": 2155,
                        "column_end": 60,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 24,
                            "text": "            let size = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2191,
                        "byte_start": 2155,
                        "column_end": 60,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 24,
                            "text": "            let size = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:65:13\n   |\n65 |             try!(reader.read(&mut buffer[..]));\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |             |\n   |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |             required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2303,
                        "byte_start": 2269,
                        "column_end": 47,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 13,
                            "text": "            try!(reader.read(&mut buffer[..]));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2303,
                        "byte_start": 2269,
                        "column_end": 47,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 13,
                            "text": "            try!(reader.read(&mut buffer[..]));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:71:29\n   |\n71 |             let array_len = try!(reader.read_u32::<BigEndian>()) as usize;\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                             |\n   |                             the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                             required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2555,
                        "byte_start": 2519,
                        "column_end": 65,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 71,
                        "line_start": 71,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 29,
                            "text": "            let array_len = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2555,
                        "byte_start": 2519,
                        "column_end": 65,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 71,
                        "line_start": 71,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 29,
                            "text": "            let array_len = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:82:40\n   |\n82 |         b'T' => (TableEntry::Timestamp(try!(reader.read_u64::<BigEndian>())), 8),\n   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                        |\n   |                                        the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3011,
                        "byte_start": 2975,
                        "column_end": 76,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 82,
                        "line_start": 82,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 40,
                            "text": "        b'T' => (TableEntry::Timestamp(try!(reader.read_u64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3011,
                        "byte_start": 2975,
                        "column_end": 76,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 82,
                        "line_start": 82,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 40,
                            "text": "        b'T' => (TableEntry::Timestamp(try!(reader.read_u64::<BigEndian>())), 8),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:100:13\n    |\n100 |             try!(writer.write_u8(b't'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3637,
                        "byte_start": 3610,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b't'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3637,
                        "byte_start": 3610,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b't'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:101:13\n    |\n101 |             try!(writer.write_u8(val as u8));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3683,
                        "byte_start": 3651,
                        "column_end": 45,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(val as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3683,
                        "byte_start": 3651,
                        "column_end": 45,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(val as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:104:13\n    |\n104 |             try!(writer.write_u8(b'b'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3778,
                        "byte_start": 3751,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 104,
                        "line_start": 104,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'b'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3778,
                        "byte_start": 3751,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 104,
                        "line_start": 104,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'b'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:105:13\n    |\n105 |             try!(writer.write_i8(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3818,
                        "byte_start": 3792,
                        "column_end": 39,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i8(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3818,
                        "byte_start": 3792,
                        "column_end": 39,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i8(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:108:13\n    |\n108 |             try!(writer.write_u8(b'B'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3914,
                        "byte_start": 3887,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 108,
                        "line_start": 108,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'B'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3914,
                        "byte_start": 3887,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 108,
                        "line_start": 108,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'B'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:109:13\n    |\n109 |             try!(writer.write_u8(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3954,
                        "byte_start": 3928,
                        "column_end": 39,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 109,
                        "line_start": 109,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 3954,
                        "byte_start": 3928,
                        "column_end": 39,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 109,
                        "line_start": 109,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:112:13\n    |\n112 |             try!(writer.write_u8(b'U'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4044,
                        "byte_start": 4017,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 112,
                        "line_start": 112,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'U'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4044,
                        "byte_start": 4017,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 112,
                        "line_start": 112,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'U'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:113:13\n    |\n113 |             try!(writer.write_i16::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4098,
                        "byte_start": 4058,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i16::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4098,
                        "byte_start": 4058,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i16::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:116:13\n    |\n116 |             try!(writer.write_u8(b'u'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4189,
                        "byte_start": 4162,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 116,
                        "line_start": 116,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'u'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4189,
                        "byte_start": 4162,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 116,
                        "line_start": 116,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'u'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:117:13\n    |\n117 |             try!(writer.write_u16::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4243,
                        "byte_start": 4203,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 117,
                        "line_start": 117,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u16::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4243,
                        "byte_start": 4203,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 117,
                        "line_start": 117,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u16::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:120:13\n    |\n120 |             try!(writer.write_u8(b'I'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4332,
                        "byte_start": 4305,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'I'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4332,
                        "byte_start": 4305,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'I'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:121:13\n    |\n121 |             try!(writer.write_i32::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4386,
                        "byte_start": 4346,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4386,
                        "byte_start": 4346,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:124:13\n    |\n124 |             try!(writer.write_u8(b'i'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4476,
                        "byte_start": 4449,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 124,
                        "line_start": 124,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'i'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4476,
                        "byte_start": 4449,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 124,
                        "line_start": 124,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'i'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:125:13\n    |\n125 |             try!(writer.write_u32::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4530,
                        "byte_start": 4490,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 125,
                        "line_start": 125,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4530,
                        "byte_start": 4490,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 125,
                        "line_start": 125,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:128:13\n    |\n128 |             try!(writer.write_u8(b'L'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4623,
                        "byte_start": 4596,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'L'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4623,
                        "byte_start": 4596,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'L'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:129:13\n    |\n129 |             try!(writer.write_i64::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4677,
                        "byte_start": 4637,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 129,
                        "line_start": 129,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4677,
                        "byte_start": 4637,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 129,
                        "line_start": 129,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_i64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:132:13\n    |\n132 |             try!(writer.write_u8(b'l'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4771,
                        "byte_start": 4744,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 132,
                        "line_start": 132,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'l'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4771,
                        "byte_start": 4744,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 132,
                        "line_start": 132,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'l'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:133:13\n    |\n133 |             try!(writer.write_u64::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4825,
                        "byte_start": 4785,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 133,
                        "line_start": 133,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4825,
                        "byte_start": 4785,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 133,
                        "line_start": 133,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:136:13\n    |\n136 |             try!(writer.write_u8(b'f'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4912,
                        "byte_start": 4885,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 136,
                        "line_start": 136,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'f'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4912,
                        "byte_start": 4885,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 136,
                        "line_start": 136,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'f'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:137:13\n    |\n137 |             try!(writer.write_f32::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4966,
                        "byte_start": 4926,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 137,
                        "line_start": 137,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_f32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4966,
                        "byte_start": 4926,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 137,
                        "line_start": 137,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_f32::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:140:13\n    |\n140 |             try!(writer.write_u8(b'd'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5054,
                        "byte_start": 5027,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 140,
                        "line_start": 140,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'd'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5054,
                        "byte_start": 5027,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 140,
                        "line_start": 140,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'd'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:141:13\n    |\n141 |             try!(writer.write_f64::<BigEndian>(val));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5108,
                        "byte_start": 5068,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 141,
                        "line_start": 141,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_f64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5108,
                        "byte_start": 5068,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 141,
                        "line_start": 141,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_f64::<BigEndian>(val));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:144:13\n    |\n144 |             try!(writer.write_u8(b'D'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5211,
                        "byte_start": 5184,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 144,
                        "line_start": 144,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'D'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5211,
                        "byte_start": 5184,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 144,
                        "line_start": 144,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'D'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:145:13\n    |\n145 |             try!(writer.write_u8(scale));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5253,
                        "byte_start": 5225,
                        "column_end": 41,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 145,
                        "line_start": 145,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(scale));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5253,
                        "byte_start": 5225,
                        "column_end": 41,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 145,
                        "line_start": 145,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(scale));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:146:13\n    |\n146 |             try!(writer.write_u32::<BigEndian>(value));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5309,
                        "byte_start": 5267,
                        "column_end": 55,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 146,
                        "line_start": 146,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(value));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5309,
                        "byte_start": 5267,
                        "column_end": 55,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 146,
                        "line_start": 146,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(value));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:154:13\n    |\n154 |             try!(writer.write_u8(b'S'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5597,
                        "byte_start": 5570,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 154,
                        "line_start": 154,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'S'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5597,
                        "byte_start": 5570,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 154,
                        "line_start": 154,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'S'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:155:13\n    |\n155 |             try!(writer.write_u32::<BigEndian>(str.len() as u32));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5664,
                        "byte_start": 5611,
                        "column_end": 66,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 155,
                        "line_start": 155,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(str.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5664,
                        "byte_start": 5611,
                        "column_end": 66,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 155,
                        "line_start": 155,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(str.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:156:13\n    |\n156 |             try!(writer.write_all(str.as_bytes()));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5716,
                        "byte_start": 5678,
                        "column_end": 51,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 156,
                        "line_start": 156,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_all(str.as_bytes()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5716,
                        "byte_start": 5678,
                        "column_end": 51,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 156,
                        "line_start": 156,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_all(str.as_bytes()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:159:13\n    |\n159 |             try!(writer.write_u8(b'A'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5812,
                        "byte_start": 5785,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 159,
                        "line_start": 159,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'A'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5812,
                        "byte_start": 5785,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 159,
                        "line_start": 159,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'A'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:164:13\n    |\n164 |             try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6042,
                        "byte_start": 5982,
                        "column_end": 73,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 164,
                        "line_start": 164,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6042,
                        "byte_start": 5982,
                        "column_end": 73,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 164,
                        "line_start": 164,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:165:13\n    |\n165 |             try!(writer.write(&tmp_buffer));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6087,
                        "byte_start": 6056,
                        "column_end": 44,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 165,
                        "line_start": 165,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 13,
                            "text": "            try!(writer.write(&tmp_buffer));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6087,
                        "byte_start": 6056,
                        "column_end": 44,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 165,
                        "line_start": 165,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 13,
                            "text": "            try!(writer.write(&tmp_buffer));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:168:13\n    |\n168 |             try!(writer.write_u8(b'T'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6178,
                        "byte_start": 6151,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'T'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6178,
                        "byte_start": 6151,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'T'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:169:13\n    |\n169 |             try!(writer.write_u64::<BigEndian>(val))\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6232,
                        "byte_start": 6192,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u64::<BigEndian>(val))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6232,
                        "byte_start": 6192,
                        "column_end": 53,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u64::<BigEndian>(val))"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:172:13\n    |\n172 |             try!(writer.write_u8(b'F'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6329,
                        "byte_start": 6302,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 172,
                        "line_start": 172,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'F'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6329,
                        "byte_start": 6302,
                        "column_end": 40,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 172,
                        "line_start": 172,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 13,
                            "text": "            try!(writer.write_u8(b'F'));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:175:29\n    |\n175 |         TableEntry::Void => try!(writer.write_u8(b'V')),\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                             |\n    |                             the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                             required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6443,
                        "byte_start": 6416,
                        "column_end": 56,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 175,
                        "line_start": 175,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 29,
                            "text": "        TableEntry::Void => try!(writer.write_u8(b'V')),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6443,
                        "byte_start": 6416,
                        "column_end": 56,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 175,
                        "line_start": 175,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 29,
                            "text": "        TableEntry::Void => try!(writer.write_u8(b'V')),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:182:21\n    |\n182 |     let table_len = try!(reader.read_u32::<BigEndian>()) as usize;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6636,
                        "byte_start": 6600,
                        "column_end": 57,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 182,
                        "line_start": 182,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 21,
                            "text": "    let table_len = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6636,
                        "byte_start": 6600,
                        "column_end": 57,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 182,
                        "line_start": 182,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 21,
                            "text": "    let table_len = try!(reader.read_u32::<BigEndian>()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:187:30\n    |\n187 |         let field_name_len = try!(reader.read_u8()) as usize;\n    |                              ^^^^^^^^^^^^^^^^^^^^^^\n    |                              |\n    |                              the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6812,
                        "byte_start": 6790,
                        "column_end": 52,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 187,
                        "line_start": 187,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 30,
                            "text": "        let field_name_len = try!(reader.read_u8()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6812,
                        "byte_start": 6790,
                        "column_end": 52,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 187,
                        "line_start": 187,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 30,
                            "text": "        let field_name_len = try!(reader.read_u8()) as usize;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:189:9\n    |\n189 |         try!(reader.read(&mut field_name[..]));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6934,
                        "byte_start": 6896,
                        "column_end": 47,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 9,
                            "text": "        try!(reader.read(&mut field_name[..]));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 6934,
                        "byte_start": 6896,
                        "column_end": 47,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 9,
                            "text": "        try!(reader.read(&mut field_name[..]));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:204:9\n    |\n204 |         try!(tmp_buffer.write_u8(field_name.len() as u8));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7802,
                        "byte_start": 7753,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 204,
                        "line_start": 204,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(tmp_buffer.write_u8(field_name.len() as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7802,
                        "byte_start": 7753,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 204,
                        "line_start": 204,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(tmp_buffer.write_u8(field_name.len() as u8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:205:9\n    |\n205 |         try!(tmp_buffer.write_all(field_name.as_bytes()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |         required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7861,
                        "byte_start": 7812,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 205,
                        "line_start": 205,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(tmp_buffer.write_all(field_name.as_bytes()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7861,
                        "byte_start": 7812,
                        "column_end": 58,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 205,
                        "line_start": 205,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 9,
                            "text": "        try!(tmp_buffer.write_all(field_name.as_bytes()));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:208:5\n    |\n208 |     try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7996,
                        "byte_start": 7936,
                        "column_end": 65,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 208,
                        "line_start": 208,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 5,
                            "text": "    try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7996,
                        "byte_start": 7936,
                        "column_end": 65,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 208,
                        "line_start": 208,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 5,
                            "text": "    try!(writer.write_u32::<BigEndian>(tmp_buffer.len() as u32));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs:209:5\n    |\n209 |     try!(writer.write_all(&tmp_buffer));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 19138,
                    "byte_start": 19135,
                    "column_end": 83,
                    "column_start": 80,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8037,
                        "byte_start": 8002,
                        "column_end": 40,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 209,
                        "line_start": 209,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 5,
                            "text": "    try!(writer.write_all(&tmp_buffer));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 80,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  },
                  {
                    "byte_end": 19134,
                    "byte_start": 19107,
                    "column_end": 79,
                    "column_start": 52,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 18901,
                        "byte_start": 18883,
                        "column_end": 19,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 522,
                        "line_start": 522,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "macro_rules! r#try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8037,
                        "byte_start": 8002,
                        "column_end": 40,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\table.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 209,
                        "line_start": 209,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 5,
                            "text": "    try!(writer.write_all(&tmp_buffer));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": false,
                    "label": "required by a bound introduced by this call",
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 52,
                        "text": "                return $crate::result::Result::Err($crate::convert::From::from(err));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:23:9\n   |\n23 |         self.cursor.read_u8().map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 659,
                    "byte_start": 618,
                    "column_end": 50,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 9,
                        "text": "        self.cursor.read_u8().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:23:39\n   |\n23 |         self.cursor.read_u8().map_err(From::from)\n   |                                       ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 658,
                    "byte_start": 648,
                    "column_end": 49,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 39,
                        "text": "        self.cursor.read_u8().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:28:9\n   |\n28 |         self.cursor.read_u32::<BigEndian>().map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 810,
                    "byte_start": 755,
                    "column_end": 64,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 64,
                        "highlight_start": 9,
                        "text": "        self.cursor.read_u32::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:28:53\n   |\n28 |         self.cursor.read_u32::<BigEndian>().map_err(From::from)\n   |                                                     ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 809,
                    "byte_start": 799,
                    "column_end": 63,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 53,
                        "text": "        self.cursor.read_u32::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:33:9\n   |\n33 |         self.cursor.read_u64::<BigEndian>().map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 965,
                    "byte_start": 910,
                    "column_end": 64,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 64,
                        "highlight_start": 9,
                        "text": "        self.cursor.read_u64::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:33:53\n   |\n33 |         self.cursor.read_u64::<BigEndian>().map_err(From::from)\n   |                                                     ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 964,
                    "byte_start": 954,
                    "column_end": 63,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 53,
                        "text": "        self.cursor.read_u64::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:38:9\n   |\n38 |         self.cursor.read_u16::<BigEndian>().map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 1117,
                    "byte_start": 1062,
                    "column_end": 64,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 64,
                        "highlight_start": 9,
                        "text": "        self.cursor.read_u16::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:38:53\n   |\n38 |         self.cursor.read_u16::<BigEndian>().map_err(From::from)\n   |                                                     ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 1116,
                    "byte_start": 1106,
                    "column_end": 63,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 53,
                        "text": "        self.cursor.read_u16::<BigEndian>().map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:45:42\n   |\n45 |         self.cursor.read(&mut buffer[..])?;\n   |                     ---------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                     |\n   |                     this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n   |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n   |\n1  | / error_chain! {\n2  | |     errors {\n3  | |         Protocol(t: String) {\n4  | |             description(\"protocol error\")\n...  |\n12 | | }\n   | |_^\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 1351,
                    "byte_start": 1330,
                    "column_end": 42,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 21,
                        "text": "        self.cursor.read(&mut buffer[..])?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 1352,
                    "byte_start": 1351,
                    "column_end": 43,
                    "column_start": 42,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 1352,
                        "byte_start": 1351,
                        "column_end": 43,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 42,
                            "text": "        self.cursor.read(&mut buffer[..])?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 42,
                        "text": "        self.cursor.read(&mut buffer[..])?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:53:42\n   |\n53 |         self.cursor.read(&mut buffer[..])?;\n   |                     ---------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |                     |\n   |                     this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n   |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n   |\n1  | / error_chain! {\n2  | |     errors {\n3  | |         Protocol(t: String) {\n4  | |             description(\"protocol error\")\n...  |\n12 | | }\n   | |_^\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n   = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 1646,
                    "byte_start": 1625,
                    "column_end": 42,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 21,
                        "text": "        self.cursor.read(&mut buffer[..])?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 1647,
                    "byte_start": 1646,
                    "column_end": 43,
                    "column_start": 42,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 1647,
                        "byte_start": 1646,
                        "column_end": 43,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 42,
                            "text": "        self.cursor.read(&mut buffer[..])?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 42,
                        "text": "        self.cursor.read(&mut buffer[..])?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:93:9\n   |\n93 |         self.data.write_u8(*data).map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 2892,
                    "byte_start": 2847,
                    "column_end": 54,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 93,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 9,
                        "text": "        self.data.write_u8(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:93:43\n   |\n93 |         self.data.write_u8(*data).map_err(From::from)\n   |                                           ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 2891,
                    "byte_start": 2881,
                    "column_end": 53,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 93,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 43,
                        "text": "        self.data.write_u8(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:98:9\n   |\n98 |         self.data.write_u32::<BigEndian>(*data).map_err(From::from)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3057,
                    "byte_start": 2998,
                    "column_end": 68,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 9,
                        "text": "        self.data.write_u32::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:98:57\n   |\n98 |         self.data.write_u32::<BigEndian>(*data).map_err(From::from)\n   |                                                         ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n   |\n   = help: the following other types implement trait `From<T>`:\n             `error::Error` implements `From<&str>`\n             `error::Error` implements `From<String>`\n             `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3056,
                    "byte_start": 3046,
                    "column_end": 67,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 57,
                        "text": "        self.data.write_u32::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:103:9\n    |\n103 |         self.data.write_u64::<BigEndian>(*data).map_err(From::from)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3226,
                    "byte_start": 3167,
                    "column_end": 68,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 9,
                        "text": "        self.data.write_u64::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:103:57\n    |\n103 |         self.data.write_u64::<BigEndian>(*data).map_err(From::from)\n    |                                                         ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3225,
                    "byte_start": 3215,
                    "column_end": 67,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 57,
                        "text": "        self.data.write_u64::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:108:9\n    |\n108 |         self.data.write_u16::<BigEndian>(*data).map_err(From::from)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3392,
                    "byte_start": 3333,
                    "column_end": 68,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 9,
                        "text": "        self.data.write_u16::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:108:57\n    |\n108 |         self.data.write_u16::<BigEndian>(*data).map_err(From::from)\n    |                                                         ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 3391,
                    "byte_start": 3381,
                    "column_end": 67,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 57,
                        "text": "        self.data.write_u16::<BigEndian>(*data).map_err(From::from)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:113:45\n    |\n113 |         self.data.write_u8(data.len() as u8)?;\n    |                   --------------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                   |\n    |                   this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n    |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n    |\n1   | / error_chain! {\n2   | |     errors {\n3   | |         Protocol(t: String) {\n4   | |             description(\"protocol error\")\n...   |\n12  | | }\n    | |_^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 3540,
                    "byte_start": 3514,
                    "column_end": 45,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 19,
                        "text": "        self.data.write_u8(data.len() as u8)?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 3541,
                    "byte_start": 3540,
                    "column_end": 46,
                    "column_start": 45,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 3541,
                        "byte_start": 3540,
                        "column_end": 46,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 45,
                            "text": "        self.data.write_u8(data.len() as u8)?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 45,
                        "text": "        self.data.write_u8(data.len() as u8)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:114:45\n    |\n114 |         self.data.write_all(data.as_bytes())?;\n    |                   --------------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                   |\n    |                   this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n    |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n    |\n1   | / error_chain! {\n2   | |     errors {\n3   | |         Protocol(t: String) {\n4   | |             description(\"protocol error\")\n...   |\n12  | | }\n    | |_^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 3587,
                    "byte_start": 3561,
                    "column_end": 45,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 114,
                    "line_start": 114,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 19,
                        "text": "        self.data.write_all(data.as_bytes())?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 3588,
                    "byte_start": 3587,
                    "column_end": 46,
                    "column_start": 45,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 3588,
                        "byte_start": 3587,
                        "column_end": 46,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 114,
                        "line_start": 114,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 45,
                            "text": "        self.data.write_all(data.as_bytes())?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 114,
                    "line_start": 114,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 45,
                        "text": "        self.data.write_all(data.as_bytes())?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:120:60\n    |\n120 |         self.data.write_u32::<BigEndian>(data.len() as u32)?;\n    |                   -----------------------------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                   |\n    |                   this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n    |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n    |\n1   | / error_chain! {\n2   | |     errors {\n3   | |         Protocol(t: String) {\n4   | |             description(\"protocol error\")\n...   |\n12  | | }\n    | |_^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 3766,
                    "byte_start": 3725,
                    "column_end": 60,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 120,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 19,
                        "text": "        self.data.write_u32::<BigEndian>(data.len() as u32)?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 3767,
                    "byte_start": 3766,
                    "column_end": 61,
                    "column_start": 60,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 3767,
                        "byte_start": 3766,
                        "column_end": 61,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 60,
                            "text": "        self.data.write_u32::<BigEndian>(data.len() as u32)?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 120,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 60,
                        "text": "        self.data.write_u32::<BigEndian>(data.len() as u32)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `?` couldn't convert the error to `error::Error`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:121:45\n    |\n121 |         self.data.write_all(data.as_bytes())?;\n    |                   --------------------------^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |                   |\n    |                   this can't be annotated with `?` because it has type `Result<_, std::io::Error>`\n    |\nnote: `error::Error` needs to implement `From<std::io::Error>`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs:1:1\n    |\n1   | / error_chain! {\n2   | |     errors {\n3   | |         Protocol(t: String) {\n4   | |             description(\"protocol error\")\n...   |\n12  | | }\n    | |_^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n    = note: this error originates in the macro `error_chain_processed` which comes from the expansion of the macro `error_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`error::Error` needs to implement `From<std::io::Error>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2231,
                        "byte_start": 1952,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 105,
                            "byte_start": 71,
                            "column_end": 35,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 3,
                            "line_start": 3,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 35,
                                "highlight_start": 1,
                                "text": "macro_rules! error_chain_processed {"
                              }
                            ]
                          },
                          "macro_decl_name": "error_chain_processed!",
                          "span": {
                            "byte_end": 751,
                            "byte_start": 578,
                            "column_end": 10,
                            "column_start": 9,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 105,
                                "byte_start": 71,
                                "column_end": 35,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 3,
                                "line_start": 3,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "macro_rules! error_chain_processed {"
                                  }
                                ]
                              },
                              "macro_decl_name": "error_chain_processed!",
                              "span": {
                                "byte_end": 354,
                                "byte_start": 209,
                                "column_end": 10,
                                "column_start": 9,
                                "expansion": {
                                  "def_site_span": {
                                    "byte_end": 105,
                                    "byte_start": 71,
                                    "column_end": 35,
                                    "column_start": 1,
                                    "expansion": null,
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 3,
                                    "line_start": 3,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 35,
                                        "highlight_start": 1,
                                        "text": "macro_rules! error_chain_processed {"
                                      }
                                    ]
                                  },
                                  "macro_decl_name": "error_chain_processed!",
                                  "span": {
                                    "byte_end": 11173,
                                    "byte_start": 11046,
                                    "column_end": 10,
                                    "column_start": 9,
                                    "expansion": {
                                      "def_site_span": {
                                        "byte_end": 10152,
                                        "byte_start": 10117,
                                        "column_end": 36,
                                        "column_start": 1,
                                        "expansion": null,
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 321,
                                        "line_start": 321,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 36,
                                            "highlight_start": 1,
                                            "text": "macro_rules! error_chain_processing {"
                                          }
                                        ]
                                      },
                                      "macro_decl_name": "error_chain_processing!",
                                      "span": {
                                        "byte_end": 10779,
                                        "byte_start": 10687,
                                        "column_end": 10,
                                        "column_start": 9,
                                        "expansion": {
                                          "def_site_span": {
                                            "byte_end": 10152,
                                            "byte_start": 10117,
                                            "column_end": 36,
                                            "column_start": 1,
                                            "expansion": null,
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 321,
                                            "line_start": 321,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 36,
                                                "highlight_start": 1,
                                                "text": "macro_rules! error_chain_processing {"
                                              }
                                            ]
                                          },
                                          "macro_decl_name": "error_chain_processing!",
                                          "span": {
                                            "byte_end": 10988,
                                            "byte_start": 10896,
                                            "column_end": 10,
                                            "column_start": 9,
                                            "expansion": {
                                              "def_site_span": {
                                                "byte_end": 10152,
                                                "byte_start": 10117,
                                                "column_end": 36,
                                                "column_start": 1,
                                                "expansion": null,
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 321,
                                                "line_start": 321,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 36,
                                                    "highlight_start": 1,
                                                    "text": "macro_rules! error_chain_processing {"
                                                  }
                                                ]
                                              },
                                              "macro_decl_name": "error_chain_processing!",
                                              "span": {
                                                "byte_end": 11546,
                                                "byte_start": 11429,
                                                "column_end": 10,
                                                "column_start": 9,
                                                "expansion": {
                                                  "def_site_span": {
                                                    "byte_end": 11353,
                                                    "byte_start": 11329,
                                                    "column_end": 25,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 375,
                                                    "line_start": 375,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 25,
                                                        "highlight_start": 1,
                                                        "text": "macro_rules! error_chain {"
                                                      }
                                                    ]
                                                  },
                                                  "macro_decl_name": "error_chain!",
                                                  "span": {
                                                    "byte_end": 234,
                                                    "byte_start": 0,
                                                    "column_end": 2,
                                                    "column_start": 1,
                                                    "expansion": null,
                                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\error.rs",
                                                    "is_primary": false,
                                                    "label": null,
                                                    "line_end": 12,
                                                    "line_start": 1,
                                                    "suggested_replacement": null,
                                                    "suggestion_applicability": null,
                                                    "text": [
                                                      {
                                                        "highlight_end": 15,
                                                        "highlight_start": 1,
                                                        "text": "error_chain! {"
                                                      },
                                                      {
                                                        "highlight_end": 13,
                                                        "highlight_start": 1,
                                                        "text": "    errors {"
                                                      },
                                                      {
                                                        "highlight_end": 30,
                                                        "highlight_start": 1,
                                                        "text": "        Protocol(t: String) {"
                                                      },
                                                      {
                                                        "highlight_end": 42,
                                                        "highlight_start": 1,
                                                        "text": "            description(\"protocol error\")"
                                                      },
                                                      {
                                                        "highlight_end": 47,
                                                        "highlight_start": 1,
                                                        "text": "            display(\"protocol error: '{}'\", t)"
                                                      },
                                                      {
                                                        "highlight_end": 10,
                                                        "highlight_start": 1,
                                                        "text": "        }"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 1,
                                                        "highlight_start": 1,
                                                        "text": ""
                                                      },
                                                      {
                                                        "highlight_end": 20,
                                                        "highlight_start": 1,
                                                        "text": "    foreign_links {"
                                                      },
                                                      {
                                                        "highlight_end": 43,
                                                        "highlight_start": 1,
                                                        "text": "        Io(::std::io::Error) #[cfg(unix)];"
                                                      },
                                                      {
                                                        "highlight_end": 6,
                                                        "highlight_start": 1,
                                                        "text": "    }"
                                                      },
                                                      {
                                                        "highlight_end": 2,
                                                        "highlight_start": 1,
                                                        "text": "}"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                                "is_primary": false,
                                                "label": null,
                                                "line_end": 380,
                                                "line_start": 377,
                                                "suggested_replacement": null,
                                                "suggestion_applicability": null,
                                                "text": [
                                                  {
                                                    "highlight_end": 34,
                                                    "highlight_start": 9,
                                                    "text": "        error_chain_processing! {"
                                                  },
                                                  {
                                                    "highlight_end": 29,
                                                    "highlight_start": 1,
                                                    "text": "            ({}, {}, {}, {})"
                                                  },
                                                  {
                                                    "highlight_end": 53,
                                                    "highlight_start": 1,
                                                    "text": "            $($block_name { $( $block_content )* })*"
                                                  },
                                                  {
                                                    "highlight_end": 10,
                                                    "highlight_start": 1,
                                                    "text": "        }"
                                                  }
                                                ]
                                              }
                                            },
                                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                            "is_primary": false,
                                            "label": null,
                                            "line_end": 360,
                                            "line_start": 357,
                                            "suggested_replacement": null,
                                            "suggestion_applicability": null,
                                            "text": [
                                              {
                                                "highlight_end": 34,
                                                "highlight_start": 9,
                                                "text": "        error_chain_processing! {"
                                              },
                                              {
                                                "highlight_end": 35,
                                                "highlight_start": 1,
                                                "text": "            ($a, $b, $c, $content)"
                                              },
                                              {
                                                "highlight_end": 22,
                                                "highlight_start": 1,
                                                "text": "            $($tail)*"
                                              },
                                              {
                                                "highlight_end": 10,
                                                "highlight_start": 1,
                                                "text": "        }"
                                              }
                                            ]
                                          }
                                        },
                                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                        "is_primary": false,
                                        "label": null,
                                        "line_end": 350,
                                        "line_start": 347,
                                        "suggested_replacement": null,
                                        "suggestion_applicability": null,
                                        "text": [
                                          {
                                            "highlight_end": 34,
                                            "highlight_start": 9,
                                            "text": "        error_chain_processing! {"
                                          },
                                          {
                                            "highlight_end": 35,
                                            "highlight_start": 1,
                                            "text": "            ($a, $b, $content, $d)"
                                          },
                                          {
                                            "highlight_end": 22,
                                            "highlight_start": 1,
                                            "text": "            $($tail)*"
                                          },
                                          {
                                            "highlight_end": 10,
                                            "highlight_start": 1,
                                            "text": "        }"
                                          }
                                        ]
                                      }
                                    },
                                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                    "is_primary": false,
                                    "label": null,
                                    "line_end": 368,
                                    "line_start": 363,
                                    "suggested_replacement": null,
                                    "suggestion_applicability": null,
                                    "text": [
                                      {
                                        "highlight_end": 33,
                                        "highlight_start": 9,
                                        "text": "        error_chain_processed! {"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            types $a"
                                      },
                                      {
                                        "highlight_end": 21,
                                        "highlight_start": 1,
                                        "text": "            links $b"
                                      },
                                      {
                                        "highlight_end": 29,
                                        "highlight_start": 1,
                                        "text": "            foreign_links $c"
                                      },
                                      {
                                        "highlight_end": 22,
                                        "highlight_start": 1,
                                        "text": "            errors $d"
                                      },
                                      {
                                        "highlight_end": 10,
                                        "highlight_start": 1,
                                        "text": "        }"
                                      }
                                    ]
                                  }
                                },
                                "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 14,
                                "line_start": 9,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 9,
                                    "text": "        error_chain_processed! {"
                                  },
                                  {
                                    "highlight_end": 20,
                                    "highlight_start": 1,
                                    "text": "            types {"
                                  },
                                  {
                                    "highlight_end": 53,
                                    "highlight_start": 1,
                                    "text": "                Error, ErrorKind, ResultExt, Result;"
                                  },
                                  {
                                    "highlight_end": 14,
                                    "highlight_start": 1,
                                    "text": "            }"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "            $( $rest )*"
                                  },
                                  {
                                    "highlight_end": 10,
                                    "highlight_start": 1,
                                    "text": "        }"
                                  }
                                ]
                              }
                            },
                            "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 30,
                            "line_start": 24,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 33,
                                "highlight_start": 9,
                                "text": "        error_chain_processed! {"
                              },
                              {
                                "highlight_end": 20,
                                "highlight_start": 1,
                                "text": "            types {"
                              },
                              {
                                "highlight_end": 47,
                                "highlight_start": 1,
                                "text": "                $error_name, $error_kind_name,"
                              },
                              {
                                "highlight_end": 34,
                                "highlight_start": 1,
                                "text": "                $result_ext_name;"
                              },
                              {
                                "highlight_end": 14,
                                "highlight_start": 1,
                                "text": "            }"
                              },
                              {
                                "highlight_end": 24,
                                "highlight_start": 1,
                                "text": "            $( $rest )*"
                              },
                              {
                                "highlight_end": 10,
                                "highlight_start": 1,
                                "text": "        }"
                              }
                            ]
                          }
                        },
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\error-chain-0.10.0\\src\\error_chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        pub struct $error_name("
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "            // The members must be `pub` for `links`."
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            /// The kind of the error."
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            pub $error_kind_name,"
                          },
                          {
                            "highlight_end": 60,
                            "highlight_start": 1,
                            "text": "            /// Contains the error chain and the backtrace."
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "            #[doc(hidden)]"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            pub $crate::State,"
                          },
                          {
                            "highlight_end": 11,
                            "highlight_start": 1,
                            "text": "        );"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`?` couldn't convert the error to `error::Error`",
                "spans": [
                  {
                    "byte_end": 3813,
                    "byte_start": 3787,
                    "column_end": 45,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": false,
                    "label": "this can't be annotated with `?` because it has type `Result<_, std::io::Error>`",
                    "line_end": 121,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 19,
                        "text": "        self.data.write_all(data.as_bytes())?;"
                      }
                    ]
                  },
                  {
                    "byte_end": 3814,
                    "byte_start": 3813,
                    "column_end": 46,
                    "column_start": 45,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": []
                      },
                      "macro_decl_name": "desugaring of operator `?`",
                      "span": {
                        "byte_end": 3814,
                        "byte_start": 3813,
                        "column_end": 46,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 45,
                            "text": "        self.data.write_all(data.as_bytes())?;"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 121,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 45,
                        "text": "        self.data.write_all(data.as_bytes())?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:148:23\n    |\n148 |             let res = self.data.write_all(&self.bits.to_bytes()).map_err(From::from);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 4659,
                    "byte_start": 4597,
                    "column_end": 85,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 85,
                        "highlight_start": 23,
                        "text": "            let res = self.data.write_all(&self.bits.to_bytes()).map_err(From::from);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the trait bound `error::Error: From<std::io::Error>` is not satisfied\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs:148:74\n    |\n148 |             let res = self.data.write_all(&self.bits.to_bytes()).map_err(From::from);\n    |                                                                          ^^^^^^^^^^ the trait `From<std::io::Error>` is not implemented for `error::Error`\n    |\n    = help: the following other types implement trait `From<T>`:\n              `error::Error` implements `From<&str>`\n              `error::Error` implements `From<String>`\n              `error::Error` implements `From<error::ErrorKind>`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the following other types implement trait `From<T>`:\n  `error::Error` implements `From<&str>`\n  `error::Error` implements `From<String>`\n  `error::Error` implements `From<error::ErrorKind>`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the trait bound `error::Error: From<std::io::Error>` is not satisfied",
                "spans": [
                  {
                    "byte_end": 4658,
                    "byte_start": 4648,
                    "column_end": 84,
                    "column_start": 74,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\codegen_macros.rs",
                    "is_primary": true,
                    "label": "the trait `From<std::io::Error>` is not implemented for `error::Error`",
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 74,
                        "text": "            let res = self.data.write_all(&self.bits.to_bytes()).map_err(From::from);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#amq-proto@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "amq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\amq-proto-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0277`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0277`.",
                "spans": []
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 72
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 11,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0421",
                    "package": "idna",
                    "title": "`idna` accepts Punycode labels that do not produce any non-ASCII when decoded",
                    "description": "`idna` 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with `idna` 0.5.0 or earlier.\n\nConcretely, `example.org` and `xn--example-.org` become equal after processing by `idna` 0.5.0 or earlier. Also, `example.org.xn--` and `example.org.` become equal after processing by `idna` 0.5.0 or earlier.\n\nIn applications using `idna` (but not in `idna` itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an `xn--`-masked name that turns into the name of the target when processed by `idna` 0.5.0 or earlier.\n\n## Remedy\n\nUpgrade to `idna` 1.0.3 or later, if depending on `idna` directly, or to `url` 2.5.4 or later, if depending on `idna` via `url`. (This issue was fixed in `idna` 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)\n\nWhen upgrading, please take a moment to read about [alternative Unicode back ends for `idna`](https://docs.rs/crate/idna_adapter/latest).\n\nIf you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an [issue](https://github.com/servo/rust-url/issues/992) about combining them with `url` 2.5.4 and `idna` 1.0.3.\n\n## Additional information\n\nThis issue resulted from `idna` 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in [revision 33 of UTS 46](https://www.unicode.org/reports/tr46/tr46-33.html#Modifications).\n\n## Acknowledgements\n\nThanks to kageshiron for recognizing the security implications of this behavior.",
                    "date": "2024-12-09",
                    "aliases": [
                      "CVE-2024-12224"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "privilege-escalation"
                    ],
                    "keywords": [
                      "idna",
                      "punycode",
                      "same-origin",
                      "domain-name"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1887898",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.0.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "idna",
                    "version": "0.1.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e",
                    "dependencies": [
                      {
                        "name": "matches",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-bidi",
                        "version": "0.3.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-normalization",
                        "version": "0.1.24",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2016-0001",
                    "package": "openssl",
                    "title": "SSL/TLS MitM vulnerability due to insecure defaults",
                    "description": "All versions of rust-openssl prior to 0.9.0 contained numerous insecure defaults\nincluding off-by-default certificate verification and no API to perform hostname\nverification.\n\nUnless configured correctly by a developer, these defaults could allow an attacker\nto perform man-in-the-middle attacks.\n\nThe problem was addressed in newer versions by enabling certificate verification\nby default and exposing APIs to perform hostname verification. Use the\n`SslConnector` and `SslAcceptor` types to take advantage of these new features\n(as opposed to the lower-level `SslContext` type).",
                    "date": "2016-11-05",
                    "aliases": [
                      "CVE-2016-10931",
                      "GHSA-34p9-f4q3-c4r7"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "ssl",
                      "mitm"
                    ],
                    "cvss": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/releases/tag/v0.9.0",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.9.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "openssl",
                    "version": "0.7.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4117b6244aac42ed0150a6019b4d953d28247c5dd6ae6f46ae469b5f2318733",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "gcc",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.7.17",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys-extras",
                        "version": "0.7.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0022",
                    "package": "openssl",
                    "title": "`openssl` `X509NameBuilder::build` returned object is not thread safe",
                    "description": "OpenSSL has a `modified` bit that it can set on on `X509_NAME` objects. If this\nbit is set then the object is not thread-safe even when it appears the code is\nnot modifying the value.\n\nThanks to David Benjamin (Google) for reporting this issue.",
                    "date": "2023-03-24",
                    "aliases": [
                      "GHSA-3gxf-9r58-2ghg"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "thread-safety"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/1854",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.48"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::X509NameBuilder::build": [
                        "<0.10.48, >=0.9.7"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.7.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4117b6244aac42ed0150a6019b4d953d28247c5dd6ae6f46ae469b5f2318733",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "gcc",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.7.17",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys-extras",
                        "version": "0.7.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0023",
                    "package": "openssl",
                    "title": "`openssl` `SubjectAlternativeName` and `ExtendedKeyUsage::other` allow arbitrary file read",
                    "description": "`SubjectAlternativeName` and `ExtendedKeyUsage` arguments were parsed using the OpenSSL\nfunction `X509V3_EXT_nconf`. This function parses all input using an OpenSSL mini-language\nwhich can perform arbitrary file reads.\n\nThanks to David Benjamin (Google) for reporting this issue.",
                    "date": "2023-03-24",
                    "aliases": [
                      "GHSA-9qwg-crg9-m2vc"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "file-disclosure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/1854",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.48"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::extension::ExtendedKeyUsage::other": [
                        "<0.10.48, >=0.9.7"
                      ],
                      "openssl::x509::extension::SubjectAlternativeName::new": [
                        "<0.10.48, >=0.9.7"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.7.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4117b6244aac42ed0150a6019b4d953d28247c5dd6ae6f46ae469b5f2318733",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "gcc",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.7.17",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys-extras",
                        "version": "0.7.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0024",
                    "package": "openssl",
                    "title": "`openssl` `X509Extension::new` and `X509Extension::new_nid` null pointer dereference",
                    "description": "These functions would crash when the context argument was None with certain extension types.\n\nThanks to David Benjamin (Google) for reporting this issue.",
                    "date": "2023-03-24",
                    "aliases": [
                      "GHSA-6hcf-g6gr-hhcr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/1854",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.48"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::X509Extension::new": [
                        "<0.10.48, >=0.9.7"
                      ],
                      "openssl::x509::X509Extension::new_nid": [
                        "<0.10.48, >=0.9.7"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.7.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4117b6244aac42ed0150a6019b4d953d28247c5dd6ae6f46ae469b5f2318733",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "gcc",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.7.17",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys-extras",
                        "version": "0.7.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0044",
                    "package": "openssl",
                    "title": "`openssl` `X509VerifyParamRef::set_host` buffer over-read",
                    "description": "When this function was passed an empty string, `openssl` would attempt to call `strlen` on it, reading arbitrary memory until it reached a NUL byte.",
                    "date": "2023-06-20",
                    "aliases": [
                      "GHSA-xcf7-rvmh-g6q4"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/issues/1965",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.55"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::verify::X509VerifyParamRef::set_host": [
                        "<0.10.55, >=0.10.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.7.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4117b6244aac42ed0150a6019b4d953d28247c5dd6ae6f46ae469b5f2318733",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "gcc",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.7.17",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys-extras",
                        "version": "0.7.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0357",
                    "package": "openssl",
                    "title": "`MemBio::get_buf` has undefined behavior with empty buffers",
                    "description": "Previously, `MemBio::get_buf` called `slice::from_raw_parts` with a null-pointer, which violates the functions invariants, leading to undefined behavior. In debug builds this would produce an assertion failure. This is now fixed.",
                    "date": "2024-07-21",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/2266",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.66"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::bio::MemBio::get_buf": [
                        "<0.10.66, >=0.8.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.7.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4117b6244aac42ed0150a6019b4d953d28247c5dd6ae6f46ae469b5f2318733",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "gcc",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.7.17",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys-extras",
                        "version": "0.7.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0004",
                    "package": "openssl",
                    "title": "ssl::select_next_proto use after free",
                    "description": "In `openssl` versions before `0.10.70`, `ssl::select_next_proto` can return a slice pointing into the `server` argument's buffer but with a lifetime bound to the `client` argument. In situations where the `server` buffer's lifetime is shorter than the `client` buffer's, this can cause a use after free. This could cause the server to crash or to return arbitrary memory contents to the client.\n\n`openssl` 0.10.70 fixes the signature of `ssl::select_next_proto` to properly constrain the output buffer's lifetime to that of both input buffers.\n\nIn standard usage of `ssl::select_next_proto` in the callback passed to `SslContextBuilder::set_alpn_select_callback`, code is only affected if the `server` buffer is constructed *within* the callback. For example:\n\nNot vulnerable - the server buffer has a `'static` lifetime:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(b\"\\x02h2\", client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nNot vulnerable - the server buffer outlives the handshake:\n```rust\nlet server_protos = b\"\\x02h2\".to_vec();\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nVulnerable - the server buffer is freed when the callback returns:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    let server_protos = b\"\\x02h2\".to_vec();\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```",
                    "date": "2025-02-02",
                    "aliases": [
                      "GHSA-rpmj-rpgj-qmpm"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [
                      "ssl",
                      "tls",
                      "alpn"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/sfackler/rust-openssl/pull/2360"
                    ],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/security/advisories/GHSA-rpmj-rpgj-qmpm",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.70"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::ssl::select_next_proto": [
                        ">=0.10.0, <0.10.70"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.7.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4117b6244aac42ed0150a6019b4d953d28247c5dd6ae6f46ae469b5f2318733",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "gcc",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.7.17",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys-extras",
                        "version": "0.7.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2022-0013",
                    "package": "regex",
                    "title": "Regexes with large repetitions on empty sub-expressions take a very long time to parse",
                    "description": "The Rust Security Response WG was notified that the `regex` crate did not\nproperly limit the complexity of the regular expressions (regex) it parses. An\nattacker could use this security issue to perform a denial of service, by\nsending a specially crafted regex to a service accepting untrusted regexes. No\nknown vulnerability is present when parsing untrusted input with trusted\nregexes.\n\nThis issue has been assigned CVE-2022-24713. The severity of this vulnerability\nis \"high\" when the `regex` crate is used to parse untrusted regexes. Other uses\nof the `regex` crate are not affected by this vulnerability.\n\n## Overview\n\nThe `regex` crate features built-in mitigations to prevent denial of service\nattacks caused by untrusted regexes, or untrusted input matched by trusted\nregexes. Those (tunable) mitigations already provide sane defaults to prevent\nattacks. This guarantee is documented and it's considered part of the crate's\nAPI.\n\nUnfortunately a bug was discovered in the mitigations designed to prevent\nuntrusted regexes to take an arbitrary amount of time during parsing, and it's\npossible to craft regexes that bypass such mitigations. This makes it possible\nto perform denial of service attacks by sending specially crafted regexes to\nservices accepting user-controlled, untrusted regexes.\n\n## Affected versions\n\nAll versions of the `regex` crate before or equal to 1.5.4 are affected by this\nissue. The fix is include starting from  `regex` 1.5.5.\n\n## Mitigations\n\nWe recommend everyone accepting user-controlled regexes to upgrade immediately\nto the latest version of the `regex` crate.\n\nUnfortunately there is no fixed set of problematic regexes, as there are\npractically infinite regexes that could be crafted to exploit this\nvulnerability. Because of this, we do not recommend denying known problematic\nregexes.\n\n## Acknowledgements\n\nWe want to thank Addison Crump for responsibly disclosing this to us according\nto the [Rust security policy][1], and for helping review the fix.\n\nWe also want to thank Andrew Gallant for developing the fix, and Pietro Albini\nfor coordinating the disclosure and writing this advisory.\n\n[1]: https://www.rust-lang.org/policies/security",
                    "date": "2022-03-08",
                    "aliases": [
                      "CVE-2022-24713",
                      "GHSA-m5pq-gvj9-9vr8"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.5.5"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "regex",
                    "version": "0.1.80",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f",
                    "dependencies": [
                      {
                        "name": "aho-corasick",
                        "version": "0.5.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "memchr",
                        "version": "0.1.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "regex-syntax",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "thread_local",
                        "version": "0.2.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "utf8-ranges",
                        "version": "0.1.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0018",
                    "package": "remove_dir_all",
                    "title": "Race Condition Enabling Link Following and Time-of-check Time-of-use (TOCTOU)",
                    "description": "The remove_dir_all crate is a Rust library that offers additional features over the Rust\nstandard library fs::remove_dir_all function.\n\nIt was possible to trick a privileged process doing a recursive delete in an\nattacker controlled directory into deleting privileged files, on all operating systems.\n\nFor instance, consider deleting a tree called 'etc' in a parent directory\ncalled 'p'. Between calling `remove_dir_all(\"a\")` and remove_dir_all(\"a\")\nactually starting its work, the attacker can move 'p' to 'p-prime', and\nreplace 'p' with a symlink to '/'. Then the privileged process deletes 'p/etc'\nwhich is actually /etc, and now your system is broken. There are some\nmitigations for this exact scenario, such as CWD relative file lookup, but\nthey are not guaranteed - any code using absolute paths will not have that\nprotection in place.\n\nThe same attack could be performed at any point in the directory tree being\ndeleted: if 'a' contains a child directory called 'etc', attacking the\ndeletion by replacing 'a' with a link is possible.\n\nThe new code in this release mitigates the attack within the directory tree\nbeing deleted by using file-handle relative operations: to open 'a/etc', the\npath 'etc' relative to 'a' is opened, where 'a' is represented by a file\ndescriptor (Unix) or handle (Windows). With the exception of the entry points\ninto the directory deletion logic, this is robust against manipulation of the\ndirectory hierarchy, and remove_dir_all will only delete files and directories\ncontained in the tree it is deleting.\n\nThe entry path however is a challenge - as described above, there are some\npotential mitigations, but since using them must be done by the calling code,\nit is hard to be confident about the security properties of the path based\ninterface.\n\nThe new extension trait `RemoveDir` provides an interface where it is much\nharder to get it wrong.\n\n`somedir.remove_dir_contents(\"name-of-child\")`.\n\nCallers can then make their own security evaluation about how to securely get\na directory handle. That is still not particularly obvious, and we're going to\nfollow up with a helper of some sort (probably in the `fs_at` crate). Once\nthat is available, the path based entry points will get deprecated.\n\nIn the interim, processes that might run with elevated privileges should\nfigure out how to securely identify the directory they are going to delete, to\navoid the initial race. Pragmatically, other processes should be fine with the\npath based entry points : this is the same interface `std::fs::remove_dir_all`\noffers, and an unprivileged process running in an attacker controlled\ndirectory can't do anything that the attacker can't already do.",
                    "date": "2023-02-24",
                    "aliases": [
                      "GHSA-mc8h-8q98-g5hr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "TOCTOU"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/advisories/GHSA-mc8h-8q98-g5hr"
                    ],
                    "source": null,
                    "url": "https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.8.0"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "remove_dir_all::ensure_empty_dir": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_all": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_contents": [
                        "<0.8.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "remove_dir_all",
                    "version": "0.5.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2022-0006",
                    "package": "thread_local",
                    "title": "Data race in `Iter` and `IterMut`",
                    "description": "In the affected version of this crate, `{Iter, IterMut}::next` used a weaker memory ordering when loading values than what was required, exposing a potential data race\nwhen iterating over a `ThreadLocal`'s values.\n\nCrates using `Iter::next`, or `IterMut::next` are affected by this issue.",
                    "date": "2022-01-23",
                    "aliases": [
                      "GHSA-9hpw-r23r-xgm5"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Amanieu/thread_local-rs/issues/33",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.1.4"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "thread_local",
                    "version": "0.2.7",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5",
                    "dependencies": [
                      {
                        "name": "thread-id",
                        "version": "2.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "tempdir",
                    "version": "0.3.7",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8",
                    "dependencies": [
                      {
                        "name": "rand",
                        "version": "0.4.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "remove_dir_all",
                        "version": "0.5.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2018-0017",
                    "package": "tempdir",
                    "title": "`tempdir` crate has been deprecated; use `tempfile` instead",
                    "description": "The [`tempdir`](https://crates.io/crates/tempdir) crate has been deprecated\nand the functionality is merged into [`tempfile`](https://crates.io/crates/tempfile).",
                    "date": "2018-02-13",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rust-lang-deprecated/tempdir/pull/46",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "openssl",
                    "version": "0.7.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4117b6244aac42ed0150a6019b4d953d28247c5dd6ae6f46ae469b5f2318733",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "gcc",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.7.17",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys-extras",
                        "version": "0.7.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0072",
                    "package": "openssl",
                    "title": "`openssl` `X509StoreRef::objects` is unsound",
                    "description": "This function returned a shared reference into an OpenSSL datastructure but did not account for interior mutability. OpenSSL may modify the data behind this reference, meaning accesses can race and the reference is unsound.\n\nUse of this function should be replaced with `X509StoreRef::all_certificates`.",
                    "date": "2023-11-23",
                    "aliases": [
                      "GHSA-xphf-cx8h-7q9g"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/issues/2096",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::store::X509StoreRef::objects": [
                        "<0.10.60, >=0.10.29"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.60"
                    ],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "amqp",
          "version": "0.1.3",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/amqp/latest/amqp/all.html \"show sidebar\")\n# Crate amqpCopy item path\n[Settings](https://docs.rs/amqp/latest/settings.html)\n[Help](https://docs.rs/amqp/latest/help.html)\nSummary[Source](https://docs.rs/amqp/latest/src/amqp/lib.rs.html#1-107)\nExpand description\n#rust-amqp [![Build Status](https://travis-ci.org/Antti/rust-amqp.svg)](https: //travis-ci.org/Antti/rust-amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n### [\u00a7](https://docs.rs/amqp/latest/amqp/#what-it-currently-can-do)What it currently can do:\nConnect to server Open/close channels Declare queues/exchanges All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\nHave a look at the examples in examples folder.\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#connecting-to-the-server--openning-channel)Connecting to the server & openning channel:\n> Note: Currently it can\u2019t connect using TLS connections.\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nuse amqp::session::Session;\nuse amqp::table;\nlet mut session = Session::open_url(\"amqp://localhost/\").unwrap();\nlet mut channel = session.open_channel(1).unwrap();\n```\n\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#declaring-queue)Declaring queue:\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nuse amqp::table;\nThe arguments come in following order:\nqueue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete:\nbool, nowait: bool, arguments: Table\nlet queue_declare = channel.queue_declare(\"my_queue_name\", false, true,\nfalse, false, false, table::new());\n```\n\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#publishing-message)Publishing message:\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nchannel.basic_publish(\"\", \"my_queue_name\", true, false,\namqp::protocol::basic::BasicProperties{ content_type:\nSome(\"text\".to_string()), ..Default::default()}, (b\"Hello from\nrust!\").to_vec());\n```\n\nThis will send message: \u201cHello from rust!\u201d to the queue named \u201cmy_queue_name\u201d.\nThe messages have type of Vec, so if you want to send string, first you must convert it to Vec.\n### [\u00a7](https://docs.rs/amqp/latest/amqp/#development-notes)Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nTo generate a new spec, run:\n```\nmake\n```\n\nTo build project, use cargo:\n```\ncargo build\n```\n\nTo build examples:\n```\ncargo test\n```\n\n## Modules[\u00a7](https://docs.rs/amqp/latest/amqp/#modules)\n\n[protocol](https://docs.rs/amqp/latest/amqp/protocol/index.html \"mod amqp::protocol\")\n\n## Structs[\u00a7](https://docs.rs/amqp/latest/amqp/#structs)\n\n[Channel](https://docs.rs/amqp/latest/amqp/struct.Channel.html \"struct amqp::Channel\")\n\n\n[ConsumeBuilder](https://docs.rs/amqp/latest/amqp/struct.ConsumeBuilder.html \"struct amqp::ConsumeBuilder\")\n\n\n[GetResult](https://docs.rs/amqp/latest/amqp/struct.GetResult.html \"struct amqp::GetResult\")\n\n\n[Options](https://docs.rs/amqp/latest/amqp/struct.Options.html \"struct amqp::Options\")\n\n\n[QueueBuilder](https://docs.rs/amqp/latest/amqp/struct.QueueBuilder.html \"struct amqp::QueueBuilder\")\n\n\n[Session](https://docs.rs/amqp/latest/amqp/struct.Session.html \"struct amqp::Session\")\n\n## Enums[\u00a7](https://docs.rs/amqp/latest/amqp/#enums)\n\n[AMQPError](https://docs.rs/amqp/latest/amqp/enum.AMQPError.html \"enum amqp::AMQPError\")\n\n\n[AMQPScheme](https://docs.rs/amqp/latest/amqp/enum.AMQPScheme.html \"enum amqp::AMQPScheme\")\n\n\n[TableEntry](https://docs.rs/amqp/latest/amqp/enum.TableEntry.html \"enum amqp::TableEntry\")\n\n## Constants[\u00a7](https://docs.rs/amqp/latest/amqp/#constants)\n\n[VERSION](https://docs.rs/amqp/latest/amqp/constant.VERSION.html \"constant amqp::VERSION\")\n\n## Traits[\u00a7](https://docs.rs/amqp/latest/amqp/#traits)\n\n[Basic](https://docs.rs/amqp/latest/amqp/trait.Basic.html \"trait amqp::Basic\")\n\n\n[Consumer](https://docs.rs/amqp/latest/amqp/trait.Consumer.html \"trait amqp::Consumer\")\n\n## Type Aliases[\u00a7](https://docs.rs/amqp/latest/amqp/#types)\n\n[Table](https://docs.rs/amqp/latest/amqp/type.Table.html \"type amqp::Table\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/amqp/latest/amqp/all.html \"show sidebar\")\n# Crate amqpCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n#rust-amqp ![Build Status\u27e84\u27e9](https: //travis-ci.org/Antti/rust-amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n### \u00a7\u27e85\u27e9What it currently can do:\nConnect to server Open/close channels Declare queues/exchanges All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\nHave a look at the examples in examples folder.\n#### \u00a7\u27e86\u27e9Connecting to the server & openning channel:\n> Note: Currently it can\u2019t connect using TLS connections.\n\u24d8\u27e87\u27e9```\nuse amqp::session::Session;\nuse amqp::table;\nlet mut session = Session::open_url(\"amqp://localhost/\").unwrap();\nlet mut channel = session.open_channel(1).unwrap();\n```\n\n#### \u00a7\u27e88\u27e9Declaring queue:\n\u24d8\u27e87\u27e9```\nuse amqp::table;\nThe arguments come in following order:\nqueue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete:\nbool, nowait: bool, arguments: Table\nlet queue_declare = channel.queue_declare(\"my_queue_name\", false, true,\nfalse, false, false, table::new());\n```\n\n#### \u00a7\u27e89\u27e9Publishing message:\n\u24d8\u27e87\u27e9```\nchannel.basic_publish(\"\", \"my_queue_name\", true, false,\namqp::protocol::basic::BasicProperties{ content_type:\nSome(\"text\".to_string()), ..Default::default()}, (b\"Hello from\nrust!\").to_vec());\n```\n\nThis will send message: \u201cHello from rust!\u201d to the queue named \u201cmy_queue_name\u201d.\nThe messages have type of Vec, so if you want to send string, first you must convert it to Vec.\n### \u00a7\u27e810\u27e9Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nTo generate a new spec, run:\n```\nmake\n```\n\nTo build project, use cargo:\n```\ncargo build\n```\n\nTo build examples:\n```\ncargo test\n```\n\n## Modules\u00a7\u27e811\u27e9\n\nprotocol\u27e812\u27e9\n\n## Structs\u00a7\u27e813\u27e9\n\nChannel\u27e814\u27e9\n\n\nConsumeBuilder\u27e815\u27e9\n\n\nGetResult\u27e816\u27e9\n\n\nOptions\u27e817\u27e9\n\n\nQueueBuilder\u27e818\u27e9\n\n\nSession\u27e819\u27e9\n\n## Enums\u00a7\u27e820\u27e9\n\nAMQPError\u27e821\u27e9\n\n\nAMQPScheme\u27e822\u27e9\n\n\nTableEntry\u27e823\u27e9\n\n## Constants\u00a7\u27e824\u27e9\n\nVERSION\u27e825\u27e9\n\n## Traits\u00a7\u27e826\u27e9\n\nBasic\u27e827\u27e9\n\n\nConsumer\u27e828\u27e9\n\n## Type Aliases\u00a7\u27e829\u27e9\n\nTable\u27e830\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/amqp/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/amqp/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/amqp/latest/src/amqp/lib.rs.html#1-107: Source\n\u27e84\u27e9 https://travis-ci.org/Antti/rust-amqp.svg: ![Build Status\n\u27e85\u27e9 https://docs.rs/amqp/latest/amqp/#what-it-currently-can-do: \u00a7\n\u27e86\u27e9 https://docs.rs/amqp/latest/amqp/#connecting-to-the-server--openning-channel: \u00a7\n\u27e87\u27e9 https://docs.rs/amqp/latest/amqp/: This example is not tested - \u24d8\n\u27e88\u27e9 https://docs.rs/amqp/latest/amqp/#declaring-queue: \u00a7\n\u27e89\u27e9 https://docs.rs/amqp/latest/amqp/#publishing-message: \u00a7\n\u27e810\u27e9 https://docs.rs/amqp/latest/amqp/#development-notes: \u00a7\n\u27e811\u27e9 https://docs.rs/amqp/latest/amqp/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/amqp/latest/amqp/protocol/index.html: mod amqp::protocol - protocol\n\u27e813\u27e9 https://docs.rs/amqp/latest/amqp/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/amqp/latest/amqp/struct.Channel.html: struct amqp::Channel - Channel\n\u27e815\u27e9 https://docs.rs/amqp/latest/amqp/struct.ConsumeBuilder.html: struct amqp::ConsumeBuilder - ConsumeBuilder\n\u27e816\u27e9 https://docs.rs/amqp/latest/amqp/struct.GetResult.html: struct amqp::GetResult - GetResult\n\u27e817\u27e9 https://docs.rs/amqp/latest/amqp/struct.Options.html: struct amqp::Options - Options\n\u27e818\u27e9 https://docs.rs/amqp/latest/amqp/struct.QueueBuilder.html: struct amqp::QueueBuilder - QueueBuilder\n\u27e819\u27e9 https://docs.rs/amqp/latest/amqp/struct.Session.html: struct amqp::Session - Session\n\u27e820\u27e9 https://docs.rs/amqp/latest/amqp/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/amqp/latest/amqp/enum.AMQPError.html: enum amqp::AMQPError - AMQPError\n\u27e822\u27e9 https://docs.rs/amqp/latest/amqp/enum.AMQPScheme.html: enum amqp::AMQPScheme - AMQPScheme\n\u27e823\u27e9 https://docs.rs/amqp/latest/amqp/enum.TableEntry.html: enum amqp::TableEntry - TableEntry\n\u27e824\u27e9 https://docs.rs/amqp/latest/amqp/#constants: \u00a7\n\u27e825\u27e9 https://docs.rs/amqp/latest/amqp/constant.VERSION.html: constant amqp::VERSION - VERSION\n\u27e826\u27e9 https://docs.rs/amqp/latest/amqp/#traits: \u00a7\n\u27e827\u27e9 https://docs.rs/amqp/latest/amqp/trait.Basic.html: trait amqp::Basic - Basic\n\u27e828\u27e9 https://docs.rs/amqp/latest/amqp/trait.Consumer.html: trait amqp::Consumer - Consumer\n\u27e829\u27e9 https://docs.rs/amqp/latest/amqp/#types: \u00a7\n\u27e830\u27e9 https://docs.rs/amqp/latest/amqp/type.Table.html: type amqp::Table - Table\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "amqp",
          "version": "0.1.3",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/amqp/latest/amqp/all.html \"show sidebar\")\n# Crate amqpCopy item path\n[Settings](https://docs.rs/amqp/latest/settings.html)\n[Help](https://docs.rs/amqp/latest/help.html)\nSummary[Source](https://docs.rs/amqp/latest/src/amqp/lib.rs.html#1-107)\nExpand description\n#rust-amqp [![Build Status](https://travis-ci.org/Antti/rust-amqp.svg)](https: //travis-ci.org/Antti/rust-amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n### [\u00a7](https://docs.rs/amqp/latest/amqp/#what-it-currently-can-do)What it currently can do:\nConnect to server Open/close channels Declare queues/exchanges All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\nHave a look at the examples in examples folder.\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#connecting-to-the-server--openning-channel)Connecting to the server & openning channel:\n> Note: Currently it can\u2019t connect using TLS connections.\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nuse amqp::session::Session;\nuse amqp::table;\nlet mut session = Session::open_url(\"amqp://localhost/\").unwrap();\nlet mut channel = session.open_channel(1).unwrap();\n```\n\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#declaring-queue)Declaring queue:\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nuse amqp::table;\nThe arguments come in following order:\nqueue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete:\nbool, nowait: bool, arguments: Table\nlet queue_declare = channel.queue_declare(\"my_queue_name\", false, true,\nfalse, false, false, table::new());\n```\n\n#### [\u00a7](https://docs.rs/amqp/latest/amqp/#publishing-message)Publishing message:\n[\u24d8](https://docs.rs/amqp/latest/amqp/ \"This example is not tested\")```\nchannel.basic_publish(\"\", \"my_queue_name\", true, false,\namqp::protocol::basic::BasicProperties{ content_type:\nSome(\"text\".to_string()), ..Default::default()}, (b\"Hello from\nrust!\").to_vec());\n```\n\nThis will send message: \u201cHello from rust!\u201d to the queue named \u201cmy_queue_name\u201d.\nThe messages have type of Vec, so if you want to send string, first you must convert it to Vec.\n### [\u00a7](https://docs.rs/amqp/latest/amqp/#development-notes)Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nTo generate a new spec, run:\n```\nmake\n```\n\nTo build project, use cargo:\n```\ncargo build\n```\n\nTo build examples:\n```\ncargo test\n```\n\n## Modules[\u00a7](https://docs.rs/amqp/latest/amqp/#modules)\n\n[protocol](https://docs.rs/amqp/latest/amqp/protocol/index.html \"mod amqp::protocol\")\n\n## Structs[\u00a7](https://docs.rs/amqp/latest/amqp/#structs)\n\n[Channel](https://docs.rs/amqp/latest/amqp/struct.Channel.html \"struct amqp::Channel\")\n\n\n[ConsumeBuilder](https://docs.rs/amqp/latest/amqp/struct.ConsumeBuilder.html \"struct amqp::ConsumeBuilder\")\n\n\n[GetResult](https://docs.rs/amqp/latest/amqp/struct.GetResult.html \"struct amqp::GetResult\")\n\n\n[Options](https://docs.rs/amqp/latest/amqp/struct.Options.html \"struct amqp::Options\")\n\n\n[QueueBuilder](https://docs.rs/amqp/latest/amqp/struct.QueueBuilder.html \"struct amqp::QueueBuilder\")\n\n\n[Session](https://docs.rs/amqp/latest/amqp/struct.Session.html \"struct amqp::Session\")\n\n## Enums[\u00a7](https://docs.rs/amqp/latest/amqp/#enums)\n\n[AMQPError](https://docs.rs/amqp/latest/amqp/enum.AMQPError.html \"enum amqp::AMQPError\")\n\n\n[AMQPScheme](https://docs.rs/amqp/latest/amqp/enum.AMQPScheme.html \"enum amqp::AMQPScheme\")\n\n\n[TableEntry](https://docs.rs/amqp/latest/amqp/enum.TableEntry.html \"enum amqp::TableEntry\")\n\n## Constants[\u00a7](https://docs.rs/amqp/latest/amqp/#constants)\n\n[VERSION](https://docs.rs/amqp/latest/amqp/constant.VERSION.html \"constant amqp::VERSION\")\n\n## Traits[\u00a7](https://docs.rs/amqp/latest/amqp/#traits)\n\n[Basic](https://docs.rs/amqp/latest/amqp/trait.Basic.html \"trait amqp::Basic\")\n\n\n[Consumer](https://docs.rs/amqp/latest/amqp/trait.Consumer.html \"trait amqp::Consumer\")\n\n## Type Aliases[\u00a7](https://docs.rs/amqp/latest/amqp/#types)\n\n[Table](https://docs.rs/amqp/latest/amqp/type.Table.html \"type amqp::Table\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/amqp/latest/amqp/all.html \"show sidebar\")\n# Crate amqpCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n#rust-amqp ![Build Status\u27e84\u27e9](https: //travis-ci.org/Antti/rust-amqp)\nAMQ protocol implementation in pure rust.\n> Note: The project is still in very early stages of development, it implements all the protocol parsing, but not all the protocol methods are wrapped/easy to use. Expect the API to be changed in the future.\n### \u00a7\u27e85\u27e9What it currently can do:\nConnect to server Open/close channels Declare queues/exchanges All the methods from the Basic class are implemented, including get, publish, ack, nack, reject, consume. So you can send/receive messages.\nHave a look at the examples in examples folder.\n#### \u00a7\u27e86\u27e9Connecting to the server & openning channel:\n> Note: Currently it can\u2019t connect using TLS connections.\n\u24d8\u27e87\u27e9```\nuse amqp::session::Session;\nuse amqp::table;\nlet mut session = Session::open_url(\"amqp://localhost/\").unwrap();\nlet mut channel = session.open_channel(1).unwrap();\n```\n\n#### \u00a7\u27e88\u27e9Declaring queue:\n\u24d8\u27e87\u27e9```\nuse amqp::table;\nThe arguments come in following order:\nqueue: &str, passive: bool, durable: bool, exclusive: bool, auto_delete:\nbool, nowait: bool, arguments: Table\nlet queue_declare = channel.queue_declare(\"my_queue_name\", false, true,\nfalse, false, false, table::new());\n```\n\n#### \u00a7\u27e89\u27e9Publishing message:\n\u24d8\u27e87\u27e9```\nchannel.basic_publish(\"\", \"my_queue_name\", true, false,\namqp::protocol::basic::BasicProperties{ content_type:\nSome(\"text\".to_string()), ..Default::default()}, (b\"Hello from\nrust!\").to_vec());\n```\n\nThis will send message: \u201cHello from rust!\u201d to the queue named \u201cmy_queue_name\u201d.\nThe messages have type of Vec, so if you want to send string, first you must convert it to Vec.\n### \u00a7\u27e810\u27e9Development notes:\nThe methods encoding/decoding code is generated using codegen.rb & amqp-rabbitmq-0.9.1.json spec.\nTo generate a new spec, run:\n```\nmake\n```\n\nTo build project, use cargo:\n```\ncargo build\n```\n\nTo build examples:\n```\ncargo test\n```\n\n## Modules\u00a7\u27e811\u27e9\n\nprotocol\u27e812\u27e9\n\n## Structs\u00a7\u27e813\u27e9\n\nChannel\u27e814\u27e9\n\n\nConsumeBuilder\u27e815\u27e9\n\n\nGetResult\u27e816\u27e9\n\n\nOptions\u27e817\u27e9\n\n\nQueueBuilder\u27e818\u27e9\n\n\nSession\u27e819\u27e9\n\n## Enums\u00a7\u27e820\u27e9\n\nAMQPError\u27e821\u27e9\n\n\nAMQPScheme\u27e822\u27e9\n\n\nTableEntry\u27e823\u27e9\n\n## Constants\u00a7\u27e824\u27e9\n\nVERSION\u27e825\u27e9\n\n## Traits\u00a7\u27e826\u27e9\n\nBasic\u27e827\u27e9\n\n\nConsumer\u27e828\u27e9\n\n## Type Aliases\u00a7\u27e829\u27e9\n\nTable\u27e830\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/amqp/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/amqp/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/amqp/latest/src/amqp/lib.rs.html#1-107: Source\n\u27e84\u27e9 https://travis-ci.org/Antti/rust-amqp.svg: ![Build Status\n\u27e85\u27e9 https://docs.rs/amqp/latest/amqp/#what-it-currently-can-do: \u00a7\n\u27e86\u27e9 https://docs.rs/amqp/latest/amqp/#connecting-to-the-server--openning-channel: \u00a7\n\u27e87\u27e9 https://docs.rs/amqp/latest/amqp/: This example is not tested - \u24d8\n\u27e88\u27e9 https://docs.rs/amqp/latest/amqp/#declaring-queue: \u00a7\n\u27e89\u27e9 https://docs.rs/amqp/latest/amqp/#publishing-message: \u00a7\n\u27e810\u27e9 https://docs.rs/amqp/latest/amqp/#development-notes: \u00a7\n\u27e811\u27e9 https://docs.rs/amqp/latest/amqp/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/amqp/latest/amqp/protocol/index.html: mod amqp::protocol - protocol\n\u27e813\u27e9 https://docs.rs/amqp/latest/amqp/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/amqp/latest/amqp/struct.Channel.html: struct amqp::Channel - Channel\n\u27e815\u27e9 https://docs.rs/amqp/latest/amqp/struct.ConsumeBuilder.html: struct amqp::ConsumeBuilder - ConsumeBuilder\n\u27e816\u27e9 https://docs.rs/amqp/latest/amqp/struct.GetResult.html: struct amqp::GetResult - GetResult\n\u27e817\u27e9 https://docs.rs/amqp/latest/amqp/struct.Options.html: struct amqp::Options - Options\n\u27e818\u27e9 https://docs.rs/amqp/latest/amqp/struct.QueueBuilder.html: struct amqp::QueueBuilder - QueueBuilder\n\u27e819\u27e9 https://docs.rs/amqp/latest/amqp/struct.Session.html: struct amqp::Session - Session\n\u27e820\u27e9 https://docs.rs/amqp/latest/amqp/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/amqp/latest/amqp/enum.AMQPError.html: enum amqp::AMQPError - AMQPError\n\u27e822\u27e9 https://docs.rs/amqp/latest/amqp/enum.AMQPScheme.html: enum amqp::AMQPScheme - AMQPScheme\n\u27e823\u27e9 https://docs.rs/amqp/latest/amqp/enum.TableEntry.html: enum amqp::TableEntry - TableEntry\n\u27e824\u27e9 https://docs.rs/amqp/latest/amqp/#constants: \u00a7\n\u27e825\u27e9 https://docs.rs/amqp/latest/amqp/constant.VERSION.html: constant amqp::VERSION - VERSION\n\u27e826\u27e9 https://docs.rs/amqp/latest/amqp/#traits: \u00a7\n\u27e827\u27e9 https://docs.rs/amqp/latest/amqp/trait.Basic.html: trait amqp::Basic - Basic\n\u27e828\u27e9 https://docs.rs/amqp/latest/amqp/trait.Consumer.html: trait amqp::Consumer - Consumer\n\u27e829\u27e9 https://docs.rs/amqp/latest/amqp/#types: \u00a7\n\u27e830\u27e9 https://docs.rs/amqp/latest/amqp/type.Table.html: type amqp::Table - Table\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `amqp` crate provides a pure Rust implementation of the AMQP 0.9.1 protocol, enabling message-based communication with AMQP servers. It supports key operations such as connecting to servers, managing channels, declaring queues/exchanges, and handling messages (publish, consume, ack, nack, reject). While functional, the crate is in early development, lacks TLS support, and may undergo API changes.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 3.0,
          "factual_counterfactual": "### Pair 1: Connection Capabilities  \n\u2705 Factual: The `amqp` crate supports connecting to an AMQP server using plain TCP but does not currently support TLS connections.  \n\u274c Counterfactual: The `amqp` crate supports secure TLS connections to AMQP servers, ensuring encrypted communication.  \n\n---\n\n### Pair 2: Protocol Method Implementation  \n\u2705 Factual: The `amqp` crate implements all methods from the Basic class, including `get`, `publish`, `ack`, `nack`, `reject`, and `consume`, enabling message sending and receiving.  \n\u274c Counterfactual: The `amqp` crate only implements a subset of the Basic class methods, such as `publish` and `consume`, and lacks support for `ack` or `nack`.  \n\n---\n\n### Pair 3: Queue Declaration  \n\u2705 Factual: The `amqp` crate allows users to declare queues with customizable parameters such as durability, exclusivity, and auto-delete behavior using the `queue_declare` method.  \n\u274c Counterfactual: The `amqp` crate automatically declares queues with default parameters and does not allow customization during queue declaration.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-529c11cb-8b3bff54-1751263609",
      "timestamp": "2025-06-30T06:06:49.845365+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]