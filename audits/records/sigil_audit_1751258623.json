[
  {
    "execution_id": "exec-b1596972-37913dae-1751258596",
    "timestamp": "2025-06-30T04:43:16.597703+00:00",
    "sacred_chain": {
      "input_data": "embassy-sync",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'embassy-sync' -> 'embassy-sync'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "embassy-sync",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/embassy-sync",
            "title": "embassy-sync v0.7.0",
            "content": {
              "raw_markdown": "#  embassy-sync v0.7.0\nno-std, no-alloc synchronization primitives with async support \n  * [ Readme ](https://crates.io/crates/embassy-sync)\n  * [ 10 Versions ](https://crates.io/crates/embassy-sync/versions)\n  * [ Dependencies ](https://crates.io/crates/embassy-sync/dependencies)\n  * [ Dependents ](https://crates.io/crates/embassy-sync/reverse_dependencies)\n\n\n## Metadata\nabout 1 month ago \n2021 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n49.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add embassy-sync\nOr add the following line to your Cargo.toml:\nembassy-sync = \"0.7.0\"\n## Documentation\n[ docs.embassy.dev/embassy-sync ](https://docs.embassy.dev/embassy-sync)\n## Repository\n[ github.com/embassy-rs/embassy ](https://github.com/embassy-rs/embassy)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n  * [Embedded development](https://crates.io/categories/embedded)\n  * [Concurrency](https://crates.io/categories/concurrency)\n\n\n[ Report crate ](https://crates.io/support?crate=embassy-sync&inquire=crate-violation)\n### Stats Overview\n1,627,271 Downloads all time\n10 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  embassy-sync v0.7.0\nno-std, no-alloc synchronization primitives with async support \n  *  Readme \u27e81\u27e9\n  *  10 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\nabout 1 month ago \n2021 edition \n MIT \u27e85\u27e9 OR  Apache-2.0 \u27e86\u27e9\n49.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add embassy-sync\nOr add the following line to your Cargo.toml:\nembassy-sync = \"0.7.0\"\n## Documentation\n docs.embassy.dev/embassy-sync \u27e87\u27e9\n## Repository\n github.com/embassy-rs/embassy \u27e88\u27e9\n## Owners\n## Categories\n  * No standard library\u27e89\u27e9\n  * Asynchronous\u27e810\u27e9\n  * Embedded development\u27e811\u27e9\n  * Concurrency\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n1,627,271 Downloads all time\n10 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/embassy-sync:  Readme \n\u27e82\u27e9 https://crates.io/crates/embassy-sync/versions:  10 Versions \n\u27e83\u27e9 https://crates.io/crates/embassy-sync/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/embassy-sync/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://docs.embassy.dev/embassy-sync:  docs.embassy.dev/embassy-sync \n\u27e88\u27e9 https://github.com/embassy-rs/embassy:  github.com/embassy-rs/embassy \n\u27e89\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e810\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e811\u27e9 https://crates.io/categories/embedded: Embedded development\n\u27e812\u27e9 https://crates.io/categories/concurrency: Concurrency\n\u27e813\u27e9 https://crates.io/support?crate=embassy-sync&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1403,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112386.3861388"
          },
          "docs_rs": {
            "url": "https://docs.rs/embassy-sync",
            "title": "Crate embassy_syncCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/embassy-sync/latest/embassy_sync/all.html \"show sidebar\")\n# Crate embassy_syncCopy item path\n[Settings](https://docs.rs/embassy-sync/latest/settings.html)\n[Help](https://docs.rs/embassy-sync/latest/help.html)\nSummary[Source](https://docs.rs/embassy-sync/latest/src/embassy_sync/lib.rs.html#1-26)\nExpand description\n## [\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#embassy-sync)embassy-sync\nAn [Embassy](https://embassy.dev) project.\nSynchronization primitives and data structures with async support:\n  * [`Channel`](https://docs.rs/embassy-sync/latest/embassy_sync/channel/struct.Channel.html \"struct embassy_sync::channel::Channel\") - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * [`PriorityChannel`](https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/struct.PriorityChannel.html \"struct embassy_sync::priority_channel::PriorityChannel\") - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * [`PubSubChannel`](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html \"struct embassy_sync::pubsub::PubSubChannel\") - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * [`Signal`](https://docs.rs/embassy-sync/latest/embassy_sync/signal/struct.Signal.html \"struct embassy_sync::signal::Signal\") - Signalling latest value to a single consumer.\n  * [`Watch`](https://docs.rs/embassy-sync/latest/embassy_sync/watch/struct.Watch.html \"struct embassy_sync::watch::Watch\") - Signalling latest value to multiple consumers.\n  * [`Mutex`](https://docs.rs/embassy-sync/latest/embassy_sync/mutex/struct.Mutex.html \"struct embassy_sync::mutex::Mutex\") - Mutex for synchronizing state between asynchronous tasks.\n  * [`Pipe`](https://docs.rs/embassy-sync/latest/embassy_sync/pipe/struct.Pipe.html \"struct embassy_sync::pipe::Pipe\") - Byte stream implementing `embedded_io` traits.\n  * [`WakerRegistration`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.WakerRegistration.html \"struct embassy_sync::waitqueue::WakerRegistration\") - Utility to register and wake a `Waker`.\n  * [`AtomicWaker`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.AtomicWaker.html \"struct embassy_sync::waitqueue::AtomicWaker\") - Utility to register and wake a `Waker` from interrupt context.\n  * [`MultiWakerRegistration`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.MultiWakerRegistration.html \"struct embassy_sync::waitqueue::MultiWakerRegistration\") - Utility registering and waking multiple `Waker`\u2019s.\n  * [`LazyLock`](https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/struct.LazyLock.html \"struct embassy_sync::lazy_lock::LazyLock\") - A value which is initialized on the first access\n\n\n### [\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#interoperability)Interoperability\nFutures from this crate can run on any executor.\n## Modules[\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#modules)\n\n[blocking_mutex](https://docs.rs/embassy-sync/latest/embassy_sync/blocking_mutex/index.html \"mod embassy_sync::blocking_mutex\")\n    Blocking mutex.\n\n[channel](https://docs.rs/embassy-sync/latest/embassy_sync/channel/index.html \"mod embassy_sync::channel\")\n    A queue for sending values between asynchronous tasks.\n\n[lazy_lock](https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/index.html \"mod embassy_sync::lazy_lock\")\n    Synchronization primitive for initializing a value once, allowing others to get a reference to the value.\n\n[mutex](https://docs.rs/embassy-sync/latest/embassy_sync/mutex/index.html \"mod embassy_sync::mutex\")\n    Async mutex.\n\n[once_lock](https://docs.rs/embassy-sync/latest/embassy_sync/once_lock/index.html \"mod embassy_sync::once_lock\")\n    Synchronization primitive for initializing a value once, allowing others to await a reference to the value.\n\n[pipe](https://docs.rs/embassy-sync/latest/embassy_sync/pipe/index.html \"mod embassy_sync::pipe\")\n    Async byte stream pipe.\n\n[priority_channel](https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/index.html \"mod embassy_sync::priority_channel\")\n    A queue for sending values between asynchronous tasks.\n\n[pubsub](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/index.html \"mod embassy_sync::pubsub\")\n    Implementation of [PubSubChannel](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html \"struct embassy_sync::pubsub::PubSubChannel\"), a queue where published messages get received by all subscribers.\n\n[rwlock](https://docs.rs/embassy-sync/latest/embassy_sync/rwlock/index.html \"mod embassy_sync::rwlock\")\n    Async read-write lock.\n\n[semaphore](https://docs.rs/embassy-sync/latest/embassy_sync/semaphore/index.html \"mod embassy_sync::semaphore\")\n    A synchronization primitive for controlling access to a pool of resources.\n\n[signal](https://docs.rs/embassy-sync/latest/embassy_sync/signal/index.html \"mod embassy_sync::signal\")\n    A synchronization primitive for passing the latest value to a task.\n\n[waitqueue](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/index.html \"mod embassy_sync::waitqueue\")\n    Async low-level wait queues\n\n[watch](https://docs.rs/embassy-sync/latest/embassy_sync/watch/index.html \"mod embassy_sync::watch\")\n    A synchronization primitive for passing the latest value to **multiple** receivers.\n\n[zerocopy_channel](https://docs.rs/embassy-sync/latest/embassy_sync/zerocopy_channel/index.html \"mod embassy_sync::zerocopy_channel\")\n    A zero-copy queue for sending values between asynchronous tasks.\n",
              "markdown_with_citations": "[](https://docs.rs/embassy-sync/latest/embassy_sync/all.html \"show sidebar\")\n# Crate embassy_syncCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9embassy-sync\nAn Embassy\u27e85\u27e9 project.\nSynchronization primitives and data structures with async support:\n  * `Channel`\u27e86\u27e9 - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * `PriorityChannel`\u27e87\u27e9 - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * `PubSubChannel`\u27e88\u27e9 - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * `Signal`\u27e89\u27e9 - Signalling latest value to a single consumer.\n  * `Watch`\u27e810\u27e9 - Signalling latest value to multiple consumers.\n  * `Mutex`\u27e811\u27e9 - Mutex for synchronizing state between asynchronous tasks.\n  * `Pipe`\u27e812\u27e9 - Byte stream implementing `embedded_io` traits.\n  * `WakerRegistration`\u27e813\u27e9 - Utility to register and wake a `Waker`.\n  * `AtomicWaker`\u27e814\u27e9 - Utility to register and wake a `Waker` from interrupt context.\n  * `MultiWakerRegistration`\u27e815\u27e9 - Utility registering and waking multiple `Waker`\u2019s.\n  * `LazyLock`\u27e816\u27e9 - A value which is initialized on the first access\n\n\n### \u00a7\u27e817\u27e9Interoperability\nFutures from this crate can run on any executor.\n## Modules\u00a7\u27e818\u27e9\n\nblocking_mutex\u27e819\u27e9\n    Blocking mutex.\n\nchannel\u27e820\u27e9\n    A queue for sending values between asynchronous tasks.\n\nlazy_lock\u27e821\u27e9\n    Synchronization primitive for initializing a value once, allowing others to get a reference to the value.\n\nmutex\u27e822\u27e9\n    Async mutex.\n\nonce_lock\u27e823\u27e9\n    Synchronization primitive for initializing a value once, allowing others to await a reference to the value.\n\npipe\u27e824\u27e9\n    Async byte stream pipe.\n\npriority_channel\u27e825\u27e9\n    A queue for sending values between asynchronous tasks.\n\npubsub\u27e826\u27e9\n    Implementation of PubSubChannel\u27e88\u27e9, a queue where published messages get received by all subscribers.\n\nrwlock\u27e827\u27e9\n    Async read-write lock.\n\nsemaphore\u27e828\u27e9\n    A synchronization primitive for controlling access to a pool of resources.\n\nsignal\u27e829\u27e9\n    A synchronization primitive for passing the latest value to a task.\n\nwaitqueue\u27e830\u27e9\n    Async low-level wait queues\n\nwatch\u27e831\u27e9\n    A synchronization primitive for passing the latest value to **multiple** receivers.\n\nzerocopy_channel\u27e832\u27e9\n    A zero-copy queue for sending values between asynchronous tasks.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/embassy-sync/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/embassy-sync/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/embassy-sync/latest/src/embassy_sync/lib.rs.html#1-26: Source\n\u27e84\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#embassy-sync: \u00a7\n\u27e85\u27e9 https://embassy.dev: Embassy\n\u27e86\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/channel/struct.Channel.html: struct embassy_sync::channel::Channel - `Channel`\n\u27e87\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/struct.PriorityChannel.html: struct embassy_sync::priority_channel::PriorityChannel - `PriorityChannel`\n\u27e88\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html: struct embassy_sync::pubsub::PubSubChannel - `PubSubChannel`\n\u27e89\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/signal/struct.Signal.html: struct embassy_sync::signal::Signal - `Signal`\n\u27e810\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/watch/struct.Watch.html: struct embassy_sync::watch::Watch - `Watch`\n\u27e811\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/mutex/struct.Mutex.html: struct embassy_sync::mutex::Mutex - `Mutex`\n\u27e812\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pipe/struct.Pipe.html: struct embassy_sync::pipe::Pipe - `Pipe`\n\u27e813\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.WakerRegistration.html: struct embassy_sync::waitqueue::WakerRegistration - `WakerRegistration`\n\u27e814\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.AtomicWaker.html: struct embassy_sync::waitqueue::AtomicWaker - `AtomicWaker`\n\u27e815\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.MultiWakerRegistration.html: struct embassy_sync::waitqueue::MultiWakerRegistration - `MultiWakerRegistration`\n\u27e816\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/struct.LazyLock.html: struct embassy_sync::lazy_lock::LazyLock - `LazyLock`\n\u27e817\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#interoperability: \u00a7\n\u27e818\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#modules: \u00a7\n\u27e819\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/blocking_mutex/index.html: mod embassy_sync::blocking_mutex - blocking_mutex\n\u27e820\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/channel/index.html: mod embassy_sync::channel - channel\n\u27e821\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/index.html: mod embassy_sync::lazy_lock - lazy_lock\n\u27e822\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/mutex/index.html: mod embassy_sync::mutex - mutex\n\u27e823\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/once_lock/index.html: mod embassy_sync::once_lock - once_lock\n\u27e824\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pipe/index.html: mod embassy_sync::pipe - pipe\n\u27e825\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/index.html: mod embassy_sync::priority_channel - priority_channel\n\u27e826\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/index.html: mod embassy_sync::pubsub - pubsub\n\u27e827\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/rwlock/index.html: mod embassy_sync::rwlock - rwlock\n\u27e828\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/semaphore/index.html: mod embassy_sync::semaphore - semaphore\n\u27e829\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/signal/index.html: mod embassy_sync::signal - signal\n\u27e830\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/index.html: mod embassy_sync::waitqueue - waitqueue\n\u27e831\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/watch/index.html: mod embassy_sync::watch - watch\n\u27e832\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/zerocopy_channel/index.html: mod embassy_sync::zerocopy_channel - zerocopy_channel\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5717,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112387.1088923"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/embassy-sync",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [10 releases](https://lib.rs/crates/embassy-sync/versions) (breaking)\n0.7.0 |  May 28, 2025   \n---|---  \n0.6.2 |  Jan 16, 2025   \n0.6.1 |  Nov 22, 2024   \n0.6.0 |  May 29, 2024   \n0.1.0 |  Oct 26, 2022   \n#**13** in [Embedded development](https://lib.rs/embedded \"Crates that are primarily useful on embedded devices or without an operating system.\n\")\nDownload history 21344/week @ 2025-03-10 24099/week @ 2025-03-17 22397/week @ 2025-03-24 22086/week @ 2025-03-31 22888/week @ 2025-04-07 18317/week @ 2025-04-14 21111/week @ 2025-04-21 21783/week @ 2025-04-28 21765/week @ 2025-05-05 19966/week @ 2025-05-12 27687/week @ 2025-05-19 25922/week @ 2025-05-26 35505/week @ 2025-06-02 33459/week @ 2025-06-09 32441/week @ 2025-06-16 33041/week @ 2025-06-23\n**136,680** downloads per month Used in [**215** crates (118 directly)](https://lib.rs/crates/embassy-sync/rev)\n**MIT/Apache**\n275KB  6K  SLoC\n# embassy-sync\nAn [Embassy](https://embassy.dev) project.\nSynchronization primitives and data structures with async support:\n  * ``Channel`` - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * [``PriorityChannel``](https://github.com/embassy-rs/embassy/blob/f35aa4005a63e8d478b2b95aaa2bfb316b72dece/embassy-sync/priority_channel::PriorityChannel) - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * ``PubSubChannel`` - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * ``Signal`` - Signalling latest value to a single consumer.\n  * ``Watch`` - Signalling latest value to multiple consumers.\n  * ``Mutex`` - Mutex for synchronizing state between asynchronous tasks.\n  * ``Pipe`` - Byte stream implementing ``embedded_io`` traits.\n  * ``WakerRegistration`` - Utility to register and wake a ``Waker``.\n  * ``AtomicWaker`` - Utility to register and wake a ``Waker`` from interrupt context.\n  * ``MultiWakerRegistration`` - Utility registering and waking multiple ``Waker``'s.\n  * [``LazyLock``](https://github.com/embassy-rs/embassy/blob/f35aa4005a63e8d478b2b95aaa2bfb316b72dece/embassy-sync/lazy_lock::LazyLock) - A value which is initialized on the first access\n\n\n## Interoperability\nFutures from this crate can run on any executor.\n#### Dependencies\n~1\u20131.4MB  ~28K SLoC\n  * [cfg-if](https://lib.rs/crates/cfg-if \"1.0.0\")\n  * [critical-section](https://lib.rs/crates/critical-section \"1.1\")\n  * [ optional ](https://lib.rs/crates/embassy-sync/features#feature-defmt \"defmt is optional feature\") [defmt](https://lib.rs/crates/defmt \"new\") 1.0\n  * [embedded-io-async](https://lib.rs/crates/embedded-io-async \"0.6.1\")\n  * [futures-sink](https://lib.rs/crates/futures-sink \"0.3\")\n  * [futures-util](https://lib.rs/crates/futures-util \"0.3.17\")\n  * [heapless](https://lib.rs/crates/heapless \"new\") 0.8\n  * [ optional ](https://lib.rs/crates/embassy-sync/features#feature-log \"log is optional feature\") [log](https://lib.rs/crates/log \"0.4.14\")\n\n\n  * build `build.rs`\n  * dev  [futures-executor](https://lib.rs/crates/futures-executor \"0.3.17\")[+thread-pool](https://lib.rs/crates/futures-executor/features#feature-thread-pool)\n  * dev  [futures-test](https://lib.rs/crates/futures-test \"0.3.17\")\n  * dev  [futures-timer](https://lib.rs/crates/futures-timer \"3.0.2\")\n  * dev  [static_cell](https://lib.rs/crates/static_cell \"2\")\n\n\n#### [Other features](https://lib.rs/crates/embassy-sync/features)\n  * [std](https://lib.rs/crates/embassy-sync/features#feature-std)\n  * [turbowakers](https://lib.rs/crates/embassy-sync/features#feature-turbowakers)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  10 releases\u27e81\u27e9 (breaking)\n0.7.0 |  May 28, 2025   \n---|---  \n0.6.2 |  Jan 16, 2025   \n0.6.1 |  Nov 22, 2024   \n0.6.0 |  May 29, 2024   \n0.1.0 |  Oct 26, 2022   \n#**13** in Embedded development\u27e82\u27e9\nDownload history 21344/week @ 2025-03-10 24099/week @ 2025-03-17 22397/week @ 2025-03-24 22086/week @ 2025-03-31 22888/week @ 2025-04-07 18317/week @ 2025-04-14 21111/week @ 2025-04-21 21783/week @ 2025-04-28 21765/week @ 2025-05-05 19966/week @ 2025-05-12 27687/week @ 2025-05-19 25922/week @ 2025-05-26 35505/week @ 2025-06-02 33459/week @ 2025-06-09 32441/week @ 2025-06-16 33041/week @ 2025-06-23\n**136,680** downloads per month Used in **215** crates (118 directly)\u27e83\u27e9\n**MIT/Apache**\n275KB  6K  SLoC\n# embassy-sync\nAn Embassy\u27e84\u27e9 project.\nSynchronization primitives and data structures with async support:\n  * ``Channel`` - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * ``PriorityChannel``\u27e85\u27e9 - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * ``PubSubChannel`` - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * ``Signal`` - Signalling latest value to a single consumer.\n  * ``Watch`` - Signalling latest value to multiple consumers.\n  * ``Mutex`` - Mutex for synchronizing state between asynchronous tasks.\n  * ``Pipe`` - Byte stream implementing ``embedded_io`` traits.\n  * ``WakerRegistration`` - Utility to register and wake a ``Waker``.\n  * ``AtomicWaker`` - Utility to register and wake a ``Waker`` from interrupt context.\n  * ``MultiWakerRegistration`` - Utility registering and waking multiple ``Waker``'s.\n  * ``LazyLock``\u27e86\u27e9 - A value which is initialized on the first access\n\n\n## Interoperability\nFutures from this crate can run on any executor.\n#### Dependencies\n~1\u20131.4MB  ~28K SLoC\n  * cfg-if\u27e87\u27e9\n  * critical-section\u27e88\u27e9\n  *  optional \u27e89\u27e9 defmt\u27e810\u27e9 1.0\n  * embedded-io-async\u27e811\u27e9\n  * futures-sink\u27e812\u27e9\n  * futures-util\u27e813\u27e9\n  * heapless\u27e814\u27e9 0.8\n  *  optional \u27e815\u27e9 log\u27e816\u27e9\n\n\n  * build `build.rs`\n  * dev  futures-executor\u27e817\u27e9+thread-pool\u27e818\u27e9\n  * dev  futures-test\u27e819\u27e9\n  * dev  futures-timer\u27e820\u27e9\n  * dev  static_cell\u27e821\u27e9\n\n\n#### Other features\u27e822\u27e9\n  * std\u27e823\u27e9\n  * turbowakers\u27e824\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/embassy-sync/versions: 10 releases\n\u27e82\u27e9 https://lib.rs/embedded: Crates that are primarily useful on embedded devices or without an operating system.\n - Embedded development\n\u27e83\u27e9 https://lib.rs/crates/embassy-sync/rev: **215** crates (118 directly)\n\u27e84\u27e9 https://embassy.dev: Embassy\n\u27e85\u27e9 https://github.com/embassy-rs/embassy/blob/f35aa4005a63e8d478b2b95aaa2bfb316b72dece/embassy-sync/priority_channel::PriorityChannel: ``PriorityChannel``\n\u27e86\u27e9 https://github.com/embassy-rs/embassy/blob/f35aa4005a63e8d478b2b95aaa2bfb316b72dece/embassy-sync/lazy_lock::LazyLock: ``LazyLock``\n\u27e87\u27e9 https://lib.rs/crates/cfg-if: 1.0.0 - cfg-if\n\u27e88\u27e9 https://lib.rs/crates/critical-section: 1.1 - critical-section\n\u27e89\u27e9 https://lib.rs/crates/embassy-sync/features#feature-defmt: defmt is optional feature -  optional \n\u27e810\u27e9 https://lib.rs/crates/defmt: new - defmt\n\u27e811\u27e9 https://lib.rs/crates/embedded-io-async: 0.6.1 - embedded-io-async\n\u27e812\u27e9 https://lib.rs/crates/futures-sink: 0.3 - futures-sink\n\u27e813\u27e9 https://lib.rs/crates/futures-util: 0.3.17 - futures-util\n\u27e814\u27e9 https://lib.rs/crates/heapless: new - heapless\n\u27e815\u27e9 https://lib.rs/crates/embassy-sync/features#feature-log: log is optional feature -  optional \n\u27e816\u27e9 https://lib.rs/crates/log: 0.4.14 - log\n\u27e817\u27e9 https://lib.rs/crates/futures-executor: 0.3.17 - futures-executor\n\u27e818\u27e9 https://lib.rs/crates/futures-executor/features#feature-thread-pool: +thread-pool\n\u27e819\u27e9 https://lib.rs/crates/futures-test: 0.3.17 - futures-test\n\u27e820\u27e9 https://lib.rs/crates/futures-timer: 3.0.2 - futures-timer\n\u27e821\u27e9 https://lib.rs/crates/static_cell: 2 - static_cell\n\u27e822\u27e9 https://lib.rs/crates/embassy-sync/features: Other features\n\u27e823\u27e9 https://lib.rs/crates/embassy-sync/features#feature-std: std\n\u27e824\u27e9 https://lib.rs/crates/embassy-sync/features#feature-turbowakers: turbowakers\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3716,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112387.6507556"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libstable_deref_trait-83ee67a9c7938a58.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libfutures_task-a2c77af46578fd0b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libfutures_core-b6845aee26fe820f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libfutures_sink-b4bd44e60c5494bf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#critical-section@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\critical-section-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "critical_section",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\critical-section-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libcritical_section-515b2e07b29d6266.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#embedded-io@0.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-0.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embedded_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-0.6.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libembedded_io-765d2233a9c88465.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libbyteorder-0ff5a2bbb0a25f50.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heapless@0.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heapless-0.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heapless-0.8.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\heapless-d27a6bd76902f382\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\heapless-d27a6bd76902f382\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#embedded-io-async@0.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-async-0.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-async-0.6.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embedded-io-async-af4c99d3a6e4c157\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embedded-io-async-af4c99d3a6e4c157\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hash32@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hash32-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hash32",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hash32-0.3.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libhash32-66eb983eaf0a3f48.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embassy-sync-dc686ffe5c3f56cd\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embassy-sync-dc686ffe5c3f56cd\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#embedded-io-async@0.6.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embedded-io-async-f6da0fe9c600017f\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embassy-sync-814470ef8c0712b7\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heapless@0.8.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\heapless-bf271d53bc5bda73\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#embedded-io-async@0.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-async-0.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embedded_io_async",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-async-0.6.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libembedded_io_async-8ea390f910a6d371.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heapless@0.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heapless-0.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heapless",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heapless-0.8.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libheapless-7f314197bf9758e2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libfutures_util-6b77d71e27352878.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libembassy_sync-dfc17681655a0d03.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libbyteorder-0ff5a2bbb0a25f50.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#embedded-io-async@0.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-async-0.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-async-0.6.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embedded-io-async-af4c99d3a6e4c157\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embedded-io-async-af4c99d3a6e4c157\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heapless@0.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heapless-0.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heapless-0.8.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\heapless-d27a6bd76902f382\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\heapless-d27a6bd76902f382\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hash32@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hash32-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hash32",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hash32-0.3.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libhash32-66eb983eaf0a3f48.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "stable_deref_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stable_deref_trait-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libstable_deref_trait-83ee67a9c7938a58.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libfutures_core-b6845aee26fe820f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libfutures_task-a2c77af46578fd0b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#embedded-io@0.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-0.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embedded_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-0.6.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libembedded_io-765d2233a9c88465.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#critical-section@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\critical-section-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "critical_section",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\critical-section-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libcritical_section-515b2e07b29d6266.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libfutures_sink-b4bd44e60c5494bf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#embedded-io-async@0.6.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embedded-io-async-f6da0fe9c600017f\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heapless@0.8.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\heapless-bf271d53bc5bda73\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libfutures_util-6b77d71e27352878.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heapless@0.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heapless-0.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heapless",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heapless-0.8.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libheapless-7f314197bf9758e2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#embedded-io-async@0.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-async-0.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embedded_io_async",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\embedded-io-async-0.6.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libembedded_io_async-8ea390f910a6d371.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embassy-sync-e9e8f3f909a40b3c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embassy-sync-e9e8f3f909a40b3c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\build\\embassy-sync-16150564e293be0d\\out"
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\rwlock.rs:39:1\n   |\n39 | / ///\n40 | |\n   | |_^\n41 |   pub struct RwLock<M, T>\n   |   ----------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::empty_line_after_doc_comments)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1655,
                        "byte_start": 1654,
                        "column_end": 1,
                        "column_start": 4,
                        "expansion": null,
                        "file_name": "src\\rwlock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 40,
                        "line_start": 39,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 4,
                            "highlight_start": 4,
                            "text": "///"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1673,
                    "byte_start": 1656,
                    "column_end": 18,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\rwlock.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 41,
                    "line_start": 41,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "pub struct RwLock<M, T>"
                      }
                    ]
                  },
                  {
                    "byte_end": 1655,
                    "byte_start": 1651,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\rwlock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 40,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "///"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casting raw pointers to the same type and constness is unnecessary (`*mut T` -> `*mut T`)\n  --> src\\blocking_mutex\\mod.rs:64:23\n   |\n64 |             let ptr = self.data.get() as *mut T;\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `self.data.get()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unnecessary_cast)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2552,
                        "byte_start": 2527,
                        "column_end": 48,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\blocking_mutex\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 64,
                        "line_start": 64,
                        "suggested_replacement": "self.data.get()",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 23,
                            "text": "            let ptr = self.data.get() as *mut T;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_cast",
                  "explanation": null
                },
                "level": "warning",
                "message": "casting raw pointers to the same type and constness is unnecessary (`*mut T` -> `*mut T`)",
                "spans": [
                  {
                    "byte_end": 2552,
                    "byte_start": 2527,
                    "column_end": 48,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\blocking_mutex\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 23,
                        "text": "            let ptr = self.data.get() as *mut T;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casting raw pointers to the same type and constness is unnecessary (`*mut T` -> `*mut T`)\n   --> src\\rwlock.rs:312:20\n    |\n312 |         unsafe { &*(self.rwlock.inner.get() as *mut T) }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `self.rwlock.inner.get()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8828,
                        "byte_start": 8793,
                        "column_end": 55,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\rwlock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 312,
                        "line_start": 312,
                        "suggested_replacement": "self.rwlock.inner.get()",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 20,
                            "text": "        unsafe { &*(self.rwlock.inner.get() as *mut T) }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_cast",
                  "explanation": null
                },
                "level": "warning",
                "message": "casting raw pointers to the same type and constness is unnecessary (`*mut T` -> `*mut T`)",
                "spans": [
                  {
                    "byte_end": 8828,
                    "byte_start": 8793,
                    "column_end": 55,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\rwlock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 312,
                    "line_start": 312,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 20,
                        "text": "        unsafe { &*(self.rwlock.inner.get() as *mut T) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing an `Option` with `Some(..)`\n  --> src\\waitqueue\\waker_registration.rs:29:42\n   |\n29 |                 if let Some(old_waker) = mem::replace(&mut self.waker, Some(w.clone())) {\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::replace()` instead: `self.waker.replace(w.clone())`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_some\n   = note: `#[warn(clippy::mem_replace_option_with_some)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_some",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::mem_replace_option_with_some)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider `Option::replace()` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1243,
                        "byte_start": 1197,
                        "column_end": 88,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\waitqueue\\waker_registration.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "self.waker.replace(w.clone())",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 42,
                            "text": "                if let Some(old_waker) = mem::replace(&mut self.waker, Some(w.clone())) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_option_with_some",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing an `Option` with `Some(..)`",
                "spans": [
                  {
                    "byte_end": 1243,
                    "byte_start": 1197,
                    "column_end": 88,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\waitqueue\\waker_registration.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 88,
                        "highlight_start": 42,
                        "text": "                if let Some(old_waker) = mem::replace(&mut self.waker, Some(w.clone())) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n   --> src\\watch.rs:485:1\n    |\n485 | impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynSender<'a, T>> for Sender<'a, M, T, N> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n    = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<watch::Sender<'a, M, T, N>>`\n    |\n485 ~ impl<'a, M: RawMutex, T: Clone, const N: usize> From<Sender<'a, M, T, N>> for DynSender<'a, T> {\n486 ~     fn from(val: Sender<'a, M, T, N>) -> Self {\n487 ~         val.as_dyn()\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::from_over_into)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the `Into` implementation with `From<watch::Sender<'a, M, T, N>>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15791,
                        "byte_start": 15787,
                        "column_end": 53,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 485,
                        "line_start": 485,
                        "suggested_replacement": "From",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 49,
                            "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynSender<'a, T>> for Sender<'a, M, T, N> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 15808,
                        "byte_start": 15792,
                        "column_end": 70,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 485,
                        "line_start": 485,
                        "suggested_replacement": "Sender<'a, M, T, N>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 54,
                            "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynSender<'a, T>> for Sender<'a, M, T, N> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 15833,
                        "byte_start": 15814,
                        "column_end": 95,
                        "column_start": 76,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 485,
                        "line_start": 485,
                        "suggested_replacement": "DynSender<'a, T>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 95,
                            "highlight_start": 76,
                            "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynSender<'a, T>> for Sender<'a, M, T, N> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 15847,
                        "byte_start": 15843,
                        "column_end": 12,
                        "column_start": 8,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 486,
                        "line_start": 486,
                        "suggested_replacement": "from",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 8,
                            "text": "    fn into(self) -> DynSender<'a, T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 15852,
                        "byte_start": 15848,
                        "column_end": 17,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 486,
                        "line_start": 486,
                        "suggested_replacement": "val: Sender<'a, M, T, N>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 13,
                            "text": "    fn into(self) -> DynSender<'a, T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 15873,
                        "byte_start": 15857,
                        "column_end": 38,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 486,
                        "line_start": 486,
                        "suggested_replacement": "Self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 22,
                            "text": "    fn into(self) -> DynSender<'a, T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 15888,
                        "byte_start": 15884,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 487,
                        "line_start": 487,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "        self.as_dyn()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::from_over_into",
                  "explanation": null
                },
                "level": "warning",
                "message": "an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true",
                "spans": [
                  {
                    "byte_end": 15833,
                    "byte_start": 15739,
                    "column_end": 95,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\watch.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 485,
                    "line_start": 485,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 95,
                        "highlight_start": 1,
                        "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynSender<'a, T>> for Sender<'a, M, T, N> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n   --> src\\watch.rs:688:1\n    |\n688 | impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynReceiver<'a, T>> for Receiver<'a, M, T, N> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\nhelp: replace the `Into` implementation with `From<watch::Receiver<'a, M, T, N>>`\n    |\n688 ~ impl<'a, M: RawMutex, T: Clone, const N: usize> From<Receiver<'a, M, T, N>> for DynReceiver<'a, T> {\n689 ~     fn from(val: Receiver<'a, M, T, N>) -> Self {\n690 ~         val.as_dyn()\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the `Into` implementation with `From<watch::Receiver<'a, M, T, N>>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22436,
                        "byte_start": 22432,
                        "column_end": 53,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 688,
                        "line_start": 688,
                        "suggested_replacement": "From",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 49,
                            "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynReceiver<'a, T>> for Receiver<'a, M, T, N> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 22455,
                        "byte_start": 22437,
                        "column_end": 72,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 688,
                        "line_start": 688,
                        "suggested_replacement": "Receiver<'a, M, T, N>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 72,
                            "highlight_start": 54,
                            "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynReceiver<'a, T>> for Receiver<'a, M, T, N> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 22482,
                        "byte_start": 22461,
                        "column_end": 99,
                        "column_start": 78,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 688,
                        "line_start": 688,
                        "suggested_replacement": "DynReceiver<'a, T>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 99,
                            "highlight_start": 78,
                            "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynReceiver<'a, T>> for Receiver<'a, M, T, N> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 22496,
                        "byte_start": 22492,
                        "column_end": 12,
                        "column_start": 8,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 689,
                        "line_start": 689,
                        "suggested_replacement": "from",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 8,
                            "text": "    fn into(self) -> DynReceiver<'a, T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 22501,
                        "byte_start": 22497,
                        "column_end": 17,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 689,
                        "line_start": 689,
                        "suggested_replacement": "val: Receiver<'a, M, T, N>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 13,
                            "text": "    fn into(self) -> DynReceiver<'a, T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 22524,
                        "byte_start": 22506,
                        "column_end": 40,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 689,
                        "line_start": 689,
                        "suggested_replacement": "Self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 22,
                            "text": "    fn into(self) -> DynReceiver<'a, T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 22539,
                        "byte_start": 22535,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 690,
                        "line_start": 690,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "        self.as_dyn()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::from_over_into",
                  "explanation": null
                },
                "level": "warning",
                "message": "an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true",
                "spans": [
                  {
                    "byte_end": 22482,
                    "byte_start": 22384,
                    "column_end": 99,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\watch.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 688,
                    "line_start": 688,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 99,
                        "highlight_start": 1,
                        "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynReceiver<'a, T>> for Receiver<'a, M, T, N> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: call to `std::mem::forget` with a value that does not implement `Drop`. Forgetting such a type is the same as dropping it\n   --> src\\watch.rs:735:9\n    |\n735 |         core::mem::forget(self); // Ensures the destructor is not called\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\nnote: argument has type `watch::AnonReceiver<'_, M, T, N>`\n   --> src\\watch.rs:735:27\n    |\n735 |         core::mem::forget(self); // Ensures the destructor is not called\n    |                           ^^^^\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop\n    = note: `#[warn(clippy::forget_non_drop)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "argument has type `watch::AnonReceiver<'_, M, T, N>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 23978,
                        "byte_start": 23974,
                        "column_end": 31,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 735,
                        "line_start": 735,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 27,
                            "text": "        core::mem::forget(self); // Ensures the destructor is not called"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::forget_non_drop)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::forget_non_drop",
                  "explanation": null
                },
                "level": "warning",
                "message": "call to `std::mem::forget` with a value that does not implement `Drop`. Forgetting such a type is the same as dropping it",
                "spans": [
                  {
                    "byte_end": 23979,
                    "byte_start": 23956,
                    "column_end": 32,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\watch.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 735,
                    "line_start": 735,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        core::mem::forget(self); // Ensures the destructor is not called"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n   --> src\\watch.rs:740:1\n    |\n740 | impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynAnonReceiver<'a, T>> for AnonReceiver<'a, M, T, N> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\nhelp: replace the `Into` implementation with `From<watch::AnonReceiver<'a, M, T, N>>`\n    |\n740 ~ impl<'a, M: RawMutex, T: Clone, const N: usize> From<AnonReceiver<'a, M, T, N>> for DynAnonReceiver<'a, T> {\n741 ~     fn from(val: AnonReceiver<'a, M, T, N>) -> Self {\n742 ~         val.as_dyn()\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the `Into` implementation with `From<watch::AnonReceiver<'a, M, T, N>>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 24094,
                        "byte_start": 24090,
                        "column_end": 53,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 740,
                        "line_start": 740,
                        "suggested_replacement": "From",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 49,
                            "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynAnonReceiver<'a, T>> for AnonReceiver<'a, M, T, N> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 24117,
                        "byte_start": 24095,
                        "column_end": 76,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 740,
                        "line_start": 740,
                        "suggested_replacement": "AnonReceiver<'a, M, T, N>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 54,
                            "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynAnonReceiver<'a, T>> for AnonReceiver<'a, M, T, N> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 24148,
                        "byte_start": 24123,
                        "column_end": 107,
                        "column_start": 82,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 740,
                        "line_start": 740,
                        "suggested_replacement": "DynAnonReceiver<'a, T>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 107,
                            "highlight_start": 82,
                            "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynAnonReceiver<'a, T>> for AnonReceiver<'a, M, T, N> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 24162,
                        "byte_start": 24158,
                        "column_end": 12,
                        "column_start": 8,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 741,
                        "line_start": 741,
                        "suggested_replacement": "from",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 8,
                            "text": "    fn into(self) -> DynAnonReceiver<'a, T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 24167,
                        "byte_start": 24163,
                        "column_end": 17,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 741,
                        "line_start": 741,
                        "suggested_replacement": "val: AnonReceiver<'a, M, T, N>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 13,
                            "text": "    fn into(self) -> DynAnonReceiver<'a, T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 24194,
                        "byte_start": 24172,
                        "column_end": 44,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 741,
                        "line_start": 741,
                        "suggested_replacement": "Self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 22,
                            "text": "    fn into(self) -> DynAnonReceiver<'a, T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 24209,
                        "byte_start": 24205,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\watch.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 742,
                        "line_start": 742,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "        self.as_dyn()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::from_over_into",
                  "explanation": null
                },
                "level": "warning",
                "message": "an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true",
                "spans": [
                  {
                    "byte_end": 24148,
                    "byte_start": 24042,
                    "column_end": 107,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\watch.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 740,
                    "line_start": 740,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 107,
                        "highlight_start": 1,
                        "text": "impl<'a, M: RawMutex, T: Clone, const N: usize> Into<DynAnonReceiver<'a, T>> for AnonReceiver<'a, M, T, N> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnn_nswzt/embassy-sync-0.7.0#embassy-sync@0.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "embassy_sync",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnn_nswzt\\embassy-sync-0.7.0\\target\\debug\\deps\\libembassy_sync-9432d95f77d21e36.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 44
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "static_cell",
                    "version": "2.1.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d89b0684884a883431282db1e4343f34afc2ff6996fe1f4a1664519b66e14c1e",
                    "dependencies": [
                      {
                        "name": "portable-atomic",
                        "version": "1.10.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "embassy-sync",
          "version": "0.7.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/embassy-sync/latest/embassy_sync/all.html \"show sidebar\")\n# Crate embassy_syncCopy item path\n[Settings](https://docs.rs/embassy-sync/latest/settings.html)\n[Help](https://docs.rs/embassy-sync/latest/help.html)\nSummary[Source](https://docs.rs/embassy-sync/latest/src/embassy_sync/lib.rs.html#1-26)\nExpand description\n## [\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#embassy-sync)embassy-sync\nAn [Embassy](https://embassy.dev) project.\nSynchronization primitives and data structures with async support:\n  * [`Channel`](https://docs.rs/embassy-sync/latest/embassy_sync/channel/struct.Channel.html \"struct embassy_sync::channel::Channel\") - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * [`PriorityChannel`](https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/struct.PriorityChannel.html \"struct embassy_sync::priority_channel::PriorityChannel\") - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * [`PubSubChannel`](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html \"struct embassy_sync::pubsub::PubSubChannel\") - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * [`Signal`](https://docs.rs/embassy-sync/latest/embassy_sync/signal/struct.Signal.html \"struct embassy_sync::signal::Signal\") - Signalling latest value to a single consumer.\n  * [`Watch`](https://docs.rs/embassy-sync/latest/embassy_sync/watch/struct.Watch.html \"struct embassy_sync::watch::Watch\") - Signalling latest value to multiple consumers.\n  * [`Mutex`](https://docs.rs/embassy-sync/latest/embassy_sync/mutex/struct.Mutex.html \"struct embassy_sync::mutex::Mutex\") - Mutex for synchronizing state between asynchronous tasks.\n  * [`Pipe`](https://docs.rs/embassy-sync/latest/embassy_sync/pipe/struct.Pipe.html \"struct embassy_sync::pipe::Pipe\") - Byte stream implementing `embedded_io` traits.\n  * [`WakerRegistration`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.WakerRegistration.html \"struct embassy_sync::waitqueue::WakerRegistration\") - Utility to register and wake a `Waker`.\n  * [`AtomicWaker`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.AtomicWaker.html \"struct embassy_sync::waitqueue::AtomicWaker\") - Utility to register and wake a `Waker` from interrupt context.\n  * [`MultiWakerRegistration`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.MultiWakerRegistration.html \"struct embassy_sync::waitqueue::MultiWakerRegistration\") - Utility registering and waking multiple `Waker`\u2019s.\n  * [`LazyLock`](https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/struct.LazyLock.html \"struct embassy_sync::lazy_lock::LazyLock\") - A value which is initialized on the first access\n\n\n### [\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#interoperability)Interoperability\nFutures from this crate can run on any executor.\n## Modules[\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#modules)\n\n[blocking_mutex](https://docs.rs/embassy-sync/latest/embassy_sync/blocking_mutex/index.html \"mod embassy_sync::blocking_mutex\")\n    Blocking mutex.\n\n[channel](https://docs.rs/embassy-sync/latest/embassy_sync/channel/index.html \"mod embassy_sync::channel\")\n    A queue for sending values between asynchronous tasks.\n\n[lazy_lock](https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/index.html \"mod embassy_sync::lazy_lock\")\n    Synchronization primitive for initializing a value once, allowing others to get a reference to the value.\n\n[mutex](https://docs.rs/embassy-sync/latest/embassy_sync/mutex/index.html \"mod embassy_sync::mutex\")\n    Async mutex.\n\n[once_lock](https://docs.rs/embassy-sync/latest/embassy_sync/once_lock/index.html \"mod embassy_sync::once_lock\")\n    Synchronization primitive for initializing a value once, allowing others to await a reference to the value.\n\n[pipe](https://docs.rs/embassy-sync/latest/embassy_sync/pipe/index.html \"mod embassy_sync::pipe\")\n    Async byte stream pipe.\n\n[priority_channel](https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/index.html \"mod embassy_sync::priority_channel\")\n    A queue for sending values between asynchronous tasks.\n\n[pubsub](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/index.html \"mod embassy_sync::pubsub\")\n    Implementation of [PubSubChannel](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html \"struct embassy_sync::pubsub::PubSubChannel\"), a queue where published messages get received by all subscribers.\n\n[rwlock](https://docs.rs/embassy-sync/latest/embassy_sync/rwlock/index.html \"mod embassy_sync::rwlock\")\n    Async read-write lock.\n\n[semaphore](https://docs.rs/embassy-sync/latest/embassy_sync/semaphore/index.html \"mod embassy_sync::semaphore\")\n    A synchronization primitive for controlling access to a pool of resources.\n\n[signal](https://docs.rs/embassy-sync/latest/embassy_sync/signal/index.html \"mod embassy_sync::signal\")\n    A synchronization primitive for passing the latest value to a task.\n\n[waitqueue](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/index.html \"mod embassy_sync::waitqueue\")\n    Async low-level wait queues\n\n[watch](https://docs.rs/embassy-sync/latest/embassy_sync/watch/index.html \"mod embassy_sync::watch\")\n    A synchronization primitive for passing the latest value to **multiple** receivers.\n\n[zerocopy_channel](https://docs.rs/embassy-sync/latest/embassy_sync/zerocopy_channel/index.html \"mod embassy_sync::zerocopy_channel\")\n    A zero-copy queue for sending values between asynchronous tasks.\n",
            "markdown_with_citations": "[](https://docs.rs/embassy-sync/latest/embassy_sync/all.html \"show sidebar\")\n# Crate embassy_syncCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9embassy-sync\nAn Embassy\u27e85\u27e9 project.\nSynchronization primitives and data structures with async support:\n  * `Channel`\u27e86\u27e9 - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * `PriorityChannel`\u27e87\u27e9 - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * `PubSubChannel`\u27e88\u27e9 - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * `Signal`\u27e89\u27e9 - Signalling latest value to a single consumer.\n  * `Watch`\u27e810\u27e9 - Signalling latest value to multiple consumers.\n  * `Mutex`\u27e811\u27e9 - Mutex for synchronizing state between asynchronous tasks.\n  * `Pipe`\u27e812\u27e9 - Byte stream implementing `embedded_io` traits.\n  * `WakerRegistration`\u27e813\u27e9 - Utility to register and wake a `Waker`.\n  * `AtomicWaker`\u27e814\u27e9 - Utility to register and wake a `Waker` from interrupt context.\n  * `MultiWakerRegistration`\u27e815\u27e9 - Utility registering and waking multiple `Waker`\u2019s.\n  * `LazyLock`\u27e816\u27e9 - A value which is initialized on the first access\n\n\n### \u00a7\u27e817\u27e9Interoperability\nFutures from this crate can run on any executor.\n## Modules\u00a7\u27e818\u27e9\n\nblocking_mutex\u27e819\u27e9\n    Blocking mutex.\n\nchannel\u27e820\u27e9\n    A queue for sending values between asynchronous tasks.\n\nlazy_lock\u27e821\u27e9\n    Synchronization primitive for initializing a value once, allowing others to get a reference to the value.\n\nmutex\u27e822\u27e9\n    Async mutex.\n\nonce_lock\u27e823\u27e9\n    Synchronization primitive for initializing a value once, allowing others to await a reference to the value.\n\npipe\u27e824\u27e9\n    Async byte stream pipe.\n\npriority_channel\u27e825\u27e9\n    A queue for sending values between asynchronous tasks.\n\npubsub\u27e826\u27e9\n    Implementation of PubSubChannel\u27e88\u27e9, a queue where published messages get received by all subscribers.\n\nrwlock\u27e827\u27e9\n    Async read-write lock.\n\nsemaphore\u27e828\u27e9\n    A synchronization primitive for controlling access to a pool of resources.\n\nsignal\u27e829\u27e9\n    A synchronization primitive for passing the latest value to a task.\n\nwaitqueue\u27e830\u27e9\n    Async low-level wait queues\n\nwatch\u27e831\u27e9\n    A synchronization primitive for passing the latest value to **multiple** receivers.\n\nzerocopy_channel\u27e832\u27e9\n    A zero-copy queue for sending values between asynchronous tasks.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/embassy-sync/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/embassy-sync/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/embassy-sync/latest/src/embassy_sync/lib.rs.html#1-26: Source\n\u27e84\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#embassy-sync: \u00a7\n\u27e85\u27e9 https://embassy.dev: Embassy\n\u27e86\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/channel/struct.Channel.html: struct embassy_sync::channel::Channel - `Channel`\n\u27e87\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/struct.PriorityChannel.html: struct embassy_sync::priority_channel::PriorityChannel - `PriorityChannel`\n\u27e88\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html: struct embassy_sync::pubsub::PubSubChannel - `PubSubChannel`\n\u27e89\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/signal/struct.Signal.html: struct embassy_sync::signal::Signal - `Signal`\n\u27e810\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/watch/struct.Watch.html: struct embassy_sync::watch::Watch - `Watch`\n\u27e811\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/mutex/struct.Mutex.html: struct embassy_sync::mutex::Mutex - `Mutex`\n\u27e812\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pipe/struct.Pipe.html: struct embassy_sync::pipe::Pipe - `Pipe`\n\u27e813\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.WakerRegistration.html: struct embassy_sync::waitqueue::WakerRegistration - `WakerRegistration`\n\u27e814\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.AtomicWaker.html: struct embassy_sync::waitqueue::AtomicWaker - `AtomicWaker`\n\u27e815\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.MultiWakerRegistration.html: struct embassy_sync::waitqueue::MultiWakerRegistration - `MultiWakerRegistration`\n\u27e816\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/struct.LazyLock.html: struct embassy_sync::lazy_lock::LazyLock - `LazyLock`\n\u27e817\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#interoperability: \u00a7\n\u27e818\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#modules: \u00a7\n\u27e819\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/blocking_mutex/index.html: mod embassy_sync::blocking_mutex - blocking_mutex\n\u27e820\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/channel/index.html: mod embassy_sync::channel - channel\n\u27e821\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/index.html: mod embassy_sync::lazy_lock - lazy_lock\n\u27e822\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/mutex/index.html: mod embassy_sync::mutex - mutex\n\u27e823\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/once_lock/index.html: mod embassy_sync::once_lock - once_lock\n\u27e824\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pipe/index.html: mod embassy_sync::pipe - pipe\n\u27e825\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/index.html: mod embassy_sync::priority_channel - priority_channel\n\u27e826\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/index.html: mod embassy_sync::pubsub - pubsub\n\u27e827\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/rwlock/index.html: mod embassy_sync::rwlock - rwlock\n\u27e828\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/semaphore/index.html: mod embassy_sync::semaphore - semaphore\n\u27e829\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/signal/index.html: mod embassy_sync::signal - signal\n\u27e830\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/index.html: mod embassy_sync::waitqueue - waitqueue\n\u27e831\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/watch/index.html: mod embassy_sync::watch - watch\n\u27e832\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/zerocopy_channel/index.html: mod embassy_sync::zerocopy_channel - zerocopy_channel\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "embassy-sync",
          "version": "0.7.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/embassy-sync/latest/embassy_sync/all.html \"show sidebar\")\n# Crate embassy_syncCopy item path\n[Settings](https://docs.rs/embassy-sync/latest/settings.html)\n[Help](https://docs.rs/embassy-sync/latest/help.html)\nSummary[Source](https://docs.rs/embassy-sync/latest/src/embassy_sync/lib.rs.html#1-26)\nExpand description\n## [\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#embassy-sync)embassy-sync\nAn [Embassy](https://embassy.dev) project.\nSynchronization primitives and data structures with async support:\n  * [`Channel`](https://docs.rs/embassy-sync/latest/embassy_sync/channel/struct.Channel.html \"struct embassy_sync::channel::Channel\") - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * [`PriorityChannel`](https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/struct.PriorityChannel.html \"struct embassy_sync::priority_channel::PriorityChannel\") - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * [`PubSubChannel`](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html \"struct embassy_sync::pubsub::PubSubChannel\") - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * [`Signal`](https://docs.rs/embassy-sync/latest/embassy_sync/signal/struct.Signal.html \"struct embassy_sync::signal::Signal\") - Signalling latest value to a single consumer.\n  * [`Watch`](https://docs.rs/embassy-sync/latest/embassy_sync/watch/struct.Watch.html \"struct embassy_sync::watch::Watch\") - Signalling latest value to multiple consumers.\n  * [`Mutex`](https://docs.rs/embassy-sync/latest/embassy_sync/mutex/struct.Mutex.html \"struct embassy_sync::mutex::Mutex\") - Mutex for synchronizing state between asynchronous tasks.\n  * [`Pipe`](https://docs.rs/embassy-sync/latest/embassy_sync/pipe/struct.Pipe.html \"struct embassy_sync::pipe::Pipe\") - Byte stream implementing `embedded_io` traits.\n  * [`WakerRegistration`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.WakerRegistration.html \"struct embassy_sync::waitqueue::WakerRegistration\") - Utility to register and wake a `Waker`.\n  * [`AtomicWaker`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.AtomicWaker.html \"struct embassy_sync::waitqueue::AtomicWaker\") - Utility to register and wake a `Waker` from interrupt context.\n  * [`MultiWakerRegistration`](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.MultiWakerRegistration.html \"struct embassy_sync::waitqueue::MultiWakerRegistration\") - Utility registering and waking multiple `Waker`\u2019s.\n  * [`LazyLock`](https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/struct.LazyLock.html \"struct embassy_sync::lazy_lock::LazyLock\") - A value which is initialized on the first access\n\n\n### [\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#interoperability)Interoperability\nFutures from this crate can run on any executor.\n## Modules[\u00a7](https://docs.rs/embassy-sync/latest/embassy_sync/#modules)\n\n[blocking_mutex](https://docs.rs/embassy-sync/latest/embassy_sync/blocking_mutex/index.html \"mod embassy_sync::blocking_mutex\")\n    Blocking mutex.\n\n[channel](https://docs.rs/embassy-sync/latest/embassy_sync/channel/index.html \"mod embassy_sync::channel\")\n    A queue for sending values between asynchronous tasks.\n\n[lazy_lock](https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/index.html \"mod embassy_sync::lazy_lock\")\n    Synchronization primitive for initializing a value once, allowing others to get a reference to the value.\n\n[mutex](https://docs.rs/embassy-sync/latest/embassy_sync/mutex/index.html \"mod embassy_sync::mutex\")\n    Async mutex.\n\n[once_lock](https://docs.rs/embassy-sync/latest/embassy_sync/once_lock/index.html \"mod embassy_sync::once_lock\")\n    Synchronization primitive for initializing a value once, allowing others to await a reference to the value.\n\n[pipe](https://docs.rs/embassy-sync/latest/embassy_sync/pipe/index.html \"mod embassy_sync::pipe\")\n    Async byte stream pipe.\n\n[priority_channel](https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/index.html \"mod embassy_sync::priority_channel\")\n    A queue for sending values between asynchronous tasks.\n\n[pubsub](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/index.html \"mod embassy_sync::pubsub\")\n    Implementation of [PubSubChannel](https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html \"struct embassy_sync::pubsub::PubSubChannel\"), a queue where published messages get received by all subscribers.\n\n[rwlock](https://docs.rs/embassy-sync/latest/embassy_sync/rwlock/index.html \"mod embassy_sync::rwlock\")\n    Async read-write lock.\n\n[semaphore](https://docs.rs/embassy-sync/latest/embassy_sync/semaphore/index.html \"mod embassy_sync::semaphore\")\n    A synchronization primitive for controlling access to a pool of resources.\n\n[signal](https://docs.rs/embassy-sync/latest/embassy_sync/signal/index.html \"mod embassy_sync::signal\")\n    A synchronization primitive for passing the latest value to a task.\n\n[waitqueue](https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/index.html \"mod embassy_sync::waitqueue\")\n    Async low-level wait queues\n\n[watch](https://docs.rs/embassy-sync/latest/embassy_sync/watch/index.html \"mod embassy_sync::watch\")\n    A synchronization primitive for passing the latest value to **multiple** receivers.\n\n[zerocopy_channel](https://docs.rs/embassy-sync/latest/embassy_sync/zerocopy_channel/index.html \"mod embassy_sync::zerocopy_channel\")\n    A zero-copy queue for sending values between asynchronous tasks.\n",
            "markdown_with_citations": "[](https://docs.rs/embassy-sync/latest/embassy_sync/all.html \"show sidebar\")\n# Crate embassy_syncCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9embassy-sync\nAn Embassy\u27e85\u27e9 project.\nSynchronization primitives and data structures with async support:\n  * `Channel`\u27e86\u27e9 - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer.\n  * `PriorityChannel`\u27e87\u27e9 - A Multiple Producer Multiple Consumer (MPMC) channel. Each message is only received by a single consumer. Higher priority items are shifted to the front of the channel.\n  * `PubSubChannel`\u27e88\u27e9 - A broadcast channel (publish-subscribe) channel. Each message is received by all consumers.\n  * `Signal`\u27e89\u27e9 - Signalling latest value to a single consumer.\n  * `Watch`\u27e810\u27e9 - Signalling latest value to multiple consumers.\n  * `Mutex`\u27e811\u27e9 - Mutex for synchronizing state between asynchronous tasks.\n  * `Pipe`\u27e812\u27e9 - Byte stream implementing `embedded_io` traits.\n  * `WakerRegistration`\u27e813\u27e9 - Utility to register and wake a `Waker`.\n  * `AtomicWaker`\u27e814\u27e9 - Utility to register and wake a `Waker` from interrupt context.\n  * `MultiWakerRegistration`\u27e815\u27e9 - Utility registering and waking multiple `Waker`\u2019s.\n  * `LazyLock`\u27e816\u27e9 - A value which is initialized on the first access\n\n\n### \u00a7\u27e817\u27e9Interoperability\nFutures from this crate can run on any executor.\n## Modules\u00a7\u27e818\u27e9\n\nblocking_mutex\u27e819\u27e9\n    Blocking mutex.\n\nchannel\u27e820\u27e9\n    A queue for sending values between asynchronous tasks.\n\nlazy_lock\u27e821\u27e9\n    Synchronization primitive for initializing a value once, allowing others to get a reference to the value.\n\nmutex\u27e822\u27e9\n    Async mutex.\n\nonce_lock\u27e823\u27e9\n    Synchronization primitive for initializing a value once, allowing others to await a reference to the value.\n\npipe\u27e824\u27e9\n    Async byte stream pipe.\n\npriority_channel\u27e825\u27e9\n    A queue for sending values between asynchronous tasks.\n\npubsub\u27e826\u27e9\n    Implementation of PubSubChannel\u27e88\u27e9, a queue where published messages get received by all subscribers.\n\nrwlock\u27e827\u27e9\n    Async read-write lock.\n\nsemaphore\u27e828\u27e9\n    A synchronization primitive for controlling access to a pool of resources.\n\nsignal\u27e829\u27e9\n    A synchronization primitive for passing the latest value to a task.\n\nwaitqueue\u27e830\u27e9\n    Async low-level wait queues\n\nwatch\u27e831\u27e9\n    A synchronization primitive for passing the latest value to **multiple** receivers.\n\nzerocopy_channel\u27e832\u27e9\n    A zero-copy queue for sending values between asynchronous tasks.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/embassy-sync/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/embassy-sync/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/embassy-sync/latest/src/embassy_sync/lib.rs.html#1-26: Source\n\u27e84\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#embassy-sync: \u00a7\n\u27e85\u27e9 https://embassy.dev: Embassy\n\u27e86\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/channel/struct.Channel.html: struct embassy_sync::channel::Channel - `Channel`\n\u27e87\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/struct.PriorityChannel.html: struct embassy_sync::priority_channel::PriorityChannel - `PriorityChannel`\n\u27e88\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/struct.PubSubChannel.html: struct embassy_sync::pubsub::PubSubChannel - `PubSubChannel`\n\u27e89\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/signal/struct.Signal.html: struct embassy_sync::signal::Signal - `Signal`\n\u27e810\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/watch/struct.Watch.html: struct embassy_sync::watch::Watch - `Watch`\n\u27e811\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/mutex/struct.Mutex.html: struct embassy_sync::mutex::Mutex - `Mutex`\n\u27e812\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pipe/struct.Pipe.html: struct embassy_sync::pipe::Pipe - `Pipe`\n\u27e813\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.WakerRegistration.html: struct embassy_sync::waitqueue::WakerRegistration - `WakerRegistration`\n\u27e814\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.AtomicWaker.html: struct embassy_sync::waitqueue::AtomicWaker - `AtomicWaker`\n\u27e815\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/struct.MultiWakerRegistration.html: struct embassy_sync::waitqueue::MultiWakerRegistration - `MultiWakerRegistration`\n\u27e816\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/struct.LazyLock.html: struct embassy_sync::lazy_lock::LazyLock - `LazyLock`\n\u27e817\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#interoperability: \u00a7\n\u27e818\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/#modules: \u00a7\n\u27e819\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/blocking_mutex/index.html: mod embassy_sync::blocking_mutex - blocking_mutex\n\u27e820\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/channel/index.html: mod embassy_sync::channel - channel\n\u27e821\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/lazy_lock/index.html: mod embassy_sync::lazy_lock - lazy_lock\n\u27e822\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/mutex/index.html: mod embassy_sync::mutex - mutex\n\u27e823\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/once_lock/index.html: mod embassy_sync::once_lock - once_lock\n\u27e824\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pipe/index.html: mod embassy_sync::pipe - pipe\n\u27e825\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/priority_channel/index.html: mod embassy_sync::priority_channel - priority_channel\n\u27e826\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/pubsub/index.html: mod embassy_sync::pubsub - pubsub\n\u27e827\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/rwlock/index.html: mod embassy_sync::rwlock - rwlock\n\u27e828\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/semaphore/index.html: mod embassy_sync::semaphore - semaphore\n\u27e829\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/signal/index.html: mod embassy_sync::signal - signal\n\u27e830\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/waitqueue/index.html: mod embassy_sync::waitqueue - waitqueue\n\u27e831\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/watch/index.html: mod embassy_sync::watch - watch\n\u27e832\u27e9 https://docs.rs/embassy-sync/latest/embassy_sync/zerocopy_channel/index.html: mod embassy_sync::zerocopy_channel - zerocopy_channel\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `embassy-sync` crate provides a collection of lightweight, async-friendly synchronization primitives and data structures designed for embedded systems. Key features include various channel types (MPMC, priority, pub-sub), mutexes, read-write locks, semaphores, and signaling mechanisms for efficient inter-task communication. It supports interoperability with any async executor and includes utilities like `LazyLock` and `AtomicWaker` for initialization and task waking.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Synchronization Primitives  \n\u2705 **Factual:** The `embassy-sync` crate provides an `Async Mutex` for synchronizing state between asynchronous tasks, ensuring mutual exclusion during concurrent access.  \n\u274c **Counterfactual:** The `embassy-sync` crate's `Mutex` implementation supports recursive locking, allowing the same task to acquire the lock multiple times without deadlocking.  \n\n---\n\n### Pair 2: Channel Types  \n\u2705 **Factual:** The `PubSubChannel` in `embassy-sync` enables a publish-subscribe communication model where each message is received by all subscribers.  \n\u274c **Counterfactual:** The `PubSubChannel` in `embassy-sync` guarantees message ordering across all subscribers, ensuring that all consumers process messages in the same sequence.  \n\n---\n\n### Pair 3: Executor Compatibility  \n\u2705 **Factual:** Futures created using `embassy-sync` primitives can run on any async executor, making the crate interoperable with different runtime environments.  \n\u274c **Counterfactual:** `embassy-sync` requires the use of the Embassy executor and cannot be used with other async runtimes like `tokio` or `async-std`.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-b1596972-37913dae-1751258596",
      "timestamp": "2025-06-30T04:43:16.597703+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]