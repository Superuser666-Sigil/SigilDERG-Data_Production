[
  {
    "execution_id": "exec-a0e1508a-e8024726-1751259849",
    "timestamp": "2025-06-30T05:04:09.837470+00:00",
    "sacred_chain": {
      "input_data": "displaydoc",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'displaydoc' -> 'displaydoc'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "displaydoc",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/displaydoc",
            "title": "displaydoc v0.2.5",
            "content": {
              "raw_markdown": "#  displaydoc v0.2.5\nA derive macro for implementing the display Trait via a doc comment and string interpolation \n  * [ #derive ](https://crates.io/keywords/derive)\n  * [ #display ](https://crates.io/keywords/display)\n\n\n  * [ Readme ](https://crates.io/crates/displaydoc)\n  * [ 14 Versions ](https://crates.io/crates/displaydoc/versions)\n  * [ Dependencies ](https://crates.io/crates/displaydoc/dependencies)\n  * [ Dependents ](https://crates.io/crates/displaydoc/reverse_dependencies)\n\n\n## Metadata\nabout 1 year ago \nv1.56.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n23.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add displaydoc\nOr add the following line to your Cargo.toml:\ndisplaydoc = \"0.2.5\"\n## Documentation\n[ docs.rs/displaydoc ](https://docs.rs/displaydoc)\n## Repository\n[ github.com/yaahc/displaydoc ](https://github.com/yaahc/displaydoc)\n## Owners\n[ Report crate ](https://crates.io/support?crate=displaydoc&inquire=crate-violation)\n### Stats Overview\n108,587,225 Downloads all time\n14 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  displaydoc v0.2.5\nA derive macro for implementing the display Trait via a doc comment and string interpolation \n  *  #derive \u27e81\u27e9\n  *  #display \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  14 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\nabout 1 year ago \nv1.56.0 \n MIT \u27e87\u27e9 OR  Apache-2.0 \u27e88\u27e9\n23.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add displaydoc\nOr add the following line to your Cargo.toml:\ndisplaydoc = \"0.2.5\"\n## Documentation\n docs.rs/displaydoc \u27e89\u27e9\n## Repository\n github.com/yaahc/displaydoc \u27e810\u27e9\n## Owners\n Report crate \u27e811\u27e9\n### Stats Overview\n108,587,225 Downloads all time\n14 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/derive:  #derive \n\u27e82\u27e9 https://crates.io/keywords/display:  #display \n\u27e83\u27e9 https://crates.io/crates/displaydoc:  Readme \n\u27e84\u27e9 https://crates.io/crates/displaydoc/versions:  14 Versions \n\u27e85\u27e9 https://crates.io/crates/displaydoc/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/displaydoc/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e89\u27e9 https://docs.rs/displaydoc:  docs.rs/displaydoc \n\u27e810\u27e9 https://github.com/yaahc/displaydoc:  github.com/yaahc/displaydoc \n\u27e811\u27e9 https://crates.io/support?crate=displaydoc&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1226,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113639.6310326"
          },
          "docs_rs": {
            "url": "https://docs.rs/displaydoc",
            "title": "Crate displaydocCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/displaydoc/latest/displaydoc/all.html \"show sidebar\")\n# Crate displaydocCopy item path\n[Settings](https://docs.rs/displaydoc/latest/settings.html)\n[Help](https://docs.rs/displaydoc/latest/help.html)\nSummary[Source](https://docs.rs/displaydoc/latest/src/displaydoc/lib.rs.html#1-186)\nExpand description\nThis library provides a convenient derive macro for the standard library\u2019s [`core::fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait.\n```\n[dependencies]\ndisplaydoc = \"0.2\"\n```\n\n_Compiler support: requires rustc 1.56+_\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#example)Example\n_Demonstration alongside the[`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") derive macro from [`thiserror`](https://docs.rs/thiserror/1.0.25/thiserror/index.html), to propagate source locations from [`io::Error`](https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html \"struct std::io::error::Error\") with the `#[source]` attribute:_\n```\nuse std::io;\nuse displaydoc::Display;\nuse thiserror::Error;\n#[derive(Display, Error, Debug)]\npub enum DataStoreError {\n  /// data store disconnected\n  Disconnect(#[source] io::Error),\n  /// the data for key `{0}` is not available\n  Redaction(String),\n  /// invalid header (expected {expected:?}, found {found:?})\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  /// unknown data store error\n  Unknown,\n}\nlet error = DataStoreError::Redaction(\"CLASSIFIED CONTENT\".to_string());\nassert!(\"the data for key `CLASSIFIED CONTENT` is not available\" == &format!(\"{}\", error));\n```\n\n_Note that although[`io::Error`](https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html \"struct std::io::error::Error\") implements `Display`, we do not add it to the generated message for `DataStoreError::Disconnect`, since it is already made available via `#[source]`. See further context on avoiding duplication in error reports at the rust blog [here](https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue)._\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#details)Details\n  * A `fmt::Display` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The `Display` derive macro supports a shorthand for interpolating fields from the error: \n    * `/// {var}` \u27f6 `write!(\"{}\", self.var)`\n    * `/// {0}` \u27f6 `write!(\"{}\", self.0)`\n    * `/// {var:?}` \u27f6 `write!(\"{:?}\", self.var)`\n    * `/// {0:?}` \u27f6 `write!(\"{:?}\", self.0)`\n  * This also works with structs and [generic types](https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html#generic-type-parameters \"derive displaydoc::Display\"):\n\n\n```\n/// oh no, an error: {0}\n#[derive(Display)]\npub struct Error<E>(pub E);\nlet error: Error<&str> = Error(\"muahaha i am an error\");\nassert!(\"oh no, an error: muahaha i am an error\" == &format!(\"{}\", error));\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * `#[ignore_extra_doc_attributes]` makes the macro ignore any doc comment attributes (or `///` lines) after the first. Multi-line comments using `///` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (`/** */`).\n    * `#[prefix_enum_doc_attributes]` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the `#[displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#faq)FAQ\n  1. **Is this crate`no_std` compatible?**\n     * Yes! This crate implements the [`core::fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait, not the [`std::fmt::Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") trait, so it should work in `std` and `no_std` environments. Just add `default-features = false`.\n  2. **Does this crate work with`Path` and `PathBuf` via the `Display` trait?**\n     * Yuuup. This crate uses @dtolnay\u2019s [autoref specialization technique](https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md) to add a special trait for types to get the display impl. It then specializes for `Path` and `PathBuf`, and when either of these types are found, it calls `self.display()` to get a `std::path::Display<'_>` type which can be used with the `Display` format specifier!\n\n\n## Derive Macros[\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#derives)\n\n[Display](https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html \"derive displaydoc::Display\")\n    [Custom `#[derive(...)]` macro](https://doc.rust-lang.org/edition-guide/rust-2018/macros/custom-derive.html) for implementing [`fmt::Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") via doc comment attributes.\n",
              "markdown_with_citations": "[](https://docs.rs/displaydoc/latest/displaydoc/all.html \"show sidebar\")\n# Crate displaydocCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis library provides a convenient derive macro for the standard library\u2019s `core::fmt::Display`\u27e84\u27e9 trait.\n```\n[dependencies]\ndisplaydoc = \"0.2\"\n```\n\n_Compiler support: requires rustc 1.56+_\n### \u00a7\u27e85\u27e9Example\n_Demonstration alongside the`Error`\u27e86\u27e9 derive macro from `thiserror`\u27e87\u27e9, to propagate source locations from `io::Error`\u27e88\u27e9 with the `#[source]` attribute:_\n```\nuse std::io;\nuse displaydoc::Display;\nuse thiserror::Error;\n#[derive(Display, Error, Debug)]\npub enum DataStoreError {\n  /// data store disconnected\n  Disconnect(#[source] io::Error),\n  /// the data for key `{0}` is not available\n  Redaction(String),\n  /// invalid header (expected {expected:?}, found {found:?})\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  /// unknown data store error\n  Unknown,\n}\nlet error = DataStoreError::Redaction(\"CLASSIFIED CONTENT\".to_string());\nassert!(\"the data for key `CLASSIFIED CONTENT` is not available\" == &format!(\"{}\", error));\n```\n\n_Note that although`io::Error`\u27e88\u27e9 implements `Display`, we do not add it to the generated message for `DataStoreError::Disconnect`, since it is already made available via `#[source]`. See further context on avoiding duplication in error reports at the rust blog here\u27e89\u27e9._\n### \u00a7\u27e810\u27e9Details\n  * A `fmt::Display` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The `Display` derive macro supports a shorthand for interpolating fields from the error: \n    * `/// {var}` \u27f6 `write!(\"{}\", self.var)`\n    * `/// {0}` \u27f6 `write!(\"{}\", self.0)`\n    * `/// {var:?}` \u27f6 `write!(\"{:?}\", self.var)`\n    * `/// {0:?}` \u27f6 `write!(\"{:?}\", self.0)`\n  * This also works with structs and generic types\u27e811\u27e9:\n\n\n```\n/// oh no, an error: {0}\n#[derive(Display)]\npub struct Error<E>(pub E);\nlet error: Error<&str> = Error(\"muahaha i am an error\");\nassert!(\"oh no, an error: muahaha i am an error\" == &format!(\"{}\", error));\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * `#[ignore_extra_doc_attributes]` makes the macro ignore any doc comment attributes (or `///` lines) after the first. Multi-line comments using `///` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (`/** */`).\n    * `#[prefix_enum_doc_attributes]` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the `#displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7\u27e812\u27e9FAQ\n  1. **Is this crate`no_std` compatible?**\n     * Yes! This crate implements the `core::fmt::Display`\u27e84\u27e9 trait, not the `std::fmt::Display`\u27e813\u27e9 trait, so it should work in `std` and `no_std` environments. Just add `default-features = false`.\n  2. **Does this crate work with`Path` and `PathBuf` via the `Display` trait?**\n     * Yuuup. This crate uses @dtolnay\u2019s autoref specialization technique\u27e814\u27e9 to add a special trait for types to get the display impl. It then specializes for `Path` and `PathBuf`, and when either of these types are found, it calls `self.display()` to get a `std::path::Display<'_>` type which can be used with the `Display` format specifier!\n\n\n## Derive Macros\u00a7\u27e815\u27e9\n\nDisplay\u27e816\u27e9\n    [Custom `#[derive(...)]` macro](https://doc.rust-lang.org/edition-guide/rust-2018/macros/custom-derive.html) for implementing `fmt::Display`\u27e813\u27e9 via doc comment attributes.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/displaydoc/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/displaydoc/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/displaydoc/latest/src/displaydoc/lib.rs.html#1-186: Source\n\u27e84\u27e9 https://doc.rust-lang.org/std/fmt/trait.Display.html: `core::fmt::Display`\n\u27e85\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#example: \u00a7\n\u27e86\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `Error`\n\u27e87\u27e9 https://docs.rs/thiserror/1.0.25/thiserror/index.html: `thiserror`\n\u27e88\u27e9 https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html: struct std::io::error::Error - `io::Error`\n\u27e89\u27e9 https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue: here\n\u27e810\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#details: \u00a7\n\u27e811\u27e9 https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html#generic-type-parameters: derive displaydoc::Display - generic types\n\u27e812\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#faq: displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7\n\u27e813\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `std::fmt::Display`\n\u27e814\u27e9 https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md: autoref specialization technique\n\u27e815\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#derives: \u00a7\n\u27e816\u27e9 https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html: derive displaydoc::Display - Display\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5197,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113640.4735164"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/displaydoc",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [14 releases](https://lib.rs/crates/displaydoc/versions)\n0.2.5 |  Jun 20, 2024   \n---|---  \n0.2.4 |  May 3, 2023   \n0.2.3 |  Jul 16, 2021   \n0.2.1 |  Mar 26, 2021   \n0.1.4 |  Oct 18, 2019   \n#**54** in [Procedural macros](https://lib.rs/development-tools/procedural-macro-helpers \"Crates to help you write procedural macros in Rust.\n\")\nDownload history 2665063/week @ 2025-03-03 2742480/week @ 2025-03-10 3091565/week @ 2025-03-17 3109178/week @ 2025-03-24 2651130/week @ 2025-03-31 2840487/week @ 2025-04-07 2555125/week @ 2025-04-14 2489945/week @ 2025-04-21 2438703/week @ 2025-04-28 2559235/week @ 2025-05-05 2583703/week @ 2025-05-12 2640096/week @ 2025-05-19 2382272/week @ 2025-05-26 2638399/week @ 2025-06-02 2645227/week @ 2025-06-09 2674290/week @ 2025-06-16\n**10,489,882** downloads per month Used in [**34,716** crates (228 directly)](https://lib.rs/crates/displaydoc/rev)\n**MIT/Apache**\n43KB  616 lines\n# derive(Display) /// ````From``<`docs`>````\n[![Latest Version](https://img.shields.io/crates/v/displaydoc.svg)](https://crates.io/crates/displaydoc) [![Rust Documentation](https://img.shields.io/badge/api-rustdoc-blue.svg)](https://docs.rs/displaydoc)\nThis library provides a convenient derive macro for the standard library's [```core`::```fmt`::``Display``](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait.\n```\n```[``dependencies``]`\n`displaydoc ``=` ``\"`0.2`\"``\n``\n```\n\n_Compiler support: requires rustc 1.56+_\n### Example\n_Demonstration alongside the[``Error``](https://doc.rust-lang.org/stable/std/?search=error%3A%3AError \"std::error::Error\") derive macro from [``thiserror``](https://docs.rs/thiserror/1.0.25/thiserror/index.html), to propagate source locations from [```io`::``Error``](https://doc.rust-lang.org/stable/std/?search=io%3A%3AError \"std::io::Error\") with the ````#``[``source``]```` attribute:_\n```\n``use` `std`::``io`;`\n`use` `displaydoc`::``Display`;`\n`use` `thiserror`::``Error`;`\n``#``[``derive```(```Display`,` Error`,` Debug```)```]``\n``pub` `enum` `DataStoreError` ``{`\n  ``///` data store disconnected`\n  Disconnect`(```#``[``source``]`` `io`::``Error`)``,`\n  ``///` the data for key `{0}` is not available`\n  Redaction`(``String``)``,`\n  ``///` invalid header (expected {expected:?}, found {found:?})`\n  InvalidHeader `{`\n    expected`:` `String``,`\n    found`:` `String``,`\n  `}``,`\n  ``///` unknown data store error`\n  Unknown`,`\n```}```\n`let` error `=` `DataStoreError`::``Redaction`(```\"`CLASSIFIED CONTENT`\"```.``to_string``(``)``)``;`\n`assert!``(```\"`the data for key `CLASSIFIED CONTENT` is not available`\"`` `==` `&``format!``(```\"``{}``\"```,` error`)``)``;`\n`\n```\n\n_Note that although[```io`::``Error``](https://doc.rust-lang.org/stable/std/?search=io%3A%3AError \"std::io::Error\") implements ``Display``, we do not add it to the generated message for ```DataStoreError`::``Disconnect``, since it is already made available via ````#``[``source``]````. See further context on avoiding duplication in error reports at the rust blog [here](https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue)._\n### Details\n  * A ```fmt`::``Display`` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The ``Display`` derive macro supports a shorthand for interpolating fields from the error: \n    * ````///` {var}``` \u27f6 ```write!``(`\"{}\", `self``.`var`)```\n    * ````///` {0}``` \u27f6 ```write!``(`\"{}\", `self``.``0``)```\n    * ````///` {var:?}``` \u27f6 ```write!``(`\"{:?}\", `self``.`var`)```\n    * ````///` {0:?}``` \u27f6 ```write!``(`\"{:?}\", `self``.``0``)```\n  * This also works with structs and [generic types](https://docs.rs/displaydoc/latest/displaydoc/?search=Display%23generic-type-parameters \"crate::Display#generic-type-parameters\"):\n\n```\n```///` oh no, an error: {0}`\n``#``[``derive```(```Display```)```]``\n``pub` `struct` ````Error``<`E`>`````(`pub E`)```;`\n`let` error`:` `Error`<``&``str``>`` `=` Error`(```\"`muahaha i am an error`\"```)``;`\n`assert!``(```\"`oh no, an error: muahaha i am an error`\"`` `==` `&``format!``(```\"``{}``\"```,` error`)``)``;`\n`\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * ````#``[``ignore_extra_doc_attributes``]```` makes the macro ignore any doc comment attributes (or ````///```` lines) after the first. Multi-line comments using ````///```` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (````/** ``*/````).\n    * ````#``[``prefix_enum_doc_attributes``]```` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the ````#``[``displaydoc```(`````\"`...`\"`````)````` atrribute may be used on the variant or struct to override it.\n\n\n### FAQ\n  1. **Is this crate``no_std`` compatible?**\n     * Yes! This crate implements the [```core`::```fmt`::``Display``](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait, not the [```std`::```fmt`::``Display``](https://doc.rust-lang.org/stable/std/?search=fmt%3A%3ADisplay \"`std::fmt::Display`\") trait, so it should work in ``std`` and ``no_std`` environments. Just add ``default`-`features `=` `false```.\n  2. **Does this crate work with``Path`` and ``PathBuf`` via the ``Display`` trait?**\n     * Yuuup. This crate uses @dtolnay's [autoref specialization technique](https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md) to add a special trait for types to get the display impl. It then specializes for ``Path`` and ``PathBuf``, and when either of these types are found, it calls ```self``.``display``(``)``` to get a ```std`::```path`::``Display``<`'`_``>```` type which can be used with the ``Display`` format specifier!\n\n\n#### License\nLicensed under either of [Apache License, Version 2.0](https://github.com/yaahc/displaydoc/blob/e4028851bfb82998300237f7568a45f589a19e40/LICENSE-APACHE) or [MIT license](https://github.com/yaahc/displaydoc/blob/e4028851bfb82998300237f7568a45f589a19e40/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~190\u2013620KB  ~15K SLoC\n  * [proc-macro2](https://lib.rs/crates/proc-macro2 \"1.0\")\n  * [quote](https://lib.rs/crates/quote \"1.0\")\n  * [syn](https://lib.rs/crates/syn \"2.0\")\n\n\n  * dev  [libc](https://lib.rs/crates/libc \"0.2\")\n  * dev  [pretty_assertions](https://lib.rs/crates/pretty_assertions \"obsolete\") 0.6.1\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1.0.0\")\n  * dev  [static_assertions](https://lib.rs/crates/static_assertions \"1.1\")\n  * dev  [thiserror](https://lib.rs/crates/thiserror \"outdated\") 1.0\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0\")\n\n\n#### [Other feature](https://lib.rs/crates/displaydoc/features)\n  * [std](https://lib.rs/crates/displaydoc/features#feature-std)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  14 releases\u27e81\u27e9\n0.2.5 |  Jun 20, 2024   \n---|---  \n0.2.4 |  May 3, 2023   \n0.2.3 |  Jul 16, 2021   \n0.2.1 |  Mar 26, 2021   \n0.1.4 |  Oct 18, 2019   \n#**54** in Procedural macros\u27e82\u27e9\nDownload history 2665063/week @ 2025-03-03 2742480/week @ 2025-03-10 3091565/week @ 2025-03-17 3109178/week @ 2025-03-24 2651130/week @ 2025-03-31 2840487/week @ 2025-04-07 2555125/week @ 2025-04-14 2489945/week @ 2025-04-21 2438703/week @ 2025-04-28 2559235/week @ 2025-05-05 2583703/week @ 2025-05-12 2640096/week @ 2025-05-19 2382272/week @ 2025-05-26 2638399/week @ 2025-06-02 2645227/week @ 2025-06-09 2674290/week @ 2025-06-16\n**10,489,882** downloads per month Used in **34,716** crates (228 directly)\u27e83\u27e9\n**MIT/Apache**\n43KB  616 lines\n# derive(Display) /// ````From``<`docs`>````\n![Latest Version\u27e84\u27e9](https://crates.io/crates/displaydoc) ![Rust Documentation\u27e85\u27e9](https://docs.rs/displaydoc)\nThis library provides a convenient derive macro for the standard library's ```core`::```fmt`::``Display``\u27e86\u27e9 trait.\n```\n```[``dependencies``]`\n`displaydoc ``=` ``\"`0.2`\"``\n``\n```\n\n_Compiler support: requires rustc 1.56+_\n### Example\n_Demonstration alongside the``Error``\u27e87\u27e9 derive macro from ``thiserror``\u27e88\u27e9, to propagate source locations from ```io`::``Error``\u27e89\u27e9 with the ````#``[``source``]```` attribute:_\n```\n``use` `std`::``io`;`\n`use` `displaydoc`::``Display`;`\n`use` `thiserror`::``Error`;`\n``#``[``derive```(```Display`,` Error`,` Debug```)```]``\n``pub` `enum` `DataStoreError` ``{`\n  ``///` data store disconnected`\n  Disconnect`(```#``[``source``]`` `io`::``Error`)``,`\n  ``///` the data for key `{0}` is not available`\n  Redaction`(``String``)``,`\n  ``///` invalid header (expected {expected:?}, found {found:?})`\n  InvalidHeader `{`\n    expected`:` `String``,`\n    found`:` `String``,`\n  `}``,`\n  ``///` unknown data store error`\n  Unknown`,`\n```}```\n`let` error `=` `DataStoreError`::``Redaction`(```\"`CLASSIFIED CONTENT`\"```.``to_string``(``)``)``;`\n`assert!``(```\"`the data for key `CLASSIFIED CONTENT` is not available`\"`` `==` `&``format!``(```\"``{}``\"```,` error`)``)``;`\n`\n```\n\n_Note that although```io`::``Error``\u27e89\u27e9 implements ``Display``, we do not add it to the generated message for ```DataStoreError`::``Disconnect``, since it is already made available via ````#``[``source``]````. See further context on avoiding duplication in error reports at the rust blog here\u27e810\u27e9._\n### Details\n  * A ```fmt`::``Display`` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The ``Display`` derive macro supports a shorthand for interpolating fields from the error: \n    * ````///` {var}``` \u27f6 ```write!``(`\"{}\", `self``.`var`)```\n    * ````///` {0}``` \u27f6 ```write!``(`\"{}\", `self``.``0``)```\n    * ````///` {var:?}``` \u27f6 ```write!``(`\"{:?}\", `self``.`var`)```\n    * ````///` {0:?}``` \u27f6 ```write!``(`\"{:?}\", `self``.``0``)```\n  * This also works with structs and generic types\u27e811\u27e9:\n\n```\n```///` oh no, an error: {0}`\n``#``[``derive```(```Display```)```]``\n``pub` `struct` ````Error``<`E`>`````(`pub E`)```;`\n`let` error`:` `Error`<``&``str``>`` `=` Error`(```\"`muahaha i am an error`\"```)``;`\n`assert!``(```\"`oh no, an error: muahaha i am an error`\"`` `==` `&``format!``(```\"``{}``\"```,` error`)``)``;`\n`\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * ````#``[``ignore_extra_doc_attributes``]```` makes the macro ignore any doc comment attributes (or ````///```` lines) after the first. Multi-line comments using ````///```` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (````/** ``*/````).\n    * ````#``[``prefix_enum_doc_attributes``]```` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the ````#````displaydoc```(`````\"`...`\"`````)````` atrribute may be used on the variant or struct to override it.\n\n\n### FAQ\n  1. **Is this crate``no_std`` compatible?**\n     * Yes! This crate implements the [```core`::```fmt`::``Display``\u27e86\u27e9 trait, not the ```std`::```fmt`::``Display``\u27e812\u27e9 trait, so it should work in ``std`` and ``no_std`` environments. Just add ``default`-`features `=` `false```.\n  2. **Does this crate work with``Path`` and ``PathBuf`` via the ``Display`` trait?**\n     * Yuuup. This crate uses @dtolnay's autoref specialization technique\u27e813\u27e9 to add a special trait for types to get the display impl. It then specializes for ``Path`` and ``PathBuf``, and when either of these types are found, it calls ```self``.``display``(``)``` to get a ```std`::```path`::``Display``<`'`_``>```` type which can be used with the ``Display`` format specifier!\n\n\n#### License\nLicensed under either of Apache License, Version 2.0\u27e814\u27e9 or MIT license\u27e815\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~190\u2013620KB  ~15K SLoC\n  * proc-macro2\u27e816\u27e9\n  * quote\u27e817\u27e9\n  * syn\u27e818\u27e9\n\n\n  * dev  libc\u27e819\u27e9\n  * dev  pretty_assertions\u27e820\u27e9 0.6.1\n  * dev  rustversion\u27e821\u27e9\n  * dev  static_assertions\u27e822\u27e9\n  * dev  thiserror\u27e823\u27e9 1.0\n  * dev  trybuild\u27e824\u27e9\n\n\n#### Other feature\u27e825\u27e9\n  * std\u27e826\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/displaydoc/versions: 14 releases\n\u27e82\u27e9 https://lib.rs/development-tools/procedural-macro-helpers: Crates to help you write procedural macros in Rust.\n - Procedural macros\n\u27e83\u27e9 https://lib.rs/crates/displaydoc/rev: **34,716** crates (228 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/displaydoc.svg: ![Latest Version\n\u27e85\u27e9 https://img.shields.io/badge/api-rustdoc-blue.svg: ![Rust Documentation\n\u27e86\u27e9 https://doc.rust-lang.org/std/fmt/trait.Display.html: ```core`::```fmt`::``Display``\n\u27e87\u27e9 https://doc.rust-lang.org/stable/std/?search=error%3A%3AError: std::error::Error - ``Error``\n\u27e88\u27e9 https://docs.rs/thiserror/1.0.25/thiserror/index.html: ``thiserror``\n\u27e89\u27e9 https://doc.rust-lang.org/stable/std/?search=io%3A%3AError: std::io::Error - ```io`::``Error``\n\u27e810\u27e9 https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue: here\n\u27e811\u27e9 https://docs.rs/displaydoc/latest/displaydoc/?search=Display%23generic-type-parameters: crate::Display#generic-type-parameters - generic types\n\u27e812\u27e9 https://doc.rust-lang.org/stable/std/?search=fmt%3A%3ADisplay: `std::fmt::Display` - ```std`::```fmt`::``Display``\n\u27e813\u27e9 https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md: autoref specialization technique\n\u27e814\u27e9 https://github.com/yaahc/displaydoc/blob/e4028851bfb82998300237f7568a45f589a19e40/LICENSE-APACHE: Apache License, Version 2.0\n\u27e815\u27e9 https://github.com/yaahc/displaydoc/blob/e4028851bfb82998300237f7568a45f589a19e40/LICENSE-MIT: MIT license\n\u27e816\u27e9 https://lib.rs/crates/proc-macro2: 1.0 - proc-macro2\n\u27e817\u27e9 https://lib.rs/crates/quote: 1.0 - quote\n\u27e818\u27e9 https://lib.rs/crates/syn: 2.0 - syn\n\u27e819\u27e9 https://lib.rs/crates/libc: 0.2 - libc\n\u27e820\u27e9 https://lib.rs/crates/pretty_assertions: obsolete - pretty_assertions\n\u27e821\u27e9 https://lib.rs/crates/rustversion: 1.0.0 - rustversion\n\u27e822\u27e9 https://lib.rs/crates/static_assertions: 1.1 - static_assertions\n\u27e823\u27e9 https://lib.rs/crates/thiserror: outdated - thiserror\n\u27e824\u27e9 https://lib.rs/crates/trybuild: 1.0 - trybuild\n\u27e825\u27e9 https://lib.rs/crates/displaydoc/features: Other feature\n\u27e826\u27e9 https://lib.rs/crates/displaydoc/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7307,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113640.9042661"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libunicode_ident-a9f8538d6931f265.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.85",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.85\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.85\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\build\\proc-macro2-254676507fa6dab2\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\build\\proc-macro2-254676507fa6dab2\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.85",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\build\\proc-macro2-a9c9a0b467e28c59\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.85",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.85\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.85\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libproc_macro2-6e81c43dffe43cb6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libquote-249169988be17077.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.66",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.66\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.66\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libsyn-69bf45bc0e0cca45.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_sjkl4tz/displaydoc-0.2.5#displaydoc@0.2.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "displaydoc",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libdisplaydoc-0b21d3c961571496.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.85",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.85\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.85\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\build\\proc-macro2-254676507fa6dab2\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\build\\proc-macro2-254676507fa6dab2\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.85",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\build\\proc-macro2-a9c9a0b467e28c59\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libunicode_ident-a9f8538d6931f265.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.85",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.85\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.85\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libproc_macro2-6e81c43dffe43cb6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libquote-249169988be17077.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.66",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.66\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.66\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libsyn-69bf45bc0e0cca45.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_sjkl4tz/displaydoc-0.2.5#displaydoc@0.2.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "displaydoc",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_sjkl4tz\\displaydoc-0.2.5\\target\\debug\\deps\\libdisplaydoc-f386ad3267203cb5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 47
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ansi_term",
                    "version": "0.11.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0139",
                    "package": "ansi_term",
                    "title": "ansi_term is Unmaintained",
                    "description": "The maintainer has advised that this crate is deprecated and will not receive any maintenance.\n\nThe crate does not seem to have much dependencies and may or may not be ok to use as-is.\n\nLast release seems to have been three years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ansiterm](https://crates.io/crates/ansiterm)\n - [anstyle](https://github.com/epage/anstyle)\n - [console](https://crates.io/crates/console)\n - [nu-ansi-term](https://crates.io/crates/nu-ansi-term)\n - [owo-colors](https://crates.io/crates/owo-colors)\n - [stylish](https://crates.io/crates/stylish)\n - [yansi](https://crates.io/crates/yansi)\n\n## Dependency Specific Migration(s)\n\n - [structopt, clap2](https://github.com/clap-rs/clap/discussions/4172)",
                    "date": "2021-08-18",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/ogham/rust-ansi-term/issues/72",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "difference",
                    "version": "2.0.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0095",
                    "package": "difference",
                    "title": "difference is unmaintained",
                    "description": "The author of the `difference` crate is unresponsive.\n\nMaintained alternatives:\n\n- [`dissimilar`](https://crates.io/crates/dissimilar)\n\n- [`similar`](https://crates.io/crates/similar)\n\n- [`treediff`](https://crates.io/crates/treediff)\n\n- [`diffus`](https://crates.io/crates/diffus)",
                    "date": "2020-12-20",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/johannhof/difference.rs/issues/45",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": [
                      ">2.0.0"
                    ]
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "displaydoc",
          "version": "0.2.5",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/displaydoc/latest/displaydoc/all.html \"show sidebar\")\n# Crate displaydocCopy item path\n[Settings](https://docs.rs/displaydoc/latest/settings.html)\n[Help](https://docs.rs/displaydoc/latest/help.html)\nSummary[Source](https://docs.rs/displaydoc/latest/src/displaydoc/lib.rs.html#1-186)\nExpand description\nThis library provides a convenient derive macro for the standard library\u2019s [`core::fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait.\n```\n[dependencies]\ndisplaydoc = \"0.2\"\n```\n\n_Compiler support: requires rustc 1.56+_\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#example)Example\n_Demonstration alongside the[`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") derive macro from [`thiserror`](https://docs.rs/thiserror/1.0.25/thiserror/index.html), to propagate source locations from [`io::Error`](https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html \"struct std::io::error::Error\") with the `#[source]` attribute:_\n```\nuse std::io;\nuse displaydoc::Display;\nuse thiserror::Error;\n#[derive(Display, Error, Debug)]\npub enum DataStoreError {\n  /// data store disconnected\n  Disconnect(#[source] io::Error),\n  /// the data for key `{0}` is not available\n  Redaction(String),\n  /// invalid header (expected {expected:?}, found {found:?})\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  /// unknown data store error\n  Unknown,\n}\nlet error = DataStoreError::Redaction(\"CLASSIFIED CONTENT\".to_string());\nassert!(\"the data for key `CLASSIFIED CONTENT` is not available\" == &format!(\"{}\", error));\n```\n\n_Note that although[`io::Error`](https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html \"struct std::io::error::Error\") implements `Display`, we do not add it to the generated message for `DataStoreError::Disconnect`, since it is already made available via `#[source]`. See further context on avoiding duplication in error reports at the rust blog [here](https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue)._\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#details)Details\n  * A `fmt::Display` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The `Display` derive macro supports a shorthand for interpolating fields from the error: \n    * `/// {var}` \u27f6 `write!(\"{}\", self.var)`\n    * `/// {0}` \u27f6 `write!(\"{}\", self.0)`\n    * `/// {var:?}` \u27f6 `write!(\"{:?}\", self.var)`\n    * `/// {0:?}` \u27f6 `write!(\"{:?}\", self.0)`\n  * This also works with structs and [generic types](https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html#generic-type-parameters \"derive displaydoc::Display\"):\n\n\n```\n/// oh no, an error: {0}\n#[derive(Display)]\npub struct Error<E>(pub E);\nlet error: Error<&str> = Error(\"muahaha i am an error\");\nassert!(\"oh no, an error: muahaha i am an error\" == &format!(\"{}\", error));\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * `#[ignore_extra_doc_attributes]` makes the macro ignore any doc comment attributes (or `///` lines) after the first. Multi-line comments using `///` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (`/** */`).\n    * `#[prefix_enum_doc_attributes]` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the `#[displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#faq)FAQ\n  1. **Is this crate`no_std` compatible?**\n     * Yes! This crate implements the [`core::fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait, not the [`std::fmt::Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") trait, so it should work in `std` and `no_std` environments. Just add `default-features = false`.\n  2. **Does this crate work with`Path` and `PathBuf` via the `Display` trait?**\n     * Yuuup. This crate uses @dtolnay\u2019s [autoref specialization technique](https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md) to add a special trait for types to get the display impl. It then specializes for `Path` and `PathBuf`, and when either of these types are found, it calls `self.display()` to get a `std::path::Display<'_>` type which can be used with the `Display` format specifier!\n\n\n## Derive Macros[\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#derives)\n\n[Display](https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html \"derive displaydoc::Display\")\n    [Custom `#[derive(...)]` macro](https://doc.rust-lang.org/edition-guide/rust-2018/macros/custom-derive.html) for implementing [`fmt::Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") via doc comment attributes.\n",
            "markdown_with_citations": "[](https://docs.rs/displaydoc/latest/displaydoc/all.html \"show sidebar\")\n# Crate displaydocCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis library provides a convenient derive macro for the standard library\u2019s `core::fmt::Display`\u27e84\u27e9 trait.\n```\n[dependencies]\ndisplaydoc = \"0.2\"\n```\n\n_Compiler support: requires rustc 1.56+_\n### \u00a7\u27e85\u27e9Example\n_Demonstration alongside the`Error`\u27e86\u27e9 derive macro from `thiserror`\u27e87\u27e9, to propagate source locations from `io::Error`\u27e88\u27e9 with the `#[source]` attribute:_\n```\nuse std::io;\nuse displaydoc::Display;\nuse thiserror::Error;\n#[derive(Display, Error, Debug)]\npub enum DataStoreError {\n  /// data store disconnected\n  Disconnect(#[source] io::Error),\n  /// the data for key `{0}` is not available\n  Redaction(String),\n  /// invalid header (expected {expected:?}, found {found:?})\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  /// unknown data store error\n  Unknown,\n}\nlet error = DataStoreError::Redaction(\"CLASSIFIED CONTENT\".to_string());\nassert!(\"the data for key `CLASSIFIED CONTENT` is not available\" == &format!(\"{}\", error));\n```\n\n_Note that although`io::Error`\u27e88\u27e9 implements `Display`, we do not add it to the generated message for `DataStoreError::Disconnect`, since it is already made available via `#[source]`. See further context on avoiding duplication in error reports at the rust blog here\u27e89\u27e9._\n### \u00a7\u27e810\u27e9Details\n  * A `fmt::Display` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The `Display` derive macro supports a shorthand for interpolating fields from the error: \n    * `/// {var}` \u27f6 `write!(\"{}\", self.var)`\n    * `/// {0}` \u27f6 `write!(\"{}\", self.0)`\n    * `/// {var:?}` \u27f6 `write!(\"{:?}\", self.var)`\n    * `/// {0:?}` \u27f6 `write!(\"{:?}\", self.0)`\n  * This also works with structs and generic types\u27e811\u27e9:\n\n\n```\n/// oh no, an error: {0}\n#[derive(Display)]\npub struct Error<E>(pub E);\nlet error: Error<&str> = Error(\"muahaha i am an error\");\nassert!(\"oh no, an error: muahaha i am an error\" == &format!(\"{}\", error));\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * `#[ignore_extra_doc_attributes]` makes the macro ignore any doc comment attributes (or `///` lines) after the first. Multi-line comments using `///` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (`/** */`).\n    * `#[prefix_enum_doc_attributes]` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the `#displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7\u27e812\u27e9FAQ\n  1. **Is this crate`no_std` compatible?**\n     * Yes! This crate implements the `core::fmt::Display`\u27e84\u27e9 trait, not the `std::fmt::Display`\u27e813\u27e9 trait, so it should work in `std` and `no_std` environments. Just add `default-features = false`.\n  2. **Does this crate work with`Path` and `PathBuf` via the `Display` trait?**\n     * Yuuup. This crate uses @dtolnay\u2019s autoref specialization technique\u27e814\u27e9 to add a special trait for types to get the display impl. It then specializes for `Path` and `PathBuf`, and when either of these types are found, it calls `self.display()` to get a `std::path::Display<'_>` type which can be used with the `Display` format specifier!\n\n\n## Derive Macros\u00a7\u27e815\u27e9\n\nDisplay\u27e816\u27e9\n    [Custom `#[derive(...)]` macro](https://doc.rust-lang.org/edition-guide/rust-2018/macros/custom-derive.html) for implementing `fmt::Display`\u27e813\u27e9 via doc comment attributes.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/displaydoc/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/displaydoc/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/displaydoc/latest/src/displaydoc/lib.rs.html#1-186: Source\n\u27e84\u27e9 https://doc.rust-lang.org/std/fmt/trait.Display.html: `core::fmt::Display`\n\u27e85\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#example: \u00a7\n\u27e86\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `Error`\n\u27e87\u27e9 https://docs.rs/thiserror/1.0.25/thiserror/index.html: `thiserror`\n\u27e88\u27e9 https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html: struct std::io::error::Error - `io::Error`\n\u27e89\u27e9 https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue: here\n\u27e810\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#details: \u00a7\n\u27e811\u27e9 https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html#generic-type-parameters: derive displaydoc::Display - generic types\n\u27e812\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#faq: displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7\n\u27e813\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `std::fmt::Display`\n\u27e814\u27e9 https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md: autoref specialization technique\n\u27e815\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#derives: \u00a7\n\u27e816\u27e9 https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html: derive displaydoc::Display - Display\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "displaydoc",
          "version": "0.2.5",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/displaydoc/latest/displaydoc/all.html \"show sidebar\")\n# Crate displaydocCopy item path\n[Settings](https://docs.rs/displaydoc/latest/settings.html)\n[Help](https://docs.rs/displaydoc/latest/help.html)\nSummary[Source](https://docs.rs/displaydoc/latest/src/displaydoc/lib.rs.html#1-186)\nExpand description\nThis library provides a convenient derive macro for the standard library\u2019s [`core::fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait.\n```\n[dependencies]\ndisplaydoc = \"0.2\"\n```\n\n_Compiler support: requires rustc 1.56+_\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#example)Example\n_Demonstration alongside the[`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") derive macro from [`thiserror`](https://docs.rs/thiserror/1.0.25/thiserror/index.html), to propagate source locations from [`io::Error`](https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html \"struct std::io::error::Error\") with the `#[source]` attribute:_\n```\nuse std::io;\nuse displaydoc::Display;\nuse thiserror::Error;\n#[derive(Display, Error, Debug)]\npub enum DataStoreError {\n  /// data store disconnected\n  Disconnect(#[source] io::Error),\n  /// the data for key `{0}` is not available\n  Redaction(String),\n  /// invalid header (expected {expected:?}, found {found:?})\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  /// unknown data store error\n  Unknown,\n}\nlet error = DataStoreError::Redaction(\"CLASSIFIED CONTENT\".to_string());\nassert!(\"the data for key `CLASSIFIED CONTENT` is not available\" == &format!(\"{}\", error));\n```\n\n_Note that although[`io::Error`](https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html \"struct std::io::error::Error\") implements `Display`, we do not add it to the generated message for `DataStoreError::Disconnect`, since it is already made available via `#[source]`. See further context on avoiding duplication in error reports at the rust blog [here](https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue)._\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#details)Details\n  * A `fmt::Display` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The `Display` derive macro supports a shorthand for interpolating fields from the error: \n    * `/// {var}` \u27f6 `write!(\"{}\", self.var)`\n    * `/// {0}` \u27f6 `write!(\"{}\", self.0)`\n    * `/// {var:?}` \u27f6 `write!(\"{:?}\", self.var)`\n    * `/// {0:?}` \u27f6 `write!(\"{:?}\", self.0)`\n  * This also works with structs and [generic types](https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html#generic-type-parameters \"derive displaydoc::Display\"):\n\n\n```\n/// oh no, an error: {0}\n#[derive(Display)]\npub struct Error<E>(pub E);\nlet error: Error<&str> = Error(\"muahaha i am an error\");\nassert!(\"oh no, an error: muahaha i am an error\" == &format!(\"{}\", error));\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * `#[ignore_extra_doc_attributes]` makes the macro ignore any doc comment attributes (or `///` lines) after the first. Multi-line comments using `///` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (`/** */`).\n    * `#[prefix_enum_doc_attributes]` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the `#[displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#faq)FAQ\n  1. **Is this crate`no_std` compatible?**\n     * Yes! This crate implements the [`core::fmt::Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html) trait, not the [`std::fmt::Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") trait, so it should work in `std` and `no_std` environments. Just add `default-features = false`.\n  2. **Does this crate work with`Path` and `PathBuf` via the `Display` trait?**\n     * Yuuup. This crate uses @dtolnay\u2019s [autoref specialization technique](https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md) to add a special trait for types to get the display impl. It then specializes for `Path` and `PathBuf`, and when either of these types are found, it calls `self.display()` to get a `std::path::Display<'_>` type which can be used with the `Display` format specifier!\n\n\n## Derive Macros[\u00a7](https://docs.rs/displaydoc/latest/displaydoc/#derives)\n\n[Display](https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html \"derive displaydoc::Display\")\n    [Custom `#[derive(...)]` macro](https://doc.rust-lang.org/edition-guide/rust-2018/macros/custom-derive.html) for implementing [`fmt::Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") via doc comment attributes.\n",
            "markdown_with_citations": "[](https://docs.rs/displaydoc/latest/displaydoc/all.html \"show sidebar\")\n# Crate displaydocCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis library provides a convenient derive macro for the standard library\u2019s `core::fmt::Display`\u27e84\u27e9 trait.\n```\n[dependencies]\ndisplaydoc = \"0.2\"\n```\n\n_Compiler support: requires rustc 1.56+_\n### \u00a7\u27e85\u27e9Example\n_Demonstration alongside the`Error`\u27e86\u27e9 derive macro from `thiserror`\u27e87\u27e9, to propagate source locations from `io::Error`\u27e88\u27e9 with the `#[source]` attribute:_\n```\nuse std::io;\nuse displaydoc::Display;\nuse thiserror::Error;\n#[derive(Display, Error, Debug)]\npub enum DataStoreError {\n  /// data store disconnected\n  Disconnect(#[source] io::Error),\n  /// the data for key `{0}` is not available\n  Redaction(String),\n  /// invalid header (expected {expected:?}, found {found:?})\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  /// unknown data store error\n  Unknown,\n}\nlet error = DataStoreError::Redaction(\"CLASSIFIED CONTENT\".to_string());\nassert!(\"the data for key `CLASSIFIED CONTENT` is not available\" == &format!(\"{}\", error));\n```\n\n_Note that although`io::Error`\u27e88\u27e9 implements `Display`, we do not add it to the generated message for `DataStoreError::Disconnect`, since it is already made available via `#[source]`. See further context on avoiding duplication in error reports at the rust blog here\u27e89\u27e9._\n### \u00a7\u27e810\u27e9Details\n  * A `fmt::Display` impl is generated for your enum if you provide a docstring comment on each variant as shown above in the example. The `Display` derive macro supports a shorthand for interpolating fields from the error: \n    * `/// {var}` \u27f6 `write!(\"{}\", self.var)`\n    * `/// {0}` \u27f6 `write!(\"{}\", self.0)`\n    * `/// {var:?}` \u27f6 `write!(\"{:?}\", self.var)`\n    * `/// {0:?}` \u27f6 `write!(\"{:?}\", self.0)`\n  * This also works with structs and generic types\u27e811\u27e9:\n\n\n```\n/// oh no, an error: {0}\n#[derive(Display)]\npub struct Error<E>(pub E);\nlet error: Error<&str> = Error(\"muahaha i am an error\");\nassert!(\"oh no, an error: muahaha i am an error\" == &format!(\"{}\", error));\n```\n\n  * Two optional attributes can be added to your types next to the derive:\n    * `#[ignore_extra_doc_attributes]` makes the macro ignore any doc comment attributes (or `///` lines) after the first. Multi-line comments using `///` are otherwise treated as an error, so use this attribute or consider switching to block doc comments (`/** */`).\n    * `#[prefix_enum_doc_attributes]` combines the doc comment message on your enum itself with the messages for each variant, in the format \u201cenum: variant\u201d. When added to an enum, the doc comment on the enum becomes mandatory. When added to any other type, it has no effect.\n  * In case you want to have an independent doc comment, the `#displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7\u27e812\u27e9FAQ\n  1. **Is this crate`no_std` compatible?**\n     * Yes! This crate implements the `core::fmt::Display`\u27e84\u27e9 trait, not the `std::fmt::Display`\u27e813\u27e9 trait, so it should work in `std` and `no_std` environments. Just add `default-features = false`.\n  2. **Does this crate work with`Path` and `PathBuf` via the `Display` trait?**\n     * Yuuup. This crate uses @dtolnay\u2019s autoref specialization technique\u27e814\u27e9 to add a special trait for types to get the display impl. It then specializes for `Path` and `PathBuf`, and when either of these types are found, it calls `self.display()` to get a `std::path::Display<'_>` type which can be used with the `Display` format specifier!\n\n\n## Derive Macros\u00a7\u27e815\u27e9\n\nDisplay\u27e816\u27e9\n    [Custom `#[derive(...)]` macro](https://doc.rust-lang.org/edition-guide/rust-2018/macros/custom-derive.html) for implementing `fmt::Display`\u27e813\u27e9 via doc comment attributes.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/displaydoc/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/displaydoc/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/displaydoc/latest/src/displaydoc/lib.rs.html#1-186: Source\n\u27e84\u27e9 https://doc.rust-lang.org/std/fmt/trait.Display.html: `core::fmt::Display`\n\u27e85\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#example: \u00a7\n\u27e86\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `Error`\n\u27e87\u27e9 https://docs.rs/thiserror/1.0.25/thiserror/index.html: `thiserror`\n\u27e88\u27e9 https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html: struct std::io::error::Error - `io::Error`\n\u27e89\u27e9 https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-05-15-What-the-error-handling-project-group-is-working-towards.md#duplicate-information-issue: here\n\u27e810\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#details: \u00a7\n\u27e811\u27e9 https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html#generic-type-parameters: derive displaydoc::Display - generic types\n\u27e812\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#faq: displaydoc(\"...\")` atrribute may be used on the variant or struct to override it.\n\n\n### [\u00a7\n\u27e813\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `std::fmt::Display`\n\u27e814\u27e9 https://github.com/dtolnay/case-studies/blob/master/autoref-specialization/README.md: autoref specialization technique\n\u27e815\u27e9 https://docs.rs/displaydoc/latest/displaydoc/#derives: \u00a7\n\u27e816\u27e9 https://docs.rs/displaydoc/latest/displaydoc/derive.Display.html: derive displaydoc::Display - Display\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `displaydoc` crate provides a custom derive macro for implementing the `fmt::Display` trait using doc comments on enum variants or struct definitions. It supports field interpolation, works with generic types, and offers optional attributes for customizing behavior, such as combining enum-level and variant-level messages or ignoring extra doc comments. The crate is compatible with `no_std` environments and includes specialized support for `Path` and `PathBuf` types.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Derive Macro for `Display`\n\u2705 Factual: The `displaydoc` crate provides a custom `#[derive(Display)]` macro that generates implementations of the `core::fmt::Display` trait based on doc comments provided for enum variants or struct fields.  \n\u274c Counterfactual: The `displaydoc` crate automatically generates `Display` implementations for all types in a module without requiring explicit doc comments or the `#[derive(Display)]` macro.\n\n---\n\n### Pair 2: Compatibility with `no_std`\n\u2705 Factual: The `displaydoc` crate is compatible with `no_std` environments because it implements the `core::fmt::Display` trait rather than the `std::fmt::Display` trait.  \n\u274c Counterfactual: The `displaydoc` crate is incompatible with `no_std` environments because it relies on the `std::fmt::Display` trait and other standard library features.\n\n---\n\n### Pair 3: Handling of Multi-line Comments\n\u2705 Factual: Multi-line comments using `///` are treated as an error by default in `displaydoc`, but this behavior can be overridden with the `#[ignore_extra_doc_attributes]` attribute.  \n\u274c Counterfactual: Multi-line comments using `///` are always supported by `displaydoc` without requiring any additional attributes or configuration.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-a0e1508a-e8024726-1751259849",
      "timestamp": "2025-06-30T05:04:09.837470+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]