[
  {
    "execution_id": "exec-9a6707cd-34f51b79-1751260921",
    "timestamp": "2025-06-30T05:22:01.452725+00:00",
    "sacred_chain": {
      "input_data": "ahash",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'ahash' -> 'ahash'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "ahash",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/ahash",
            "title": "ahash v0.8.12",
            "content": {
              "raw_markdown": "#  ahash v0.8.12\nA non-cryptographic hash function using AES-NI for high performance \n  * [ #aes ](https://crates.io/keywords/aes)\n  * [ #hash ](https://crates.io/keywords/hash)\n  * [ #hasher ](https://crates.io/keywords/hasher)\n  * [ #hashmap ](https://crates.io/keywords/hashmap)\n  * [ #no-std ](https://crates.io/keywords/no-std)\n\n\n  * [ Readme ](https://crates.io/crates/ahash)\n  * [ 95 Versions ](https://crates.io/crates/ahash/versions)\n  * [ Dependencies ](https://crates.io/crates/ahash/dependencies)\n  * [ Dependents ](https://crates.io/crates/ahash/reverse_dependencies)\n\n\n## Metadata\nabout 2 months ago \nv1.60.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n42.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ahash\nOr add the following line to your Cargo.toml:\nahash = \"0.8.12\"\n## Documentation\n[ docs.rs/ahash ](https://docs.rs/ahash)\n## Repository\n[ github.com/tkaitchuck/ahash ](https://github.com/tkaitchuck/ahash)\n## Owners\n## Categories\n  * [Algorithms](https://crates.io/categories/algorithms)\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Data structures](https://crates.io/categories/data-structures)\n\n\n[ Report crate ](https://crates.io/support?crate=ahash&inquire=crate-violation)\n### Stats Overview\n320,014,122 Downloads all time\n95 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  ahash v0.8.12\nA non-cryptographic hash function using AES-NI for high performance \n  *  #aes \u27e81\u27e9\n  *  #hash \u27e82\u27e9\n  *  #hasher \u27e83\u27e9\n  *  #hashmap \u27e84\u27e9\n  *  #no-std \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  95 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 2 months ago \nv1.60.0 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n42.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ahash\nOr add the following line to your Cargo.toml:\nahash = \"0.8.12\"\n## Documentation\n docs.rs/ahash \u27e812\u27e9\n## Repository\n github.com/tkaitchuck/ahash \u27e813\u27e9\n## Owners\n## Categories\n  * Algorithms\u27e814\u27e9\n  * No standard library\u27e815\u27e9\n  * Data structures\u27e816\u27e9\n\n\n Report crate \u27e817\u27e9\n### Stats Overview\n320,014,122 Downloads all time\n95 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/aes:  #aes \n\u27e82\u27e9 https://crates.io/keywords/hash:  #hash \n\u27e83\u27e9 https://crates.io/keywords/hasher:  #hasher \n\u27e84\u27e9 https://crates.io/keywords/hashmap:  #hashmap \n\u27e85\u27e9 https://crates.io/keywords/no-std:  #no-std \n\u27e86\u27e9 https://crates.io/crates/ahash:  Readme \n\u27e87\u27e9 https://crates.io/crates/ahash/versions:  95 Versions \n\u27e88\u27e9 https://crates.io/crates/ahash/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/ahash/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://docs.rs/ahash:  docs.rs/ahash \n\u27e813\u27e9 https://github.com/tkaitchuck/ahash:  github.com/tkaitchuck/ahash \n\u27e814\u27e9 https://crates.io/categories/algorithms: Algorithms\n\u27e815\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e816\u27e9 https://crates.io/categories/data-structures: Data structures\n\u27e817\u27e9 https://crates.io/support?crate=ahash&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1503,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114711.1494077"
          },
          "docs_rs": {
            "url": "https://docs.rs/ahash",
            "title": "Crate ahashCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/ahash/latest/ahash/all.html \"show sidebar\")\n# Crate ahashCopy item path\n[Settings](https://docs.rs/ahash/latest/settings.html)\n[Help](https://docs.rs/ahash/latest/help.html)\nSummary[Source](https://docs.rs/ahash/latest/src/ahash/lib.rs.html#1-358)\nExpand description\nAHash is a high performance keyed hash function.\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key. AHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can induce a collision.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#how-ahash-works)How aHash works\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function. When it is not, aHash falls back on a slightly slower alternative algorithm.\nBecause aHash does not have a fixed standard for its output, it is able to improve over time. But this also means that different computers or computers using different versions of ahash may observe different hash values for the same input.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#basic-usage)Basic Usage\nAHash provides an implementation of the [Hasher] trait. To construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n#### [\u00a7](https://docs.rs/ahash/latest/ahash/#randomness)Randomness\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS. It is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n#### [\u00a7](https://docs.rs/ahash/latest/ahash/#if-randomness-is-not-available)If randomness is not available\n[AHasher::default()](https://docs.rs/ahash/latest/ahash/struct.AHasher.html#method.default \"associated function ahash::AHasher::default\") can be used to hash using fixed keys. This works with [BuildHasherDefault](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\"). For example:\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n```\n\nIt is also possible to instantiate [RandomState](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") directly:\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n```\n\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\n\nThere are several constructors for [RandomState](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") with different ways to supply seeds.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#convenience-wrappers)Convenience wrappers\nFor convenience, both new-type wrappers and type aliases are provided.\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\n\nThis avoids the need to type \u201cRandomState\u201d. (For convenience `From`, `Into`, and `Deref` are provided).\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#aliases)Aliases\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` , the type aliases [HashMap](https://docs.rs/ahash/latest/ahash/type.HashMap.html \"type ahash::HashMap\"), [HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\") are provided.\n```\nuse ahash::{HashMap, HashMapExt};\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\n\nNote the import of [HashMapExt](https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html \"trait ahash::HashMapExt\"). This is needed for the constructor.\n## Re-exports[\u00a7](https://docs.rs/ahash/latest/ahash/#reexports)\n\n`pub use crate::random_state::RandomState[](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\");`\n\n## Modules[\u00a7](https://docs.rs/ahash/latest/ahash/#modules)\n\n[random_state](https://docs.rs/ahash/latest/ahash/random_state/index.html \"mod ahash::random_state\")\n\n## Structs[\u00a7](https://docs.rs/ahash/latest/ahash/#structs)\n\n[AHashMap](https://docs.rs/ahash/latest/ahash/struct.AHashMap.html \"struct ahash::AHashMap\")\n    A [`HashMap`](https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html \"struct std::collections::hash::map::HashMap\") using [`RandomState`](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") to hash the items. (Requires the `std` feature to be enabled.)\n\n[AHashSet](https://docs.rs/ahash/latest/ahash/struct.AHashSet.html \"struct ahash::AHashSet\")\n    A [`HashSet`](https://doc.rust-lang.org/nightly/std/collections/hash/set/struct.HashSet.html \"struct std::collections::hash::set::HashSet\") using [`RandomState`](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") to hash the items. (Requires the `std` feature to be enabled.)\n\n[AHasher](https://docs.rs/ahash/latest/ahash/struct.AHasher.html \"struct ahash::AHasher\")\n    A `Hasher` for hashing an arbitrary stream of bytes.\n## Traits[\u00a7](https://docs.rs/ahash/latest/ahash/#traits)\n\n[HashMapExt](https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html \"trait ahash::HashMapExt\")\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashMap type alias.\n\n[HashSetExt](https://docs.rs/ahash/latest/ahash/trait.HashSetExt.html \"trait ahash::HashSetExt\")\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.\n## Type Aliases[\u00a7](https://docs.rs/ahash/latest/ahash/#types)\n\n[HashMap](https://docs.rs/ahash/latest/ahash/type.HashMap.html \"type ahash::HashMap\")\n    Type alias for [HashMap](https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html \"struct std::collections::hash::map::HashMap\")<K, V, ahash::RandomState>\n\n[HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\")\n    Type alias for [HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\")<K, ahash::RandomState>\n",
              "markdown_with_citations": "[](https://docs.rs/ahash/latest/ahash/all.html \"show sidebar\")\n# Crate ahashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAHash is a high performance keyed hash function.\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key. AHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can induce a collision.\n## \u00a7\u27e84\u27e9How aHash works\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function. When it is not, aHash falls back on a slightly slower alternative algorithm.\nBecause aHash does not have a fixed standard for its output, it is able to improve over time. But this also means that different computers or computers using different versions of ahash may observe different hash values for the same input.\n## \u00a7\u27e85\u27e9Basic Usage\nAHash provides an implementation of the [Hasher] trait. To construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n#### \u00a7\u27e86\u27e9Randomness\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS. It is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n#### \u00a7\u27e87\u27e9If randomness is not available\nAHasher::default()\u27e88\u27e9 can be used to hash using fixed keys. This works with BuildHasherDefault\u27e89\u27e9. For example:\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n```\n\nIt is also possible to instantiate RandomState\u27e810\u27e9 directly:\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n```\n\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\n\nThere are several constructors for RandomState\u27e810\u27e9 with different ways to supply seeds.\n## \u00a7\u27e811\u27e9Convenience wrappers\nFor convenience, both new-type wrappers and type aliases are provided.\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\n\nThis avoids the need to type \u201cRandomState\u201d. (For convenience `From`, `Into`, and `Deref` are provided).\n## \u00a7\u27e812\u27e9Aliases\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` , the type aliases HashMap\u27e813\u27e9, HashSet\u27e814\u27e9 are provided.\n```\nuse ahash::{HashMap, HashMapExt};\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\n\nNote the import of HashMapExt\u27e815\u27e9. This is needed for the constructor.\n## Re-exports\u00a7\u27e816\u27e9\n\n`pub use crate::random_state::RandomState[](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\");`\n\n## Modules\u00a7\u27e817\u27e9\n\nrandom_state\u27e818\u27e9\n\n## Structs\u00a7\u27e819\u27e9\n\nAHashMap\u27e820\u27e9\n    A `HashMap`\u27e821\u27e9 using `RandomState`\u27e810\u27e9 to hash the items. (Requires the `std` feature to be enabled.)\n\nAHashSet\u27e822\u27e9\n    A `HashSet`\u27e823\u27e9 using `RandomState`\u27e810\u27e9 to hash the items. (Requires the `std` feature to be enabled.)\n\nAHasher\u27e824\u27e9\n    A `Hasher` for hashing an arbitrary stream of bytes.\n## Traits\u00a7\u27e825\u27e9\n\nHashMapExt\u27e815\u27e9\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashMap type alias.\n\nHashSetExt\u27e826\u27e9\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.\n## Type Aliases\u00a7\u27e827\u27e9\n\nHashMap\u27e813\u27e9\n    Type alias for HashMap\u27e821\u27e9<K, V, ahash::RandomState>\n\nHashSet\u27e814\u27e9\n    Type alias for HashSet\u27e814\u27e9<K, ahash::RandomState>\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ahash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ahash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ahash/latest/src/ahash/lib.rs.html#1-358: Source\n\u27e84\u27e9 https://docs.rs/ahash/latest/ahash/#how-ahash-works: \u00a7\n\u27e85\u27e9 https://docs.rs/ahash/latest/ahash/#basic-usage: \u00a7\n\u27e86\u27e9 https://docs.rs/ahash/latest/ahash/#randomness: \u00a7\n\u27e87\u27e9 https://docs.rs/ahash/latest/ahash/#if-randomness-is-not-available: \u00a7\n\u27e88\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHasher.html#method.default: associated function ahash::AHasher::default - AHasher::default()\n\u27e89\u27e9 https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html: struct core::hash::BuildHasherDefault - BuildHasherDefault\n\u27e810\u27e9 https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html: struct ahash::random_state::RandomState - RandomState\n\u27e811\u27e9 https://docs.rs/ahash/latest/ahash/#convenience-wrappers: \u00a7\n\u27e812\u27e9 https://docs.rs/ahash/latest/ahash/#aliases: \u00a7\n\u27e813\u27e9 https://docs.rs/ahash/latest/ahash/type.HashMap.html: type ahash::HashMap - HashMap\n\u27e814\u27e9 https://docs.rs/ahash/latest/ahash/type.HashSet.html: type ahash::HashSet - HashSet\n\u27e815\u27e9 https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html: trait ahash::HashMapExt - HashMapExt\n\u27e816\u27e9 https://docs.rs/ahash/latest/ahash/#reexports: \u00a7\n\u27e817\u27e9 https://docs.rs/ahash/latest/ahash/#modules: \u00a7\n\u27e818\u27e9 https://docs.rs/ahash/latest/ahash/random_state/index.html: mod ahash::random_state - random_state\n\u27e819\u27e9 https://docs.rs/ahash/latest/ahash/#structs: \u00a7\n\u27e820\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHashMap.html: struct ahash::AHashMap - AHashMap\n\u27e821\u27e9 https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html: struct std::collections::hash::map::HashMap - `HashMap`\n\u27e822\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHashSet.html: struct ahash::AHashSet - AHashSet\n\u27e823\u27e9 https://doc.rust-lang.org/nightly/std/collections/hash/set/struct.HashSet.html: struct std::collections::hash::set::HashSet - `HashSet`\n\u27e824\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHasher.html: struct ahash::AHasher - AHasher\n\u27e825\u27e9 https://docs.rs/ahash/latest/ahash/#traits: \u00a7\n\u27e826\u27e9 https://docs.rs/ahash/latest/ahash/trait.HashSetExt.html: trait ahash::HashSetExt - HashSetExt\n\u27e827\u27e9 https://docs.rs/ahash/latest/ahash/#types: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6664,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114711.992836"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/ahash",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [19 releases](https://lib.rs/crates/ahash/versions)\n0.8.12 |  May 8, 2025   \n---|---  \n0.8.11 |  Mar 3, 2024   \n0.8.10 |  Feb 27, 2024   \n0.8.7 |  Dec 29, 2023   \n0.1.18 |  ~~Mar 31, 2019~~  \n#**2** in [Algorithms](https://lib.rs/algorithms \"Rust implementations of core algorithms such as hashing, sorting, searching, and more.\")\nDownload history 3725319/week @ 2025-03-10 3953632/week @ 2025-03-17 3942712/week @ 2025-03-24 3399318/week @ 2025-03-31 3602971/week @ 2025-04-07 3275580/week @ 2025-04-14 3164780/week @ 2025-04-21 3000567/week @ 2025-04-28 3133557/week @ 2025-05-05 3385772/week @ 2025-05-12 3371342/week @ 2025-05-19 2934820/week @ 2025-05-26 3220684/week @ 2025-06-02 3364361/week @ 2025-06-09 3643349/week @ 2025-06-16 3407864/week @ 2025-06-23\n**13,785,336** downloads per month Used in [**19,097** crates (994 directly)](https://lib.rs/crates/ahash/rev)\n**MIT/Apache**\n135KB  3K  SLoC\n# aHash ![Build Status](https://img.shields.io/github/actions/workflow/status/tkaitchuck/aHash/rust.yml?branch=master) ![Licence](https://img.shields.io/crates/l/ahash) ![Downloads](https://img.shields.io/crates/d/ahash)\nAHash is the [fastest](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#Speed), [DOS resistant hash](https://github.com/tkaitchuck/aHash/wiki/How-aHash-is-resists-DOS-attacks) currently available in Rust. AHash is intended _exclusively_ for use in in-memory hashmaps.\nAHash's output is of [high quality](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#Quality) but aHash is **not** a cryptographically secure hash.\n## Design\nBecause AHash is a keyed hash, each map will produce completely different hashes, which cannot be predicted without knowing the keys. [This prevents DOS attacks where an attacker sends a large number of items whose hashes collide that get used as keys in a hashmap.](https://github.com/tkaitchuck/aHash/wiki/How-aHash-is-resists-DOS-attacks)\nThis also avoids [accidentally quadratic behavior by reading from one map and writing to another.](https://accidentallyquadratic.tumblr.com/post/153545455987/rust-hash-iteration-reinsertion)\n## Goals and Non-Goals\nAHash does _not_ have a fixed standard for its output. This allows it to improve over time. For example, if any faster algorithm is found, aHash will be updated to incorporate the technique. Similarly, should any flaw in aHash's DOS resistance be found, aHash will be changed to correct the flaw.\nBecause it does not have a fixed standard, different computers or computers on different versions of the code will observe different hash values. As such, aHash is not recommended for use other than in-memory maps. Specifically, aHash is not intended for network use or in applications which persist hashed values. (In these cases ``HighwayHash`` would be a better choice)\nAdditionally, aHash is not intended to be cryptographically secure and should not be used as a MAC, or anywhere which requires a cryptographically secure hash. (In these cases ```SHA``-``3``` would be a better choice)\n## Usage\nAHash is a drop in replacement for the default implementation of the ``Hasher`` trait. To construct a ``HashMap`` using aHash as its hasher do the following:\n```\n``use` `ahash`::````{`AHasher`,` RandomState```}```;`\n`use` `std`::```collections`::``HashMap`;`\n`let` `mut` map`:` `HashMap`<``i32`, `i32`, RandomState`>`` `=` `HashMap`::``default`(``)``;`\nmap`.``insert``(``12``,` `34``)``;`\n`\n```\n\nFor convenience, wrappers called ``AHashMap`` and ``AHashSet`` are also provided. These do the same thing with slightly less typing.\n```\n``use` `ahash`::``AHashMap`;`\n`let` `mut` map`:` `AHashMap`<``i32`, `i32``>`` `=` `AHashMap`::``new`(``)``;`\nmap`.``insert``(``12``,` `34``)``;`\nmap`.``insert``(``56``,` `78``)``;`\n`\n```\n\n## Flags\nThe aHash package has the following flags:\n  * ``std``: This enables features which require the standard library. (On by default) This includes providing the utility classes ``AHashMap`` and ``AHashSet``.\n  * ``serde``: Enables ``serde`` support for the utility classes ``AHashMap`` and ``AHashSet``.\n  * ``runtime-rng``: To obtain a seed for Hashers will obtain randomness from the operating system. (On by default) This is done using the [getrandom](https://github.com/rust-random/getrandom) crate.\n  * ``compile-time-rng``: For OS targets without access to a random number generator, ``compile-time-rng`` provides an alternative. If ``getrandom`` is unavailable and ``compile-time-rng`` is enabled, aHash will generate random numbers at compile time and embed them in the binary.\n  * ``nightly-arm-aes``: To use AES instructions on 32-bit ARM, which requires nightly. This is not needed on AArch64. This allows for DOS resistance even if there is no random number generator available at runtime (assuming the compiled binary is not public). This makes the binary non-deterministic. (If non-determinism is a problem see [constrandom's documentation](https://github.com/tkaitchuck/constrandom#deterministic-builds))\n\n\nIf both ``runtime-rng`` and ``compile-time-rng`` are enabled the ``runtime-rng`` will take precedence and ``compile-time-rng`` will do nothing. If neither flag is set, seeds can be supplied by the application. [Multiple apis](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html) are available to do this.\n## Comparison with other hashers\nA full comparison with other hashing algorithms can be found [here](https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md)\n![Hasher performance](https://img.gs/czjpqfbdkz/800/https://docs.google.com/spreadsheets/d/e/2PACX-1vSK7Li2nS-Bur9arAYF9IfT37MP-ohAe1v19lZu5fd9MajI1fSveLAQZyEie4Ea9k5-SWHTff7nL2DW/pubchart?oid=1323618938&format=image)\nFor a more representative performance comparison which includes the overhead of using a HashMap, see [HashBrown's benchmarks](https://github.com/rust-lang/hashbrown#performance) as HashBrown now uses aHash as its hasher by default.\n## Hash quality\nAHash passes the full [SMHasher test suite](https://github.com/rurban/smhasher).\nThe code to reproduce the result, and the full output [are checked into the repo](https://github.com/tkaitchuck/aHash/tree/master/smhasher).\n## Additional FAQ\nA separate FAQ document is maintained [here](https://github.com/tkaitchuck/aHash/blob/master/FAQ.md). If you have questions not covered there, open an issue [here](https://github.com/tkaitchuck/aHash/issues).\n## License\nLicensed under either of:\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/tkaitchuck/ahash/blob/9aa1ba20f05ed582eda04ea625d5658c92195a57/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/tkaitchuck/ahash/blob/9aa1ba20f05ed582eda04ea625d5658c92195a57/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0.6\u20131.4MB  ~21K SLoC\n  * [cfg-if](https://lib.rs/crates/cfg-if \"1.0\")\n  * [compile-time-rng?](https://lib.rs/crates/ahash/features#feature-compile-time-rng \"optional feature\") [const-random](https://lib.rs/crates/const-random \"0.1.17\")\n  * [runtime-rng](https://lib.rs/crates/ahash/features#feature-runtime-rng \"default feature\") [getrandom](https://lib.rs/crates/getrandom \"new\") 0.3.1\n  * [once_cell](https://lib.rs/crates/once_cell \"1.18.0\")[+alloc](https://lib.rs/crates/once_cell/features#feature-alloc) not arm not none\n  * [atomic-polyfill?](https://lib.rs/crates/ahash/features#feature-atomic-polyfill \"optional feature\") [portable-atomic](https://lib.rs/crates/portable-atomic \"1.0.0\")\n  * [ optional ](https://lib.rs/crates/ahash/features#feature-serde \"serde is optional feature\") [serde](https://lib.rs/crates/serde \"1.0.117\")\n  * [zerocopy](https://lib.rs/crates/zerocopy \"0.8.24\")[+simd](https://lib.rs/crates/zerocopy/features#feature-simd)\n\n\n  * build `build.rs`\n  * build  [version_check](https://lib.rs/crates/version_check \"0.9.4\")\n  * dev  [criterion](https://lib.rs/crates/criterion \"obsolete\") 0.3.2[+html_reports](https://lib.rs/crates/criterion/features#feature-html_reports)\n  * dev  [fnv](https://lib.rs/crates/fnv \"1.0.5\")\n  * dev  [fxhash](https://lib.rs/crates/fxhash \"0.2.1\")\n  * dev  [hashbrown](https://lib.rs/crates/hashbrown \"obsolete\") 0.14.3\n  * dev  [hex](https://lib.rs/crates/hex \"0.4.2\")\n  * dev  [no-panic](https://lib.rs/crates/no-panic \"0.1.10\")\n  * dev  [pcg-mwc](https://lib.rs/crates/pcg-mwc \"0.2.1\")\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8.5\n  * dev  [seahash](https://lib.rs/crates/seahash \"4.0\")\n  * dev  [serde_json](https://lib.rs/crates/serde_json \"1.0.59\")\n  * dev  [smallvec](https://lib.rs/crates/smallvec \"1.13.1\")\n\n\n#### [Other features](https://lib.rs/crates/ahash/features)\n  * [nightly-arm-aes](https://lib.rs/crates/ahash/features#feature-nightly-arm-aes)\n  * [no-rng](https://lib.rs/crates/ahash/features#feature-no-rng)\n  * [std](https://lib.rs/crates/ahash/features#feature-std)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  19 releases\u27e81\u27e9\n0.8.12 |  May 8, 2025   \n---|---  \n0.8.11 |  Mar 3, 2024   \n0.8.10 |  Feb 27, 2024   \n0.8.7 |  Dec 29, 2023   \n0.1.18 |  ~~Mar 31, 2019~~  \n#**2** in Algorithms\u27e82\u27e9\nDownload history 3725319/week @ 2025-03-10 3953632/week @ 2025-03-17 3942712/week @ 2025-03-24 3399318/week @ 2025-03-31 3602971/week @ 2025-04-07 3275580/week @ 2025-04-14 3164780/week @ 2025-04-21 3000567/week @ 2025-04-28 3133557/week @ 2025-05-05 3385772/week @ 2025-05-12 3371342/week @ 2025-05-19 2934820/week @ 2025-05-26 3220684/week @ 2025-06-02 3364361/week @ 2025-06-09 3643349/week @ 2025-06-16 3407864/week @ 2025-06-23\n**13,785,336** downloads per month Used in **19,097** crates (994 directly)\u27e83\u27e9\n**MIT/Apache**\n135KB  3K  SLoC\n# aHash ![Build Status\u27e84\u27e9] ![Licence\u27e85\u27e9] ![Downloads\u27e86\u27e9]\nAHash is the fastest\u27e87\u27e9, DOS resistant hash\u27e88\u27e9 currently available in Rust. AHash is intended _exclusively_ for use in in-memory hashmaps.\nAHash's output is of high quality\u27e89\u27e9 but aHash is **not** a cryptographically secure hash.\n## Design\nBecause AHash is a keyed hash, each map will produce completely different hashes, which cannot be predicted without knowing the keys. This prevents DOS attacks where an attacker sends a large number of items whose hashes collide that get used as keys in a hashmap.\u27e88\u27e9\nThis also avoids accidentally quadratic behavior by reading from one map and writing to another.\u27e810\u27e9\n## Goals and Non-Goals\nAHash does _not_ have a fixed standard for its output. This allows it to improve over time. For example, if any faster algorithm is found, aHash will be updated to incorporate the technique. Similarly, should any flaw in aHash's DOS resistance be found, aHash will be changed to correct the flaw.\nBecause it does not have a fixed standard, different computers or computers on different versions of the code will observe different hash values. As such, aHash is not recommended for use other than in-memory maps. Specifically, aHash is not intended for network use or in applications which persist hashed values. (In these cases ``HighwayHash`` would be a better choice)\nAdditionally, aHash is not intended to be cryptographically secure and should not be used as a MAC, or anywhere which requires a cryptographically secure hash. (In these cases ```SHA``-``3``` would be a better choice)\n## Usage\nAHash is a drop in replacement for the default implementation of the ``Hasher`` trait. To construct a ``HashMap`` using aHash as its hasher do the following:\n```\n``use` `ahash`::````{`AHasher`,` RandomState```}```;`\n`use` `std`::```collections`::``HashMap`;`\n`let` `mut` map`:` `HashMap`<``i32`, `i32`, RandomState`>`` `=` `HashMap`::``default`(``)``;`\nmap`.``insert``(``12``,` `34``)``;`\n`\n```\n\nFor convenience, wrappers called ``AHashMap`` and ``AHashSet`` are also provided. These do the same thing with slightly less typing.\n```\n``use` `ahash`::``AHashMap`;`\n`let` `mut` map`:` `AHashMap`<``i32`, `i32``>`` `=` `AHashMap`::``new`(``)``;`\nmap`.``insert``(``12``,` `34``)``;`\nmap`.``insert``(``56``,` `78``)``;`\n`\n```\n\n## Flags\nThe aHash package has the following flags:\n  * ``std``: This enables features which require the standard library. (On by default) This includes providing the utility classes ``AHashMap`` and ``AHashSet``.\n  * ``serde``: Enables ``serde`` support for the utility classes ``AHashMap`` and ``AHashSet``.\n  * ``runtime-rng``: To obtain a seed for Hashers will obtain randomness from the operating system. (On by default) This is done using the getrandom\u27e811\u27e9 crate.\n  * ``compile-time-rng``: For OS targets without access to a random number generator, ``compile-time-rng`` provides an alternative. If ``getrandom`` is unavailable and ``compile-time-rng`` is enabled, aHash will generate random numbers at compile time and embed them in the binary.\n  * ``nightly-arm-aes``: To use AES instructions on 32-bit ARM, which requires nightly. This is not needed on AArch64. This allows for DOS resistance even if there is no random number generator available at runtime (assuming the compiled binary is not public). This makes the binary non-deterministic. (If non-determinism is a problem see constrandom's documentation\u27e812\u27e9)\n\n\nIf both ``runtime-rng`` and ``compile-time-rng`` are enabled the ``runtime-rng`` will take precedence and ``compile-time-rng`` will do nothing. If neither flag is set, seeds can be supplied by the application. Multiple apis\u27e813\u27e9 are available to do this.\n## Comparison with other hashers\nA full comparison with other hashing algorithms can be found here\u27e814\u27e9\n![Hasher performance\u27e815\u27e9]\nFor a more representative performance comparison which includes the overhead of using a HashMap, see HashBrown's benchmarks\u27e816\u27e9 as HashBrown now uses aHash as its hasher by default.\n## Hash quality\nAHash passes the full SMHasher test suite\u27e817\u27e9.\nThe code to reproduce the result, and the full output are checked into the repo\u27e818\u27e9.\n## Additional FAQ\nA separate FAQ document is maintained here\u27e819\u27e9. If you have questions not covered there, open an issue here\u27e820\u27e9.\n## License\nLicensed under either of:\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e821\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e822\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0.6\u20131.4MB  ~21K SLoC\n  * cfg-if\u27e823\u27e9\n  * compile-time-rng?\u27e824\u27e9 const-random\u27e825\u27e9\n  * runtime-rng\u27e826\u27e9 getrandom\u27e827\u27e9 0.3.1\n  * once_cell\u27e828\u27e9+alloc\u27e829\u27e9 not arm not none\n  * atomic-polyfill?\u27e830\u27e9 portable-atomic\u27e831\u27e9\n  *  optional \u27e832\u27e9 serde\u27e833\u27e9\n  * zerocopy\u27e834\u27e9+simd\u27e835\u27e9\n\n\n  * build `build.rs`\n  * build  version_check\u27e836\u27e9\n  * dev  criterion\u27e837\u27e9 0.3.2+html_reports\u27e838\u27e9\n  * dev  fnv\u27e839\u27e9\n  * dev  fxhash\u27e840\u27e9\n  * dev  hashbrown\u27e841\u27e9 0.14.3\n  * dev  hex\u27e842\u27e9\n  * dev  no-panic\u27e843\u27e9\n  * dev  pcg-mwc\u27e844\u27e9\n  * dev  rand\u27e845\u27e9 0.8.5\n  * dev  seahash\u27e846\u27e9\n  * dev  serde_json\u27e847\u27e9\n  * dev  smallvec\u27e848\u27e9\n\n\n#### Other features\u27e849\u27e9\n  * nightly-arm-aes\u27e850\u27e9\n  * no-rng\u27e851\u27e9\n  * std\u27e852\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/ahash/versions: 19 releases\n\u27e82\u27e9 https://lib.rs/algorithms: Rust implementations of core algorithms such as hashing, sorting, searching, and more. - Algorithms\n\u27e83\u27e9 https://lib.rs/crates/ahash/rev: **19,097** crates (994 directly)\n\u27e84\u27e9 https://img.shields.io/github/actions/workflow/status/tkaitchuck/aHash/rust.yml?branch=master: Build Status\n\u27e85\u27e9 https://img.shields.io/crates/l/ahash: Licence\n\u27e86\u27e9 https://img.shields.io/crates/d/ahash: Downloads\n\u27e87\u27e9 https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#Speed: fastest\n\u27e88\u27e9 https://github.com/tkaitchuck/aHash/wiki/How-aHash-is-resists-DOS-attacks: DOS resistant hash\n\u27e89\u27e9 https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md#Quality: high quality\n\u27e810\u27e9 https://accidentallyquadratic.tumblr.com/post/153545455987/rust-hash-iteration-reinsertion: accidentally quadratic behavior by reading from one map and writing to another.\n\u27e811\u27e9 https://github.com/rust-random/getrandom: getrandom\n\u27e812\u27e9 https://github.com/tkaitchuck/constrandom#deterministic-builds: constrandom's documentation\n\u27e813\u27e9 https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html: Multiple apis\n\u27e814\u27e9 https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md: here\n\u27e815\u27e9 https://img.gs/czjpqfbdkz/800/https://docs.google.com/spreadsheets/d/e/2PACX-1vSK7Li2nS-Bur9arAYF9IfT37MP-ohAe1v19lZu5fd9MajI1fSveLAQZyEie4Ea9k5-SWHTff7nL2DW/pubchart?oid=1323618938&format=image: Hasher performance\n\u27e816\u27e9 https://github.com/rust-lang/hashbrown#performance: HashBrown's benchmarks\n\u27e817\u27e9 https://github.com/rurban/smhasher: SMHasher test suite\n\u27e818\u27e9 https://github.com/tkaitchuck/aHash/tree/master/smhasher: are checked into the repo\n\u27e819\u27e9 https://github.com/tkaitchuck/aHash/blob/master/FAQ.md: here\n\u27e820\u27e9 https://github.com/tkaitchuck/aHash/issues: here\n\u27e821\u27e9 https://github.com/tkaitchuck/ahash/blob/9aa1ba20f05ed582eda04ea625d5658c92195a57/LICENSE-APACHE: LICENSE-APACHE\n\u27e822\u27e9 https://github.com/tkaitchuck/ahash/blob/9aa1ba20f05ed582eda04ea625d5658c92195a57/LICENSE-MIT: LICENSE-MIT\n\u27e823\u27e9 https://lib.rs/crates/cfg-if: 1.0 - cfg-if\n\u27e824\u27e9 https://lib.rs/crates/ahash/features#feature-compile-time-rng: optional feature - compile-time-rng?\n\u27e825\u27e9 https://lib.rs/crates/const-random: 0.1.17 - const-random\n\u27e826\u27e9 https://lib.rs/crates/ahash/features#feature-runtime-rng: default feature - runtime-rng\n\u27e827\u27e9 https://lib.rs/crates/getrandom: new - getrandom\n\u27e828\u27e9 https://lib.rs/crates/once_cell: 1.18.0 - once_cell\n\u27e829\u27e9 https://lib.rs/crates/once_cell/features#feature-alloc: +alloc\n\u27e830\u27e9 https://lib.rs/crates/ahash/features#feature-atomic-polyfill: optional feature - atomic-polyfill?\n\u27e831\u27e9 https://lib.rs/crates/portable-atomic: 1.0.0 - portable-atomic\n\u27e832\u27e9 https://lib.rs/crates/ahash/features#feature-serde: serde is optional feature -  optional \n\u27e833\u27e9 https://lib.rs/crates/serde: 1.0.117 - serde\n\u27e834\u27e9 https://lib.rs/crates/zerocopy: 0.8.24 - zerocopy\n\u27e835\u27e9 https://lib.rs/crates/zerocopy/features#feature-simd: +simd\n\u27e836\u27e9 https://lib.rs/crates/version_check: 0.9.4 - version_check\n\u27e837\u27e9 https://lib.rs/crates/criterion: obsolete - criterion\n\u27e838\u27e9 https://lib.rs/crates/criterion/features#feature-html_reports: +html_reports\n\u27e839\u27e9 https://lib.rs/crates/fnv: 1.0.5 - fnv\n\u27e840\u27e9 https://lib.rs/crates/fxhash: 0.2.1 - fxhash\n\u27e841\u27e9 https://lib.rs/crates/hashbrown: obsolete - hashbrown\n\u27e842\u27e9 https://lib.rs/crates/hex: 0.4.2 - hex\n\u27e843\u27e9 https://lib.rs/crates/no-panic: 0.1.10 - no-panic\n\u27e844\u27e9 https://lib.rs/crates/pcg-mwc: 0.2.1 - pcg-mwc\n\u27e845\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e846\u27e9 https://lib.rs/crates/seahash: 4.0 - seahash\n\u27e847\u27e9 https://lib.rs/crates/serde_json: 1.0.59 - serde_json\n\u27e848\u27e9 https://lib.rs/crates/smallvec: 1.13.1 - smallvec\n\u27e849\u27e9 https://lib.rs/crates/ahash/features: Other features\n\u27e850\u27e9 https://lib.rs/crates/ahash/features#feature-nightly-arm-aes: nightly-arm-aes\n\u27e851\u27e9 https://lib.rs/crates/ahash/features#feature-no-rng: no-rng\n\u27e852\u27e9 https://lib.rs/crates/ahash/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 9194,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114712.531163"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "race"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libonce_cell-d68531698784d033.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.26\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\zerocopy-feb6fbffbb72158c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\zerocopy-feb6fbffbb72158c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\getrandom-5a25910c6077e814\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\getrandom-5a25910c6077e814\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "getrandom",
                "runtime-rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\ahash-df0a828e953a0098\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\ahash-df0a828e953a0098\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "zerocopy_aarch64_simd_1_59_0",
                "zerocopy_core_error_1_81_0",
                "zerocopy_diagnostic_on_unimplemented_1_78_0",
                "zerocopy_generic_bounds_in_const_fn_1_61_0",
                "zerocopy_panic_in_const_and_vec_try_reserve_1_57_0",
                "zerocopy_target_has_atomics_1_60_0"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\zerocopy-5ad97868b2c01c25\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\getrandom-fe3694f2bbc7b528\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "folded_multiply"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\ahash-819985c89014f19f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libgetrandom-b7c4f4f42c458afb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.26\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libzerocopy-8daad30d8de83013.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition value: `128`\n   --> src\\fallback_hash.rs:164:11\n    |\n164 |     #[cfg(target_pointer_width = \"128\")]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "expected values for `target_pointer_width` are: `16`, `32`, and `64`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition value: `128`",
                "spans": [
                  {
                    "byte_end": 6863,
                    "byte_start": 6835,
                    "column_end": 39,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\fallback_hash.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 11,
                        "text": "    #[cfg(target_pointer_width = \"128\")]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `fuzzing`\n  --> src\\random_state.rs:48:58\n   |\n48 |     if #[cfg(all(feature = \"compile-time-rng\", any(test, fuzzing)))] {\n   |                                                          ^^^^^^^\n   |\n   = help: expected names are: `docsrs`, `feature`, `folded_multiply`, `specialize`, and `test` and 31 more\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, `folded_multiply`, `specialize`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `fuzzing`",
                "spans": [
                  {
                    "byte_end": 1259,
                    "byte_start": 1252,
                    "column_end": 65,
                    "column_start": 58,
                    "expansion": null,
                    "file_name": "src\\random_state.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 58,
                        "text": "    if #[cfg(all(feature = \"compile-time-rng\", any(test, fuzzing)))] {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `fuzzing`\n  --> src\\random_state.rs:68:54\n   |\n68 |     } else if #[cfg(all(feature = \"runtime-rng\", not(fuzzing)))] {\n   |                                                      ^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `fuzzing`",
                "spans": [
                  {
                    "byte_end": 1908,
                    "byte_start": 1901,
                    "column_end": 61,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "src\\random_state.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 68,
                    "line_start": 68,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 54,
                        "text": "    } else if #[cfg(all(feature = \"runtime-rng\", not(fuzzing)))] {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: methods `read_u128x2`, `read_u128x4`, `read_last_u16`, `read_last_u128x2`, and `read_last_u128x4` are never used\n  --> src\\convert.rs:69:8\n   |\n64 | pub(crate) trait ReadFromSlice {\n   |                  ------------- methods in this trait\n...\n69 |     fn read_u128x2(&self) -> ([u128; 2], &[u8]);\n   |        ^^^^^^^^^^^\n70 |     fn read_u128x4(&self) -> ([u128; 4], &[u8]);\n   |        ^^^^^^^^^^^\n71 |     fn read_last_u16(&self) -> u16;\n   |        ^^^^^^^^^^^^^\n...\n75 |     fn read_last_u128x2(&self) -> [u128; 2];\n   |        ^^^^^^^^^^^^^^^^\n76 |     fn read_last_u128x4(&self) -> [u128; 4];\n   |        ^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(dead_code)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "dead_code",
                  "explanation": null
                },
                "level": "warning",
                "message": "methods `read_u128x2`, `read_u128x4`, `read_last_u16`, `read_last_u128x2`, and `read_last_u128x4` are never used",
                "spans": [
                  {
                    "byte_end": 1559,
                    "byte_start": 1546,
                    "column_end": 31,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": false,
                    "label": "methods in this trait",
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 18,
                        "text": "pub(crate) trait ReadFromSlice {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1742,
                    "byte_start": 1731,
                    "column_end": 19,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 69,
                    "line_start": 69,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 8,
                        "text": "    fn read_u128x2(&self) -> ([u128; 2], &[u8]);"
                      }
                    ]
                  },
                  {
                    "byte_end": 1791,
                    "byte_start": 1780,
                    "column_end": 19,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 70,
                    "line_start": 70,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 8,
                        "text": "    fn read_u128x4(&self) -> ([u128; 4], &[u8]);"
                      }
                    ]
                  },
                  {
                    "byte_end": 1842,
                    "byte_start": 1829,
                    "column_end": 21,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 8,
                        "text": "    fn read_last_u16(&self) -> u16;"
                      }
                    ]
                  },
                  {
                    "byte_end": 1991,
                    "byte_start": 1975,
                    "column_end": 24,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 8,
                        "text": "    fn read_last_u128x2(&self) -> [u128; 2];"
                      }
                    ]
                  },
                  {
                    "byte_end": 2036,
                    "byte_start": 2020,
                    "column_end": 24,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 76,
                    "line_start": 76,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 8,
                        "text": "    fn read_last_u128x4(&self) -> [u128; 4];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "getrandom",
                "runtime-rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libahash-5444a478b81a9cd8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\getrandom-5a25910c6077e814\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\getrandom-5a25910c6077e814\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.26\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\zerocopy-feb6fbffbb72158c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\zerocopy-feb6fbffbb72158c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "race"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libonce_cell-d68531698784d033.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\getrandom-fe3694f2bbc7b528\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "zerocopy_aarch64_simd_1_59_0",
                "zerocopy_core_error_1_81_0",
                "zerocopy_diagnostic_on_unimplemented_1_78_0",
                "zerocopy_generic_bounds_in_const_fn_1_61_0",
                "zerocopy_panic_in_const_and_vec_try_reserve_1_57_0",
                "zerocopy_target_has_atomics_1_60_0"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\zerocopy-5ad97868b2c01c25\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.26\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libzerocopy-8daad30d8de83013.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\deps\\libgetrandom-b7c4f4f42c458afb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "getrandom",
                "runtime-rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\ahash-007f8f563b91e25b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\ahash-007f8f563b91e25b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "folded_multiply"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\target\\debug\\build\\ahash-c28a5972ce478d5b\\out"
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unneeded sub `cfg` when there is only one condition\n   --> src\\specialize.rs:122:7\n    |\n122 | #[cfg(all(specialize))]\n    |       ^^^^^^^^^^^^^^^ help: try: `specialize`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n    = note: `#[warn(clippy::non_minimal_cfg)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_minimal_cfg)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3247,
                        "byte_start": 3232,
                        "column_end": 22,
                        "column_start": 7,
                        "expansion": null,
                        "file_name": "src\\specialize.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 122,
                        "line_start": 122,
                        "suggested_replacement": "specialize",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 7,
                            "text": "#[cfg(all(specialize))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_minimal_cfg",
                  "explanation": null
                },
                "level": "warning",
                "message": "unneeded sub `cfg` when there is only one condition",
                "spans": [
                  {
                    "byte_end": 3247,
                    "byte_start": 3232,
                    "column_end": 22,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\specialize.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 122,
                    "line_start": 122,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 7,
                        "text": "#[cfg(all(specialize))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition value: `128`\n   --> src\\fallback_hash.rs:164:11\n    |\n164 |     #[cfg(target_pointer_width = \"128\")]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "expected values for `target_pointer_width` are: `16`, `32`, and `64`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition value: `128`",
                "spans": [
                  {
                    "byte_end": 6863,
                    "byte_start": 6835,
                    "column_end": 39,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\fallback_hash.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 11,
                        "text": "    #[cfg(target_pointer_width = \"128\")]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\hash_map.rs:102:16\n    |\n102 |     pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n    |                ^\n...\n105 |         Q: Hash + Eq,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n    = note: `#[warn(clippy::multiple_bound_locations)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::multiple_bound_locations)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 2942,
                    "byte_start": 2941,
                    "column_end": 17,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 102,
                    "line_start": 102,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 16,
                        "text": "    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>"
                      }
                    ]
                  },
                  {
                    "byte_end": 3021,
                    "byte_start": 3020,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 105,
                    "line_start": 105,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        Q: Hash + Eq,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\hash_map.rs:127:26\n    |\n127 |     pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>\n    |                          ^\n...\n130 |         Q: Hash + Eq,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 3640,
                    "byte_start": 3639,
                    "column_end": 27,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 127,
                    "line_start": 127,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 26,
                        "text": "    pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>"
                      }
                    ]
                  },
                  {
                    "byte_end": 3725,
                    "byte_start": 3724,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 130,
                    "line_start": 130,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        Q: Hash + Eq,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\hash_map.rs:154:20\n    |\n154 |     pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>\n    |                    ^\n...\n157 |         Q: Hash + Eq,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 4343,
                    "byte_start": 4342,
                    "column_end": 21,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 154,
                    "line_start": 154,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 20,
                        "text": "    pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>"
                      }
                    ]
                  },
                  {
                    "byte_end": 4430,
                    "byte_start": 4429,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 157,
                    "line_start": 157,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        Q: Hash + Eq,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\hash_map.rs:269:19\n    |\n269 |     pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>\n    |                   ^\n...\n272 |         Q: Hash + Eq,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 7859,
                    "byte_start": 7858,
                    "column_end": 20,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 269,
                    "line_start": 269,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 19,
                        "text": "    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>"
                      }
                    ]
                  },
                  {
                    "byte_end": 7941,
                    "byte_start": 7940,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 272,
                    "line_start": 272,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        Q: Hash + Eq,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `fuzzing`\n  --> src\\random_state.rs:48:58\n   |\n48 |     if #[cfg(all(feature = \"compile-time-rng\", any(test, fuzzing)))] {\n   |                                                          ^^^^^^^\n   |\n   = help: expected names are: `docsrs`, `feature`, `folded_multiply`, `specialize`, and `test` and 31 more\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, `folded_multiply`, `specialize`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `fuzzing`",
                "spans": [
                  {
                    "byte_end": 1259,
                    "byte_start": 1252,
                    "column_end": 65,
                    "column_start": 58,
                    "expansion": null,
                    "file_name": "src\\random_state.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 58,
                        "text": "    if #[cfg(all(feature = \"compile-time-rng\", any(test, fuzzing)))] {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `fuzzing`\n  --> src\\random_state.rs:68:54\n   |\n68 |     } else if #[cfg(all(feature = \"runtime-rng\", not(fuzzing)))] {\n   |                                                      ^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(fuzzing)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(fuzzing)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `fuzzing`",
                "spans": [
                  {
                    "byte_end": 1908,
                    "byte_start": 1901,
                    "column_end": 61,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "src\\random_state.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 68,
                    "line_start": 68,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 54,
                        "text": "    } else if #[cfg(all(feature = \"runtime-rng\", not(fuzzing)))] {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: methods `read_u128x2`, `read_u128x4`, `read_last_u16`, `read_last_u128x2`, and `read_last_u128x4` are never used\n  --> src\\convert.rs:69:8\n   |\n64 | pub(crate) trait ReadFromSlice {\n   |                  ------------- methods in this trait\n...\n69 |     fn read_u128x2(&self) -> ([u128; 2], &[u8]);\n   |        ^^^^^^^^^^^\n70 |     fn read_u128x4(&self) -> ([u128; 4], &[u8]);\n   |        ^^^^^^^^^^^\n71 |     fn read_last_u16(&self) -> u16;\n   |        ^^^^^^^^^^^^^\n...\n75 |     fn read_last_u128x2(&self) -> [u128; 2];\n   |        ^^^^^^^^^^^^^^^^\n76 |     fn read_last_u128x4(&self) -> [u128; 4];\n   |        ^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(dead_code)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "dead_code",
                  "explanation": null
                },
                "level": "warning",
                "message": "methods `read_u128x2`, `read_u128x4`, `read_last_u16`, `read_last_u128x2`, and `read_last_u128x4` are never used",
                "spans": [
                  {
                    "byte_end": 1559,
                    "byte_start": 1546,
                    "column_end": 31,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": false,
                    "label": "methods in this trait",
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 18,
                        "text": "pub(crate) trait ReadFromSlice {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1742,
                    "byte_start": 1731,
                    "column_end": 19,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 69,
                    "line_start": 69,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 8,
                        "text": "    fn read_u128x2(&self) -> ([u128; 2], &[u8]);"
                      }
                    ]
                  },
                  {
                    "byte_end": 1791,
                    "byte_start": 1780,
                    "column_end": 19,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 70,
                    "line_start": 70,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 8,
                        "text": "    fn read_u128x4(&self) -> ([u128; 4], &[u8]);"
                      }
                    ]
                  },
                  {
                    "byte_end": 1842,
                    "byte_start": 1829,
                    "column_end": 21,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 8,
                        "text": "    fn read_last_u16(&self) -> u16;"
                      }
                    ]
                  },
                  {
                    "byte_end": 1991,
                    "byte_start": 1975,
                    "column_end": 24,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 8,
                        "text": "    fn read_last_u128x2(&self) -> [u128; 2];"
                      }
                    ]
                  },
                  {
                    "byte_end": 2036,
                    "byte_start": 2020,
                    "column_end": 24,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "src\\convert.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 76,
                    "line_start": 76,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 8,
                        "text": "    fn read_last_u128x4(&self) -> [u128; 4];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: casting to the same type is unnecessary (`u64` -> `u64`)\n   --> src\\fallback_hash.rs:145:21\n    |\n145 |         self.update(i as u64);\n    |                     ^^^^^^^^ help: try: `i`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\nnote: the lint level is defined here\n   --> src\\lib.rs:97:30\n    |\n97  | #![deny(clippy::correctness, clippy::complexity, clippy::perf)]\n    |                              ^^^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::unnecessary_cast)]` implied by `#[deny(clippy::complexity)]`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the lint level is defined here",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3078,
                        "byte_start": 3060,
                        "column_end": 48,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 30,
                            "text": "#![deny(clippy::correctness, clippy::complexity, clippy::perf)]"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::unnecessary_cast)]` implied by `#[deny(clippy::complexity)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6480,
                        "byte_start": 6472,
                        "column_end": 29,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\fallback_hash.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 145,
                        "line_start": 145,
                        "suggested_replacement": "i",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 21,
                            "text": "        self.update(i as u64);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_cast",
                  "explanation": null
                },
                "level": "error",
                "message": "casting to the same type is unnecessary (`u64` -> `u64`)",
                "spans": [
                  {
                    "byte_end": 6480,
                    "byte_start": 6472,
                    "column_end": 29,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\fallback_hash.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 145,
                    "line_start": 145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 21,
                        "text": "        self.update(i as u64);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src\\hash_map.rs:47:1\n   |\n47 | impl<K, V> Into<HashMap<K, V, crate::RandomState>> for AHashMap<K, V> {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<hash_map::AHashMap<K, V>>`\n   |\n47 ~ impl<K, V> From<AHashMap<K, V>> for HashMap<K, V, crate::RandomState> {\n48 ~     fn from(val: AHashMap<K, V>) -> Self {\n49 ~         val.0\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "`impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\nhttps://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::from_over_into)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the `Into` implementation with `From<hash_map::AHashMap<K, V>>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1250,
                        "byte_start": 1246,
                        "column_end": 16,
                        "column_start": 12,
                        "expansion": null,
                        "file_name": "src\\hash_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": "From",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 12,
                            "text": "impl<K, V> Into<HashMap<K, V, crate::RandomState>> for AHashMap<K, V> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1284,
                        "byte_start": 1251,
                        "column_end": 50,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "src\\hash_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": "AHashMap<K, V>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 17,
                            "text": "impl<K, V> Into<HashMap<K, V, crate::RandomState>> for AHashMap<K, V> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1304,
                        "byte_start": 1290,
                        "column_end": 70,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\hash_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": "HashMap<K, V, crate::RandomState>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 56,
                            "text": "impl<K, V> Into<HashMap<K, V, crate::RandomState>> for AHashMap<K, V> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1318,
                        "byte_start": 1314,
                        "column_end": 12,
                        "column_start": 8,
                        "expansion": null,
                        "file_name": "src\\hash_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 48,
                        "line_start": 48,
                        "suggested_replacement": "from",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 8,
                            "text": "    fn into(self) -> HashMap<K, V, crate::RandomState> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1323,
                        "byte_start": 1319,
                        "column_end": 17,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\hash_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 48,
                        "line_start": 48,
                        "suggested_replacement": "val: AHashMap<K, V>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 13,
                            "text": "    fn into(self) -> HashMap<K, V, crate::RandomState> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1361,
                        "byte_start": 1328,
                        "column_end": 55,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\hash_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 48,
                        "line_start": 48,
                        "suggested_replacement": "Self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 22,
                            "text": "    fn into(self) -> HashMap<K, V, crate::RandomState> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1376,
                        "byte_start": 1372,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\hash_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 49,
                        "line_start": 49,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "        self.0"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::from_over_into",
                  "explanation": null
                },
                "level": "warning",
                "message": "an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true",
                "spans": [
                  {
                    "byte_end": 1304,
                    "byte_start": 1235,
                    "column_end": 70,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 70,
                        "highlight_start": 1,
                        "text": "impl<K, V> Into<HashMap<K, V, crate::RandomState>> for AHashMap<K, V> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\hash_map.rs:364:9\n    |\n364 |         (&self.0).iter()\n    |         ^^^^^^^^^ help: change this to: `self.0`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9906,
                        "byte_start": 9897,
                        "column_end": 18,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\hash_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 364,
                        "line_start": 364,
                        "suggested_replacement": "self.0",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 9,
                            "text": "        (&self.0).iter()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 9906,
                    "byte_start": 9897,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 364,
                    "line_start": 364,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        (&self.0).iter()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\hash_map.rs:372:9\n    |\n372 |         (&mut self.0).iter_mut()\n    |         ^^^^^^^^^^^^^ help: change this to: `self.0`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10135,
                        "byte_start": 10122,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\hash_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 372,
                        "line_start": 372,
                        "suggested_replacement": "self.0",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut self.0).iter_mut()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 10135,
                    "byte_start": 10122,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\hash_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 372,
                    "line_start": 372,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut self.0).iter_mut()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src\\hash_set.rs:43:1\n   |\n43 | impl<T> Into<HashSet<T, RandomState>> for AHashSet<T> {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\nhelp: replace the `Into` implementation with `From<hash_set::AHashSet<T>>`\n   |\n43 ~ impl<T> From<AHashSet<T>> for HashSet<T, RandomState> {\n44 ~     fn from(val: AHashSet<T>) -> Self {\n45 ~         val.0\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "`impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\nhttps://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the `Into` implementation with `From<hash_set::AHashSet<T>>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1092,
                        "byte_start": 1088,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\hash_set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": "From",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "impl<T> Into<HashSet<T, RandomState>> for AHashSet<T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1116,
                        "byte_start": 1093,
                        "column_end": 37,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\hash_set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": "AHashSet<T>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 14,
                            "text": "impl<T> Into<HashSet<T, RandomState>> for AHashSet<T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1133,
                        "byte_start": 1122,
                        "column_end": 54,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\hash_set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": "HashSet<T, RandomState>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 43,
                            "text": "impl<T> Into<HashSet<T, RandomState>> for AHashSet<T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1147,
                        "byte_start": 1143,
                        "column_end": 12,
                        "column_start": 8,
                        "expansion": null,
                        "file_name": "src\\hash_set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 44,
                        "line_start": 44,
                        "suggested_replacement": "from",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 8,
                            "text": "    fn into(self) -> HashSet<T, RandomState> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1152,
                        "byte_start": 1148,
                        "column_end": 17,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\hash_set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 44,
                        "line_start": 44,
                        "suggested_replacement": "val: AHashSet<T>",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 13,
                            "text": "    fn into(self) -> HashSet<T, RandomState> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1180,
                        "byte_start": 1157,
                        "column_end": 45,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\hash_set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 44,
                        "line_start": 44,
                        "suggested_replacement": "Self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 22,
                            "text": "    fn into(self) -> HashSet<T, RandomState> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1195,
                        "byte_start": 1191,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\hash_set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "        self.0"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::from_over_into",
                  "explanation": null
                },
                "level": "warning",
                "message": "an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true",
                "spans": [
                  {
                    "byte_end": 1133,
                    "byte_start": 1080,
                    "column_end": 54,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\hash_set.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 43,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 1,
                        "text": "impl<T> Into<HashSet<T, RandomState>> for AHashSet<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\hash_set.rs:262:9\n    |\n262 |         (&self.0).iter()\n    |         ^^^^^^^^^ help: change this to: `self.0`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6650,
                        "byte_start": 6641,
                        "column_end": 18,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\hash_set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 262,
                        "line_start": 262,
                        "suggested_replacement": "self.0",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 9,
                            "text": "        (&self.0).iter()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 6650,
                    "byte_start": 6641,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\hash_set.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 262,
                    "line_start": 262,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        (&self.0).iter()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `else { if .. }` block can be collapsed\n  --> src\\operations.rs:43:12\n   |\n43 |       } else {\n   |  ____________^\n44 | |         if data.len() > 0 {\n45 | |             [data[0] as u64, data[0] as u64]\n46 | |         } else {\n...  |\n49 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\n   = note: `#[warn(clippy::collapsible_else_if)]` on by default\nhelp: collapse nested if block\n   |\n43 ~     } else if data.len() > 0 {\n44 +         [data[0] as u64, data[0] as u64]\n45 +     } else {\n46 +         [0, 0]\n47 +     }\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::collapsible_else_if)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "collapse nested if block",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1746,
                        "byte_start": 1620,
                        "column_end": 6,
                        "column_start": 12,
                        "expansion": null,
                        "file_name": "src\\operations.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 49,
                        "line_start": 43,
                        "suggested_replacement": "if data.len() > 0 {\n        [data[0] as u64, data[0] as u64]\n    } else {\n        [0, 0]\n    }",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 12,
                            "text": "    } else {"
                          },
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "        if data.len() > 0 {"
                          },
                          {
                            "highlight_end": 45,
                            "highlight_start": 1,
                            "text": "            [data[0] as u64, data[0] as u64]"
                          },
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "        } else {"
                          },
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "            [0, 0]"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::collapsible_else_if",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `else { if .. }` block can be collapsed",
                "spans": [
                  {
                    "byte_end": 1746,
                    "byte_start": 1620,
                    "column_end": 6,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "src\\operations.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 49,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 12,
                        "text": "    } else {"
                      },
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "        if data.len() > 0 {"
                      },
                      {
                        "highlight_end": 45,
                        "highlight_start": 1,
                        "text": "            [data[0] as u64, data[0] as u64]"
                      },
                      {
                        "highlight_end": 17,
                        "highlight_start": 1,
                        "text": "        } else {"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "            [0, 0]"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: length comparison to zero\n  --> src\\operations.rs:44:12\n   |\n44 |         if data.len() > 0 {\n   |            ^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!data.is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n   = note: `#[warn(clippy::len_zero)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::len_zero)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using `!is_empty` is clearer and more explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1647,
                        "byte_start": 1633,
                        "column_end": 26,
                        "column_start": 12,
                        "expansion": null,
                        "file_name": "src\\operations.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 44,
                        "line_start": 44,
                        "suggested_replacement": "!data.is_empty()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 12,
                            "text": "        if data.len() > 0 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::len_zero",
                  "explanation": null
                },
                "level": "warning",
                "message": "length comparison to zero",
                "spans": [
                  {
                    "byte_end": 1647,
                    "byte_start": 1633,
                    "column_end": 26,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "src\\operations.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 44,
                    "line_start": 44,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 12,
                        "text": "        if data.len() > 0 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n   --> src\\random_state.rs:123:5\n    |\n123 | /// __Enabling this is recommended if `runtime-rng` is not possible__)\n    |     ^\n    |\n    = help: if this is supposed to be its own paragraph, add a blank line\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n    = note: `#[warn(clippy::doc_lazy_continuation)]` on by default\nhelp: indent this line\n    |\n123 | ///    __Enabling this is recommended if `runtime-rng` is not possible__)\n    |     +++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_lazy_continuation)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3799,
                        "byte_start": 3799,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\random_state.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 123,
                        "line_start": 123,
                        "suggested_replacement": "   ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "/// __Enabling this is recommended if `runtime-rng` is not possible__)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 3799,
                    "byte_start": 3799,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\random_state.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 123,
                    "line_start": 123,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "/// __Enabling this is recommended if `runtime-rng` is not possible__)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n   --> src\\random_state.rs:125:5\n    |\n125 | /// (Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is e...\n    |     ^\n    |\n    = help: if this is supposed to be its own paragraph, add a blank line\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n    |\n125 | ///    (Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is enabled.\n    |     +++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3984,
                        "byte_start": 3984,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\random_state.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 125,
                        "line_start": 125,
                        "suggested_replacement": "   ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "/// (Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is enabled."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 3984,
                    "byte_start": 3984,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\random_state.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "/// (Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is enabled."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n   --> src\\random_state.rs:126:5\n    |\n126 | /// (Rust enables ASLR by default)\n    |     ^\n    |\n    = help: if this is supposed to be its own paragraph, add a blank line\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n    |\n126 | ///    (Rust enables ASLR by default)\n    |     +++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4129,
                        "byte_start": 4129,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\random_state.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 126,
                        "line_start": 126,
                        "suggested_replacement": "   ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "/// (Rust enables ASLR by default)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 4129,
                    "byte_start": 4129,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\random_state.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 126,
                    "line_start": 126,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "/// (Rust enables ASLR by default)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpkgb1thuw/ahash-0.8.12#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkgb1thuw\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: calling `.type_id()` on `Box<dyn RandomSource + Send + Sync>`\n   --> src\\random_state.rs:187:73\n    |\n187 |                 RAND_SOURCE.set(Box::new(Box::new(source))).map_err(|s| s.as_ref().type_id() != TypeId::of::<&DefaultRandomSource>())\n    |                                                                         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this returns the type id of the literal type `Box<_>` instead of the type id of the boxed value, which is most likely not what you want\n    = note: if this is intentional, use `TypeId::of::<Box<dyn RandomSource + Send + Sync>>()` instead, which makes it more clear\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_id_on_box\n    = note: `#[warn(clippy::type_id_on_box)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "this returns the type id of the literal type `Box<_>` instead of the type id of the boxed value, which is most likely not what you want",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "if this is intentional, use `TypeId::of::<Box<dyn RandomSource + Send + Sync>>()` instead, which makes it more clear",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_id_on_box",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::type_id_on_box)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::type_id_on_box",
                  "explanation": null
                },
                "level": "warning",
                "message": "calling `.type_id()` on `Box<dyn RandomSource + Send + Sync>`",
                "spans": [
                  {
                    "byte_end": 6668,
                    "byte_start": 6648,
                    "column_end": 93,
                    "column_start": 73,
                    "expansion": null,
                    "file_name": "src\\random_state.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 187,
                    "line_start": 187,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 93,
                        "highlight_start": 73,
                        "text": "                RAND_SOURCE.set(Box::new(Box::new(source))).map_err(|s| s.as_ref().type_id() != TypeId::of::<&DefaultRandomSource>())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 103
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0375",
                    "package": "atty",
                    "title": "`atty` is unmaintained",
                    "description": "The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2024-09-25",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/57",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "serde_cbor",
                    "version": "0.11.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5",
                    "dependencies": [
                      {
                        "name": "half",
                        "version": "1.8.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde",
                        "version": "1.0.219",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0127",
                    "package": "serde_cbor",
                    "title": "serde_cbor is unmaintained",
                    "description": "The `serde_cbor` crate is unmaintained. The author has archived the github repository.\n\nAlternatives proposed by the author:\n\n * [`ciborium`](https://crates.io/crates/ciborium)\n * [`minicbor`](https://crates.io/crates/minicbor)",
                    "date": "2021-08-15",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/pyfisch/cbor",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0145",
                    "package": "atty",
                    "title": "Potential unaligned read",
                    "description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2021-07-04",
                    "aliases": [
                      "GHSA-g98v-hv3f-hcfr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "unaligned-read"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [
                      "https://github.com/softprops/atty/pull/51",
                      "https://github.com/softprops/atty/issues/57"
                    ],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/50",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "ahash",
          "version": "0.8.12",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ahash/latest/ahash/all.html \"show sidebar\")\n# Crate ahashCopy item path\n[Settings](https://docs.rs/ahash/latest/settings.html)\n[Help](https://docs.rs/ahash/latest/help.html)\nSummary[Source](https://docs.rs/ahash/latest/src/ahash/lib.rs.html#1-358)\nExpand description\nAHash is a high performance keyed hash function.\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key. AHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can induce a collision.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#how-ahash-works)How aHash works\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function. When it is not, aHash falls back on a slightly slower alternative algorithm.\nBecause aHash does not have a fixed standard for its output, it is able to improve over time. But this also means that different computers or computers using different versions of ahash may observe different hash values for the same input.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#basic-usage)Basic Usage\nAHash provides an implementation of the [Hasher] trait. To construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n#### [\u00a7](https://docs.rs/ahash/latest/ahash/#randomness)Randomness\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS. It is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n#### [\u00a7](https://docs.rs/ahash/latest/ahash/#if-randomness-is-not-available)If randomness is not available\n[AHasher::default()](https://docs.rs/ahash/latest/ahash/struct.AHasher.html#method.default \"associated function ahash::AHasher::default\") can be used to hash using fixed keys. This works with [BuildHasherDefault](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\"). For example:\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n```\n\nIt is also possible to instantiate [RandomState](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") directly:\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n```\n\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\n\nThere are several constructors for [RandomState](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") with different ways to supply seeds.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#convenience-wrappers)Convenience wrappers\nFor convenience, both new-type wrappers and type aliases are provided.\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\n\nThis avoids the need to type \u201cRandomState\u201d. (For convenience `From`, `Into`, and `Deref` are provided).\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#aliases)Aliases\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` , the type aliases [HashMap](https://docs.rs/ahash/latest/ahash/type.HashMap.html \"type ahash::HashMap\"), [HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\") are provided.\n```\nuse ahash::{HashMap, HashMapExt};\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\n\nNote the import of [HashMapExt](https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html \"trait ahash::HashMapExt\"). This is needed for the constructor.\n## Re-exports[\u00a7](https://docs.rs/ahash/latest/ahash/#reexports)\n\n`pub use crate::random_state::RandomState[](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\");`\n\n## Modules[\u00a7](https://docs.rs/ahash/latest/ahash/#modules)\n\n[random_state](https://docs.rs/ahash/latest/ahash/random_state/index.html \"mod ahash::random_state\")\n\n## Structs[\u00a7](https://docs.rs/ahash/latest/ahash/#structs)\n\n[AHashMap](https://docs.rs/ahash/latest/ahash/struct.AHashMap.html \"struct ahash::AHashMap\")\n    A [`HashMap`](https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html \"struct std::collections::hash::map::HashMap\") using [`RandomState`](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") to hash the items. (Requires the `std` feature to be enabled.)\n\n[AHashSet](https://docs.rs/ahash/latest/ahash/struct.AHashSet.html \"struct ahash::AHashSet\")\n    A [`HashSet`](https://doc.rust-lang.org/nightly/std/collections/hash/set/struct.HashSet.html \"struct std::collections::hash::set::HashSet\") using [`RandomState`](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") to hash the items. (Requires the `std` feature to be enabled.)\n\n[AHasher](https://docs.rs/ahash/latest/ahash/struct.AHasher.html \"struct ahash::AHasher\")\n    A `Hasher` for hashing an arbitrary stream of bytes.\n## Traits[\u00a7](https://docs.rs/ahash/latest/ahash/#traits)\n\n[HashMapExt](https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html \"trait ahash::HashMapExt\")\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashMap type alias.\n\n[HashSetExt](https://docs.rs/ahash/latest/ahash/trait.HashSetExt.html \"trait ahash::HashSetExt\")\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.\n## Type Aliases[\u00a7](https://docs.rs/ahash/latest/ahash/#types)\n\n[HashMap](https://docs.rs/ahash/latest/ahash/type.HashMap.html \"type ahash::HashMap\")\n    Type alias for [HashMap](https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html \"struct std::collections::hash::map::HashMap\")<K, V, ahash::RandomState>\n\n[HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\")\n    Type alias for [HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\")<K, ahash::RandomState>\n",
            "markdown_with_citations": "[](https://docs.rs/ahash/latest/ahash/all.html \"show sidebar\")\n# Crate ahashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAHash is a high performance keyed hash function.\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key. AHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can induce a collision.\n## \u00a7\u27e84\u27e9How aHash works\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function. When it is not, aHash falls back on a slightly slower alternative algorithm.\nBecause aHash does not have a fixed standard for its output, it is able to improve over time. But this also means that different computers or computers using different versions of ahash may observe different hash values for the same input.\n## \u00a7\u27e85\u27e9Basic Usage\nAHash provides an implementation of the [Hasher] trait. To construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n#### \u00a7\u27e86\u27e9Randomness\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS. It is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n#### \u00a7\u27e87\u27e9If randomness is not available\nAHasher::default()\u27e88\u27e9 can be used to hash using fixed keys. This works with BuildHasherDefault\u27e89\u27e9. For example:\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n```\n\nIt is also possible to instantiate RandomState\u27e810\u27e9 directly:\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n```\n\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\n\nThere are several constructors for RandomState\u27e810\u27e9 with different ways to supply seeds.\n## \u00a7\u27e811\u27e9Convenience wrappers\nFor convenience, both new-type wrappers and type aliases are provided.\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\n\nThis avoids the need to type \u201cRandomState\u201d. (For convenience `From`, `Into`, and `Deref` are provided).\n## \u00a7\u27e812\u27e9Aliases\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` , the type aliases HashMap\u27e813\u27e9, HashSet\u27e814\u27e9 are provided.\n```\nuse ahash::{HashMap, HashMapExt};\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\n\nNote the import of HashMapExt\u27e815\u27e9. This is needed for the constructor.\n## Re-exports\u00a7\u27e816\u27e9\n\n`pub use crate::random_state::RandomState[](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\");`\n\n## Modules\u00a7\u27e817\u27e9\n\nrandom_state\u27e818\u27e9\n\n## Structs\u00a7\u27e819\u27e9\n\nAHashMap\u27e820\u27e9\n    A `HashMap`\u27e821\u27e9 using `RandomState`\u27e810\u27e9 to hash the items. (Requires the `std` feature to be enabled.)\n\nAHashSet\u27e822\u27e9\n    A `HashSet`\u27e823\u27e9 using `RandomState`\u27e810\u27e9 to hash the items. (Requires the `std` feature to be enabled.)\n\nAHasher\u27e824\u27e9\n    A `Hasher` for hashing an arbitrary stream of bytes.\n## Traits\u00a7\u27e825\u27e9\n\nHashMapExt\u27e815\u27e9\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashMap type alias.\n\nHashSetExt\u27e826\u27e9\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.\n## Type Aliases\u00a7\u27e827\u27e9\n\nHashMap\u27e813\u27e9\n    Type alias for HashMap\u27e821\u27e9<K, V, ahash::RandomState>\n\nHashSet\u27e814\u27e9\n    Type alias for HashSet\u27e814\u27e9<K, ahash::RandomState>\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ahash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ahash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ahash/latest/src/ahash/lib.rs.html#1-358: Source\n\u27e84\u27e9 https://docs.rs/ahash/latest/ahash/#how-ahash-works: \u00a7\n\u27e85\u27e9 https://docs.rs/ahash/latest/ahash/#basic-usage: \u00a7\n\u27e86\u27e9 https://docs.rs/ahash/latest/ahash/#randomness: \u00a7\n\u27e87\u27e9 https://docs.rs/ahash/latest/ahash/#if-randomness-is-not-available: \u00a7\n\u27e88\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHasher.html#method.default: associated function ahash::AHasher::default - AHasher::default()\n\u27e89\u27e9 https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html: struct core::hash::BuildHasherDefault - BuildHasherDefault\n\u27e810\u27e9 https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html: struct ahash::random_state::RandomState - RandomState\n\u27e811\u27e9 https://docs.rs/ahash/latest/ahash/#convenience-wrappers: \u00a7\n\u27e812\u27e9 https://docs.rs/ahash/latest/ahash/#aliases: \u00a7\n\u27e813\u27e9 https://docs.rs/ahash/latest/ahash/type.HashMap.html: type ahash::HashMap - HashMap\n\u27e814\u27e9 https://docs.rs/ahash/latest/ahash/type.HashSet.html: type ahash::HashSet - HashSet\n\u27e815\u27e9 https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html: trait ahash::HashMapExt - HashMapExt\n\u27e816\u27e9 https://docs.rs/ahash/latest/ahash/#reexports: \u00a7\n\u27e817\u27e9 https://docs.rs/ahash/latest/ahash/#modules: \u00a7\n\u27e818\u27e9 https://docs.rs/ahash/latest/ahash/random_state/index.html: mod ahash::random_state - random_state\n\u27e819\u27e9 https://docs.rs/ahash/latest/ahash/#structs: \u00a7\n\u27e820\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHashMap.html: struct ahash::AHashMap - AHashMap\n\u27e821\u27e9 https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html: struct std::collections::hash::map::HashMap - `HashMap`\n\u27e822\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHashSet.html: struct ahash::AHashSet - AHashSet\n\u27e823\u27e9 https://doc.rust-lang.org/nightly/std/collections/hash/set/struct.HashSet.html: struct std::collections::hash::set::HashSet - `HashSet`\n\u27e824\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHasher.html: struct ahash::AHasher - AHasher\n\u27e825\u27e9 https://docs.rs/ahash/latest/ahash/#traits: \u00a7\n\u27e826\u27e9 https://docs.rs/ahash/latest/ahash/trait.HashSetExt.html: trait ahash::HashSetExt - HashSetExt\n\u27e827\u27e9 https://docs.rs/ahash/latest/ahash/#types: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "ahash",
          "version": "0.8.12",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ahash/latest/ahash/all.html \"show sidebar\")\n# Crate ahashCopy item path\n[Settings](https://docs.rs/ahash/latest/settings.html)\n[Help](https://docs.rs/ahash/latest/help.html)\nSummary[Source](https://docs.rs/ahash/latest/src/ahash/lib.rs.html#1-358)\nExpand description\nAHash is a high performance keyed hash function.\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key. AHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can induce a collision.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#how-ahash-works)How aHash works\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function. When it is not, aHash falls back on a slightly slower alternative algorithm.\nBecause aHash does not have a fixed standard for its output, it is able to improve over time. But this also means that different computers or computers using different versions of ahash may observe different hash values for the same input.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#basic-usage)Basic Usage\nAHash provides an implementation of the [Hasher] trait. To construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n#### [\u00a7](https://docs.rs/ahash/latest/ahash/#randomness)Randomness\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS. It is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n#### [\u00a7](https://docs.rs/ahash/latest/ahash/#if-randomness-is-not-available)If randomness is not available\n[AHasher::default()](https://docs.rs/ahash/latest/ahash/struct.AHasher.html#method.default \"associated function ahash::AHasher::default\") can be used to hash using fixed keys. This works with [BuildHasherDefault](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\"). For example:\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n```\n\nIt is also possible to instantiate [RandomState](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") directly:\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n```\n\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\n\nThere are several constructors for [RandomState](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") with different ways to supply seeds.\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#convenience-wrappers)Convenience wrappers\nFor convenience, both new-type wrappers and type aliases are provided.\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\n\nThis avoids the need to type \u201cRandomState\u201d. (For convenience `From`, `Into`, and `Deref` are provided).\n## [\u00a7](https://docs.rs/ahash/latest/ahash/#aliases)Aliases\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` , the type aliases [HashMap](https://docs.rs/ahash/latest/ahash/type.HashMap.html \"type ahash::HashMap\"), [HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\") are provided.\n```\nuse ahash::{HashMap, HashMapExt};\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\n\nNote the import of [HashMapExt](https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html \"trait ahash::HashMapExt\"). This is needed for the constructor.\n## Re-exports[\u00a7](https://docs.rs/ahash/latest/ahash/#reexports)\n\n`pub use crate::random_state::RandomState[](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\");`\n\n## Modules[\u00a7](https://docs.rs/ahash/latest/ahash/#modules)\n\n[random_state](https://docs.rs/ahash/latest/ahash/random_state/index.html \"mod ahash::random_state\")\n\n## Structs[\u00a7](https://docs.rs/ahash/latest/ahash/#structs)\n\n[AHashMap](https://docs.rs/ahash/latest/ahash/struct.AHashMap.html \"struct ahash::AHashMap\")\n    A [`HashMap`](https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html \"struct std::collections::hash::map::HashMap\") using [`RandomState`](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") to hash the items. (Requires the `std` feature to be enabled.)\n\n[AHashSet](https://docs.rs/ahash/latest/ahash/struct.AHashSet.html \"struct ahash::AHashSet\")\n    A [`HashSet`](https://doc.rust-lang.org/nightly/std/collections/hash/set/struct.HashSet.html \"struct std::collections::hash::set::HashSet\") using [`RandomState`](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\") to hash the items. (Requires the `std` feature to be enabled.)\n\n[AHasher](https://docs.rs/ahash/latest/ahash/struct.AHasher.html \"struct ahash::AHasher\")\n    A `Hasher` for hashing an arbitrary stream of bytes.\n## Traits[\u00a7](https://docs.rs/ahash/latest/ahash/#traits)\n\n[HashMapExt](https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html \"trait ahash::HashMapExt\")\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashMap type alias.\n\n[HashSetExt](https://docs.rs/ahash/latest/ahash/trait.HashSetExt.html \"trait ahash::HashSetExt\")\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.\n## Type Aliases[\u00a7](https://docs.rs/ahash/latest/ahash/#types)\n\n[HashMap](https://docs.rs/ahash/latest/ahash/type.HashMap.html \"type ahash::HashMap\")\n    Type alias for [HashMap](https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html \"struct std::collections::hash::map::HashMap\")<K, V, ahash::RandomState>\n\n[HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\")\n    Type alias for [HashSet](https://docs.rs/ahash/latest/ahash/type.HashSet.html \"type ahash::HashSet\")<K, ahash::RandomState>\n",
            "markdown_with_citations": "[](https://docs.rs/ahash/latest/ahash/all.html \"show sidebar\")\n# Crate ahashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAHash is a high performance keyed hash function.\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key. AHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can induce a collision.\n## \u00a7\u27e84\u27e9How aHash works\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function. When it is not, aHash falls back on a slightly slower alternative algorithm.\nBecause aHash does not have a fixed standard for its output, it is able to improve over time. But this also means that different computers or computers using different versions of ahash may observe different hash values for the same input.\n## \u00a7\u27e85\u27e9Basic Usage\nAHash provides an implementation of the [Hasher] trait. To construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n#### \u00a7\u27e86\u27e9Randomness\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS. It is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n#### \u00a7\u27e87\u27e9If randomness is not available\nAHasher::default()\u27e88\u27e9 can be used to hash using fixed keys. This works with BuildHasherDefault\u27e89\u27e9. For example:\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n```\n\nIt is also possible to instantiate RandomState\u27e810\u27e9 directly:\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n```\n\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\n\nThere are several constructors for RandomState\u27e810\u27e9 with different ways to supply seeds.\n## \u00a7\u27e811\u27e9Convenience wrappers\nFor convenience, both new-type wrappers and type aliases are provided.\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\n\nThis avoids the need to type \u201cRandomState\u201d. (For convenience `From`, `Into`, and `Deref` are provided).\n## \u00a7\u27e812\u27e9Aliases\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` , the type aliases HashMap\u27e813\u27e9, HashSet\u27e814\u27e9 are provided.\n```\nuse ahash::{HashMap, HashMapExt};\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\n\nNote the import of HashMapExt\u27e815\u27e9. This is needed for the constructor.\n## Re-exports\u00a7\u27e816\u27e9\n\n`pub use crate::random_state::RandomState[](https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html \"struct ahash::random_state::RandomState\");`\n\n## Modules\u00a7\u27e817\u27e9\n\nrandom_state\u27e818\u27e9\n\n## Structs\u00a7\u27e819\u27e9\n\nAHashMap\u27e820\u27e9\n    A `HashMap`\u27e821\u27e9 using `RandomState`\u27e810\u27e9 to hash the items. (Requires the `std` feature to be enabled.)\n\nAHashSet\u27e822\u27e9\n    A `HashSet`\u27e823\u27e9 using `RandomState`\u27e810\u27e9 to hash the items. (Requires the `std` feature to be enabled.)\n\nAHasher\u27e824\u27e9\n    A `Hasher` for hashing an arbitrary stream of bytes.\n## Traits\u00a7\u27e825\u27e9\n\nHashMapExt\u27e815\u27e9\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashMap type alias.\n\nHashSetExt\u27e826\u27e9\n    A convenience trait that can be used together with the type aliases defined to get access to the `new()` and `with_capacity()` methods for the HashSet type aliases.\n## Type Aliases\u00a7\u27e827\u27e9\n\nHashMap\u27e813\u27e9\n    Type alias for HashMap\u27e821\u27e9<K, V, ahash::RandomState>\n\nHashSet\u27e814\u27e9\n    Type alias for HashSet\u27e814\u27e9<K, ahash::RandomState>\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ahash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ahash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ahash/latest/src/ahash/lib.rs.html#1-358: Source\n\u27e84\u27e9 https://docs.rs/ahash/latest/ahash/#how-ahash-works: \u00a7\n\u27e85\u27e9 https://docs.rs/ahash/latest/ahash/#basic-usage: \u00a7\n\u27e86\u27e9 https://docs.rs/ahash/latest/ahash/#randomness: \u00a7\n\u27e87\u27e9 https://docs.rs/ahash/latest/ahash/#if-randomness-is-not-available: \u00a7\n\u27e88\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHasher.html#method.default: associated function ahash::AHasher::default - AHasher::default()\n\u27e89\u27e9 https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html: struct core::hash::BuildHasherDefault - BuildHasherDefault\n\u27e810\u27e9 https://docs.rs/ahash/latest/ahash/random_state/struct.RandomState.html: struct ahash::random_state::RandomState - RandomState\n\u27e811\u27e9 https://docs.rs/ahash/latest/ahash/#convenience-wrappers: \u00a7\n\u27e812\u27e9 https://docs.rs/ahash/latest/ahash/#aliases: \u00a7\n\u27e813\u27e9 https://docs.rs/ahash/latest/ahash/type.HashMap.html: type ahash::HashMap - HashMap\n\u27e814\u27e9 https://docs.rs/ahash/latest/ahash/type.HashSet.html: type ahash::HashSet - HashSet\n\u27e815\u27e9 https://docs.rs/ahash/latest/ahash/trait.HashMapExt.html: trait ahash::HashMapExt - HashMapExt\n\u27e816\u27e9 https://docs.rs/ahash/latest/ahash/#reexports: \u00a7\n\u27e817\u27e9 https://docs.rs/ahash/latest/ahash/#modules: \u00a7\n\u27e818\u27e9 https://docs.rs/ahash/latest/ahash/random_state/index.html: mod ahash::random_state - random_state\n\u27e819\u27e9 https://docs.rs/ahash/latest/ahash/#structs: \u00a7\n\u27e820\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHashMap.html: struct ahash::AHashMap - AHashMap\n\u27e821\u27e9 https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html: struct std::collections::hash::map::HashMap - `HashMap`\n\u27e822\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHashSet.html: struct ahash::AHashSet - AHashSet\n\u27e823\u27e9 https://doc.rust-lang.org/nightly/std/collections/hash/set/struct.HashSet.html: struct std::collections::hash::set::HashSet - `HashSet`\n\u27e824\u27e9 https://docs.rs/ahash/latest/ahash/struct.AHasher.html: struct ahash::AHasher - AHasher\n\u27e825\u27e9 https://docs.rs/ahash/latest/ahash/#traits: \u00a7\n\u27e826\u27e9 https://docs.rs/ahash/latest/ahash/trait.HashSetExt.html: trait ahash::HashSetExt - HashSetExt\n\u27e827\u27e9 https://docs.rs/ahash/latest/ahash/#types: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `ahash` crate provides a high-performance, keyed hash function optimized for use with `HashMap` and `HashSet`, offering protection against malicious collision attacks. It leverages hardware AES instructions when available for fast hashing and includes fallbacks for other environments. The crate offers convenience wrappers (`AHashMap`, `AHashSet`) and type aliases (`HashMap`, `HashSet`) for seamless integration, along with customizable randomness options for hashing.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Performance Characteristics  \n\u2705 **Factual**: AHash leverages hardware AES instructions when available to provide high-performance hashing, making it faster than many other hash functions in scenarios where hardware support exists.  \n\u274c **Counterfactual**: AHash always uses hardware AES instructions regardless of the underlying system, ensuring consistent performance across all platforms.  \n\n---\n\n### Pair 2: Output Characteristics  \n\u2705 **Factual**: AHash does not produce a fixed standard hash output, which allows it to evolve over time and improve its hashing algorithm, but this means hash values can differ across versions or systems.  \n\u274c **Counterfactual**: AHash guarantees consistent hash output across all versions and systems, ensuring compatibility in distributed applications.  \n\n---\n\n### Pair 3: Randomness and Key Generation  \n\u2705 **Factual**: By default, AHash uses randomness provided by the operating system to generate keys for hashing, but it can also use manually supplied seeds or compile-time randomness via the `compile-time-rng` feature.  \n\u274c **Counterfactual**: AHash exclusively relies on compile-time randomness for key generation, and does not support runtime randomness from the operating system.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-9a6707cd-34f51b79-1751260921",
      "timestamp": "2025-06-30T05:22:01.452725+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]