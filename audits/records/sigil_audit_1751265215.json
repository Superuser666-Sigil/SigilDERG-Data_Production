[
  {
    "execution_id": "exec-da57c782-0464bd24-1751265194",
    "timestamp": "2025-06-30T06:33:14.639708+00:00",
    "sacred_chain": {
      "input_data": "winit",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'winit' -> 'winit'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "winit",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/winit",
            "title": "winit v0.30.11",
            "content": {
              "raw_markdown": "#  winit v0.30.11\nCross-platform window creation library. \n  * [ #windowing ](https://crates.io/keywords/windowing)\n\n\n  * [ Readme ](https://crates.io/crates/winit)\n  * [ 115 Versions ](https://crates.io/crates/winit/versions)\n  * [ Dependencies ](https://crates.io/crates/winit/dependencies)\n  * [ Dependents ](https://crates.io/crates/winit/reverse_dependencies)\n\n\n## Metadata\nabout 1 month ago \nv1.70.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n589 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add winit\nOr add the following line to your Cargo.toml:\nwinit = \"0.30.11\"\n## Documentation\n[ docs.rs/winit ](https://docs.rs/winit)\n## Repository\n[ github.com/rust-windowing/winit ](https://github.com/rust-windowing/winit)\n## Owners\n## Categories\n  * [GUI](https://crates.io/categories/gui)\n\n\n[ Report crate ](https://crates.io/support?crate=winit&inquire=crate-violation)\n### Stats Overview\n20,349,676 Downloads all time\n115 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  winit v0.30.11\nCross-platform window creation library. \n  *  #windowing \u27e81\u27e9\n\n\n  *  Readme \u27e82\u27e9\n  *  115 Versions \u27e83\u27e9\n  *  Dependencies \u27e84\u27e9\n  *  Dependents \u27e85\u27e9\n\n\n## Metadata\nabout 1 month ago \nv1.70.0 \n Apache-2.0 \u27e86\u27e9\n589 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add winit\nOr add the following line to your Cargo.toml:\nwinit = \"0.30.11\"\n## Documentation\n docs.rs/winit \u27e87\u27e9\n## Repository\n github.com/rust-windowing/winit \u27e88\u27e9\n## Owners\n## Categories\n  * GUI\u27e89\u27e9\n\n\n Report crate \u27e810\u27e9\n### Stats Overview\n20,349,676 Downloads all time\n115 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/windowing:  #windowing \n\u27e82\u27e9 https://crates.io/crates/winit:  Readme \n\u27e83\u27e9 https://crates.io/crates/winit/versions:  115 Versions \n\u27e84\u27e9 https://crates.io/crates/winit/dependencies:  Dependencies \n\u27e85\u27e9 https://crates.io/crates/winit/reverse_dependencies:  Dependents \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://docs.rs/winit:  docs.rs/winit \n\u27e88\u27e9 https://github.com/rust-windowing/winit:  github.com/rust-windowing/winit \n\u27e89\u27e9 https://crates.io/categories/gui: GUI\n\u27e810\u27e9 https://crates.io/support?crate=winit&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1097,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118984.5432097"
          },
          "docs_rs": {
            "url": "https://docs.rs/winit",
            "title": "Crate winitCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/winit/latest/winit/all.html \"show sidebar\")\n# Crate winitCopy item path\n[Settings](https://docs.rs/winit/latest/settings.html)\n[Help](https://docs.rs/winit/latest/help.html)\nSummary[Source](https://docs.rs/winit/latest/src/winit/lib.rs.html#1-217)\nExpand description\nWinit is a cross-platform window creation and event loop management library.\n## [\u00a7](https://docs.rs/winit/latest/winit/#building-windows)Building windows\nBefore you can create a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\"), you first need to build an [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\"). This is done with the [`EventLoop::new()`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.new \"associated function winit::event_loop::EventLoop::new\") function.\n```\nuse winit::event_loop::EventLoop;\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ...\n}\n```\n\nThen you create a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") with [`create_window`](https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.create_window \"method winit::event_loop::ActiveEventLoop::create_window\").\n## [\u00a7](https://docs.rs/winit/latest/winit/#event-handling)Event handling\nOnce a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") has been created, it will generate different _events_. A [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") object can generate [`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\")s when certain input events occur, such as a cursor moving over the window or a key getting pressed while the window is focused. Devices can generate [`DeviceEvent`](https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html \"enum winit::event::DeviceEvent\")s, which contain unfiltered event data that isn\u2019t specific to a certain window. Some user activity, like mouse movement, can generate both a [`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\") _and_ a [`DeviceEvent`](https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html \"enum winit::event::DeviceEvent\"). You can also create and handle your own custom [`Event::UserEvent`](https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.UserEvent \"variant winit::event::Event::UserEvent\")s, if desired.\nYou can retrieve events by calling [`EventLoop::run_app()`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.run_app \"method winit::event_loop::EventLoop::run_app\"). This function will dispatch events for every [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") that was created with that particular [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\"), and will run until [`exit()`](https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.exit \"method winit::event_loop::ActiveEventLoop::exit\") is used, at which point [`Event::LoopExiting`](https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.LoopExiting \"variant winit::event::Event::LoopExiting\").\nWinit no longer uses a `EventLoop::poll_events() -> impl Iterator<Event>`-based event loop model, since that can\u2019t be implemented properly on some platforms (e.g web, iOS) and works poorly on most other platforms. However, this model can be re-implemented to an extent with [`EventLoopExtPumpEvents::pump_app_events()`](https://docs.rs/winit/latest/winit/platform/pump_events/trait.EventLoopExtPumpEvents.html#method.pump_app_events \"method winit::platform::pump_events::EventLoopExtPumpEvents::pump_app_events\") [1](https://docs.rs/winit/latest/winit/#fn1). See that method\u2019s documentation for more reasons about why it\u2019s discouraged beyond compatibility reasons.\n```\nuse winit::application::ApplicationHandler;\nuse winit::event::WindowEvent;\nuse winit::event_loop::{ActiveEventLoop, ControlFlow, EventLoop};\nuse winit::window::{Window, WindowId};\n#[derive(Default)]\nstruct App {\n  window: Option<Window>,\n}\nimpl ApplicationHandler for App {\n  fn resumed(&mut self, event_loop: &ActiveEventLoop) {\n    self.window = Some(event_loop.create_window(Window::default_attributes()).unwrap());\n  }\n  fn window_event(&mut self, event_loop: &ActiveEventLoop, id: WindowId, event: WindowEvent) {\n    match event {\n      WindowEvent::CloseRequested => {\n        println!(\"The close button was pressed; stopping\");\n        event_loop.exit();\n      },\n      WindowEvent::RedrawRequested => {\n        // Redraw the application.\n        //\n        // It's preferable for applications that do not render continuously to render in\n        // this event rather than in AboutToWait, since rendering in here allows\n        // the program to gracefully handle redraws requested by the OS.\n        // Draw.\n        // Queue a RedrawRequested event.\n        //\n        // You only need to call this if you've determined that you need to redraw in\n        // applications which do not always need to. Applications that redraw continuously\n        // can render here instead.\n        self.window.as_ref().unwrap().request_redraw();\n      }\n      _ => (),\n    }\n  }\n}\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ControlFlow::Poll continuously runs the event loop, even if the OS hasn't\n  // dispatched any events. This is ideal for games and similar applications.\n  event_loop.set_control_flow(ControlFlow::Poll);\n  // ControlFlow::Wait pauses the event loop if no events are available to process.\n  // This is ideal for non-game applications that only update in response to user\n  // input, and uses significantly less power/CPU time than ControlFlow::Poll.\n  event_loop.set_control_flow(ControlFlow::Wait);\n  let mut app = App::default();\n  event_loop.run_app(&mut app);\n}\n```\n\n[`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\") has a [`WindowId`](https://docs.rs/winit/latest/winit/window/struct.WindowId.html \"struct winit::window::WindowId\") member. In multi-window environments, it should be compared to the value returned by [`Window::id()`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.id \"method winit::window::Window::id\") to determine which [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") dispatched the event.\n## [\u00a7](https://docs.rs/winit/latest/winit/#drawing-on-the-window)Drawing on the window\nWinit doesn\u2019t directly provide any methods for drawing on a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\"). However, it allows you to retrieve the raw handle of the window and display (see the [`platform`](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\") module and/or the [`raw_window_handle`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_window_handle) and [`raw_display_handle`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_display_handle) methods), which in turn allows you to create an OpenGL/Vulkan/DirectX/Metal/etc. context that can be used to render graphics.\nNote that many platforms will display garbage data in the window\u2019s client area if the application doesn\u2019t render anything to the window by the time the desktop compositor is ready to display the window to the user. If you notice this happening, you should create the window with [`visible` set to `false`](https://docs.rs/winit/latest/winit/window/struct.WindowAttributes.html#method.with_visible \"method winit::window::WindowAttributes::with_visible\") and explicitly make the window visible only once you\u2019re ready to render into it.\n## [\u00a7](https://docs.rs/winit/latest/winit/#ui-scaling)UI scaling\nUI scaling is important, go read the docs for the [`dpi`](https://docs.rs/winit/latest/winit/dpi/index.html \"mod winit::dpi\") crate for an introduction.\nAll of Winit\u2019s functions return physical types, but can take either logical or physical coordinates as input, allowing you to use the most convenient coordinate system for your particular application.\nWinit will dispatch a [`ScaleFactorChanged`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged \"variant winit::event::WindowEvent::ScaleFactorChanged\") event whenever a window\u2019s scale factor has changed. This can happen if the user drags their window from a standard-resolution monitor to a high-DPI monitor or if the user changes their DPI settings. This allows you to rescale your application\u2019s UI elements and adjust how the platform changes the window\u2019s size to reflect the new scale factor. If a window hasn\u2019t received a [`ScaleFactorChanged`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged \"variant winit::event::WindowEvent::ScaleFactorChanged\") event, its scale factor can be found by calling [`window.scale_factor()`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.scale_factor \"method winit::window::Window::scale_factor\").\n## [\u00a7](https://docs.rs/winit/latest/winit/#cargo-features)Cargo Features\nWinit provides the following Cargo features:\n  * `x11` (enabled by default): On Unix platforms, enables the X11 backend.\n  * `wayland` (enabled by default): On Unix platforms, enables the Wayland backend.\n  * `rwh_04`: Implement `raw-window-handle v0.4` traits.\n  * `rwh_05`: Implement `raw-window-handle v0.5` traits.\n  * `rwh_06`: Implement `raw-window-handle v0.6` traits.\n  * `serde`: Enables serialization/deserialization of certain types with [Serde](https://crates.io/crates/serde).\n  * `mint`: Enables mint (math interoperability standard types) conversions.\n\n\nSee the [`platform`](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\") module for documentation on platform-specific cargo features.\n  1. `EventLoopExtPumpEvents::pump_app_events()` is only available on Windows, macOS, Android, X11 and Wayland. [\u21a9](https://docs.rs/winit/latest/winit/#fnref1)\n\n\n## Re-exports[\u00a7](https://docs.rs/winit/latest/winit/#reexports)\n\n`pub use rwh_04[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_04;``rwh_04`\n\n\n`pub use rwh_05[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_05;``rwh_05`\n\n\n`pub use rwh_06[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle;``rwh_06`\n\n## Modules[\u00a7](https://docs.rs/winit/latest/winit/#modules)\n\n[application](https://docs.rs/winit/latest/winit/application/index.html \"mod winit::application\")\n    End user application handling.\n\n[changelog](https://docs.rs/winit/latest/winit/changelog/index.html \"mod winit::changelog\")Nowhere\n    Changelog and migrations\n\n[dpi](https://docs.rs/winit/latest/winit/dpi/index.html \"mod winit::dpi\")\n    DPI\n\n[error](https://docs.rs/winit/latest/winit/error/index.html \"mod winit::error\")\n\n\n[event](https://docs.rs/winit/latest/winit/event/index.html \"mod winit::event\")\n    The [`Event`](https://docs.rs/winit/latest/winit/event/enum.Event.html \"enum winit::event::Event\") enum and assorted supporting types.\n\n[event_loop](https://docs.rs/winit/latest/winit/event_loop/index.html \"mod winit::event_loop\")\n    The [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\") struct and assorted supporting types, including [`ControlFlow`](https://docs.rs/winit/latest/winit/event_loop/enum.ControlFlow.html \"enum winit::event_loop::ControlFlow\").\n\n[keyboard](https://docs.rs/winit/latest/winit/keyboard/index.html \"mod winit::keyboard\")\n    Types related to the keyboard.\n\n[monitor](https://docs.rs/winit/latest/winit/monitor/index.html \"mod winit::monitor\")\n    Types useful for interacting with a user\u2019s monitors.\n\n[platform](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\")\n    Contains traits with platform-specific methods in them.\n\n[window](https://docs.rs/winit/latest/winit/window/index.html \"mod winit::window\")\n    The [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") struct and associated types.\n",
              "markdown_with_citations": "[](https://docs.rs/winit/latest/winit/all.html \"show sidebar\")\n# Crate winitCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nWinit is a cross-platform window creation and event loop management library.\n## \u00a7\u27e84\u27e9Building windows\nBefore you can create a `Window`\u27e85\u27e9, you first need to build an `EventLoop`\u27e86\u27e9. This is done with the `EventLoop::new()`\u27e87\u27e9 function.\n```\nuse winit::event_loop::EventLoop;\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ...\n}\n```\n\nThen you create a `Window`\u27e85\u27e9 with `create_window`\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Event handling\nOnce a `Window`\u27e85\u27e9 has been created, it will generate different _events_. A `Window`\u27e85\u27e9 object can generate `WindowEvent`\u27e810\u27e9s when certain input events occur, such as a cursor moving over the window or a key getting pressed while the window is focused. Devices can generate `DeviceEvent`\u27e811\u27e9s, which contain unfiltered event data that isn\u2019t specific to a certain window. Some user activity, like mouse movement, can generate both a `WindowEvent`\u27e810\u27e9 _and_ a `DeviceEvent`\u27e811\u27e9. You can also create and handle your own custom `Event::UserEvent`\u27e812\u27e9s, if desired.\nYou can retrieve events by calling `EventLoop::run_app()`\u27e813\u27e9. This function will dispatch events for every `Window`\u27e85\u27e9 that was created with that particular `EventLoop`\u27e86\u27e9, and will run until `exit()`\u27e814\u27e9 is used, at which point `Event::LoopExiting`\u27e815\u27e9.\nWinit no longer uses a `EventLoop::poll_events() -> impl Iterator<Event>`-based event loop model, since that can\u2019t be implemented properly on some platforms (e.g web, iOS) and works poorly on most other platforms. However, this model can be re-implemented to an extent with `EventLoopExtPumpEvents::pump_app_events()`\u27e816\u27e9 1\u27e817\u27e9. See that method\u2019s documentation for more reasons about why it\u2019s discouraged beyond compatibility reasons.\n```\nuse winit::application::ApplicationHandler;\nuse winit::event::WindowEvent;\nuse winit::event_loop::{ActiveEventLoop, ControlFlow, EventLoop};\nuse winit::window::{Window, WindowId};\n#[derive(Default)]\nstruct App {\n  window: Option<Window>,\n}\nimpl ApplicationHandler for App {\n  fn resumed(&mut self, event_loop: &ActiveEventLoop) {\n    self.window = Some(event_loop.create_window(Window::default_attributes()).unwrap());\n  }\n  fn window_event(&mut self, event_loop: &ActiveEventLoop, id: WindowId, event: WindowEvent) {\n    match event {\n      WindowEvent::CloseRequested => {\n        println!(\"The close button was pressed; stopping\");\n        event_loop.exit();\n      },\n      WindowEvent::RedrawRequested => {\n        // Redraw the application.\n        //\n        // It's preferable for applications that do not render continuously to render in\n        // this event rather than in AboutToWait, since rendering in here allows\n        // the program to gracefully handle redraws requested by the OS.\n        // Draw.\n        // Queue a RedrawRequested event.\n        //\n        // You only need to call this if you've determined that you need to redraw in\n        // applications which do not always need to. Applications that redraw continuously\n        // can render here instead.\n        self.window.as_ref().unwrap().request_redraw();\n      }\n      _ => (),\n    }\n  }\n}\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ControlFlow::Poll continuously runs the event loop, even if the OS hasn't\n  // dispatched any events. This is ideal for games and similar applications.\n  event_loop.set_control_flow(ControlFlow::Poll);\n  // ControlFlow::Wait pauses the event loop if no events are available to process.\n  // This is ideal for non-game applications that only update in response to user\n  // input, and uses significantly less power/CPU time than ControlFlow::Poll.\n  event_loop.set_control_flow(ControlFlow::Wait);\n  let mut app = App::default();\n  event_loop.run_app(&mut app);\n}\n```\n\n`WindowEvent`\u27e810\u27e9 has a `WindowId`\u27e818\u27e9 member. In multi-window environments, it should be compared to the value returned by `Window::id()`\u27e819\u27e9 to determine which `Window`\u27e85\u27e9 dispatched the event.\n## \u00a7\u27e820\u27e9Drawing on the window\nWinit doesn\u2019t directly provide any methods for drawing on a `Window`\u27e85\u27e9. However, it allows you to retrieve the raw handle of the window and display (see the `platform`\u27e821\u27e9 module and/or the `raw_window_handle`\u27e822\u27e9 and `raw_display_handle`\u27e823\u27e9 methods), which in turn allows you to create an OpenGL/Vulkan/DirectX/Metal/etc. context that can be used to render graphics.\nNote that many platforms will display garbage data in the window\u2019s client area if the application doesn\u2019t render anything to the window by the time the desktop compositor is ready to display the window to the user. If you notice this happening, you should create the window with `visible` set to `false`\u27e824\u27e9 and explicitly make the window visible only once you\u2019re ready to render into it.\n## \u00a7\u27e825\u27e9UI scaling\nUI scaling is important, go read the docs for the `dpi`\u27e826\u27e9 crate for an introduction.\nAll of Winit\u2019s functions return physical types, but can take either logical or physical coordinates as input, allowing you to use the most convenient coordinate system for your particular application.\nWinit will dispatch a `ScaleFactorChanged`\u27e827\u27e9 event whenever a window\u2019s scale factor has changed. This can happen if the user drags their window from a standard-resolution monitor to a high-DPI monitor or if the user changes their DPI settings. This allows you to rescale your application\u2019s UI elements and adjust how the platform changes the window\u2019s size to reflect the new scale factor. If a window hasn\u2019t received a `ScaleFactorChanged`\u27e827\u27e9 event, its scale factor can be found by calling `window.scale_factor()`\u27e828\u27e9.\n## \u00a7\u27e829\u27e9Cargo Features\nWinit provides the following Cargo features:\n  * `x11` (enabled by default): On Unix platforms, enables the X11 backend.\n  * `wayland` (enabled by default): On Unix platforms, enables the Wayland backend.\n  * `rwh_04`: Implement `raw-window-handle v0.4` traits.\n  * `rwh_05`: Implement `raw-window-handle v0.5` traits.\n  * `rwh_06`: Implement `raw-window-handle v0.6` traits.\n  * `serde`: Enables serialization/deserialization of certain types with Serde\u27e830\u27e9.\n  * `mint`: Enables mint (math interoperability standard types) conversions.\n\n\nSee the `platform`\u27e821\u27e9 module for documentation on platform-specific cargo features.\n  1. `EventLoopExtPumpEvents::pump_app_events()` is only available on Windows, macOS, Android, X11 and Wayland. \u21a9\u27e831\u27e9\n\n\n## Re-exports\u00a7\u27e832\u27e9\n\n`pub use rwh_04[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_04;``rwh_04`\n\n\n`pub use rwh_05[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_05;``rwh_05`\n\n\n`pub use rwh_06[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle;``rwh_06`\n\n## Modules\u00a7\u27e833\u27e9\n\napplication\u27e834\u27e9\n    End user application handling.\n\nchangelog\u27e835\u27e9Nowhere\n    Changelog and migrations\n\ndpi\u27e826\u27e9\n    DPI\n\nerror\u27e836\u27e9\n\n\nevent\u27e837\u27e9\n    The `Event`\u27e838\u27e9 enum and assorted supporting types.\n\nevent_loop\u27e839\u27e9\n    The `EventLoop`\u27e86\u27e9 struct and assorted supporting types, including `ControlFlow`\u27e840\u27e9.\n\nkeyboard\u27e841\u27e9\n    Types related to the keyboard.\n\nmonitor\u27e842\u27e9\n    Types useful for interacting with a user\u2019s monitors.\n\nplatform\u27e821\u27e9\n    Contains traits with platform-specific methods in them.\n\nwindow\u27e843\u27e9\n    The `Window`\u27e85\u27e9 struct and associated types.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/winit/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/winit/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/winit/latest/src/winit/lib.rs.html#1-217: Source\n\u27e84\u27e9 https://docs.rs/winit/latest/winit/#building-windows: \u00a7\n\u27e85\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html: struct winit::window::Window - `Window`\n\u27e86\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html: struct winit::event_loop::EventLoop - `EventLoop`\n\u27e87\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.new: associated function winit::event_loop::EventLoop::new - `EventLoop::new()`\n\u27e88\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.create_window: method winit::event_loop::ActiveEventLoop::create_window - `create_window`\n\u27e89\u27e9 https://docs.rs/winit/latest/winit/#event-handling: \u00a7\n\u27e810\u27e9 https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html: enum winit::event::WindowEvent - `WindowEvent`\n\u27e811\u27e9 https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html: enum winit::event::DeviceEvent - `DeviceEvent`\n\u27e812\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.UserEvent: variant winit::event::Event::UserEvent - `Event::UserEvent`\n\u27e813\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.run_app: method winit::event_loop::EventLoop::run_app - `EventLoop::run_app()`\n\u27e814\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.exit: method winit::event_loop::ActiveEventLoop::exit - `exit()`\n\u27e815\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.LoopExiting: variant winit::event::Event::LoopExiting - `Event::LoopExiting`\n\u27e816\u27e9 https://docs.rs/winit/latest/winit/platform/pump_events/trait.EventLoopExtPumpEvents.html#method.pump_app_events: method winit::platform::pump_events::EventLoopExtPumpEvents::pump_app_events - `EventLoopExtPumpEvents::pump_app_events()`\n\u27e817\u27e9 https://docs.rs/winit/latest/winit/#fn1: 1\n\u27e818\u27e9 https://docs.rs/winit/latest/winit/window/struct.WindowId.html: struct winit::window::WindowId - `WindowId`\n\u27e819\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.id: method winit::window::Window::id - `Window::id()`\n\u27e820\u27e9 https://docs.rs/winit/latest/winit/#drawing-on-the-window: \u00a7\n\u27e821\u27e9 https://docs.rs/winit/latest/winit/platform/index.html: mod winit::platform - `platform`\n\u27e822\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_window_handle: `raw_window_handle`\n\u27e823\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_display_handle: `raw_display_handle`\n\u27e824\u27e9 https://docs.rs/winit/latest/winit/window/struct.WindowAttributes.html#method.with_visible: method winit::window::WindowAttributes::with_visible - `visible` set to `false`\n\u27e825\u27e9 https://docs.rs/winit/latest/winit/#ui-scaling: \u00a7\n\u27e826\u27e9 https://docs.rs/winit/latest/winit/dpi/index.html: mod winit::dpi - `dpi`\n\u27e827\u27e9 https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged: variant winit::event::WindowEvent::ScaleFactorChanged - `ScaleFactorChanged`\n\u27e828\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.scale_factor: method winit::window::Window::scale_factor - `window.scale_factor()`\n\u27e829\u27e9 https://docs.rs/winit/latest/winit/#cargo-features: \u00a7\n\u27e830\u27e9 https://crates.io/crates/serde: Serde\n\u27e831\u27e9 https://docs.rs/winit/latest/winit/#fnref1: \u21a9\n\u27e832\u27e9 https://docs.rs/winit/latest/winit/#reexports: \u00a7\n\u27e833\u27e9 https://docs.rs/winit/latest/winit/#modules: \u00a7\n\u27e834\u27e9 https://docs.rs/winit/latest/winit/application/index.html: mod winit::application - application\n\u27e835\u27e9 https://docs.rs/winit/latest/winit/changelog/index.html: mod winit::changelog - changelog\n\u27e836\u27e9 https://docs.rs/winit/latest/winit/error/index.html: mod winit::error - error\n\u27e837\u27e9 https://docs.rs/winit/latest/winit/event/index.html: mod winit::event - event\n\u27e838\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html: enum winit::event::Event - `Event`\n\u27e839\u27e9 https://docs.rs/winit/latest/winit/event_loop/index.html: mod winit::event_loop - event_loop\n\u27e840\u27e9 https://docs.rs/winit/latest/winit/event_loop/enum.ControlFlow.html: enum winit::event_loop::ControlFlow - `ControlFlow`\n\u27e841\u27e9 https://docs.rs/winit/latest/winit/keyboard/index.html: mod winit::keyboard - keyboard\n\u27e842\u27e9 https://docs.rs/winit/latest/winit/monitor/index.html: mod winit::monitor - monitor\n\u27e843\u27e9 https://docs.rs/winit/latest/winit/window/index.html: mod winit::window - window\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 12696,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118985.1580757"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/winit",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [110 releases](https://lib.rs/crates/winit/versions)\n0.30.11 |  May 21, 2025   \n---|---  \n0.30.9 |  Feb 6, 2025   \n0.30.7 |  Dec 22, 2024   \n0.30.5 |  Aug 8, 2024   \n0.4.9 |  Mar 26, 2016   \n#**2** in [GUI](https://lib.rs/gui \"Crates to help you create a graphical user interface.\")\nDownload history 408259/week @ 2025-03-10 346326/week @ 2025-03-17 336928/week @ 2025-03-24 310943/week @ 2025-03-31 299263/week @ 2025-04-07 272116/week @ 2025-04-14 295295/week @ 2025-04-21 292113/week @ 2025-04-28 267428/week @ 2025-05-05 243260/week @ 2025-05-12 248744/week @ 2025-05-19 215925/week @ 2025-05-26 263262/week @ 2025-06-02 256445/week @ 2025-06-09 236872/week @ 2025-06-16 226057/week @ 2025-06-23\n**994,471** downloads per month Used in [**2,856** crates (807 directly)](https://lib.rs/crates/winit/rev)\n**Apache-2.0**\n2MB  **43K** SLoC\n# winit - Cross-platform window creation and management in Rust\n[![Crates.io](https://img.shields.io/crates/v/winit.svg)](https://crates.io/crates/winit) [![Docs.rs](https://img.gs/czjpqfbdkz/full/https://docs.rs/winit/badge.svg)](https://docs.rs/winit) [![Master Docs](https://img.shields.io/github/actions/workflow/status/rust-windowing/winit/docs.yml?branch=master&label=master%20docs)](https://rust-windowing.github.io/winit/winit/index.html) [![CI Status](https://img.gs/czjpqfbdkz/full/https://github.com/rust-windowing/winit/workflows/CI/badge.svg)](https://github.com/rust-windowing/winit/actions)\n```\n```[``dependencies``]`\n`winit ``=` ``\"`0.30.11`\"``\n``\n```\n\n## [Documentation](https://docs.rs/winit)\nFor features _within_ the scope of winit, see [FEATURES.md](https://github.com/rust-windowing/winit/blob/911fad0af0a3c88c52f60c72d43159a8ccfb4937/FEATURES.md).\nFor features _outside_ the scope of winit, see [Are we GUI Yet?](https://areweguiyet.com/) and [Are we game yet?](https://arewegameyet.rs/), depending on what kind of project you're looking to do.\n## Contact Us\nJoin us in our [![Matrix](https://img.shields.io/badge/Matrix-%23rust--windowing%3Amatrix.org-blueviolet.svg)](https://matrix.to/#/#rust-windowing:matrix.org) room.\nThe maintainers have a meeting every friday at UTC 15. The meeting notes can be found [here](https://hackmd.io/@winit-meetings).\n## Usage\nWinit is a window creation and management library. It can create windows and lets you handle events (for example: the window being resized, a key being pressed, a mouse movement, etc.) produced by the window.\nWinit is designed to be a low-level brick in a hierarchy of libraries. Consequently, in order to show something on the window you need to use the platform-specific getters provided by winit, or another library.\n## CONTRIBUTING\nFor contributing guidelines see [CONTRIBUTING.md](https://github.com/rust-windowing/winit/blob/911fad0af0a3c88c52f60c72d43159a8ccfb4937/CONTRIBUTING.md).\n## MSRV Policy\nThis crate's Minimum Supported Rust Version (MSRV) is **1.70**. Changes to the MSRV will be accompanied by a minor version bump.\nAs a **tentative** policy, the upper bound of the MSRV is given by the following formula:\n```\n``min``(`sid`,` stable `-` `3``)`\n`\n```\n\nWhere ``sid`` is the current version of ``rustc`` provided by [Debian Sid](https://packages.debian.org/sid/rustc), and ``stable`` is the latest stable version of Rust. This bound may be broken in case of a major ecosystem shift or a security vulnerability.\nThe exception is for the Android platform, where a higher Rust version must be used for certain Android features. In this case, the MSRV will be capped at the latest stable version of Rust minus three. This inconsistency is not reflected in Cargo metadata, as it is not powerful enough to expose this restriction.\nAll crates in the [``rust-windowing``](https://github.com/rust-windowing) organizations have the same MSRV policy.\n### Platform-specific usage\nCheck out the [```winit`::``platform``](https://rust-windowing.github.io/winit/winit/platform/index.html) module for platform-specific usage.\n#### Dependencies\n~0.5\u201323MB  ~360K SLoC\n  * [wayland](https://lib.rs/crates/winit/features#feature-wayland \"default feature\") [ahash](https://lib.rs/crates/ahash \"0.8.7\")[+no-rng](https://lib.rs/crates/ahash/features#feature-no-rng) unix not  redox wasm android ios mac\n  * [x11](https://lib.rs/crates/winit/features#feature-x11 \"default feature\") [bytemuck](https://lib.rs/crates/bytemuck \"1.13.1\") unix not  redox wasm android ios mac\n  * [calloop](https://lib.rs/crates/calloop \"0.13.0\") unix not  redox wasm android ios mac\n  * [libc](https://lib.rs/crates/libc \"0.2.64\") unix not  redox wasm android ios mac\n  * [wayland](https://lib.rs/crates/winit/features#feature-wayland \"default feature\") [memmap2](https://lib.rs/crates/memmap2 \"new\") 0.9 unix not  redox wasm android ios mac\n  * [orbclient](https://lib.rs/crates/orbclient \"0.3.47\") redox\n  * [x11](https://lib.rs/crates/winit/features#feature-x11 \"default feature\") [percent-encoding](https://lib.rs/crates/percent-encoding \"2.0\") unix not  redox wasm android ios mac\n  * [redox_syscall](https://lib.rs/crates/redox_syscall \"obsolete\") 0.4.1 redox\n  * [rustix](https://lib.rs/crates/rustix \"obsolete\") 0.38.4[+std](https://lib.rs/crates/rustix/features#feature-std)[+system](https://lib.rs/crates/rustix/features#feature-system)[+thread](https://lib.rs/crates/rustix/features#feature-thread)[+process](https://lib.rs/crates/rustix/features#feature-process) unix not  redox wasm android ios mac\n  * [wayland](https://lib.rs/crates/winit/features#feature-wayland \"default feature\") [smithay-client-toolkit](https://lib.rs/crates/smithay-client-toolkit \"renamed sctk, new\") 0.19.2[+calloop](https://lib.rs/crates/smithay-client-toolkit/features#feature-calloop) unix not  redox wasm android ios mac\n  * [wayland-csd-adwaita](https://lib.rs/crates/winit/features#feature-wayland-csd-adwaita \"default feature\") [wayland-csd\u2026crossfont?](https://lib.rs/crates/winit/features#feature-wayland-csd-adwaita-crossfont \"optional feature\") [sctk-adwaita](https://lib.rs/crates/sctk-adwaita \"0.10.1\") unix not  redox wasm android ios mac\n  * [wayland](https://lib.rs/crates/winit/features#feature-wayland \"default feature\") [wayland-dlopen](https://lib.rs/crates/winit/features#feature-wayland-dlopen \"default feature\") [wayland-backend](https://lib.rs/crates/wayland-backend \"0.3.10\")[+client_system](https://lib.rs/crates/wayland-backend/features#feature-client_system) unix not  redox wasm android ios mac\n  * [wayland](https://lib.rs/crates/winit/features#feature-wayland \"default feature\") [wayland-client](https://lib.rs/crates/wayland-client \"new\") 0.31.10 unix not  redox wasm android ios mac\n  * [wayland](https://lib.rs/crates/winit/features#feature-wayland \"default feature\") [wayland-protocols](https://lib.rs/crates/wayland-protocols \"new\") 0.32.8[+staging](https://lib.rs/crates/wayland-protocols/features#feature-staging) unix not  redox wasm android ios mac\n  * [wayland](https://lib.rs/crates/winit/features#feature-wayland \"default feature\") [wayland-protocols-plasma](https://lib.rs/crates/wayland-protocols-plasma \"0.3.8\")[+client](https://lib.rs/crates/wayland-protocols-plasma/features#feature-client) unix not  redox wasm android ios mac\n  * [x11](https://lib.rs/crates/winit/features#feature-x11 \"default feature\") [x11-dl](https://lib.rs/crates/x11-dl \"2.19.1\") unix not  redox wasm android ios mac\n  * [x11](https://lib.rs/crates/winit/features#feature-x11 \"default feature\") [x11rb](https://lib.rs/crates/x11rb \"0.13.0\")[+allow\u2026code](https://lib.rs/crates/x11rb/features#feature-allow-unsafe-code)[+dl-libxcb](https://lib.rs/crates/x11rb/features#feature-dl-libxcb)[+randr](https://lib.rs/crates/x11rb/features#feature-randr)[+resource_manager](https://lib.rs/crates/x11rb/features#feature-resource_manager)[+xinput](https://lib.rs/crates/x11rb/features#feature-xinput)[+xkb](https://lib.rs/crates/x11rb/features#feature-xkb) unix not  redox wasm android ios mac\n  * [xkbcommon-dl](https://lib.rs/crates/xkbcommon-dl \"0.4.2\") unix not  redox wasm android ios mac\n  * [android-activity](https://lib.rs/crates/android-activity \"new\") 0.6 android\n  * [atomic-waker](https://lib.rs/crates/atomic-waker \"1\") wasm atomics\n  * [concurrent-queue](https://lib.rs/crates/concurrent-queue \"2\") wasm atomics\n  * [js-sys](https://lib.rs/crates/js-sys \"0.3.70\") wasm\n  * [pin-project](https://lib.rs/crates/pin-project \"1\") wasm\n  * [wasm-bindgen](https://lib.rs/crates/wasm-bindgen \"0.2.93\") wasm\n  * [wasm-bindgen-futures](https://lib.rs/crates/wasm-bindgen-futures \"0.4.43\") wasm\n  * [web-time](https://lib.rs/crates/web-time \"1\") wasm\n  * [web-sys](https://lib.rs/crates/web-sys \"renamed web_sys, 0.3.70\")[+AbortController](https://lib.rs/crates/web-sys/features#feature-AbortController)[+AbortSignal](https://lib.rs/crates/web-sys/features#feature-AbortSignal)[+Blob](https://lib.rs/crates/web-sys/features#feature-Blob)[+BlobPropertyBag](https://lib.rs/crates/web-sys/features#feature-BlobPropertyBag)[+console](https://lib.rs/crates/web-sys/features#feature-console)[+CssStyleDeclara\u2026](https://lib.rs/crates/web-sys/features#feature-CssStyleDeclaration)[+Document](https://lib.rs/crates/web-sys/features#feature-Document)[+DomException](https://lib.rs/crates/web-sys/features#feature-DomException)[+DomRect](https://lib.rs/crates/web-sys/features#feature-DomRect)[+DomRectReadOnly](https://lib.rs/crates/web-sys/features#feature-DomRectReadOnly)\u2026 wasm\n  * [bitflags](https://lib.rs/crates/bitflags \"new\") 2.0\n  * [block2](https://lib.rs/crates/block2 \"outdated\") 0.5.1 ios mac\n  * [core-foundation](https://lib.rs/crates/core-foundation \"0.9.3\") ios mac\n  * [core-graphics](https://lib.rs/crates/core-graphics \"outdated\") 0.23.1 mac\n  * [objc2](https://lib.rs/crates/objc2 \"outdated\") 0.5.2 ios mac\n  * [objc2-app-kit](https://lib.rs/crates/objc2-app-kit \"outdated\") 0.2.2[+NSAppearance](https://lib.rs/crates/objc2-app-kit/features#feature-NSAppearance)[+NSApplication](https://lib.rs/crates/objc2-app-kit/features#feature-NSApplication)[+NSBitmapImageRep](https://lib.rs/crates/objc2-app-kit/features#feature-NSBitmapImageRep)[+NSButton](https://lib.rs/crates/objc2-app-kit/features#feature-NSButton)[+NSColor](https://lib.rs/crates/objc2-app-kit/features#feature-NSColor)[+NSControl](https://lib.rs/crates/objc2-app-kit/features#feature-NSControl)[+NSCursor](https://lib.rs/crates/objc2-app-kit/features#feature-NSCursor)[+NSDragging](https://lib.rs/crates/objc2-app-kit/features#feature-NSDragging)[+NSEvent](https://lib.rs/crates/objc2-app-kit/features#feature-NSEvent)[+NSGraphics](https://lib.rs/crates/objc2-app-kit/features#feature-NSGraphics)\u2026 mac\n  * [objc2-foundation](https://lib.rs/crates/objc2-foundation \"outdated\") 0.2.2[+block2](https://lib.rs/crates/objc2-foundation/features#feature-block2)[+dispatch](https://lib.rs/crates/objc2-foundation/features#feature-dispatch)[+NSArray](https://lib.rs/crates/objc2-foundation/features#feature-NSArray)[+NSEnumerator](https://lib.rs/crates/objc2-foundation/features#feature-NSEnumerator)[+NSGeometry](https://lib.rs/crates/objc2-foundation/features#feature-NSGeometry)[+NSObjCRuntime](https://lib.rs/crates/objc2-foundation/features#feature-NSObjCRuntime)[+NSOperation](https://lib.rs/crates/objc2-foundation/features#feature-NSOperation)[+NSString](https://lib.rs/crates/objc2-foundation/features#feature-NSString)[+NSProcessInfo](https://lib.rs/crates/objc2-foundation/features#feature-NSProcessInfo)[+NSThread](https://lib.rs/crates/objc2-foundation/features#feature-NSThread)\u2026 ios mac\n  * [objc2-ui-kit](https://lib.rs/crates/objc2-ui-kit \"0.2.2\")[+UIApplication](https://lib.rs/crates/objc2-ui-kit/features#feature-UIApplication)[+UIDevice](https://lib.rs/crates/objc2-ui-kit/features#feature-UIDevice)[+UIEvent](https://lib.rs/crates/objc2-ui-kit/features#feature-UIEvent)[+UIGeometry](https://lib.rs/crates/objc2-ui-kit/features#feature-UIGeometry)[+UIGestureRecogn\u2026](https://lib.rs/crates/objc2-ui-kit/features#feature-UIGestureRecognizer)[+UITextInput](https://lib.rs/crates/objc2-ui-kit/features#feature-UITextInput)[+UITextInputTraits](https://lib.rs/crates/objc2-ui-kit/features#feature-UITextInputTraits)[+UIOrientation](https://lib.rs/crates/objc2-ui-kit/features#feature-UIOrientation)[+UIPanGestureRec\u2026](https://lib.rs/crates/objc2-ui-kit/features#feature-UIPanGestureRecognizer)[+UIPinchGestureR\u2026](https://lib.rs/crates/objc2-ui-kit/features#feature-UIPinchGestureRecognizer)\u2026 ios\n  * [cursor-icon](https://lib.rs/crates/cursor-icon \"1.1.0\")\n  * [dpi](https://lib.rs/crates/dpi \"0.1.1\")\n  * [ndk](https://lib.rs/crates/ndk \"new\") 0.9 android\n  * [rwh_04?](https://lib.rs/crates/winit/features#feature-rwh_04 \"optional feature\") [raw-window-handle](https://lib.rs/crates/raw-window-handle \"renamed rwh_04, obsolete\") 0.4\n  * [rwh_05?](https://lib.rs/crates/winit/features#feature-rwh_05 \"optional feature\") [raw-window-handle](https://lib.rs/crates/raw-window-handle \"renamed rwh_05, obsolete\") 0.5.2[+std](https://lib.rs/crates/raw-window-handle/features#feature-std)\n  * [rwh_06](https://lib.rs/crates/winit/features#feature-rwh_06 \"default feature\") [raw-window-handle](https://lib.rs/crates/raw-window-handle \"renamed rwh_06, new\") 0.6[+std](https://lib.rs/crates/raw-window-handle/features#feature-std)\n  * [ optional ](https://lib.rs/crates/winit/features#feature-serde \"serde is optional feature\") [serde](https://lib.rs/crates/serde \"1\")[+serde_derive](https://lib.rs/crates/serde/features#feature-serde_derive)\n  * [smol_str](https://lib.rs/crates/smol_str \"0.2.0\")\n  * [tracing](https://lib.rs/crates/tracing \"0.1.40\")\n  * [unicode-segmentation](https://lib.rs/crates/unicode-segmentation \"1.7.1\") win\n  * [windows-sys](https://lib.rs/crates/windows-sys \"obsolete\") 0.52[+Win32\u2026HumanInterfaceDevice](https://lib.rs/crates/windows-sys/features#feature-Win32_Devices_HumanInterfaceDevice)[+Win32_Foundation](https://lib.rs/crates/windows-sys/features#feature-Win32_Foundation)[+Win32_Globalization](https://lib.rs/crates/windows-sys/features#feature-Win32_Globalization)[+Win32\u2026Dwm](https://lib.rs/crates/windows-sys/features#feature-Win32_Graphics_Dwm)[+Win32\u2026Gdi](https://lib.rs/crates/windows-sys/features#feature-Win32_Graphics_Gdi)[+Win32_Media](https://lib.rs/crates/windows-sys/features#feature-Win32_Media)[+Win32\u2026StructuredStorage](https://lib.rs/crates/windows-sys/features#feature-Win32_System_Com_StructuredStorage)[+Win32\u2026Com](https://lib.rs/crates/windows-sys/features#feature-Win32_System_Com)[+Win32\u2026LibraryLoader](https://lib.rs/crates/windows-sys/features#feature-Win32_System_LibraryLoader)[+Win32\u2026Ole](https://lib.rs/crates/windows-sys/features#feature-Win32_System_Ole)\u2026 win\n\n\n  * build `build.rs`\n  * build  [cfg_aliases](https://lib.rs/crates/cfg_aliases \"0.2.1\")\n  * dev  [console_error_panic_hook](https://lib.rs/crates/console_error_panic_hook \"0.1\") wasm\n  * dev  [image](https://lib.rs/crates/image \"new\") 0.25[+png](https://lib.rs/crates/image/features#feature-png)\n  * dev  [softbuffer](https://lib.rs/crates/softbuffer \"0.4.0\")[+x11](https://lib.rs/crates/softbuffer/features#feature-x11)[+x11-dlopen](https://lib.rs/crates/softbuffer/features#feature-x11-dlopen)[+wayland](https://lib.rs/crates/softbuffer/features#feature-wayland)[+wayland-dlopen](https://lib.rs/crates/softbuffer/features#feature-wayland-dlopen) not  android ios\n  * dev  [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3.18\")[+env-filter](https://lib.rs/crates/tracing-subscriber/features#feature-env-filter)\n  * dev  [tracing-web](https://lib.rs/crates/tracing-web \"0.1\") wasm\n\n\n#### [Other features](https://lib.rs/crates/winit/features)\n  * [android-game-activity](https://lib.rs/crates/winit/features#feature-android-game-activity)\n  * [android-native-activity](https://lib.rs/crates/winit/features#feature-android-native-activity)\n  * [mint](https://lib.rs/crates/winit/features#feature-mint)\n  * [wayland-csd-adwaita-notitle](https://lib.rs/crates/winit/features#feature-wayland-csd-adwaita-notitle)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  110 releases\u27e81\u27e9\n0.30.11 |  May 21, 2025   \n---|---  \n0.30.9 |  Feb 6, 2025   \n0.30.7 |  Dec 22, 2024   \n0.30.5 |  Aug 8, 2024   \n0.4.9 |  Mar 26, 2016   \n#**2** in GUI\u27e82\u27e9\nDownload history 408259/week @ 2025-03-10 346326/week @ 2025-03-17 336928/week @ 2025-03-24 310943/week @ 2025-03-31 299263/week @ 2025-04-07 272116/week @ 2025-04-14 295295/week @ 2025-04-21 292113/week @ 2025-04-28 267428/week @ 2025-05-05 243260/week @ 2025-05-12 248744/week @ 2025-05-19 215925/week @ 2025-05-26 263262/week @ 2025-06-02 256445/week @ 2025-06-09 236872/week @ 2025-06-16 226057/week @ 2025-06-23\n**994,471** downloads per month Used in **2,856** crates (807 directly)\u27e83\u27e9\n**Apache-2.0**\n2MB  **43K** SLoC\n# winit - Cross-platform window creation and management in Rust\n![Crates.io\u27e84\u27e9](https://crates.io/crates/winit) ![Docs.rs\u27e85\u27e9](https://docs.rs/winit) ![Master Docs\u27e86\u27e9](https://rust-windowing.github.io/winit/winit/index.html) ![CI Status\u27e87\u27e9](https://github.com/rust-windowing/winit/actions)\n```\n```[``dependencies``]`\n`winit ``=` ``\"`0.30.11`\"``\n``\n```\n\n## Documentation\u27e88\u27e9\nFor features _within_ the scope of winit, see FEATURES.md\u27e89\u27e9.\nFor features _outside_ the scope of winit, see Are we GUI Yet?\u27e810\u27e9 and Are we game yet?\u27e811\u27e9, depending on what kind of project you're looking to do.\n## Contact Us\nJoin us in our ![Matrix\u27e812\u27e9](https://matrix.to/#/#rust-windowing:matrix.org) room.\nThe maintainers have a meeting every friday at UTC 15. The meeting notes can be found here\u27e813\u27e9.\n## Usage\nWinit is a window creation and management library. It can create windows and lets you handle events (for example: the window being resized, a key being pressed, a mouse movement, etc.) produced by the window.\nWinit is designed to be a low-level brick in a hierarchy of libraries. Consequently, in order to show something on the window you need to use the platform-specific getters provided by winit, or another library.\n## CONTRIBUTING\nFor contributing guidelines see CONTRIBUTING.md\u27e814\u27e9.\n## MSRV Policy\nThis crate's Minimum Supported Rust Version (MSRV) is **1.70**. Changes to the MSRV will be accompanied by a minor version bump.\nAs a **tentative** policy, the upper bound of the MSRV is given by the following formula:\n```\n``min``(`sid`,` stable `-` `3``)`\n`\n```\n\nWhere ``sid`` is the current version of ``rustc`` provided by Debian Sid\u27e815\u27e9, and ``stable`` is the latest stable version of Rust. This bound may be broken in case of a major ecosystem shift or a security vulnerability.\nThe exception is for the Android platform, where a higher Rust version must be used for certain Android features. In this case, the MSRV will be capped at the latest stable version of Rust minus three. This inconsistency is not reflected in Cargo metadata, as it is not powerful enough to expose this restriction.\nAll crates in the ``rust-windowing``\u27e816\u27e9 organizations have the same MSRV policy.\n### Platform-specific usage\nCheck out the ```winit`::``platform``\u27e817\u27e9 module for platform-specific usage.\n#### Dependencies\n~0.5\u201323MB  ~360K SLoC\n  * wayland\u27e818\u27e9 ahash\u27e819\u27e9+no-rng\u27e820\u27e9 unix not  redox wasm android ios mac\n  * x11\u27e821\u27e9 bytemuck\u27e822\u27e9 unix not  redox wasm android ios mac\n  * calloop\u27e823\u27e9 unix not  redox wasm android ios mac\n  * libc\u27e824\u27e9 unix not  redox wasm android ios mac\n  * wayland\u27e818\u27e9 memmap2\u27e825\u27e9 0.9 unix not  redox wasm android ios mac\n  * orbclient\u27e826\u27e9 redox\n  * x11\u27e821\u27e9 percent-encoding\u27e827\u27e9 unix not  redox wasm android ios mac\n  * redox_syscall\u27e828\u27e9 0.4.1 redox\n  * rustix\u27e829\u27e9 0.38.4+std\u27e830\u27e9+system\u27e831\u27e9+thread\u27e832\u27e9+process\u27e833\u27e9 unix not  redox wasm android ios mac\n  * wayland\u27e818\u27e9 smithay-client-toolkit\u27e834\u27e9 0.19.2+calloop\u27e835\u27e9 unix not  redox wasm android ios mac\n  * wayland-csd-adwaita\u27e836\u27e9 wayland-csd\u2026crossfont?\u27e837\u27e9 sctk-adwaita\u27e838\u27e9 unix not  redox wasm android ios mac\n  * wayland\u27e818\u27e9 wayland-dlopen\u27e839\u27e9 wayland-backend\u27e840\u27e9+client_system\u27e841\u27e9 unix not  redox wasm android ios mac\n  * wayland\u27e818\u27e9 wayland-client\u27e842\u27e9 0.31.10 unix not  redox wasm android ios mac\n  * wayland\u27e818\u27e9 wayland-protocols\u27e843\u27e9 0.32.8+staging\u27e844\u27e9 unix not  redox wasm android ios mac\n  * wayland\u27e818\u27e9 wayland-protocols-plasma\u27e845\u27e9+client\u27e846\u27e9 unix not  redox wasm android ios mac\n  * x11\u27e821\u27e9 x11-dl\u27e847\u27e9 unix not  redox wasm android ios mac\n  * x11\u27e821\u27e9 x11rb\u27e848\u27e9+allow\u2026code\u27e849\u27e9+dl-libxcb\u27e850\u27e9+randr\u27e851\u27e9+resource_manager\u27e852\u27e9+xinput\u27e853\u27e9+xkb\u27e854\u27e9 unix not  redox wasm android ios mac\n  * xkbcommon-dl\u27e855\u27e9 unix not  redox wasm android ios mac\n  * android-activity\u27e856\u27e9 0.6 android\n  * atomic-waker\u27e857\u27e9 wasm atomics\n  * concurrent-queue\u27e858\u27e9 wasm atomics\n  * js-sys\u27e859\u27e9 wasm\n  * pin-project\u27e860\u27e9 wasm\n  * wasm-bindgen\u27e861\u27e9 wasm\n  * wasm-bindgen-futures\u27e862\u27e9 wasm\n  * web-time\u27e863\u27e9 wasm\n  * web-sys\u27e864\u27e9+AbortController\u27e865\u27e9+AbortSignal\u27e866\u27e9+Blob\u27e867\u27e9+BlobPropertyBag\u27e868\u27e9+console\u27e869\u27e9+CssStyleDeclara\u2026\u27e870\u27e9+Document\u27e871\u27e9+DomException\u27e872\u27e9+DomRect\u27e873\u27e9+DomRectReadOnly\u27e874\u27e9\u2026 wasm\n  * bitflags\u27e875\u27e9 2.0\n  * block2\u27e876\u27e9 0.5.1 ios mac\n  * core-foundation\u27e877\u27e9 ios mac\n  * core-graphics\u27e878\u27e9 0.23.1 mac\n  * objc2\u27e879\u27e9 0.5.2 ios mac\n  * objc2-app-kit\u27e880\u27e9 0.2.2+NSAppearance\u27e881\u27e9+NSApplication\u27e882\u27e9+NSBitmapImageRep\u27e883\u27e9+NSButton\u27e884\u27e9+NSColor\u27e885\u27e9+NSControl\u27e886\u27e9+NSCursor\u27e887\u27e9+NSDragging\u27e888\u27e9+NSEvent\u27e889\u27e9+NSGraphics\u27e890\u27e9\u2026 mac\n  * objc2-foundation\u27e891\u27e9 0.2.2+block2\u27e892\u27e9+dispatch\u27e893\u27e9+NSArray\u27e894\u27e9+NSEnumerator\u27e895\u27e9+NSGeometry\u27e896\u27e9+NSObjCRuntime\u27e897\u27e9+NSOperation\u27e898\u27e9+NSString\u27e899\u27e9+NSProcessInfo\u27e8100\u27e9+NSThread\u27e8101\u27e9\u2026 ios mac\n  * objc2-ui-kit\u27e8102\u27e9+UIApplication\u27e8103\u27e9+UIDevice\u27e8104\u27e9+UIEvent\u27e8105\u27e9+UIGeometry\u27e8106\u27e9+UIGestureRecogn\u2026\u27e8107\u27e9+UITextInput\u27e8108\u27e9+UITextInputTraits\u27e8109\u27e9+UIOrientation\u27e8110\u27e9+UIPanGestureRec\u2026\u27e8111\u27e9+UIPinchGestureR\u2026\u27e8112\u27e9\u2026 ios\n  * cursor-icon\u27e8113\u27e9\n  * dpi\u27e8114\u27e9\n  * ndk\u27e8115\u27e9 0.9 android\n  * rwh_04?\u27e8116\u27e9 raw-window-handle\u27e8117\u27e9 0.4\n  * rwh_05?\u27e8118\u27e9 raw-window-handle\u27e8117\u27e9 0.5.2+std\u27e8119\u27e9\n  * rwh_06\u27e8120\u27e9 raw-window-handle\u27e8117\u27e9 0.6+std\u27e8119\u27e9\n  *  optional \u27e8121\u27e9 serde\u27e8122\u27e9+serde_derive\u27e8123\u27e9\n  * smol_str\u27e8124\u27e9\n  * tracing\u27e8125\u27e9\n  * unicode-segmentation\u27e8126\u27e9 win\n  * windows-sys\u27e8127\u27e9 0.52+Win32\u2026HumanInterfaceDevice\u27e8128\u27e9+Win32_Foundation\u27e8129\u27e9+Win32_Globalization\u27e8130\u27e9+Win32\u2026Dwm\u27e8131\u27e9+Win32\u2026Gdi\u27e8132\u27e9+Win32_Media\u27e8133\u27e9+Win32\u2026StructuredStorage\u27e8134\u27e9+Win32\u2026Com\u27e8135\u27e9+Win32\u2026LibraryLoader\u27e8136\u27e9+Win32\u2026Ole\u27e8137\u27e9\u2026 win\n\n\n  * build `build.rs`\n  * build  cfg_aliases\u27e8138\u27e9\n  * dev  console_error_panic_hook\u27e8139\u27e9 wasm\n  * dev  image\u27e8140\u27e9 0.25+png\u27e8141\u27e9\n  * dev  softbuffer\u27e8142\u27e9+x11\u27e8143\u27e9+x11-dlopen\u27e8144\u27e9+wayland\u27e8145\u27e9+wayland-dlopen\u27e8146\u27e9 not  android ios\n  * dev  tracing-subscriber\u27e8147\u27e9+env-filter\u27e8148\u27e9\n  * dev  tracing-web\u27e8149\u27e9 wasm\n\n\n#### Other features\u27e8150\u27e9\n  * android-game-activity\u27e8151\u27e9\n  * android-native-activity\u27e8152\u27e9\n  * mint\u27e8153\u27e9\n  * wayland-csd-adwaita-notitle\u27e8154\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/winit/versions: 110 releases\n\u27e82\u27e9 https://lib.rs/gui: Crates to help you create a graphical user interface. - GUI\n\u27e83\u27e9 https://lib.rs/crates/winit/rev: **2,856** crates (807 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/winit.svg: ![Crates.io\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/winit/badge.svg: ![Docs.rs\n\u27e86\u27e9 https://img.shields.io/github/actions/workflow/status/rust-windowing/winit/docs.yml?branch=master&label=master%20docs: ![Master Docs\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/rust-windowing/winit/workflows/CI/badge.svg: ![CI Status\n\u27e88\u27e9 https://docs.rs/winit: Documentation\n\u27e89\u27e9 https://github.com/rust-windowing/winit/blob/911fad0af0a3c88c52f60c72d43159a8ccfb4937/FEATURES.md: FEATURES.md\n\u27e810\u27e9 https://areweguiyet.com/: Are we GUI Yet?\n\u27e811\u27e9 https://arewegameyet.rs/: Are we game yet?\n\u27e812\u27e9 https://img.shields.io/badge/Matrix-%23rust--windowing%3Amatrix.org-blueviolet.svg: ![Matrix\n\u27e813\u27e9 https://hackmd.io/@winit-meetings: here\n\u27e814\u27e9 https://github.com/rust-windowing/winit/blob/911fad0af0a3c88c52f60c72d43159a8ccfb4937/CONTRIBUTING.md: CONTRIBUTING.md\n\u27e815\u27e9 https://packages.debian.org/sid/rustc: Debian Sid\n\u27e816\u27e9 https://github.com/rust-windowing: ``rust-windowing``\n\u27e817\u27e9 https://rust-windowing.github.io/winit/winit/platform/index.html: ```winit`::``platform``\n\u27e818\u27e9 https://lib.rs/crates/winit/features#feature-wayland: default feature - wayland\n\u27e819\u27e9 https://lib.rs/crates/ahash: 0.8.7 - ahash\n\u27e820\u27e9 https://lib.rs/crates/ahash/features#feature-no-rng: +no-rng\n\u27e821\u27e9 https://lib.rs/crates/winit/features#feature-x11: default feature - x11\n\u27e822\u27e9 https://lib.rs/crates/bytemuck: 1.13.1 - bytemuck\n\u27e823\u27e9 https://lib.rs/crates/calloop: 0.13.0 - calloop\n\u27e824\u27e9 https://lib.rs/crates/libc: 0.2.64 - libc\n\u27e825\u27e9 https://lib.rs/crates/memmap2: new - memmap2\n\u27e826\u27e9 https://lib.rs/crates/orbclient: 0.3.47 - orbclient\n\u27e827\u27e9 https://lib.rs/crates/percent-encoding: 2.0 - percent-encoding\n\u27e828\u27e9 https://lib.rs/crates/redox_syscall: obsolete - redox_syscall\n\u27e829\u27e9 https://lib.rs/crates/rustix: obsolete - rustix\n\u27e830\u27e9 https://lib.rs/crates/rustix/features#feature-std: +std\n\u27e831\u27e9 https://lib.rs/crates/rustix/features#feature-system: +system\n\u27e832\u27e9 https://lib.rs/crates/rustix/features#feature-thread: +thread\n\u27e833\u27e9 https://lib.rs/crates/rustix/features#feature-process: +process\n\u27e834\u27e9 https://lib.rs/crates/smithay-client-toolkit: renamed sctk, new - smithay-client-toolkit\n\u27e835\u27e9 https://lib.rs/crates/smithay-client-toolkit/features#feature-calloop: +calloop\n\u27e836\u27e9 https://lib.rs/crates/winit/features#feature-wayland-csd-adwaita: default feature - wayland-csd-adwaita\n\u27e837\u27e9 https://lib.rs/crates/winit/features#feature-wayland-csd-adwaita-crossfont: optional feature - wayland-csd\u2026crossfont?\n\u27e838\u27e9 https://lib.rs/crates/sctk-adwaita: 0.10.1 - sctk-adwaita\n\u27e839\u27e9 https://lib.rs/crates/winit/features#feature-wayland-dlopen: default feature - wayland-dlopen\n\u27e840\u27e9 https://lib.rs/crates/wayland-backend: 0.3.10 - wayland-backend\n\u27e841\u27e9 https://lib.rs/crates/wayland-backend/features#feature-client_system: +client_system\n\u27e842\u27e9 https://lib.rs/crates/wayland-client: new - wayland-client\n\u27e843\u27e9 https://lib.rs/crates/wayland-protocols: new - wayland-protocols\n\u27e844\u27e9 https://lib.rs/crates/wayland-protocols/features#feature-staging: +staging\n\u27e845\u27e9 https://lib.rs/crates/wayland-protocols-plasma: 0.3.8 - wayland-protocols-plasma\n\u27e846\u27e9 https://lib.rs/crates/wayland-protocols-plasma/features#feature-client: +client\n\u27e847\u27e9 https://lib.rs/crates/x11-dl: 2.19.1 - x11-dl\n\u27e848\u27e9 https://lib.rs/crates/x11rb: 0.13.0 - x11rb\n\u27e849\u27e9 https://lib.rs/crates/x11rb/features#feature-allow-unsafe-code: +allow\u2026code\n\u27e850\u27e9 https://lib.rs/crates/x11rb/features#feature-dl-libxcb: +dl-libxcb\n\u27e851\u27e9 https://lib.rs/crates/x11rb/features#feature-randr: +randr\n\u27e852\u27e9 https://lib.rs/crates/x11rb/features#feature-resource_manager: +resource_manager\n\u27e853\u27e9 https://lib.rs/crates/x11rb/features#feature-xinput: +xinput\n\u27e854\u27e9 https://lib.rs/crates/x11rb/features#feature-xkb: +xkb\n\u27e855\u27e9 https://lib.rs/crates/xkbcommon-dl: 0.4.2 - xkbcommon-dl\n\u27e856\u27e9 https://lib.rs/crates/android-activity: new - android-activity\n\u27e857\u27e9 https://lib.rs/crates/atomic-waker: 1 - atomic-waker\n\u27e858\u27e9 https://lib.rs/crates/concurrent-queue: 2 - concurrent-queue\n\u27e859\u27e9 https://lib.rs/crates/js-sys: 0.3.70 - js-sys\n\u27e860\u27e9 https://lib.rs/crates/pin-project: 1 - pin-project\n\u27e861\u27e9 https://lib.rs/crates/wasm-bindgen: 0.2.93 - wasm-bindgen\n\u27e862\u27e9 https://lib.rs/crates/wasm-bindgen-futures: 0.4.43 - wasm-bindgen-futures\n\u27e863\u27e9 https://lib.rs/crates/web-time: 1 - web-time\n\u27e864\u27e9 https://lib.rs/crates/web-sys: renamed web_sys, 0.3.70 - web-sys\n\u27e865\u27e9 https://lib.rs/crates/web-sys/features#feature-AbortController: +AbortController\n\u27e866\u27e9 https://lib.rs/crates/web-sys/features#feature-AbortSignal: +AbortSignal\n\u27e867\u27e9 https://lib.rs/crates/web-sys/features#feature-Blob: +Blob\n\u27e868\u27e9 https://lib.rs/crates/web-sys/features#feature-BlobPropertyBag: +BlobPropertyBag\n\u27e869\u27e9 https://lib.rs/crates/web-sys/features#feature-console: +console\n\u27e870\u27e9 https://lib.rs/crates/web-sys/features#feature-CssStyleDeclaration: +CssStyleDeclara\u2026\n\u27e871\u27e9 https://lib.rs/crates/web-sys/features#feature-Document: +Document\n\u27e872\u27e9 https://lib.rs/crates/web-sys/features#feature-DomException: +DomException\n\u27e873\u27e9 https://lib.rs/crates/web-sys/features#feature-DomRect: +DomRect\n\u27e874\u27e9 https://lib.rs/crates/web-sys/features#feature-DomRectReadOnly: +DomRectReadOnly\n\u27e875\u27e9 https://lib.rs/crates/bitflags: new - bitflags\n\u27e876\u27e9 https://lib.rs/crates/block2: outdated - block2\n\u27e877\u27e9 https://lib.rs/crates/core-foundation: 0.9.3 - core-foundation\n\u27e878\u27e9 https://lib.rs/crates/core-graphics: outdated - core-graphics\n\u27e879\u27e9 https://lib.rs/crates/objc2: outdated - objc2\n\u27e880\u27e9 https://lib.rs/crates/objc2-app-kit: outdated - objc2-app-kit\n\u27e881\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSAppearance: +NSAppearance\n\u27e882\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSApplication: +NSApplication\n\u27e883\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSBitmapImageRep: +NSBitmapImageRep\n\u27e884\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSButton: +NSButton\n\u27e885\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSColor: +NSColor\n\u27e886\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSControl: +NSControl\n\u27e887\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSCursor: +NSCursor\n\u27e888\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSDragging: +NSDragging\n\u27e889\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSEvent: +NSEvent\n\u27e890\u27e9 https://lib.rs/crates/objc2-app-kit/features#feature-NSGraphics: +NSGraphics\n\u27e891\u27e9 https://lib.rs/crates/objc2-foundation: outdated - objc2-foundation\n\u27e892\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-block2: +block2\n\u27e893\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-dispatch: +dispatch\n\u27e894\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-NSArray: +NSArray\n\u27e895\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-NSEnumerator: +NSEnumerator\n\u27e896\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-NSGeometry: +NSGeometry\n\u27e897\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-NSObjCRuntime: +NSObjCRuntime\n\u27e898\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-NSOperation: +NSOperation\n\u27e899\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-NSString: +NSString\n\u27e8100\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-NSProcessInfo: +NSProcessInfo\n\u27e8101\u27e9 https://lib.rs/crates/objc2-foundation/features#feature-NSThread: +NSThread\n\u27e8102\u27e9 https://lib.rs/crates/objc2-ui-kit: 0.2.2 - objc2-ui-kit\n\u27e8103\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UIApplication: +UIApplication\n\u27e8104\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UIDevice: +UIDevice\n\u27e8105\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UIEvent: +UIEvent\n\u27e8106\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UIGeometry: +UIGeometry\n\u27e8107\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UIGestureRecognizer: +UIGestureRecogn\u2026\n\u27e8108\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UITextInput: +UITextInput\n\u27e8109\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UITextInputTraits: +UITextInputTraits\n\u27e8110\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UIOrientation: +UIOrientation\n\u27e8111\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UIPanGestureRecognizer: +UIPanGestureRec\u2026\n\u27e8112\u27e9 https://lib.rs/crates/objc2-ui-kit/features#feature-UIPinchGestureRecognizer: +UIPinchGestureR\u2026\n\u27e8113\u27e9 https://lib.rs/crates/cursor-icon: 1.1.0 - cursor-icon\n\u27e8114\u27e9 https://lib.rs/crates/dpi: 0.1.1 - dpi\n\u27e8115\u27e9 https://lib.rs/crates/ndk: new - ndk\n\u27e8116\u27e9 https://lib.rs/crates/winit/features#feature-rwh_04: optional feature - rwh_04?\n\u27e8117\u27e9 https://lib.rs/crates/raw-window-handle: renamed rwh_04, obsolete - raw-window-handle\n\u27e8118\u27e9 https://lib.rs/crates/winit/features#feature-rwh_05: optional feature - rwh_05?\n\u27e8119\u27e9 https://lib.rs/crates/raw-window-handle/features#feature-std: +std\n\u27e8120\u27e9 https://lib.rs/crates/winit/features#feature-rwh_06: default feature - rwh_06\n\u27e8121\u27e9 https://lib.rs/crates/winit/features#feature-serde: serde is optional feature -  optional \n\u27e8122\u27e9 https://lib.rs/crates/serde: 1 - serde\n\u27e8123\u27e9 https://lib.rs/crates/serde/features#feature-serde_derive: +serde_derive\n\u27e8124\u27e9 https://lib.rs/crates/smol_str: 0.2.0 - smol_str\n\u27e8125\u27e9 https://lib.rs/crates/tracing: 0.1.40 - tracing\n\u27e8126\u27e9 https://lib.rs/crates/unicode-segmentation: 1.7.1 - unicode-segmentation\n\u27e8127\u27e9 https://lib.rs/crates/windows-sys: obsolete - windows-sys\n\u27e8128\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Devices_HumanInterfaceDevice: +Win32\u2026HumanInterfaceDevice\n\u27e8129\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Foundation: +Win32_Foundation\n\u27e8130\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Globalization: +Win32_Globalization\n\u27e8131\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Graphics_Dwm: +Win32\u2026Dwm\n\u27e8132\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Graphics_Gdi: +Win32\u2026Gdi\n\u27e8133\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Media: +Win32_Media\n\u27e8134\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_System_Com_StructuredStorage: +Win32\u2026StructuredStorage\n\u27e8135\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_System_Com: +Win32\u2026Com\n\u27e8136\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_System_LibraryLoader: +Win32\u2026LibraryLoader\n\u27e8137\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_System_Ole: +Win32\u2026Ole\n\u27e8138\u27e9 https://lib.rs/crates/cfg_aliases: 0.2.1 - cfg_aliases\n\u27e8139\u27e9 https://lib.rs/crates/console_error_panic_hook: 0.1 - console_error_panic_hook\n\u27e8140\u27e9 https://lib.rs/crates/image: new - image\n\u27e8141\u27e9 https://lib.rs/crates/image/features#feature-png: +png\n\u27e8142\u27e9 https://lib.rs/crates/softbuffer: 0.4.0 - softbuffer\n\u27e8143\u27e9 https://lib.rs/crates/softbuffer/features#feature-x11: +x11\n\u27e8144\u27e9 https://lib.rs/crates/softbuffer/features#feature-x11-dlopen: +x11-dlopen\n\u27e8145\u27e9 https://lib.rs/crates/softbuffer/features#feature-wayland: +wayland\n\u27e8146\u27e9 https://lib.rs/crates/softbuffer/features#feature-wayland-dlopen: +wayland-dlopen\n\u27e8147\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3.18 - tracing-subscriber\n\u27e8148\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-env-filter: +env-filter\n\u27e8149\u27e9 https://lib.rs/crates/tracing-web: 0.1 - tracing-web\n\u27e8150\u27e9 https://lib.rs/crates/winit/features: Other features\n\u27e8151\u27e9 https://lib.rs/crates/winit/features#feature-android-game-activity: android-game-activity\n\u27e8152\u27e9 https://lib.rs/crates/winit/features#feature-android-native-activity: android-native-activity\n\u27e8153\u27e9 https://lib.rs/crates/winit/features#feature-mint: mint\n\u27e8154\u27e9 https://lib.rs/crates/winit/features#feature-wayland-csd-adwaita-notitle: wayland-csd-adwaita-notitle\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 15978,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118985.769914"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg_aliases@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_aliases-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_aliases",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_aliases-0.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libcfg_aliases-17c3a515ffbaf083.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libcfg_aliases-17c3a515ffbaf083.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cursor-icon@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cursor-icon-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cursor_icon",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cursor-icon-1.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libcursor_icon-1999bfe77305ea2a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#dpi@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dpi-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "dpi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dpi-0.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libdpi-c6ac2e76af057e43.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smol_str@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smol_str-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smol_str",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smol_str-0.2.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libsmol_str-b7abd2466138098b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libbitflags-f060a9da6c32ce35.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#raw-window-handle@0.6.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\raw-window-handle-0.6.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "raw_window_handle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\raw-window-handle-0.6.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libraw_window_handle-2036ae068b998de1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_segmentation",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.12.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libunicode_segmentation-ed3d48af618dcd80.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.33",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libtracing_core-52878b7c88c8abcd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libtracing-9c158f0bfef4114a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpixprbc2y/winit-0.30.11#winit@0.30.11",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "ahash",
                "bytemuck",
                "default",
                "memmap2",
                "percent-encoding",
                "rwh_06",
                "sctk",
                "sctk-adwaita",
                "wayland",
                "wayland-backend",
                "wayland-client",
                "wayland-csd-adwaita",
                "wayland-dlopen",
                "wayland-protocols",
                "wayland-protocols-plasma",
                "x11",
                "x11-dl",
                "x11rb"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\winit-a0e48533abb3c3a8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\winit-a0e48533abb3c3a8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpixprbc2y/winit-0.30.11#winit@0.30.11",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "windows_platform"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\winit-54336f79601779ca\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.52.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Devices",
                "Win32_Devices_HumanInterfaceDevice",
                "Win32_Foundation",
                "Win32_Globalization",
                "Win32_Graphics",
                "Win32_Graphics_Dwm",
                "Win32_Graphics_Gdi",
                "Win32_Media",
                "Win32_Security",
                "Win32_System",
                "Win32_System_Com",
                "Win32_System_Com_StructuredStorage",
                "Win32_System_LibraryLoader",
                "Win32_System_Ole",
                "Win32_System_SystemInformation",
                "Win32_System_SystemServices",
                "Win32_System_Threading",
                "Win32_System_WindowsProgramming",
                "Win32_UI",
                "Win32_UI_Accessibility",
                "Win32_UI_Controls",
                "Win32_UI_HiDpi",
                "Win32_UI_Input",
                "Win32_UI_Input_Ime",
                "Win32_UI_Input_KeyboardAndMouse",
                "Win32_UI_Input_Pointer",
                "Win32_UI_Input_Touch",
                "Win32_UI_Shell",
                "Win32_UI_TextServices",
                "Win32_UI_WindowsAndMessaging",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libwindows_sys-d0fb5a3791cd8bb5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpixprbc2y/winit-0.30.11#winit@0.30.11",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winit",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "ahash",
                "bytemuck",
                "default",
                "memmap2",
                "percent-encoding",
                "rwh_06",
                "sctk",
                "sctk-adwaita",
                "wayland",
                "wayland-backend",
                "wayland-client",
                "wayland-csd-adwaita",
                "wayland-dlopen",
                "wayland-protocols",
                "wayland-protocols-plasma",
                "x11",
                "x11-dl",
                "x11rb"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libwinit-c8f38fb4795404e8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg_aliases@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_aliases-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_aliases",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_aliases-0.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libcfg_aliases-17c3a515ffbaf083.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libcfg_aliases-17c3a515ffbaf083.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.33",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libtracing_core-52878b7c88c8abcd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libbitflags-f060a9da6c32ce35.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_segmentation",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.12.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libunicode_segmentation-ed3d48af618dcd80.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#dpi@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dpi-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "dpi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dpi-0.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libdpi-c6ac2e76af057e43.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cursor-icon@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cursor-icon-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cursor_icon",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cursor-icon-1.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libcursor_icon-1999bfe77305ea2a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smol_str@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smol_str-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smol_str",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smol_str-0.2.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libsmol_str-b7abd2466138098b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#raw-window-handle@0.6.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\raw-window-handle-0.6.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "raw_window_handle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\raw-window-handle-0.6.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libraw_window_handle-2036ae068b998de1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libtracing-9c158f0bfef4114a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.52.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Devices",
                "Win32_Devices_HumanInterfaceDevice",
                "Win32_Foundation",
                "Win32_Globalization",
                "Win32_Graphics",
                "Win32_Graphics_Dwm",
                "Win32_Graphics_Gdi",
                "Win32_Media",
                "Win32_Security",
                "Win32_System",
                "Win32_System_Com",
                "Win32_System_Com_StructuredStorage",
                "Win32_System_LibraryLoader",
                "Win32_System_Ole",
                "Win32_System_SystemInformation",
                "Win32_System_SystemServices",
                "Win32_System_Threading",
                "Win32_System_WindowsProgramming",
                "Win32_UI",
                "Win32_UI_Accessibility",
                "Win32_UI_Controls",
                "Win32_UI_HiDpi",
                "Win32_UI_Input",
                "Win32_UI_Input_Ime",
                "Win32_UI_Input_KeyboardAndMouse",
                "Win32_UI_Input_Pointer",
                "Win32_UI_Input_Touch",
                "Win32_UI_Shell",
                "Win32_UI_TextServices",
                "Win32_UI_WindowsAndMessaging",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libwindows_sys-d0fb5a3791cd8bb5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpixprbc2y/winit-0.30.11#winit@0.30.11",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "ahash",
                "bytemuck",
                "default",
                "memmap2",
                "percent-encoding",
                "rwh_06",
                "sctk",
                "sctk-adwaita",
                "wayland",
                "wayland-backend",
                "wayland-client",
                "wayland-csd-adwaita",
                "wayland-dlopen",
                "wayland-protocols",
                "wayland-protocols-plasma",
                "x11",
                "x11-dl",
                "x11rb"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\winit-ac4dbd2f0e5178df\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\winit-ac4dbd2f0e5178df\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpixprbc2y/winit-0.30.11#winit@0.30.11",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "windows_platform"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\build\\winit-b88d02c9aa9ab31b\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpixprbc2y/winit-0.30.11#winit@0.30.11",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winit",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "ahash",
                "bytemuck",
                "default",
                "memmap2",
                "percent-encoding",
                "rwh_06",
                "sctk",
                "sctk-adwaita",
                "wayland",
                "wayland-backend",
                "wayland-client",
                "wayland-csd-adwaita",
                "wayland-dlopen",
                "wayland-protocols",
                "wayland-protocols-plasma",
                "x11",
                "x11-dl",
                "x11rb"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpixprbc2y\\winit-0.30.11\\target\\debug\\deps\\libwinit-b6af544eac2c3971.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 242
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "winit",
          "version": "0.30.11",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/winit/latest/winit/all.html \"show sidebar\")\n# Crate winitCopy item path\n[Settings](https://docs.rs/winit/latest/settings.html)\n[Help](https://docs.rs/winit/latest/help.html)\nSummary[Source](https://docs.rs/winit/latest/src/winit/lib.rs.html#1-217)\nExpand description\nWinit is a cross-platform window creation and event loop management library.\n## [\u00a7](https://docs.rs/winit/latest/winit/#building-windows)Building windows\nBefore you can create a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\"), you first need to build an [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\"). This is done with the [`EventLoop::new()`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.new \"associated function winit::event_loop::EventLoop::new\") function.\n```\nuse winit::event_loop::EventLoop;\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ...\n}\n```\n\nThen you create a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") with [`create_window`](https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.create_window \"method winit::event_loop::ActiveEventLoop::create_window\").\n## [\u00a7](https://docs.rs/winit/latest/winit/#event-handling)Event handling\nOnce a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") has been created, it will generate different _events_. A [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") object can generate [`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\")s when certain input events occur, such as a cursor moving over the window or a key getting pressed while the window is focused. Devices can generate [`DeviceEvent`](https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html \"enum winit::event::DeviceEvent\")s, which contain unfiltered event data that isn\u2019t specific to a certain window. Some user activity, like mouse movement, can generate both a [`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\") _and_ a [`DeviceEvent`](https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html \"enum winit::event::DeviceEvent\"). You can also create and handle your own custom [`Event::UserEvent`](https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.UserEvent \"variant winit::event::Event::UserEvent\")s, if desired.\nYou can retrieve events by calling [`EventLoop::run_app()`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.run_app \"method winit::event_loop::EventLoop::run_app\"). This function will dispatch events for every [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") that was created with that particular [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\"), and will run until [`exit()`](https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.exit \"method winit::event_loop::ActiveEventLoop::exit\") is used, at which point [`Event::LoopExiting`](https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.LoopExiting \"variant winit::event::Event::LoopExiting\").\nWinit no longer uses a `EventLoop::poll_events() -> impl Iterator<Event>`-based event loop model, since that can\u2019t be implemented properly on some platforms (e.g web, iOS) and works poorly on most other platforms. However, this model can be re-implemented to an extent with [`EventLoopExtPumpEvents::pump_app_events()`](https://docs.rs/winit/latest/winit/platform/pump_events/trait.EventLoopExtPumpEvents.html#method.pump_app_events \"method winit::platform::pump_events::EventLoopExtPumpEvents::pump_app_events\") [1](https://docs.rs/winit/latest/winit/#fn1). See that method\u2019s documentation for more reasons about why it\u2019s discouraged beyond compatibility reasons.\n```\nuse winit::application::ApplicationHandler;\nuse winit::event::WindowEvent;\nuse winit::event_loop::{ActiveEventLoop, ControlFlow, EventLoop};\nuse winit::window::{Window, WindowId};\n#[derive(Default)]\nstruct App {\n  window: Option<Window>,\n}\nimpl ApplicationHandler for App {\n  fn resumed(&mut self, event_loop: &ActiveEventLoop) {\n    self.window = Some(event_loop.create_window(Window::default_attributes()).unwrap());\n  }\n  fn window_event(&mut self, event_loop: &ActiveEventLoop, id: WindowId, event: WindowEvent) {\n    match event {\n      WindowEvent::CloseRequested => {\n        println!(\"The close button was pressed; stopping\");\n        event_loop.exit();\n      },\n      WindowEvent::RedrawRequested => {\n        // Redraw the application.\n        //\n        // It's preferable for applications that do not render continuously to render in\n        // this event rather than in AboutToWait, since rendering in here allows\n        // the program to gracefully handle redraws requested by the OS.\n        // Draw.\n        // Queue a RedrawRequested event.\n        //\n        // You only need to call this if you've determined that you need to redraw in\n        // applications which do not always need to. Applications that redraw continuously\n        // can render here instead.\n        self.window.as_ref().unwrap().request_redraw();\n      }\n      _ => (),\n    }\n  }\n}\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ControlFlow::Poll continuously runs the event loop, even if the OS hasn't\n  // dispatched any events. This is ideal for games and similar applications.\n  event_loop.set_control_flow(ControlFlow::Poll);\n  // ControlFlow::Wait pauses the event loop if no events are available to process.\n  // This is ideal for non-game applications that only update in response to user\n  // input, and uses significantly less power/CPU time than ControlFlow::Poll.\n  event_loop.set_control_flow(ControlFlow::Wait);\n  let mut app = App::default();\n  event_loop.run_app(&mut app);\n}\n```\n\n[`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\") has a [`WindowId`](https://docs.rs/winit/latest/winit/window/struct.WindowId.html \"struct winit::window::WindowId\") member. In multi-window environments, it should be compared to the value returned by [`Window::id()`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.id \"method winit::window::Window::id\") to determine which [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") dispatched the event.\n## [\u00a7](https://docs.rs/winit/latest/winit/#drawing-on-the-window)Drawing on the window\nWinit doesn\u2019t directly provide any methods for drawing on a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\"). However, it allows you to retrieve the raw handle of the window and display (see the [`platform`](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\") module and/or the [`raw_window_handle`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_window_handle) and [`raw_display_handle`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_display_handle) methods), which in turn allows you to create an OpenGL/Vulkan/DirectX/Metal/etc. context that can be used to render graphics.\nNote that many platforms will display garbage data in the window\u2019s client area if the application doesn\u2019t render anything to the window by the time the desktop compositor is ready to display the window to the user. If you notice this happening, you should create the window with [`visible` set to `false`](https://docs.rs/winit/latest/winit/window/struct.WindowAttributes.html#method.with_visible \"method winit::window::WindowAttributes::with_visible\") and explicitly make the window visible only once you\u2019re ready to render into it.\n## [\u00a7](https://docs.rs/winit/latest/winit/#ui-scaling)UI scaling\nUI scaling is important, go read the docs for the [`dpi`](https://docs.rs/winit/latest/winit/dpi/index.html \"mod winit::dpi\") crate for an introduction.\nAll of Winit\u2019s functions return physical types, but can take either logical or physical coordinates as input, allowing you to use the most convenient coordinate system for your particular application.\nWinit will dispatch a [`ScaleFactorChanged`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged \"variant winit::event::WindowEvent::ScaleFactorChanged\") event whenever a window\u2019s scale factor has changed. This can happen if the user drags their window from a standard-resolution monitor to a high-DPI monitor or if the user changes their DPI settings. This allows you to rescale your application\u2019s UI elements and adjust how the platform changes the window\u2019s size to reflect the new scale factor. If a window hasn\u2019t received a [`ScaleFactorChanged`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged \"variant winit::event::WindowEvent::ScaleFactorChanged\") event, its scale factor can be found by calling [`window.scale_factor()`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.scale_factor \"method winit::window::Window::scale_factor\").\n## [\u00a7](https://docs.rs/winit/latest/winit/#cargo-features)Cargo Features\nWinit provides the following Cargo features:\n  * `x11` (enabled by default): On Unix platforms, enables the X11 backend.\n  * `wayland` (enabled by default): On Unix platforms, enables the Wayland backend.\n  * `rwh_04`: Implement `raw-window-handle v0.4` traits.\n  * `rwh_05`: Implement `raw-window-handle v0.5` traits.\n  * `rwh_06`: Implement `raw-window-handle v0.6` traits.\n  * `serde`: Enables serialization/deserialization of certain types with [Serde](https://crates.io/crates/serde).\n  * `mint`: Enables mint (math interoperability standard types) conversions.\n\n\nSee the [`platform`](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\") module for documentation on platform-specific cargo features.\n  1. `EventLoopExtPumpEvents::pump_app_events()` is only available on Windows, macOS, Android, X11 and Wayland. [\u21a9](https://docs.rs/winit/latest/winit/#fnref1)\n\n\n## Re-exports[\u00a7](https://docs.rs/winit/latest/winit/#reexports)\n\n`pub use rwh_04[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_04;``rwh_04`\n\n\n`pub use rwh_05[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_05;``rwh_05`\n\n\n`pub use rwh_06[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle;``rwh_06`\n\n## Modules[\u00a7](https://docs.rs/winit/latest/winit/#modules)\n\n[application](https://docs.rs/winit/latest/winit/application/index.html \"mod winit::application\")\n    End user application handling.\n\n[changelog](https://docs.rs/winit/latest/winit/changelog/index.html \"mod winit::changelog\")Nowhere\n    Changelog and migrations\n\n[dpi](https://docs.rs/winit/latest/winit/dpi/index.html \"mod winit::dpi\")\n    DPI\n\n[error](https://docs.rs/winit/latest/winit/error/index.html \"mod winit::error\")\n\n\n[event](https://docs.rs/winit/latest/winit/event/index.html \"mod winit::event\")\n    The [`Event`](https://docs.rs/winit/latest/winit/event/enum.Event.html \"enum winit::event::Event\") enum and assorted supporting types.\n\n[event_loop](https://docs.rs/winit/latest/winit/event_loop/index.html \"mod winit::event_loop\")\n    The [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\") struct and assorted supporting types, including [`ControlFlow`](https://docs.rs/winit/latest/winit/event_loop/enum.ControlFlow.html \"enum winit::event_loop::ControlFlow\").\n\n[keyboard](https://docs.rs/winit/latest/winit/keyboard/index.html \"mod winit::keyboard\")\n    Types related to the keyboard.\n\n[monitor](https://docs.rs/winit/latest/winit/monitor/index.html \"mod winit::monitor\")\n    Types useful for interacting with a user\u2019s monitors.\n\n[platform](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\")\n    Contains traits with platform-specific methods in them.\n\n[window](https://docs.rs/winit/latest/winit/window/index.html \"mod winit::window\")\n    The [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") struct and associated types.\n",
            "markdown_with_citations": "[](https://docs.rs/winit/latest/winit/all.html \"show sidebar\")\n# Crate winitCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nWinit is a cross-platform window creation and event loop management library.\n## \u00a7\u27e84\u27e9Building windows\nBefore you can create a `Window`\u27e85\u27e9, you first need to build an `EventLoop`\u27e86\u27e9. This is done with the `EventLoop::new()`\u27e87\u27e9 function.\n```\nuse winit::event_loop::EventLoop;\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ...\n}\n```\n\nThen you create a `Window`\u27e85\u27e9 with `create_window`\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Event handling\nOnce a `Window`\u27e85\u27e9 has been created, it will generate different _events_. A `Window`\u27e85\u27e9 object can generate `WindowEvent`\u27e810\u27e9s when certain input events occur, such as a cursor moving over the window or a key getting pressed while the window is focused. Devices can generate `DeviceEvent`\u27e811\u27e9s, which contain unfiltered event data that isn\u2019t specific to a certain window. Some user activity, like mouse movement, can generate both a `WindowEvent`\u27e810\u27e9 _and_ a `DeviceEvent`\u27e811\u27e9. You can also create and handle your own custom `Event::UserEvent`\u27e812\u27e9s, if desired.\nYou can retrieve events by calling `EventLoop::run_app()`\u27e813\u27e9. This function will dispatch events for every `Window`\u27e85\u27e9 that was created with that particular `EventLoop`\u27e86\u27e9, and will run until `exit()`\u27e814\u27e9 is used, at which point `Event::LoopExiting`\u27e815\u27e9.\nWinit no longer uses a `EventLoop::poll_events() -> impl Iterator<Event>`-based event loop model, since that can\u2019t be implemented properly on some platforms (e.g web, iOS) and works poorly on most other platforms. However, this model can be re-implemented to an extent with `EventLoopExtPumpEvents::pump_app_events()`\u27e816\u27e9 1\u27e817\u27e9. See that method\u2019s documentation for more reasons about why it\u2019s discouraged beyond compatibility reasons.\n```\nuse winit::application::ApplicationHandler;\nuse winit::event::WindowEvent;\nuse winit::event_loop::{ActiveEventLoop, ControlFlow, EventLoop};\nuse winit::window::{Window, WindowId};\n#[derive(Default)]\nstruct App {\n  window: Option<Window>,\n}\nimpl ApplicationHandler for App {\n  fn resumed(&mut self, event_loop: &ActiveEventLoop) {\n    self.window = Some(event_loop.create_window(Window::default_attributes()).unwrap());\n  }\n  fn window_event(&mut self, event_loop: &ActiveEventLoop, id: WindowId, event: WindowEvent) {\n    match event {\n      WindowEvent::CloseRequested => {\n        println!(\"The close button was pressed; stopping\");\n        event_loop.exit();\n      },\n      WindowEvent::RedrawRequested => {\n        // Redraw the application.\n        //\n        // It's preferable for applications that do not render continuously to render in\n        // this event rather than in AboutToWait, since rendering in here allows\n        // the program to gracefully handle redraws requested by the OS.\n        // Draw.\n        // Queue a RedrawRequested event.\n        //\n        // You only need to call this if you've determined that you need to redraw in\n        // applications which do not always need to. Applications that redraw continuously\n        // can render here instead.\n        self.window.as_ref().unwrap().request_redraw();\n      }\n      _ => (),\n    }\n  }\n}\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ControlFlow::Poll continuously runs the event loop, even if the OS hasn't\n  // dispatched any events. This is ideal for games and similar applications.\n  event_loop.set_control_flow(ControlFlow::Poll);\n  // ControlFlow::Wait pauses the event loop if no events are available to process.\n  // This is ideal for non-game applications that only update in response to user\n  // input, and uses significantly less power/CPU time than ControlFlow::Poll.\n  event_loop.set_control_flow(ControlFlow::Wait);\n  let mut app = App::default();\n  event_loop.run_app(&mut app);\n}\n```\n\n`WindowEvent`\u27e810\u27e9 has a `WindowId`\u27e818\u27e9 member. In multi-window environments, it should be compared to the value returned by `Window::id()`\u27e819\u27e9 to determine which `Window`\u27e85\u27e9 dispatched the event.\n## \u00a7\u27e820\u27e9Drawing on the window\nWinit doesn\u2019t directly provide any methods for drawing on a `Window`\u27e85\u27e9. However, it allows you to retrieve the raw handle of the window and display (see the `platform`\u27e821\u27e9 module and/or the `raw_window_handle`\u27e822\u27e9 and `raw_display_handle`\u27e823\u27e9 methods), which in turn allows you to create an OpenGL/Vulkan/DirectX/Metal/etc. context that can be used to render graphics.\nNote that many platforms will display garbage data in the window\u2019s client area if the application doesn\u2019t render anything to the window by the time the desktop compositor is ready to display the window to the user. If you notice this happening, you should create the window with `visible` set to `false`\u27e824\u27e9 and explicitly make the window visible only once you\u2019re ready to render into it.\n## \u00a7\u27e825\u27e9UI scaling\nUI scaling is important, go read the docs for the `dpi`\u27e826\u27e9 crate for an introduction.\nAll of Winit\u2019s functions return physical types, but can take either logical or physical coordinates as input, allowing you to use the most convenient coordinate system for your particular application.\nWinit will dispatch a `ScaleFactorChanged`\u27e827\u27e9 event whenever a window\u2019s scale factor has changed. This can happen if the user drags their window from a standard-resolution monitor to a high-DPI monitor or if the user changes their DPI settings. This allows you to rescale your application\u2019s UI elements and adjust how the platform changes the window\u2019s size to reflect the new scale factor. If a window hasn\u2019t received a `ScaleFactorChanged`\u27e827\u27e9 event, its scale factor can be found by calling `window.scale_factor()`\u27e828\u27e9.\n## \u00a7\u27e829\u27e9Cargo Features\nWinit provides the following Cargo features:\n  * `x11` (enabled by default): On Unix platforms, enables the X11 backend.\n  * `wayland` (enabled by default): On Unix platforms, enables the Wayland backend.\n  * `rwh_04`: Implement `raw-window-handle v0.4` traits.\n  * `rwh_05`: Implement `raw-window-handle v0.5` traits.\n  * `rwh_06`: Implement `raw-window-handle v0.6` traits.\n  * `serde`: Enables serialization/deserialization of certain types with Serde\u27e830\u27e9.\n  * `mint`: Enables mint (math interoperability standard types) conversions.\n\n\nSee the `platform`\u27e821\u27e9 module for documentation on platform-specific cargo features.\n  1. `EventLoopExtPumpEvents::pump_app_events()` is only available on Windows, macOS, Android, X11 and Wayland. \u21a9\u27e831\u27e9\n\n\n## Re-exports\u00a7\u27e832\u27e9\n\n`pub use rwh_04[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_04;``rwh_04`\n\n\n`pub use rwh_05[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_05;``rwh_05`\n\n\n`pub use rwh_06[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle;``rwh_06`\n\n## Modules\u00a7\u27e833\u27e9\n\napplication\u27e834\u27e9\n    End user application handling.\n\nchangelog\u27e835\u27e9Nowhere\n    Changelog and migrations\n\ndpi\u27e826\u27e9\n    DPI\n\nerror\u27e836\u27e9\n\n\nevent\u27e837\u27e9\n    The `Event`\u27e838\u27e9 enum and assorted supporting types.\n\nevent_loop\u27e839\u27e9\n    The `EventLoop`\u27e86\u27e9 struct and assorted supporting types, including `ControlFlow`\u27e840\u27e9.\n\nkeyboard\u27e841\u27e9\n    Types related to the keyboard.\n\nmonitor\u27e842\u27e9\n    Types useful for interacting with a user\u2019s monitors.\n\nplatform\u27e821\u27e9\n    Contains traits with platform-specific methods in them.\n\nwindow\u27e843\u27e9\n    The `Window`\u27e85\u27e9 struct and associated types.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/winit/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/winit/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/winit/latest/src/winit/lib.rs.html#1-217: Source\n\u27e84\u27e9 https://docs.rs/winit/latest/winit/#building-windows: \u00a7\n\u27e85\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html: struct winit::window::Window - `Window`\n\u27e86\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html: struct winit::event_loop::EventLoop - `EventLoop`\n\u27e87\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.new: associated function winit::event_loop::EventLoop::new - `EventLoop::new()`\n\u27e88\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.create_window: method winit::event_loop::ActiveEventLoop::create_window - `create_window`\n\u27e89\u27e9 https://docs.rs/winit/latest/winit/#event-handling: \u00a7\n\u27e810\u27e9 https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html: enum winit::event::WindowEvent - `WindowEvent`\n\u27e811\u27e9 https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html: enum winit::event::DeviceEvent - `DeviceEvent`\n\u27e812\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.UserEvent: variant winit::event::Event::UserEvent - `Event::UserEvent`\n\u27e813\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.run_app: method winit::event_loop::EventLoop::run_app - `EventLoop::run_app()`\n\u27e814\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.exit: method winit::event_loop::ActiveEventLoop::exit - `exit()`\n\u27e815\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.LoopExiting: variant winit::event::Event::LoopExiting - `Event::LoopExiting`\n\u27e816\u27e9 https://docs.rs/winit/latest/winit/platform/pump_events/trait.EventLoopExtPumpEvents.html#method.pump_app_events: method winit::platform::pump_events::EventLoopExtPumpEvents::pump_app_events - `EventLoopExtPumpEvents::pump_app_events()`\n\u27e817\u27e9 https://docs.rs/winit/latest/winit/#fn1: 1\n\u27e818\u27e9 https://docs.rs/winit/latest/winit/window/struct.WindowId.html: struct winit::window::WindowId - `WindowId`\n\u27e819\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.id: method winit::window::Window::id - `Window::id()`\n\u27e820\u27e9 https://docs.rs/winit/latest/winit/#drawing-on-the-window: \u00a7\n\u27e821\u27e9 https://docs.rs/winit/latest/winit/platform/index.html: mod winit::platform - `platform`\n\u27e822\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_window_handle: `raw_window_handle`\n\u27e823\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_display_handle: `raw_display_handle`\n\u27e824\u27e9 https://docs.rs/winit/latest/winit/window/struct.WindowAttributes.html#method.with_visible: method winit::window::WindowAttributes::with_visible - `visible` set to `false`\n\u27e825\u27e9 https://docs.rs/winit/latest/winit/#ui-scaling: \u00a7\n\u27e826\u27e9 https://docs.rs/winit/latest/winit/dpi/index.html: mod winit::dpi - `dpi`\n\u27e827\u27e9 https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged: variant winit::event::WindowEvent::ScaleFactorChanged - `ScaleFactorChanged`\n\u27e828\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.scale_factor: method winit::window::Window::scale_factor - `window.scale_factor()`\n\u27e829\u27e9 https://docs.rs/winit/latest/winit/#cargo-features: \u00a7\n\u27e830\u27e9 https://crates.io/crates/serde: Serde\n\u27e831\u27e9 https://docs.rs/winit/latest/winit/#fnref1: \u21a9\n\u27e832\u27e9 https://docs.rs/winit/latest/winit/#reexports: \u00a7\n\u27e833\u27e9 https://docs.rs/winit/latest/winit/#modules: \u00a7\n\u27e834\u27e9 https://docs.rs/winit/latest/winit/application/index.html: mod winit::application - application\n\u27e835\u27e9 https://docs.rs/winit/latest/winit/changelog/index.html: mod winit::changelog - changelog\n\u27e836\u27e9 https://docs.rs/winit/latest/winit/error/index.html: mod winit::error - error\n\u27e837\u27e9 https://docs.rs/winit/latest/winit/event/index.html: mod winit::event - event\n\u27e838\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html: enum winit::event::Event - `Event`\n\u27e839\u27e9 https://docs.rs/winit/latest/winit/event_loop/index.html: mod winit::event_loop - event_loop\n\u27e840\u27e9 https://docs.rs/winit/latest/winit/event_loop/enum.ControlFlow.html: enum winit::event_loop::ControlFlow - `ControlFlow`\n\u27e841\u27e9 https://docs.rs/winit/latest/winit/keyboard/index.html: mod winit::keyboard - keyboard\n\u27e842\u27e9 https://docs.rs/winit/latest/winit/monitor/index.html: mod winit::monitor - monitor\n\u27e843\u27e9 https://docs.rs/winit/latest/winit/window/index.html: mod winit::window - window\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "winit",
          "version": "0.30.11",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/winit/latest/winit/all.html \"show sidebar\")\n# Crate winitCopy item path\n[Settings](https://docs.rs/winit/latest/settings.html)\n[Help](https://docs.rs/winit/latest/help.html)\nSummary[Source](https://docs.rs/winit/latest/src/winit/lib.rs.html#1-217)\nExpand description\nWinit is a cross-platform window creation and event loop management library.\n## [\u00a7](https://docs.rs/winit/latest/winit/#building-windows)Building windows\nBefore you can create a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\"), you first need to build an [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\"). This is done with the [`EventLoop::new()`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.new \"associated function winit::event_loop::EventLoop::new\") function.\n```\nuse winit::event_loop::EventLoop;\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ...\n}\n```\n\nThen you create a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") with [`create_window`](https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.create_window \"method winit::event_loop::ActiveEventLoop::create_window\").\n## [\u00a7](https://docs.rs/winit/latest/winit/#event-handling)Event handling\nOnce a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") has been created, it will generate different _events_. A [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") object can generate [`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\")s when certain input events occur, such as a cursor moving over the window or a key getting pressed while the window is focused. Devices can generate [`DeviceEvent`](https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html \"enum winit::event::DeviceEvent\")s, which contain unfiltered event data that isn\u2019t specific to a certain window. Some user activity, like mouse movement, can generate both a [`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\") _and_ a [`DeviceEvent`](https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html \"enum winit::event::DeviceEvent\"). You can also create and handle your own custom [`Event::UserEvent`](https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.UserEvent \"variant winit::event::Event::UserEvent\")s, if desired.\nYou can retrieve events by calling [`EventLoop::run_app()`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.run_app \"method winit::event_loop::EventLoop::run_app\"). This function will dispatch events for every [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") that was created with that particular [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\"), and will run until [`exit()`](https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.exit \"method winit::event_loop::ActiveEventLoop::exit\") is used, at which point [`Event::LoopExiting`](https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.LoopExiting \"variant winit::event::Event::LoopExiting\").\nWinit no longer uses a `EventLoop::poll_events() -> impl Iterator<Event>`-based event loop model, since that can\u2019t be implemented properly on some platforms (e.g web, iOS) and works poorly on most other platforms. However, this model can be re-implemented to an extent with [`EventLoopExtPumpEvents::pump_app_events()`](https://docs.rs/winit/latest/winit/platform/pump_events/trait.EventLoopExtPumpEvents.html#method.pump_app_events \"method winit::platform::pump_events::EventLoopExtPumpEvents::pump_app_events\") [1](https://docs.rs/winit/latest/winit/#fn1). See that method\u2019s documentation for more reasons about why it\u2019s discouraged beyond compatibility reasons.\n```\nuse winit::application::ApplicationHandler;\nuse winit::event::WindowEvent;\nuse winit::event_loop::{ActiveEventLoop, ControlFlow, EventLoop};\nuse winit::window::{Window, WindowId};\n#[derive(Default)]\nstruct App {\n  window: Option<Window>,\n}\nimpl ApplicationHandler for App {\n  fn resumed(&mut self, event_loop: &ActiveEventLoop) {\n    self.window = Some(event_loop.create_window(Window::default_attributes()).unwrap());\n  }\n  fn window_event(&mut self, event_loop: &ActiveEventLoop, id: WindowId, event: WindowEvent) {\n    match event {\n      WindowEvent::CloseRequested => {\n        println!(\"The close button was pressed; stopping\");\n        event_loop.exit();\n      },\n      WindowEvent::RedrawRequested => {\n        // Redraw the application.\n        //\n        // It's preferable for applications that do not render continuously to render in\n        // this event rather than in AboutToWait, since rendering in here allows\n        // the program to gracefully handle redraws requested by the OS.\n        // Draw.\n        // Queue a RedrawRequested event.\n        //\n        // You only need to call this if you've determined that you need to redraw in\n        // applications which do not always need to. Applications that redraw continuously\n        // can render here instead.\n        self.window.as_ref().unwrap().request_redraw();\n      }\n      _ => (),\n    }\n  }\n}\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ControlFlow::Poll continuously runs the event loop, even if the OS hasn't\n  // dispatched any events. This is ideal for games and similar applications.\n  event_loop.set_control_flow(ControlFlow::Poll);\n  // ControlFlow::Wait pauses the event loop if no events are available to process.\n  // This is ideal for non-game applications that only update in response to user\n  // input, and uses significantly less power/CPU time than ControlFlow::Poll.\n  event_loop.set_control_flow(ControlFlow::Wait);\n  let mut app = App::default();\n  event_loop.run_app(&mut app);\n}\n```\n\n[`WindowEvent`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html \"enum winit::event::WindowEvent\") has a [`WindowId`](https://docs.rs/winit/latest/winit/window/struct.WindowId.html \"struct winit::window::WindowId\") member. In multi-window environments, it should be compared to the value returned by [`Window::id()`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.id \"method winit::window::Window::id\") to determine which [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") dispatched the event.\n## [\u00a7](https://docs.rs/winit/latest/winit/#drawing-on-the-window)Drawing on the window\nWinit doesn\u2019t directly provide any methods for drawing on a [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\"). However, it allows you to retrieve the raw handle of the window and display (see the [`platform`](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\") module and/or the [`raw_window_handle`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_window_handle) and [`raw_display_handle`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_display_handle) methods), which in turn allows you to create an OpenGL/Vulkan/DirectX/Metal/etc. context that can be used to render graphics.\nNote that many platforms will display garbage data in the window\u2019s client area if the application doesn\u2019t render anything to the window by the time the desktop compositor is ready to display the window to the user. If you notice this happening, you should create the window with [`visible` set to `false`](https://docs.rs/winit/latest/winit/window/struct.WindowAttributes.html#method.with_visible \"method winit::window::WindowAttributes::with_visible\") and explicitly make the window visible only once you\u2019re ready to render into it.\n## [\u00a7](https://docs.rs/winit/latest/winit/#ui-scaling)UI scaling\nUI scaling is important, go read the docs for the [`dpi`](https://docs.rs/winit/latest/winit/dpi/index.html \"mod winit::dpi\") crate for an introduction.\nAll of Winit\u2019s functions return physical types, but can take either logical or physical coordinates as input, allowing you to use the most convenient coordinate system for your particular application.\nWinit will dispatch a [`ScaleFactorChanged`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged \"variant winit::event::WindowEvent::ScaleFactorChanged\") event whenever a window\u2019s scale factor has changed. This can happen if the user drags their window from a standard-resolution monitor to a high-DPI monitor or if the user changes their DPI settings. This allows you to rescale your application\u2019s UI elements and adjust how the platform changes the window\u2019s size to reflect the new scale factor. If a window hasn\u2019t received a [`ScaleFactorChanged`](https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged \"variant winit::event::WindowEvent::ScaleFactorChanged\") event, its scale factor can be found by calling [`window.scale_factor()`](https://docs.rs/winit/latest/winit/window/struct.Window.html#method.scale_factor \"method winit::window::Window::scale_factor\").\n## [\u00a7](https://docs.rs/winit/latest/winit/#cargo-features)Cargo Features\nWinit provides the following Cargo features:\n  * `x11` (enabled by default): On Unix platforms, enables the X11 backend.\n  * `wayland` (enabled by default): On Unix platforms, enables the Wayland backend.\n  * `rwh_04`: Implement `raw-window-handle v0.4` traits.\n  * `rwh_05`: Implement `raw-window-handle v0.5` traits.\n  * `rwh_06`: Implement `raw-window-handle v0.6` traits.\n  * `serde`: Enables serialization/deserialization of certain types with [Serde](https://crates.io/crates/serde).\n  * `mint`: Enables mint (math interoperability standard types) conversions.\n\n\nSee the [`platform`](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\") module for documentation on platform-specific cargo features.\n  1. `EventLoopExtPumpEvents::pump_app_events()` is only available on Windows, macOS, Android, X11 and Wayland. [\u21a9](https://docs.rs/winit/latest/winit/#fnref1)\n\n\n## Re-exports[\u00a7](https://docs.rs/winit/latest/winit/#reexports)\n\n`pub use rwh_04[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_04;``rwh_04`\n\n\n`pub use rwh_05[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_05;``rwh_05`\n\n\n`pub use rwh_06[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle;``rwh_06`\n\n## Modules[\u00a7](https://docs.rs/winit/latest/winit/#modules)\n\n[application](https://docs.rs/winit/latest/winit/application/index.html \"mod winit::application\")\n    End user application handling.\n\n[changelog](https://docs.rs/winit/latest/winit/changelog/index.html \"mod winit::changelog\")Nowhere\n    Changelog and migrations\n\n[dpi](https://docs.rs/winit/latest/winit/dpi/index.html \"mod winit::dpi\")\n    DPI\n\n[error](https://docs.rs/winit/latest/winit/error/index.html \"mod winit::error\")\n\n\n[event](https://docs.rs/winit/latest/winit/event/index.html \"mod winit::event\")\n    The [`Event`](https://docs.rs/winit/latest/winit/event/enum.Event.html \"enum winit::event::Event\") enum and assorted supporting types.\n\n[event_loop](https://docs.rs/winit/latest/winit/event_loop/index.html \"mod winit::event_loop\")\n    The [`EventLoop`](https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html \"struct winit::event_loop::EventLoop\") struct and assorted supporting types, including [`ControlFlow`](https://docs.rs/winit/latest/winit/event_loop/enum.ControlFlow.html \"enum winit::event_loop::ControlFlow\").\n\n[keyboard](https://docs.rs/winit/latest/winit/keyboard/index.html \"mod winit::keyboard\")\n    Types related to the keyboard.\n\n[monitor](https://docs.rs/winit/latest/winit/monitor/index.html \"mod winit::monitor\")\n    Types useful for interacting with a user\u2019s monitors.\n\n[platform](https://docs.rs/winit/latest/winit/platform/index.html \"mod winit::platform\")\n    Contains traits with platform-specific methods in them.\n\n[window](https://docs.rs/winit/latest/winit/window/index.html \"mod winit::window\")\n    The [`Window`](https://docs.rs/winit/latest/winit/window/struct.Window.html \"struct winit::window::Window\") struct and associated types.\n",
            "markdown_with_citations": "[](https://docs.rs/winit/latest/winit/all.html \"show sidebar\")\n# Crate winitCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nWinit is a cross-platform window creation and event loop management library.\n## \u00a7\u27e84\u27e9Building windows\nBefore you can create a `Window`\u27e85\u27e9, you first need to build an `EventLoop`\u27e86\u27e9. This is done with the `EventLoop::new()`\u27e87\u27e9 function.\n```\nuse winit::event_loop::EventLoop;\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ...\n}\n```\n\nThen you create a `Window`\u27e85\u27e9 with `create_window`\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Event handling\nOnce a `Window`\u27e85\u27e9 has been created, it will generate different _events_. A `Window`\u27e85\u27e9 object can generate `WindowEvent`\u27e810\u27e9s when certain input events occur, such as a cursor moving over the window or a key getting pressed while the window is focused. Devices can generate `DeviceEvent`\u27e811\u27e9s, which contain unfiltered event data that isn\u2019t specific to a certain window. Some user activity, like mouse movement, can generate both a `WindowEvent`\u27e810\u27e9 _and_ a `DeviceEvent`\u27e811\u27e9. You can also create and handle your own custom `Event::UserEvent`\u27e812\u27e9s, if desired.\nYou can retrieve events by calling `EventLoop::run_app()`\u27e813\u27e9. This function will dispatch events for every `Window`\u27e85\u27e9 that was created with that particular `EventLoop`\u27e86\u27e9, and will run until `exit()`\u27e814\u27e9 is used, at which point `Event::LoopExiting`\u27e815\u27e9.\nWinit no longer uses a `EventLoop::poll_events() -> impl Iterator<Event>`-based event loop model, since that can\u2019t be implemented properly on some platforms (e.g web, iOS) and works poorly on most other platforms. However, this model can be re-implemented to an extent with `EventLoopExtPumpEvents::pump_app_events()`\u27e816\u27e9 1\u27e817\u27e9. See that method\u2019s documentation for more reasons about why it\u2019s discouraged beyond compatibility reasons.\n```\nuse winit::application::ApplicationHandler;\nuse winit::event::WindowEvent;\nuse winit::event_loop::{ActiveEventLoop, ControlFlow, EventLoop};\nuse winit::window::{Window, WindowId};\n#[derive(Default)]\nstruct App {\n  window: Option<Window>,\n}\nimpl ApplicationHandler for App {\n  fn resumed(&mut self, event_loop: &ActiveEventLoop) {\n    self.window = Some(event_loop.create_window(Window::default_attributes()).unwrap());\n  }\n  fn window_event(&mut self, event_loop: &ActiveEventLoop, id: WindowId, event: WindowEvent) {\n    match event {\n      WindowEvent::CloseRequested => {\n        println!(\"The close button was pressed; stopping\");\n        event_loop.exit();\n      },\n      WindowEvent::RedrawRequested => {\n        // Redraw the application.\n        //\n        // It's preferable for applications that do not render continuously to render in\n        // this event rather than in AboutToWait, since rendering in here allows\n        // the program to gracefully handle redraws requested by the OS.\n        // Draw.\n        // Queue a RedrawRequested event.\n        //\n        // You only need to call this if you've determined that you need to redraw in\n        // applications which do not always need to. Applications that redraw continuously\n        // can render here instead.\n        self.window.as_ref().unwrap().request_redraw();\n      }\n      _ => (),\n    }\n  }\n}\nfn main() {\n  let event_loop = EventLoop::new().unwrap();\n  // ControlFlow::Poll continuously runs the event loop, even if the OS hasn't\n  // dispatched any events. This is ideal for games and similar applications.\n  event_loop.set_control_flow(ControlFlow::Poll);\n  // ControlFlow::Wait pauses the event loop if no events are available to process.\n  // This is ideal for non-game applications that only update in response to user\n  // input, and uses significantly less power/CPU time than ControlFlow::Poll.\n  event_loop.set_control_flow(ControlFlow::Wait);\n  let mut app = App::default();\n  event_loop.run_app(&mut app);\n}\n```\n\n`WindowEvent`\u27e810\u27e9 has a `WindowId`\u27e818\u27e9 member. In multi-window environments, it should be compared to the value returned by `Window::id()`\u27e819\u27e9 to determine which `Window`\u27e85\u27e9 dispatched the event.\n## \u00a7\u27e820\u27e9Drawing on the window\nWinit doesn\u2019t directly provide any methods for drawing on a `Window`\u27e85\u27e9. However, it allows you to retrieve the raw handle of the window and display (see the `platform`\u27e821\u27e9 module and/or the `raw_window_handle`\u27e822\u27e9 and `raw_display_handle`\u27e823\u27e9 methods), which in turn allows you to create an OpenGL/Vulkan/DirectX/Metal/etc. context that can be used to render graphics.\nNote that many platforms will display garbage data in the window\u2019s client area if the application doesn\u2019t render anything to the window by the time the desktop compositor is ready to display the window to the user. If you notice this happening, you should create the window with `visible` set to `false`\u27e824\u27e9 and explicitly make the window visible only once you\u2019re ready to render into it.\n## \u00a7\u27e825\u27e9UI scaling\nUI scaling is important, go read the docs for the `dpi`\u27e826\u27e9 crate for an introduction.\nAll of Winit\u2019s functions return physical types, but can take either logical or physical coordinates as input, allowing you to use the most convenient coordinate system for your particular application.\nWinit will dispatch a `ScaleFactorChanged`\u27e827\u27e9 event whenever a window\u2019s scale factor has changed. This can happen if the user drags their window from a standard-resolution monitor to a high-DPI monitor or if the user changes their DPI settings. This allows you to rescale your application\u2019s UI elements and adjust how the platform changes the window\u2019s size to reflect the new scale factor. If a window hasn\u2019t received a `ScaleFactorChanged`\u27e827\u27e9 event, its scale factor can be found by calling `window.scale_factor()`\u27e828\u27e9.\n## \u00a7\u27e829\u27e9Cargo Features\nWinit provides the following Cargo features:\n  * `x11` (enabled by default): On Unix platforms, enables the X11 backend.\n  * `wayland` (enabled by default): On Unix platforms, enables the Wayland backend.\n  * `rwh_04`: Implement `raw-window-handle v0.4` traits.\n  * `rwh_05`: Implement `raw-window-handle v0.5` traits.\n  * `rwh_06`: Implement `raw-window-handle v0.6` traits.\n  * `serde`: Enables serialization/deserialization of certain types with Serde\u27e830\u27e9.\n  * `mint`: Enables mint (math interoperability standard types) conversions.\n\n\nSee the `platform`\u27e821\u27e9 module for documentation on platform-specific cargo features.\n  1. `EventLoopExtPumpEvents::pump_app_events()` is only available on Windows, macOS, Android, X11 and Wayland. \u21a9\u27e831\u27e9\n\n\n## Re-exports\u00a7\u27e832\u27e9\n\n`pub use rwh_04[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_04;``rwh_04`\n\n\n`pub use rwh_05[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle_05;``rwh_05`\n\n\n`pub use rwh_06[](https://docs.rs/raw-window-handle/0.6.2/i686-pc-windows-msvc/raw_window_handle/index.html \"mod raw_window_handle\") as raw_window_handle;``rwh_06`\n\n## Modules\u00a7\u27e833\u27e9\n\napplication\u27e834\u27e9\n    End user application handling.\n\nchangelog\u27e835\u27e9Nowhere\n    Changelog and migrations\n\ndpi\u27e826\u27e9\n    DPI\n\nerror\u27e836\u27e9\n\n\nevent\u27e837\u27e9\n    The `Event`\u27e838\u27e9 enum and assorted supporting types.\n\nevent_loop\u27e839\u27e9\n    The `EventLoop`\u27e86\u27e9 struct and assorted supporting types, including `ControlFlow`\u27e840\u27e9.\n\nkeyboard\u27e841\u27e9\n    Types related to the keyboard.\n\nmonitor\u27e842\u27e9\n    Types useful for interacting with a user\u2019s monitors.\n\nplatform\u27e821\u27e9\n    Contains traits with platform-specific methods in them.\n\nwindow\u27e843\u27e9\n    The `Window`\u27e85\u27e9 struct and associated types.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/winit/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/winit/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/winit/latest/src/winit/lib.rs.html#1-217: Source\n\u27e84\u27e9 https://docs.rs/winit/latest/winit/#building-windows: \u00a7\n\u27e85\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html: struct winit::window::Window - `Window`\n\u27e86\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html: struct winit::event_loop::EventLoop - `EventLoop`\n\u27e87\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.new: associated function winit::event_loop::EventLoop::new - `EventLoop::new()`\n\u27e88\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.create_window: method winit::event_loop::ActiveEventLoop::create_window - `create_window`\n\u27e89\u27e9 https://docs.rs/winit/latest/winit/#event-handling: \u00a7\n\u27e810\u27e9 https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html: enum winit::event::WindowEvent - `WindowEvent`\n\u27e811\u27e9 https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html: enum winit::event::DeviceEvent - `DeviceEvent`\n\u27e812\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.UserEvent: variant winit::event::Event::UserEvent - `Event::UserEvent`\n\u27e813\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.EventLoop.html#method.run_app: method winit::event_loop::EventLoop::run_app - `EventLoop::run_app()`\n\u27e814\u27e9 https://docs.rs/winit/latest/winit/event_loop/struct.ActiveEventLoop.html#method.exit: method winit::event_loop::ActiveEventLoop::exit - `exit()`\n\u27e815\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html#variant.LoopExiting: variant winit::event::Event::LoopExiting - `Event::LoopExiting`\n\u27e816\u27e9 https://docs.rs/winit/latest/winit/platform/pump_events/trait.EventLoopExtPumpEvents.html#method.pump_app_events: method winit::platform::pump_events::EventLoopExtPumpEvents::pump_app_events - `EventLoopExtPumpEvents::pump_app_events()`\n\u27e817\u27e9 https://docs.rs/winit/latest/winit/#fn1: 1\n\u27e818\u27e9 https://docs.rs/winit/latest/winit/window/struct.WindowId.html: struct winit::window::WindowId - `WindowId`\n\u27e819\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.id: method winit::window::Window::id - `Window::id()`\n\u27e820\u27e9 https://docs.rs/winit/latest/winit/#drawing-on-the-window: \u00a7\n\u27e821\u27e9 https://docs.rs/winit/latest/winit/platform/index.html: mod winit::platform - `platform`\n\u27e822\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_window_handle: `raw_window_handle`\n\u27e823\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.raw_display_handle: `raw_display_handle`\n\u27e824\u27e9 https://docs.rs/winit/latest/winit/window/struct.WindowAttributes.html#method.with_visible: method winit::window::WindowAttributes::with_visible - `visible` set to `false`\n\u27e825\u27e9 https://docs.rs/winit/latest/winit/#ui-scaling: \u00a7\n\u27e826\u27e9 https://docs.rs/winit/latest/winit/dpi/index.html: mod winit::dpi - `dpi`\n\u27e827\u27e9 https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.ScaleFactorChanged: variant winit::event::WindowEvent::ScaleFactorChanged - `ScaleFactorChanged`\n\u27e828\u27e9 https://docs.rs/winit/latest/winit/window/struct.Window.html#method.scale_factor: method winit::window::Window::scale_factor - `window.scale_factor()`\n\u27e829\u27e9 https://docs.rs/winit/latest/winit/#cargo-features: \u00a7\n\u27e830\u27e9 https://crates.io/crates/serde: Serde\n\u27e831\u27e9 https://docs.rs/winit/latest/winit/#fnref1: \u21a9\n\u27e832\u27e9 https://docs.rs/winit/latest/winit/#reexports: \u00a7\n\u27e833\u27e9 https://docs.rs/winit/latest/winit/#modules: \u00a7\n\u27e834\u27e9 https://docs.rs/winit/latest/winit/application/index.html: mod winit::application - application\n\u27e835\u27e9 https://docs.rs/winit/latest/winit/changelog/index.html: mod winit::changelog - changelog\n\u27e836\u27e9 https://docs.rs/winit/latest/winit/error/index.html: mod winit::error - error\n\u27e837\u27e9 https://docs.rs/winit/latest/winit/event/index.html: mod winit::event - event\n\u27e838\u27e9 https://docs.rs/winit/latest/winit/event/enum.Event.html: enum winit::event::Event - `Event`\n\u27e839\u27e9 https://docs.rs/winit/latest/winit/event_loop/index.html: mod winit::event_loop - event_loop\n\u27e840\u27e9 https://docs.rs/winit/latest/winit/event_loop/enum.ControlFlow.html: enum winit::event_loop::ControlFlow - `ControlFlow`\n\u27e841\u27e9 https://docs.rs/winit/latest/winit/keyboard/index.html: mod winit::keyboard - keyboard\n\u27e842\u27e9 https://docs.rs/winit/latest/winit/monitor/index.html: mod winit::monitor - monitor\n\u27e843\u27e9 https://docs.rs/winit/latest/winit/window/index.html: mod winit::window - window\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `winit` crate is a cross-platform library for window creation and event loop management in Rust. It enables developers to build windows, handle various input and device events, and manage custom event loops with flexible control flow options. While it doesn't provide direct drawing capabilities, it offers access to raw window and display handles for integration with graphics APIs like OpenGL, Vulkan, or DirectX.",
          "feature_summary": null,
          "use_case": "Unknown",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Event Loop Management  \n\u2705 **Factual:** The `winit` crate requires the creation of an `EventLoop` instance before a `Window` can be created, using the `EventLoop::new()` method.  \n\u274c **Counterfactual:** The `winit` crate allows the creation of a `Window` directly without requiring an `EventLoop` instance.  \n\n---\n\n### Pair 2: Event Handling  \n\u2705 **Factual:** `winit` supports handling both `WindowEvent`s and `DeviceEvent`s, enabling applications to respond to window-specific events and device-level input.  \n\u274c **Counterfactual:** `winit` only supports `WindowEvent`s and does not provide functionality for handling `DeviceEvent`s or custom `UserEvent`s.  \n\n---\n\n### Pair 3: Platform Compatibility  \n\u2705 **Factual:** `winit` avoids using a `poll_events()`-based event loop model because it is incompatible with certain platforms like web and iOS. Instead, it uses a callback-based approach for event dispatching.  \n\u274c **Counterfactual:** `winit` continues to use a `poll_events()`-based event loop model, as it is universally compatible across all supported platforms.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-da57c782-0464bd24-1751265194",
      "timestamp": "2025-06-30T06:33:14.639708+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]