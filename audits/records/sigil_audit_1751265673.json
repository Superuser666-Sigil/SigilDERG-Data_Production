[
  {
    "execution_id": "exec-ba94b10b-be496d6b-1751265643",
    "timestamp": "2025-06-30T06:40:43.075818+00:00",
    "sacred_chain": {
      "input_data": "nalgebra",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'nalgebra' -> 'nalgebra'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "nalgebra",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/nalgebra",
            "title": "nalgebra v0.33.2",
            "content": {
              "raw_markdown": "#  nalgebra v0.33.2\nGeneral-purpose linear algebra library with transformations and statically-sized or dynamically-sized matrices. \n  * [ #algebra ](https://crates.io/keywords/algebra)\n  * [ #linear ](https://crates.io/keywords/linear)\n  * [ #math ](https://crates.io/keywords/math)\n  * [ #matrix ](https://crates.io/keywords/matrix)\n  * [ #vector ](https://crates.io/keywords/vector)\n\n\n  * [ Readme ](https://crates.io/crates/nalgebra)\n  * [ 119 Versions ](https://crates.io/crates/nalgebra/versions)\n  * [ Dependencies ](https://crates.io/crates/nalgebra/dependencies)\n  * [ Dependents ](https://crates.io/crates/nalgebra/reverse_dependencies)\n\n\n## Metadata\n8 months ago \n2018 edition \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n377 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add nalgebra\nOr add the following line to your Cargo.toml:\nnalgebra = \"0.33.2\"\n## Homepage\n[ nalgebra.org ](https://nalgebra.org)\n## Documentation\n[ nalgebra.org/docs ](https://www.nalgebra.org/docs)\n## Repository\n[ github.com/dimforge/nalgebra ](https://github.com/dimforge/nalgebra)\n## Owners\n## Categories\n  * [Mathematics](https://crates.io/categories/mathematics)\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Science](https://crates.io/categories/science)\n  * [WebAssembly](https://crates.io/categories/wasm)\n\n\n[ Report crate ](https://crates.io/support?crate=nalgebra&inquire=crate-violation)\n### Stats Overview\n31,200,824 Downloads all time\n119 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  nalgebra v0.33.2\nGeneral-purpose linear algebra library with transformations and statically-sized or dynamically-sized matrices. \n  *  #algebra \u27e81\u27e9\n  *  #linear \u27e82\u27e9\n  *  #math \u27e83\u27e9\n  *  #matrix \u27e84\u27e9\n  *  #vector \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  119 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n8 months ago \n2018 edition \n Apache-2.0 \u27e810\u27e9\n377 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add nalgebra\nOr add the following line to your Cargo.toml:\nnalgebra = \"0.33.2\"\n## Homepage\n nalgebra.org \u27e811\u27e9\n## Documentation\n nalgebra.org/docs \u27e812\u27e9\n## Repository\n github.com/dimforge/nalgebra \u27e813\u27e9\n## Owners\n## Categories\n  * Mathematics\u27e814\u27e9\n  * No standard library\u27e815\u27e9\n  * Science\u27e816\u27e9\n  * WebAssembly\u27e817\u27e9\n\n\n Report crate \u27e818\u27e9\n### Stats Overview\n31,200,824 Downloads all time\n119 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/algebra:  #algebra \n\u27e82\u27e9 https://crates.io/keywords/linear:  #linear \n\u27e83\u27e9 https://crates.io/keywords/math:  #math \n\u27e84\u27e9 https://crates.io/keywords/matrix:  #matrix \n\u27e85\u27e9 https://crates.io/keywords/vector:  #vector \n\u27e86\u27e9 https://crates.io/crates/nalgebra:  Readme \n\u27e87\u27e9 https://crates.io/crates/nalgebra/versions:  119 Versions \n\u27e88\u27e9 https://crates.io/crates/nalgebra/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/nalgebra/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://nalgebra.org:  nalgebra.org \n\u27e812\u27e9 https://www.nalgebra.org/docs:  nalgebra.org/docs \n\u27e813\u27e9 https://github.com/dimforge/nalgebra:  github.com/dimforge/nalgebra \n\u27e814\u27e9 https://crates.io/categories/mathematics: Mathematics\n\u27e815\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e816\u27e9 https://crates.io/categories/science: Science\n\u27e817\u27e9 https://crates.io/categories/wasm: WebAssembly\n\u27e818\u27e9 https://crates.io/support?crate=nalgebra&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1628,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "119432.6909011"
          },
          "docs_rs": {
            "url": "https://docs.rs/nalgebra",
            "title": "Crate nalgebraCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/nalgebra/latest/nalgebra/all.html \"show sidebar\")\n# Crate nalgebraCopy item path\n[Settings](https://docs.rs/nalgebra/latest/settings.html)\n[Help](https://docs.rs/nalgebra/latest/help.html)\nSummary[Source](https://docs.rs/nalgebra/latest/src/nalgebra/lib.rs.html#1-549)\nExpand description\n## [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#nalgebra)nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n### [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#using-nalgebra)Using **nalgebra**\nYou will need the last stable build of the [rust compiler](https://www.rust-lang.org) and the official package manager: [cargo](https://github.com/rust-lang/cargo).\nSimply add the following to your `Cargo.toml` file:\n[\u24d8](https://docs.rs/nalgebra/latest/nalgebra/ \"This example is not tested\")```\n[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module `nalgebra::`.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the `na::` prefix:\n```\n#[macro_use]\nextern crate approx; // For the macro assert_relative_eq!\nextern crate nalgebra as na;\nuse na::{Vector3, Rotation3};\nfn main() {\n  let axis = Vector3::x_axis();\n  let angle = 1.57;\n  let b   = Rotation3::from_axis_angle(&axis, angle);\n  assert_relative_eq!(b.axis().unwrap(), axis);\n  assert_relative_eq!(b.angle(), angle);\n}\n```\n\n### [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#features)Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type [`Matrix`](https://docs.rs/nalgebra/latest/nalgebra/base/struct.Matrix.html \"struct nalgebra::base::Matrix\") for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: [`Vector1`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector1.html \"type nalgebra::base::Vector1\") to [`Vector6`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector6.html \"type nalgebra::base::Vector6\") and [`Matrix1x1`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix1.html \"type nalgebra::base::Matrix1\") to [`Matrix6x6`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix6.html \"type nalgebra::base::Matrix6\"), including rectangular matrices like [`Matrix2x5`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix2x5.html \"type nalgebra::base::Matrix2x5\").\n  * Points sizes known at compile time, and convenience aliases: [`Point1`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point1.html \"type nalgebra::geometry::Point1\") to [`Point6`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point6.html \"type nalgebra::geometry::Point6\").\n  * Translation (seen as a transformation that composes by multiplication): [`Translation2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation2.html \"type nalgebra::geometry::Translation2\"), [`Translation3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation3.html \"type nalgebra::geometry::Translation3\").\n  * Rotation matrices: [`Rotation2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation2.html \"type nalgebra::geometry::Rotation2\"), [`Rotation3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation3.html \"type nalgebra::geometry::Rotation3\").\n  * Quaternions: [`Quaternion`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Quaternion.html \"struct nalgebra::geometry::Quaternion\"), [`UnitQuaternion`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitQuaternion.html \"type nalgebra::geometry::UnitQuaternion\") (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: [`UnitComplex`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitComplex.html \"type nalgebra::geometry::UnitComplex\").\n  * Algebraic entities with a norm equal to one: [`Unit<T>`](https://docs.rs/nalgebra/latest/nalgebra/base/struct.Unit.html \"struct nalgebra::base::Unit\"), e.g., `Unit<Vector3<f32>>`.\n  * Isometries (translation \u2a2f rotation): [`Isometry2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry2.html \"type nalgebra::geometry::Isometry2\"), [`Isometry3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry3.html \"type nalgebra::geometry::Isometry3\")\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): [`Similarity2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity2.html \"type nalgebra::geometry::Similarity2\"), [`Similarity3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity3.html \"type nalgebra::geometry::Similarity3\").\n  * Affine transformations stored as a homogeneous matrix: [`Affine2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine2.html \"type nalgebra::geometry::Affine2\"), [`Affine3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine3.html \"type nalgebra::geometry::Affine3\").\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: [`Projective2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective2.html \"type nalgebra::geometry::Projective2\"), [`Projective3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective3.html \"type nalgebra::geometry::Projective3\").\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: [`Transform2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform2.html \"type nalgebra::geometry::Transform2\"), [`Transform3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform3.html \"type nalgebra::geometry::Transform3\").\n  * 3D projections for computer graphics: [`Perspective3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Perspective3.html \"struct nalgebra::geometry::Perspective3\"), [`Orthographic3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Orthographic3.html \"struct nalgebra::geometry::Orthographic3\").\n  * Matrix factorizations: [`Cholesky`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Cholesky.html \"struct nalgebra::linalg::Cholesky\"), [`QR`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.QR.html \"struct nalgebra::linalg::QR\"), [`LU`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.LU.html \"struct nalgebra::linalg::LU\"), [`FullPivLU`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.FullPivLU.html \"struct nalgebra::linalg::FullPivLU\"), [`SVD`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SVD.html \"struct nalgebra::linalg::SVD\"), [`Schur`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Schur.html \"struct nalgebra::linalg::Schur\"), [`Hessenberg`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Hessenberg.html \"struct nalgebra::linalg::Hessenberg\"), [`SymmetricEigen`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SymmetricEigen.html \"struct nalgebra::linalg::SymmetricEigen\").\n  * Insertion and removal of rows of columns of a matrix.\n\n\n## Re-exports[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#reexports)\n\n`pub use base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\") as core;`\n\n\n`pub use crate::base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")::*;`\n\n\n`pub use crate::geometry[](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")::*;`\n\n\n`pub use crate::linalg[](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")::*;`\n\n\n`pub use crate::sparse[](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")::*;`\n\n## Modules[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#modules)\n\n[base](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")\n    [Reexported at the root of this crate.] Data structures for vector and matrix computations.\n\n[debug](https://docs.rs/nalgebra/latest/nalgebra/debug/index.html \"mod nalgebra::debug\")\n    Various tools useful for testing/debugging/benchmarking.\n\n[geometry](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")\n    [Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)\n\n[io](https://docs.rs/nalgebra/latest/nalgebra/io/index.html \"mod nalgebra::io\")\n    Parsers for various matrix formats.\n\n[linalg](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")\n    [Reexported at the root of this crate.] Factorization of real matrices.\n\n[proptest](https://docs.rs/nalgebra/latest/nalgebra/proptest/index.html \"mod nalgebra::proptest\")\n    `proptest`-related features for `nalgebra` data structures.\n\n[sparse](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")\n    Sparse matrices.\n## Macros[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#macros)\n\n[dmatrix](https://docs.rs/nalgebra/latest/nalgebra/macro.dmatrix.html \"macro nalgebra::dmatrix\")\n    Construct a dynamic matrix directly from data.\n\n[dvector](https://docs.rs/nalgebra/latest/nalgebra/macro.dvector.html \"macro nalgebra::dvector\")\n    Construct a dynamic column vector directly from data.\n\n[matrix](https://docs.rs/nalgebra/latest/nalgebra/macro.matrix.html \"macro nalgebra::matrix\")\n    Construct a fixed-size matrix directly from data.\n\n[point](https://docs.rs/nalgebra/latest/nalgebra/macro.point.html \"macro nalgebra::point\")\n    Construct a fixed-size point directly from data.\n\n[stack](https://docs.rs/nalgebra/latest/nalgebra/macro.stack.html \"macro nalgebra::stack\")\n    Construct a new matrix by stacking matrices in a block matrix.\n\n[vector](https://docs.rs/nalgebra/latest/nalgebra/macro.vector.html \"macro nalgebra::vector\")\n    Construct a fixed-size column vector directly from data.\n## Structs[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#structs)\n\n[Complex](https://docs.rs/nalgebra/latest/nalgebra/struct.Complex.html \"struct nalgebra::Complex\")\n    A complex number in Cartesian form.\n## Traits[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#traits)\n\n[ClosedAddAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedAddAssign.html \"trait nalgebra::ClosedAddAssign\")\n    Trait **alias** for `Add` and `AddAssign` with result of type `Self`.\n\n[ClosedDivAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedDivAssign.html \"trait nalgebra::ClosedDivAssign\")\n    Trait **alias** for `Div` and `DivAssign` with result of type `Self`.\n\n[ClosedMulAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedMulAssign.html \"trait nalgebra::ClosedMulAssign\")\n    Trait **alias** for `Mul` and `MulAssign` with result of type `Self`.\n\n[ClosedSubAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedSubAssign.html \"trait nalgebra::ClosedSubAssign\")\n    Trait **alias** for `Sub` and `SubAssign` with result of type `Self`.\n\n[ComplexField](https://docs.rs/nalgebra/latest/nalgebra/trait.ComplexField.html \"trait nalgebra::ComplexField\")\n    Trait shared by all complex fields and its subfields (like real numbers).\n\n[Field](https://docs.rs/nalgebra/latest/nalgebra/trait.Field.html \"trait nalgebra::Field\")\n    Trait implemented by fields, i.e., complex numbers and floats.\n\n[RealField](https://docs.rs/nalgebra/latest/nalgebra/trait.RealField.html \"trait nalgebra::RealField\")\n    Trait shared by all reals.\n\n[SimdBool](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdBool.html \"trait nalgebra::SimdBool\")\n    Lane-wise generalization of `bool` for SIMD booleans.\n\n[SimdComplexField](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdComplexField.html \"trait nalgebra::SimdComplexField\")\n    Lane-wise generalisation of `ComplexField` for SIMD complex fields.\n\n[SimdPartialOrd](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdPartialOrd.html \"trait nalgebra::SimdPartialOrd\")\n    Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n\n[SimdRealField](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdRealField.html \"trait nalgebra::SimdRealField\")\n    Lanewise generalization of `RealField` for SIMD reals.\n\n[SimdValue](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdValue.html \"trait nalgebra::SimdValue\")\n    Base trait for every SIMD types.\n## Functions[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#functions)\n\n[abs](https://docs.rs/nalgebra/latest/nalgebra/fn.abs.html \"fn nalgebra::abs\")Deprecated\n    The absolute value of `a`.\n\n[center](https://docs.rs/nalgebra/latest/nalgebra/fn.center.html \"fn nalgebra::center\")\n    The center of two points.\n\n[clamp](https://docs.rs/nalgebra/latest/nalgebra/fn.clamp.html \"fn nalgebra::clamp\")\n    Returns a reference to the input value clamped to the interval `[min, max]`.\n\n[convert](https://docs.rs/nalgebra/latest/nalgebra/fn.convert.html \"fn nalgebra::convert\")\n    Converts an object from one type to an equivalent or more general one.\n\n[convert_ref](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref.html \"fn nalgebra::convert_ref\")\n    Converts an object from one type to an equivalent or more general one.\n\n[convert_ref_unchecked](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref_unchecked.html \"fn nalgebra::convert_ref_unchecked\")\n    Use with care! Same as [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") but without any property checks.\n\n[convert_unchecked](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_unchecked.html \"fn nalgebra::convert_unchecked\")\n    Use with care! Same as [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") but without any property checks.\n\n[distance](https://docs.rs/nalgebra/latest/nalgebra/fn.distance.html \"fn nalgebra::distance\")\n    The distance between two points.\n\n[distance_squared](https://docs.rs/nalgebra/latest/nalgebra/fn.distance_squared.html \"fn nalgebra::distance_squared\")\n    The squared distance between two points.\n\n[inf](https://docs.rs/nalgebra/latest/nalgebra/fn.inf.html \"fn nalgebra::inf\")Deprecated\n    Returns the infimum of `a` and `b`.\n\n[inf_sup](https://docs.rs/nalgebra/latest/nalgebra/fn.inf_sup.html \"fn nalgebra::inf_sup\")Deprecated\n    Returns simultaneously the infimum and supremum of `a` and `b`.\n\n[is_convertible](https://docs.rs/nalgebra/latest/nalgebra/fn.is_convertible.html \"fn nalgebra::is_convertible\")\n    Indicates if [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") will succeed without actually performing the conversion.\n\n[max](https://docs.rs/nalgebra/latest/nalgebra/fn.max.html \"fn nalgebra::max\")\n    Same as `cmp::max`.\n\n[min](https://docs.rs/nalgebra/latest/nalgebra/fn.min.html \"fn nalgebra::min\")\n    Same as `cmp::min`.\n\n[one](https://docs.rs/nalgebra/latest/nalgebra/fn.one.html \"fn nalgebra::one\")\n    Gets the multiplicative identity element.\n\n[partial_clamp](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_clamp.html \"fn nalgebra::partial_clamp\")\n    Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.\n\n[partial_cmp](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_cmp.html \"fn nalgebra::partial_cmp\")\n    Compare `a` and `b` using a partial ordering relation.\n\n[partial_ge](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_ge.html \"fn nalgebra::partial_ge\")\n    Returns `true` iff `a` and `b` are comparable and `a >= b`.\n\n[partial_gt](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_gt.html \"fn nalgebra::partial_gt\")\n    Returns `true` iff `a` and `b` are comparable and `a > b`.\n\n[partial_le](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_le.html \"fn nalgebra::partial_le\")\n    Returns `true` iff `a` and `b` are comparable and `a <= b`.\n\n[partial_lt](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_lt.html \"fn nalgebra::partial_lt\")\n    Returns `true` iff `a` and `b` are comparable and `a < b`.\n\n[partial_max](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_max.html \"fn nalgebra::partial_max\")\n    Return the maximum of `a` and `b` if they are comparable.\n\n[partial_min](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_min.html \"fn nalgebra::partial_min\")\n    Return the minimum of `a` and `b` if they are comparable.\n\n[partial_sort2](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_sort2.html \"fn nalgebra::partial_sort2\")\n    Sorts two values in increasing order using a partial ordering.\n\n[sup](https://docs.rs/nalgebra/latest/nalgebra/fn.sup.html \"fn nalgebra::sup\")Deprecated\n    Returns the supremum of `a` and `b`.\n\n[try_convert](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\")\n    Attempts to convert an object to a more specific one.\n\n[try_convert_ref](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert_ref.html \"fn nalgebra::try_convert_ref\")\n    Attempts to convert an object to a more specific one.\n\n[wrap](https://docs.rs/nalgebra/latest/nalgebra/fn.wrap.html \"fn nalgebra::wrap\")\n    Wraps `val` into the range `[min, max]` using modular arithmetics.\n\n[zero](https://docs.rs/nalgebra/latest/nalgebra/fn.zero.html \"fn nalgebra::zero\")\n    Gets the additive identity element.\n",
              "markdown_with_citations": "[](https://docs.rs/nalgebra/latest/nalgebra/all.html \"show sidebar\")\n# Crate nalgebraCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n### \u00a7\u27e85\u27e9Using **nalgebra**\nYou will need the last stable build of the rust compiler\u27e86\u27e9 and the official package manager: cargo\u27e87\u27e9.\nSimply add the following to your `Cargo.toml` file:\n\u24d8\u27e88\u27e9```\n[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module `nalgebra::`.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the `na::` prefix:\n```\n#[macro_use]\nextern crate approx; // For the macro assert_relative_eq!\nextern crate nalgebra as na;\nuse na::{Vector3, Rotation3};\nfn main() {\n  let axis = Vector3::x_axis();\n  let angle = 1.57;\n  let b   = Rotation3::from_axis_angle(&axis, angle);\n  assert_relative_eq!(b.axis().unwrap(), axis);\n  assert_relative_eq!(b.angle(), angle);\n}\n```\n\n### \u00a7\u27e89\u27e9Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type `Matrix`\u27e810\u27e9 for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: `Vector1`\u27e811\u27e9 to `Vector6`\u27e812\u27e9 and `Matrix1x1`\u27e813\u27e9 to `Matrix6x6`\u27e814\u27e9, including rectangular matrices like `Matrix2x5`\u27e815\u27e9.\n  * Points sizes known at compile time, and convenience aliases: `Point1`\u27e816\u27e9 to `Point6`\u27e817\u27e9.\n  * Translation (seen as a transformation that composes by multiplication): `Translation2`\u27e818\u27e9, `Translation3`\u27e819\u27e9.\n  * Rotation matrices: `Rotation2`\u27e820\u27e9, `Rotation3`\u27e821\u27e9.\n  * Quaternions: `Quaternion`\u27e822\u27e9, `UnitQuaternion`\u27e823\u27e9 (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: `UnitComplex`\u27e824\u27e9.\n  * Algebraic entities with a norm equal to one: `Unit<T>`\u27e825\u27e9, e.g., `Unit<Vector3<f32>>`.\n  * Isometries (translation \u2a2f rotation): `Isometry2`\u27e826\u27e9, `Isometry3`\u27e827\u27e9\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): `Similarity2`\u27e828\u27e9, `Similarity3`\u27e829\u27e9.\n  * Affine transformations stored as a homogeneous matrix: `Affine2`\u27e830\u27e9, `Affine3`\u27e831\u27e9.\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: `Projective2`\u27e832\u27e9, `Projective3`\u27e833\u27e9.\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: `Transform2`\u27e834\u27e9, `Transform3`\u27e835\u27e9.\n  * 3D projections for computer graphics: `Perspective3`\u27e836\u27e9, `Orthographic3`\u27e837\u27e9.\n  * Matrix factorizations: `Cholesky`\u27e838\u27e9, `QR`\u27e839\u27e9, `LU`\u27e840\u27e9, `FullPivLU`\u27e841\u27e9, `SVD`\u27e842\u27e9, `Schur`\u27e843\u27e9, `Hessenberg`\u27e844\u27e9, `SymmetricEigen`\u27e845\u27e9.\n  * Insertion and removal of rows of columns of a matrix.\n\n\n## Re-exports\u00a7\u27e846\u27e9\n\n`pub use base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\") as core;`\n\n\n`pub use crate::base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")::*;`\n\n\n`pub use crate::geometry[](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")::*;`\n\n\n`pub use crate::linalg[](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")::*;`\n\n\n`pub use crate::sparse[](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")::*;`\n\n## Modules\u00a7\u27e847\u27e9\n\nbase\u27e848\u27e9\n    [Reexported at the root of this crate.] Data structures for vector and matrix computations.\n\ndebug\u27e849\u27e9\n    Various tools useful for testing/debugging/benchmarking.\n\ngeometry\u27e850\u27e9\n    [Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)\n\nio\u27e851\u27e9\n    Parsers for various matrix formats.\n\nlinalg\u27e852\u27e9\n    [Reexported at the root of this crate.] Factorization of real matrices.\n\nproptest\u27e853\u27e9\n    `proptest`-related features for `nalgebra` data structures.\n\nsparse\u27e854\u27e9\n    Sparse matrices.\n## Macros\u00a7\u27e855\u27e9\n\ndmatrix\u27e856\u27e9\n    Construct a dynamic matrix directly from data.\n\ndvector\u27e857\u27e9\n    Construct a dynamic column vector directly from data.\n\nmatrix\u27e858\u27e9\n    Construct a fixed-size matrix directly from data.\n\npoint\u27e859\u27e9\n    Construct a fixed-size point directly from data.\n\nstack\u27e860\u27e9\n    Construct a new matrix by stacking matrices in a block matrix.\n\nvector\u27e861\u27e9\n    Construct a fixed-size column vector directly from data.\n## Structs\u00a7\u27e862\u27e9\n\nComplex\u27e863\u27e9\n    A complex number in Cartesian form.\n## Traits\u00a7\u27e864\u27e9\n\nClosedAddAssign\u27e865\u27e9\n    Trait **alias** for `Add` and `AddAssign` with result of type `Self`.\n\nClosedDivAssign\u27e866\u27e9\n    Trait **alias** for `Div` and `DivAssign` with result of type `Self`.\n\nClosedMulAssign\u27e867\u27e9\n    Trait **alias** for `Mul` and `MulAssign` with result of type `Self`.\n\nClosedSubAssign\u27e868\u27e9\n    Trait **alias** for `Sub` and `SubAssign` with result of type `Self`.\n\nComplexField\u27e869\u27e9\n    Trait shared by all complex fields and its subfields (like real numbers).\n\nField\u27e870\u27e9\n    Trait implemented by fields, i.e., complex numbers and floats.\n\nRealField\u27e871\u27e9\n    Trait shared by all reals.\n\nSimdBool\u27e872\u27e9\n    Lane-wise generalization of `bool` for SIMD booleans.\n\nSimdComplexField\u27e873\u27e9\n    Lane-wise generalisation of `ComplexField` for SIMD complex fields.\n\nSimdPartialOrd\u27e874\u27e9\n    Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n\nSimdRealField\u27e875\u27e9\n    Lanewise generalization of `RealField` for SIMD reals.\n\nSimdValue\u27e876\u27e9\n    Base trait for every SIMD types.\n## Functions\u00a7\u27e877\u27e9\n\nabs\u27e878\u27e9Deprecated\n    The absolute value of `a`.\n\ncenter\u27e879\u27e9\n    The center of two points.\n\nclamp\u27e880\u27e9\n    Returns a reference to the input value clamped to the interval `[min, max]`.\n\nconvert\u27e881\u27e9\n    Converts an object from one type to an equivalent or more general one.\n\nconvert_ref\u27e882\u27e9\n    Converts an object from one type to an equivalent or more general one.\n\nconvert_ref_unchecked\u27e883\u27e9\n    Use with care! Same as `try_convert()`\u27e884\u27e9 but without any property checks.\n\nconvert_unchecked\u27e885\u27e9\n    Use with care! Same as `try_convert()`\u27e884\u27e9 but without any property checks.\n\ndistance\u27e886\u27e9\n    The distance between two points.\n\ndistance_squared\u27e887\u27e9\n    The squared distance between two points.\n\ninf\u27e888\u27e9Deprecated\n    Returns the infimum of `a` and `b`.\n\ninf_sup\u27e889\u27e9Deprecated\n    Returns simultaneously the infimum and supremum of `a` and `b`.\n\nis_convertible\u27e890\u27e9\n    Indicates if `try_convert()`\u27e884\u27e9 will succeed without actually performing the conversion.\n\nmax\u27e891\u27e9\n    Same as `cmp::max`.\n\nmin\u27e892\u27e9\n    Same as `cmp::min`.\n\none\u27e893\u27e9\n    Gets the multiplicative identity element.\n\npartial_clamp\u27e894\u27e9\n    Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.\n\npartial_cmp\u27e895\u27e9\n    Compare `a` and `b` using a partial ordering relation.\n\npartial_ge\u27e896\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a >= b`.\n\npartial_gt\u27e897\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a > b`.\n\npartial_le\u27e898\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a <= b`.\n\npartial_lt\u27e899\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a < b`.\n\npartial_max\u27e8100\u27e9\n    Return the maximum of `a` and `b` if they are comparable.\n\npartial_min\u27e8101\u27e9\n    Return the minimum of `a` and `b` if they are comparable.\n\npartial_sort2\u27e8102\u27e9\n    Sorts two values in increasing order using a partial ordering.\n\nsup\u27e8103\u27e9Deprecated\n    Returns the supremum of `a` and `b`.\n\ntry_convert\u27e884\u27e9\n    Attempts to convert an object to a more specific one.\n\ntry_convert_ref\u27e8104\u27e9\n    Attempts to convert an object to a more specific one.\n\nwrap\u27e8105\u27e9\n    Wraps `val` into the range `[min, max]` using modular arithmetics.\n\nzero\u27e8106\u27e9\n    Gets the additive identity element.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/nalgebra/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/nalgebra/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/nalgebra/latest/src/nalgebra/lib.rs.html#1-549: Source\n\u27e84\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#nalgebra: \u00a7\n\u27e85\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#using-nalgebra: \u00a7\n\u27e86\u27e9 https://www.rust-lang.org: rust compiler\n\u27e87\u27e9 https://github.com/rust-lang/cargo: cargo\n\u27e88\u27e9 https://docs.rs/nalgebra/latest/nalgebra/: This example is not tested - \u24d8\n\u27e89\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#features: \u00a7\n\u27e810\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/struct.Matrix.html: struct nalgebra::base::Matrix - `Matrix`\n\u27e811\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector1.html: type nalgebra::base::Vector1 - `Vector1`\n\u27e812\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector6.html: type nalgebra::base::Vector6 - `Vector6`\n\u27e813\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix1.html: type nalgebra::base::Matrix1 - `Matrix1x1`\n\u27e814\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix6.html: type nalgebra::base::Matrix6 - `Matrix6x6`\n\u27e815\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix2x5.html: type nalgebra::base::Matrix2x5 - `Matrix2x5`\n\u27e816\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point1.html: type nalgebra::geometry::Point1 - `Point1`\n\u27e817\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point6.html: type nalgebra::geometry::Point6 - `Point6`\n\u27e818\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation2.html: type nalgebra::geometry::Translation2 - `Translation2`\n\u27e819\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation3.html: type nalgebra::geometry::Translation3 - `Translation3`\n\u27e820\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation2.html: type nalgebra::geometry::Rotation2 - `Rotation2`\n\u27e821\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation3.html: type nalgebra::geometry::Rotation3 - `Rotation3`\n\u27e822\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Quaternion.html: struct nalgebra::geometry::Quaternion - `Quaternion`\n\u27e823\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitQuaternion.html: type nalgebra::geometry::UnitQuaternion - `UnitQuaternion`\n\u27e824\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitComplex.html: type nalgebra::geometry::UnitComplex - `UnitComplex`\n\u27e825\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/struct.Unit.html: struct nalgebra::base::Unit - `Unit<T>`\n\u27e826\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry2.html: type nalgebra::geometry::Isometry2 - `Isometry2`\n\u27e827\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry3.html: type nalgebra::geometry::Isometry3 - `Isometry3`\n\u27e828\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity2.html: type nalgebra::geometry::Similarity2 - `Similarity2`\n\u27e829\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity3.html: type nalgebra::geometry::Similarity3 - `Similarity3`\n\u27e830\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine2.html: type nalgebra::geometry::Affine2 - `Affine2`\n\u27e831\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine3.html: type nalgebra::geometry::Affine3 - `Affine3`\n\u27e832\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective2.html: type nalgebra::geometry::Projective2 - `Projective2`\n\u27e833\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective3.html: type nalgebra::geometry::Projective3 - `Projective3`\n\u27e834\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform2.html: type nalgebra::geometry::Transform2 - `Transform2`\n\u27e835\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform3.html: type nalgebra::geometry::Transform3 - `Transform3`\n\u27e836\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Perspective3.html: struct nalgebra::geometry::Perspective3 - `Perspective3`\n\u27e837\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Orthographic3.html: struct nalgebra::geometry::Orthographic3 - `Orthographic3`\n\u27e838\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Cholesky.html: struct nalgebra::linalg::Cholesky - `Cholesky`\n\u27e839\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.QR.html: struct nalgebra::linalg::QR - `QR`\n\u27e840\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.LU.html: struct nalgebra::linalg::LU - `LU`\n\u27e841\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.FullPivLU.html: struct nalgebra::linalg::FullPivLU - `FullPivLU`\n\u27e842\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SVD.html: struct nalgebra::linalg::SVD - `SVD`\n\u27e843\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Schur.html: struct nalgebra::linalg::Schur - `Schur`\n\u27e844\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Hessenberg.html: struct nalgebra::linalg::Hessenberg - `Hessenberg`\n\u27e845\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SymmetricEigen.html: struct nalgebra::linalg::SymmetricEigen - `SymmetricEigen`\n\u27e846\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#reexports: \u00a7\n\u27e847\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#modules: \u00a7\n\u27e848\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/index.html: mod nalgebra::base - base\n\u27e849\u27e9 https://docs.rs/nalgebra/latest/nalgebra/debug/index.html: mod nalgebra::debug - debug\n\u27e850\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html: mod nalgebra::geometry - geometry\n\u27e851\u27e9 https://docs.rs/nalgebra/latest/nalgebra/io/index.html: mod nalgebra::io - io\n\u27e852\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html: mod nalgebra::linalg - linalg\n\u27e853\u27e9 https://docs.rs/nalgebra/latest/nalgebra/proptest/index.html: mod nalgebra::proptest - proptest\n\u27e854\u27e9 https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html: mod nalgebra::sparse - sparse\n\u27e855\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#macros: \u00a7\n\u27e856\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.dmatrix.html: macro nalgebra::dmatrix - dmatrix\n\u27e857\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.dvector.html: macro nalgebra::dvector - dvector\n\u27e858\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.matrix.html: macro nalgebra::matrix - matrix\n\u27e859\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.point.html: macro nalgebra::point - point\n\u27e860\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.stack.html: macro nalgebra::stack - stack\n\u27e861\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.vector.html: macro nalgebra::vector - vector\n\u27e862\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#structs: \u00a7\n\u27e863\u27e9 https://docs.rs/nalgebra/latest/nalgebra/struct.Complex.html: struct nalgebra::Complex - Complex\n\u27e864\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#traits: \u00a7\n\u27e865\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedAddAssign.html: trait nalgebra::ClosedAddAssign - ClosedAddAssign\n\u27e866\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedDivAssign.html: trait nalgebra::ClosedDivAssign - ClosedDivAssign\n\u27e867\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedMulAssign.html: trait nalgebra::ClosedMulAssign - ClosedMulAssign\n\u27e868\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedSubAssign.html: trait nalgebra::ClosedSubAssign - ClosedSubAssign\n\u27e869\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ComplexField.html: trait nalgebra::ComplexField - ComplexField\n\u27e870\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.Field.html: trait nalgebra::Field - Field\n\u27e871\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.RealField.html: trait nalgebra::RealField - RealField\n\u27e872\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdBool.html: trait nalgebra::SimdBool - SimdBool\n\u27e873\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdComplexField.html: trait nalgebra::SimdComplexField - SimdComplexField\n\u27e874\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdPartialOrd.html: trait nalgebra::SimdPartialOrd - SimdPartialOrd\n\u27e875\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdRealField.html: trait nalgebra::SimdRealField - SimdRealField\n\u27e876\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdValue.html: trait nalgebra::SimdValue - SimdValue\n\u27e877\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#functions: \u00a7\n\u27e878\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.abs.html: fn nalgebra::abs - abs\n\u27e879\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.center.html: fn nalgebra::center - center\n\u27e880\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.clamp.html: fn nalgebra::clamp - clamp\n\u27e881\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert.html: fn nalgebra::convert - convert\n\u27e882\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref.html: fn nalgebra::convert_ref - convert_ref\n\u27e883\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref_unchecked.html: fn nalgebra::convert_ref_unchecked - convert_ref_unchecked\n\u27e884\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html: fn nalgebra::try_convert - `try_convert()`\n\u27e885\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_unchecked.html: fn nalgebra::convert_unchecked - convert_unchecked\n\u27e886\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.distance.html: fn nalgebra::distance - distance\n\u27e887\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.distance_squared.html: fn nalgebra::distance_squared - distance_squared\n\u27e888\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.inf.html: fn nalgebra::inf - inf\n\u27e889\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.inf_sup.html: fn nalgebra::inf_sup - inf_sup\n\u27e890\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.is_convertible.html: fn nalgebra::is_convertible - is_convertible\n\u27e891\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.max.html: fn nalgebra::max - max\n\u27e892\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.min.html: fn nalgebra::min - min\n\u27e893\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.one.html: fn nalgebra::one - one\n\u27e894\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_clamp.html: fn nalgebra::partial_clamp - partial_clamp\n\u27e895\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_cmp.html: fn nalgebra::partial_cmp - partial_cmp\n\u27e896\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_ge.html: fn nalgebra::partial_ge - partial_ge\n\u27e897\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_gt.html: fn nalgebra::partial_gt - partial_gt\n\u27e898\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_le.html: fn nalgebra::partial_le - partial_le\n\u27e899\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_lt.html: fn nalgebra::partial_lt - partial_lt\n\u27e8100\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_max.html: fn nalgebra::partial_max - partial_max\n\u27e8101\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_min.html: fn nalgebra::partial_min - partial_min\n\u27e8102\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_sort2.html: fn nalgebra::partial_sort2 - partial_sort2\n\u27e8103\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.sup.html: fn nalgebra::sup - sup\n\u27e8104\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert_ref.html: fn nalgebra::try_convert_ref - try_convert_ref\n\u27e8105\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.wrap.html: fn nalgebra::wrap - wrap\n\u27e8106\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.zero.html: fn nalgebra::zero - zero\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 17571,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "119433.6221896"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/nalgebra",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [113 releases](https://lib.rs/crates/nalgebra/versions)\n0.33.2 |  Oct 29, 2024   \n---|---  \n0.33.0 |  Jun 23, 2024   \n0.32.5 |  Mar 28, 2024   \n0.32.3 |  Jul 9, 2023   \n0.1.0 |  Nov 22, 2014   \n#**7** in [Math](https://lib.rs/science/math \"Crates related to solving mathematical problems.\")\nDownload history 679528/week @ 2025-03-07 639016/week @ 2025-03-14 569721/week @ 2025-03-21 573037/week @ 2025-03-28 527480/week @ 2025-04-04 477018/week @ 2025-04-11 437074/week @ 2025-04-18 490925/week @ 2025-04-25 520804/week @ 2025-05-02 521719/week @ 2025-05-09 551839/week @ 2025-05-16 466867/week @ 2025-05-23 511550/week @ 2025-05-30 609436/week @ 2025-06-06 504580/week @ 2025-06-13 520051/week @ 2025-06-20\n**2,246,773** downloads per month Used in [**3,028** crates (1,127 directly)](https://lib.rs/crates/nalgebra/rev)\n**Apache-2.0**\n2MB  **36K** SLoC\n![crates.io](https://img.gs/czjpqfbdkz/full/https://nalgebra.org/img/logo_nalgebra.svg)\n[ ![](https://img.shields.io/discord/507548572338880513.svg?logo=discord&colorB=7289DA) ](https://discord.gg/vt9DJSW) [ ![crates.io](https://img.shields.io/crates/v/nalgebra.svg?style=flat-square) ](https://crates.io/crates/nalgebra) [ ![](https://img.shields.io/badge/License-Apache%202.0-blue.svg) ](https://opensource.org/licenses/Apache-2.0)\n**[Users guide](https://nalgebra.org) | [Documentation](https://docs.rs/nalgebra/latest/nalgebra/) **\n**Linear algebra library** _for the Rust programming language._\n###  [`lib.rs`](https://docs.rs/nalgebra): \n# nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n## Using **nalgebra**\nYou will need the last stable build of the [rust compiler](https://www.rust-lang.org) and the official package manager: [cargo](https://github.com/rust-lang/cargo).\nSimply add the following to your ``Cargo.toml`` file:\n```\n`[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n`\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module ```nalgebra`::````.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the ```na`::```` prefix:\n```\n```#``[``macro_use``]``\n`extern` `crate` approx`;` ``//` For the macro assert_relative_eq!`\n`extern` `crate` nalgebra `as` na`;`\n`use` `na`::````{`Vector3`,` Rotation3```}```;`\n``fn` `main`````(````)``````{`\n`let` axis `=` `Vector3`::``x_axis`(``)``;`\n`let` angle `=` `1.``57``;`\n`let` b   `=` `Rotation3`::``from_axis_angle`(``&`axis`,` angle`)``;`\n`assert_relative_eq!``(`b`.``axis``(``)``.``unwrap``(``)``,` axis`)``;`\n`assert_relative_eq!``(`b`.``angle``(``)``,` angle`)``;`\n```}```\n`\n```\n\n## Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type [``Matrix``](https://docs.rs/nalgebra/0.33.2/Matrix) for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: [``Vector1``](https://docs.rs/nalgebra/0.33.2/Vector1) to [``Vector6``](https://docs.rs/nalgebra/0.33.2/Vector6) and [``Matrix1x1``](https://docs.rs/nalgebra/0.33.2/Matrix1) to [``Matrix6x6``](https://docs.rs/nalgebra/0.33.2/Matrix6), including rectangular matrices like [``Matrix2x5``](https://docs.rs/nalgebra/0.33.2/Matrix2x5).\n  * Points sizes known at compile time, and convenience aliases: [``Point1``](https://docs.rs/nalgebra/0.33.2/Point1) to [``Point6``](https://docs.rs/nalgebra/0.33.2/Point6).\n  * Translation (seen as a transformation that composes by multiplication): [``Translation2``](https://docs.rs/nalgebra/0.33.2/Translation2), [``Translation3``](https://docs.rs/nalgebra/0.33.2/Translation3).\n  * Rotation matrices: [``Rotation2``](https://docs.rs/nalgebra/0.33.2/Rotation2), [``Rotation3``](https://docs.rs/nalgebra/0.33.2/Rotation3).\n  * Quaternions: [``Quaternion``](https://docs.rs/nalgebra/0.33.2/Quaternion), [``UnitQuaternion``](https://docs.rs/nalgebra/0.33.2/UnitQuaternion) (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: [``UnitComplex``](https://docs.rs/nalgebra/0.33.2/UnitComplex).\n  * Algebraic entities with a norm equal to one: [```Unit`<`T`>````](https://docs.rs/nalgebra/0.33.2/Unit), e.g., ```Unit`<`Vector3`<``f32``>``>````.\n  * Isometries (translation \u2a2f rotation): [``Isometry2``](https://docs.rs/nalgebra/0.33.2/Isometry2), [``Isometry3``](https://docs.rs/nalgebra/0.33.2/Isometry3)\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): [``Similarity2``](https://docs.rs/nalgebra/0.33.2/Similarity2), [``Similarity3``](https://docs.rs/nalgebra/0.33.2/Similarity3).\n  * Affine transformations stored as a homogeneous matrix: [``Affine2``](https://docs.rs/nalgebra/0.33.2/Affine2), [``Affine3``](https://docs.rs/nalgebra/0.33.2/Affine3).\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: [``Projective2``](https://docs.rs/nalgebra/0.33.2/Projective2), [``Projective3``](https://docs.rs/nalgebra/0.33.2/Projective3).\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: [``Transform2``](https://docs.rs/nalgebra/0.33.2/Transform2), [``Transform3``](https://docs.rs/nalgebra/0.33.2/Transform3).\n  * 3D projections for computer graphics: [``Perspective3``](https://docs.rs/nalgebra/0.33.2/Perspective3), [``Orthographic3``](https://docs.rs/nalgebra/0.33.2/Orthographic3).\n  * Matrix factorizations: [``Cholesky``](https://docs.rs/nalgebra/0.33.2/Cholesky), [``QR``](https://docs.rs/nalgebra/0.33.2/QR), [``LU``](https://docs.rs/nalgebra/0.33.2/LU), [``FullPivLU``](https://docs.rs/nalgebra/0.33.2/FullPivLU), [``SVD``](https://docs.rs/nalgebra/0.33.2/SVD), [``Schur``](https://docs.rs/nalgebra/0.33.2/Schur), [``Hessenberg``](https://docs.rs/nalgebra/0.33.2/Hessenberg), [``SymmetricEigen``](https://docs.rs/nalgebra/0.33.2/SymmetricEigen).\n  * Insertion and removal of rows of columns of a matrix.\n\n\n#### Dependencies\n~1\u20135MB  ~122K SLoC\n  * [ optional ](https://lib.rs/crates/nalgebra/features#feature-alga \"alga is optional feature\") [alga](https://lib.rs/crates/alga \"new\") 0.9\n  * [approx](https://lib.rs/crates/approx \"0.5\")\n  * [convert-bytemuck?](https://lib.rs/crates/nalgebra/features#feature-convert-bytemuck \"optional feature\") [bytemuck](https://lib.rs/crates/bytemuck \"1.5\")\n  * [convert-glam014?](https://lib.rs/crates/nalgebra/features#feature-convert-glam014 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam014, obsolete\") 0.14\n  * [convert-glam015?](https://lib.rs/crates/nalgebra/features#feature-convert-glam015 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam015, obsolete\") 0.15\n  * [convert-glam016?](https://lib.rs/crates/nalgebra/features#feature-convert-glam016 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam016, obsolete\") 0.16\n  * [convert-glam017?](https://lib.rs/crates/nalgebra/features#feature-convert-glam017 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam017, obsolete\") 0.17\n  * [convert-glam018?](https://lib.rs/crates/nalgebra/features#feature-convert-glam018 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam018, obsolete\") 0.18\n  * [convert-glam019?](https://lib.rs/crates/nalgebra/features#feature-convert-glam019 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam019, obsolete\") 0.19\n  * [convert-glam020?](https://lib.rs/crates/nalgebra/features#feature-convert-glam020 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam020, obsolete\") 0.20\n  * [convert-glam021?](https://lib.rs/crates/nalgebra/features#feature-convert-glam021 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam021, obsolete\") 0.21\n  * [convert-glam022?](https://lib.rs/crates/nalgebra/features#feature-convert-glam022 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam022, obsolete\") 0.22\n  * [convert-glam023?](https://lib.rs/crates/nalgebra/features#feature-convert-glam023 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam023, obsolete\") 0.23\n  * [convert-glam024?](https://lib.rs/crates/nalgebra/features#feature-convert-glam024 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam024, obsolete\") 0.24\n  * [convert-glam025?](https://lib.rs/crates/nalgebra/features#feature-convert-glam025 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam025, obsolete\") 0.25\n  * [convert-glam027?](https://lib.rs/crates/nalgebra/features#feature-convert-glam027 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam027, obsolete\") 0.27\n  * [convert-glam028?](https://lib.rs/crates/nalgebra/features#feature-convert-glam028 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam028, obsolete\") 0.28\n  * [convert-glam029?](https://lib.rs/crates/nalgebra/features#feature-convert-glam029 \"optional feature\") [glam](https://lib.rs/crates/glam \"renamed glam029, outdated\") 0.29\n  * [compare?](https://lib.rs/crates/nalgebra/features#feature-compare \"optional feature\") [matrixcompare-core](https://lib.rs/crates/matrixcompare-core \"0.1\")\n  * [std](https://lib.rs/crates/nalgebra/features#feature-std \"default feature\") [matrixmultiply](https://lib.rs/crates/matrixmultiply \"0.3\")\n  * [convert-mint?](https://lib.rs/crates/nalgebra/features#feature-convert-mint \"optional feature\") [mint](https://lib.rs/crates/mint \"0.5\")\n  * [macros](https://lib.rs/crates/nalgebra/features#feature-macros \"default feature\") [nalgebra-macros](https://lib.rs/crates/nalgebra-macros \"0.2.2\")\n  * [num-complex](https://lib.rs/crates/num-complex \"0.4\")\n  * [num-rational](https://lib.rs/crates/num-rational \"new\") 0.4\n  * [num-traits](https://lib.rs/crates/num-traits \"0.2\")\n  * [io?](https://lib.rs/crates/nalgebra/features#feature-io \"optional feature\") [pest](https://lib.rs/crates/pest \"2\")\n  * [io?](https://lib.rs/crates/nalgebra/features#feature-io \"optional feature\") [pest_derive](https://lib.rs/crates/pest_derive \"2\")\n  * [proptest-support?](https://lib.rs/crates/nalgebra/features#feature-proptest-support \"optional feature\") [proptest](https://lib.rs/crates/proptest \"1\")[+std](https://lib.rs/crates/proptest/features#feature-std)\n  * [arbitrary?](https://lib.rs/crates/nalgebra/features#feature-arbitrary \"optional feature\") [quickcheck](https://lib.rs/crates/quickcheck \"new\") 1.0\n  * [rand?](https://lib.rs/crates/nalgebra/features#feature-rand \"optional feature\") [rand](https://lib.rs/crates/rand \"renamed rand-package, outdated\") 0.8\n  * [rand?](https://lib.rs/crates/nalgebra/features#feature-rand \"optional feature\") [rand_distr](https://lib.rs/crates/rand_distr \"0.4\")\n  * [ optional ](https://lib.rs/crates/nalgebra/features#feature-rayon \"rayon is optional feature\") [rayon](https://lib.rs/crates/rayon \"1.6\")\n  * [rkyv-safe-deser?](https://lib.rs/crates/nalgebra/features#feature-rkyv-safe-deser \"optional feature\") [rkyv-serialize?](https://lib.rs/crates/nalgebra/features#feature-rkyv-serialize \"optional feature\") [rkyv-serialize-no-std?](https://lib.rs/crates/nalgebra/features#feature-rkyv-serialize-no-std \"optional feature\") [rkyv](https://lib.rs/crates/rkyv \"outdated\") 0.7.41\n  * [serde-serialize?](https://lib.rs/crates/nalgebra/features#feature-serde-serialize \"optional feature\") [serde](https://lib.rs/crates/serde \"1.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * [simba](https://lib.rs/crates/simba \"new\") 0.9\n  * [typenum](https://lib.rs/crates/typenum \"1.12\")\n\n\n  * dev  [cool_asserts](https://lib.rs/crates/cool_asserts \"2.0.3\")\n  * dev  [criterion](https://lib.rs/crates/criterion \"obsolete\") 0.4[+html_reports](https://lib.rs/crates/criterion/features#feature-html_reports)\n  * dev  [itertools](https://lib.rs/crates/itertools \"obsolete\") 0.13\n  * dev  [matrixcompare](https://lib.rs/crates/matrixcompare \"0.3.0\")\n  * dev  [rand_isaac](https://lib.rs/crates/rand_isaac \"obsolete\") 0.3\n  * dev  [rand_xorshift](https://lib.rs/crates/rand_xorshift \"obsolete\") 0.3\n  * dev  [serde_json](https://lib.rs/crates/serde_json \"1.0\")\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0.90\")\n\n\n#### [Other features](https://lib.rs/crates/nalgebra/features)\n  * [alloc](https://lib.rs/crates/nalgebra/features#feature-alloc)\n  * [debug](https://lib.rs/crates/nalgebra/features#feature-debug)\n  * [libm](https://lib.rs/crates/nalgebra/features#feature-libm)\n  * [libm-force](https://lib.rs/crates/nalgebra/features#feature-libm-force)\n  * [rand-no-std](https://lib.rs/crates/nalgebra/features#feature-rand-no-std)\n  * [serde-serialize-no-std](https://lib.rs/crates/nalgebra/features#feature-serde-serialize-no-std)\n  * [slow-tests](https://lib.rs/crates/nalgebra/features#feature-slow-tests)\n  * [sparse](https://lib.rs/crates/nalgebra/features#feature-sparse)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  113 releases\u27e81\u27e9\n0.33.2 |  Oct 29, 2024   \n---|---  \n0.33.0 |  Jun 23, 2024   \n0.32.5 |  Mar 28, 2024   \n0.32.3 |  Jul 9, 2023   \n0.1.0 |  Nov 22, 2014   \n#**7** in Math\u27e82\u27e9\nDownload history 679528/week @ 2025-03-07 639016/week @ 2025-03-14 569721/week @ 2025-03-21 573037/week @ 2025-03-28 527480/week @ 2025-04-04 477018/week @ 2025-04-11 437074/week @ 2025-04-18 490925/week @ 2025-04-25 520804/week @ 2025-05-02 521719/week @ 2025-05-09 551839/week @ 2025-05-16 466867/week @ 2025-05-23 511550/week @ 2025-05-30 609436/week @ 2025-06-06 504580/week @ 2025-06-13 520051/week @ 2025-06-20\n**2,246,773** downloads per month Used in **3,028** crates (1,127 directly)\u27e83\u27e9\n**Apache-2.0**\n2MB  **36K** SLoC\n![crates.io\u27e84\u27e9]\n ![\u27e85\u27e9 ](https://discord.gg/vt9DJSW)  ![crates.io\u27e86\u27e9 ](https://crates.io/crates/nalgebra)  ![\u27e87\u27e9 ](https://opensource.org/licenses/Apache-2.0)\n**Users guide\u27e88\u27e9 | Documentation\u27e89\u27e9 **\n**Linear algebra library** _for the Rust programming language._\n###  `lib.rs`\u27e810\u27e9: \n# nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n## Using **nalgebra**\nYou will need the last stable build of the rust compiler\u27e811\u27e9 and the official package manager: cargo\u27e812\u27e9.\nSimply add the following to your ``Cargo.toml`` file:\n```\n`[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n`\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module ```nalgebra`::````.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the ```na`::```` prefix:\n```\n```#``[``macro_use``]``\n`extern` `crate` approx`;` ``//` For the macro assert_relative_eq!`\n`extern` `crate` nalgebra `as` na`;`\n`use` `na`::````{`Vector3`,` Rotation3```}```;`\n``fn` `main`````(````)``````{`\n`let` axis `=` `Vector3`::``x_axis`(``)``;`\n`let` angle `=` `1.``57``;`\n`let` b   `=` `Rotation3`::``from_axis_angle`(``&`axis`,` angle`)``;`\n`assert_relative_eq!``(`b`.``axis``(``)``.``unwrap``(``)``,` axis`)``;`\n`assert_relative_eq!``(`b`.``angle``(``)``,` angle`)``;`\n```}```\n`\n```\n\n## Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type ``Matrix``\u27e813\u27e9 for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: ``Vector1``\u27e814\u27e9 to ``Vector6``\u27e815\u27e9 and ``Matrix1x1``\u27e816\u27e9 to ``Matrix6x6``\u27e817\u27e9, including rectangular matrices like ``Matrix2x5``\u27e818\u27e9.\n  * Points sizes known at compile time, and convenience aliases: ``Point1``\u27e819\u27e9 to ``Point6``\u27e820\u27e9.\n  * Translation (seen as a transformation that composes by multiplication): ``Translation2``\u27e821\u27e9, ``Translation3``\u27e822\u27e9.\n  * Rotation matrices: ``Rotation2``\u27e823\u27e9, ``Rotation3``\u27e824\u27e9.\n  * Quaternions: ``Quaternion``\u27e825\u27e9, ``UnitQuaternion``\u27e826\u27e9 (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: ``UnitComplex``\u27e827\u27e9.\n  * Algebraic entities with a norm equal to one: ```Unit`<`T`>````\u27e828\u27e9, e.g., ```Unit`<`Vector3`<``f32``>``>````.\n  * Isometries (translation \u2a2f rotation): ``Isometry2``\u27e829\u27e9, ``Isometry3``\u27e830\u27e9\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): ``Similarity2``\u27e831\u27e9, ``Similarity3``\u27e832\u27e9.\n  * Affine transformations stored as a homogeneous matrix: ``Affine2``\u27e833\u27e9, ``Affine3``\u27e834\u27e9.\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: ``Projective2``\u27e835\u27e9, ``Projective3``\u27e836\u27e9.\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: ``Transform2``\u27e837\u27e9, ``Transform3``\u27e838\u27e9.\n  * 3D projections for computer graphics: ``Perspective3``\u27e839\u27e9, ``Orthographic3``\u27e840\u27e9.\n  * Matrix factorizations: ``Cholesky``\u27e841\u27e9, ``QR``\u27e842\u27e9, ``LU``\u27e843\u27e9, ``FullPivLU``\u27e844\u27e9, ``SVD``\u27e845\u27e9, ``Schur``\u27e846\u27e9, ``Hessenberg``\u27e847\u27e9, ``SymmetricEigen``\u27e848\u27e9.\n  * Insertion and removal of rows of columns of a matrix.\n\n\n#### Dependencies\n~1\u20135MB  ~122K SLoC\n  *  optional \u27e849\u27e9 alga\u27e850\u27e9 0.9\n  * approx\u27e851\u27e9\n  * convert-bytemuck?\u27e852\u27e9 bytemuck\u27e853\u27e9\n  * convert-glam014?\u27e854\u27e9 glam\u27e855\u27e9 0.14\n  * convert-glam015?\u27e856\u27e9 glam\u27e855\u27e9 0.15\n  * convert-glam016?\u27e857\u27e9 glam\u27e855\u27e9 0.16\n  * convert-glam017?\u27e858\u27e9 glam\u27e855\u27e9 0.17\n  * convert-glam018?\u27e859\u27e9 glam\u27e855\u27e9 0.18\n  * convert-glam019?\u27e860\u27e9 glam\u27e855\u27e9 0.19\n  * convert-glam020?\u27e861\u27e9 glam\u27e855\u27e9 0.20\n  * convert-glam021?\u27e862\u27e9 glam\u27e855\u27e9 0.21\n  * convert-glam022?\u27e863\u27e9 glam\u27e855\u27e9 0.22\n  * convert-glam023?\u27e864\u27e9 glam\u27e855\u27e9 0.23\n  * convert-glam024?\u27e865\u27e9 glam\u27e855\u27e9 0.24\n  * convert-glam025?\u27e866\u27e9 glam\u27e855\u27e9 0.25\n  * convert-glam027?\u27e867\u27e9 glam\u27e855\u27e9 0.27\n  * convert-glam028?\u27e868\u27e9 glam\u27e855\u27e9 0.28\n  * convert-glam029?\u27e869\u27e9 glam\u27e855\u27e9 0.29\n  * compare?\u27e870\u27e9 matrixcompare-core\u27e871\u27e9\n  * std\u27e872\u27e9 matrixmultiply\u27e873\u27e9\n  * convert-mint?\u27e874\u27e9 mint\u27e875\u27e9\n  * macros\u27e876\u27e9 nalgebra-macros\u27e877\u27e9\n  * num-complex\u27e878\u27e9\n  * num-rational\u27e879\u27e9 0.4\n  * num-traits\u27e880\u27e9\n  * io?\u27e881\u27e9 pest\u27e882\u27e9\n  * io?\u27e881\u27e9 pest_derive\u27e883\u27e9\n  * proptest-support?\u27e884\u27e9 proptest\u27e885\u27e9+std\u27e886\u27e9\n  * arbitrary?\u27e887\u27e9 quickcheck\u27e888\u27e9 1.0\n  * rand?\u27e889\u27e9 rand\u27e890\u27e9 0.8\n  * rand?\u27e889\u27e9 rand_distr\u27e891\u27e9\n  *  optional \u27e892\u27e9 rayon\u27e893\u27e9\n  * rkyv-safe-deser?\u27e894\u27e9 rkyv-serialize?\u27e895\u27e9 rkyv-serialize-no-std?\u27e896\u27e9 rkyv\u27e897\u27e9 0.7.41\n  * serde-serialize?\u27e898\u27e9 serde\u27e899\u27e9+derive\u27e8100\u27e9\n  * simba\u27e8101\u27e9 0.9\n  * typenum\u27e8102\u27e9\n\n\n  * dev  cool_asserts\u27e8103\u27e9\n  * dev  criterion\u27e8104\u27e9 0.4+html_reports\u27e8105\u27e9\n  * dev  itertools\u27e8106\u27e9 0.13\n  * dev  matrixcompare\u27e8107\u27e9\n  * dev  rand_isaac\u27e8108\u27e9 0.3\n  * dev  rand_xorshift\u27e8109\u27e9 0.3\n  * dev  serde_json\u27e8110\u27e9\n  * dev  trybuild\u27e8111\u27e9\n\n\n#### Other features\u27e8112\u27e9\n  * alloc\u27e8113\u27e9\n  * debug\u27e8114\u27e9\n  * libm\u27e8115\u27e9\n  * libm-force\u27e8116\u27e9\n  * rand-no-std\u27e8117\u27e9\n  * serde-serialize-no-std\u27e8118\u27e9\n  * slow-tests\u27e8119\u27e9\n  * sparse\u27e8120\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/nalgebra/versions: 113 releases\n\u27e82\u27e9 https://lib.rs/science/math: Crates related to solving mathematical problems. - Math\n\u27e83\u27e9 https://lib.rs/crates/nalgebra/rev: **3,028** crates (1,127 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://nalgebra.org/img/logo_nalgebra.svg: crates.io\n\u27e85\u27e9 https://img.shields.io/discord/507548572338880513.svg?logo=discord&colorB=7289DA:  ![\n\u27e86\u27e9 https://img.shields.io/crates/v/nalgebra.svg?style=flat-square:  ![crates.io\n\u27e87\u27e9 https://img.shields.io/badge/License-Apache%202.0-blue.svg:  ![\n\u27e88\u27e9 https://nalgebra.org: Users guide\n\u27e89\u27e9 https://docs.rs/nalgebra/latest/nalgebra/: Documentation\n\u27e810\u27e9 https://docs.rs/nalgebra: `lib.rs`\n\u27e811\u27e9 https://www.rust-lang.org: rust compiler\n\u27e812\u27e9 https://github.com/rust-lang/cargo: cargo\n\u27e813\u27e9 https://docs.rs/nalgebra/0.33.2/Matrix: ``Matrix``\n\u27e814\u27e9 https://docs.rs/nalgebra/0.33.2/Vector1: ``Vector1``\n\u27e815\u27e9 https://docs.rs/nalgebra/0.33.2/Vector6: ``Vector6``\n\u27e816\u27e9 https://docs.rs/nalgebra/0.33.2/Matrix1: ``Matrix1x1``\n\u27e817\u27e9 https://docs.rs/nalgebra/0.33.2/Matrix6: ``Matrix6x6``\n\u27e818\u27e9 https://docs.rs/nalgebra/0.33.2/Matrix2x5: ``Matrix2x5``\n\u27e819\u27e9 https://docs.rs/nalgebra/0.33.2/Point1: ``Point1``\n\u27e820\u27e9 https://docs.rs/nalgebra/0.33.2/Point6: ``Point6``\n\u27e821\u27e9 https://docs.rs/nalgebra/0.33.2/Translation2: ``Translation2``\n\u27e822\u27e9 https://docs.rs/nalgebra/0.33.2/Translation3: ``Translation3``\n\u27e823\u27e9 https://docs.rs/nalgebra/0.33.2/Rotation2: ``Rotation2``\n\u27e824\u27e9 https://docs.rs/nalgebra/0.33.2/Rotation3: ``Rotation3``\n\u27e825\u27e9 https://docs.rs/nalgebra/0.33.2/Quaternion: ``Quaternion``\n\u27e826\u27e9 https://docs.rs/nalgebra/0.33.2/UnitQuaternion: ``UnitQuaternion``\n\u27e827\u27e9 https://docs.rs/nalgebra/0.33.2/UnitComplex: ``UnitComplex``\n\u27e828\u27e9 https://docs.rs/nalgebra/0.33.2/Unit: ```Unit`<`T`>````\n\u27e829\u27e9 https://docs.rs/nalgebra/0.33.2/Isometry2: ``Isometry2``\n\u27e830\u27e9 https://docs.rs/nalgebra/0.33.2/Isometry3: ``Isometry3``\n\u27e831\u27e9 https://docs.rs/nalgebra/0.33.2/Similarity2: ``Similarity2``\n\u27e832\u27e9 https://docs.rs/nalgebra/0.33.2/Similarity3: ``Similarity3``\n\u27e833\u27e9 https://docs.rs/nalgebra/0.33.2/Affine2: ``Affine2``\n\u27e834\u27e9 https://docs.rs/nalgebra/0.33.2/Affine3: ``Affine3``\n\u27e835\u27e9 https://docs.rs/nalgebra/0.33.2/Projective2: ``Projective2``\n\u27e836\u27e9 https://docs.rs/nalgebra/0.33.2/Projective3: ``Projective3``\n\u27e837\u27e9 https://docs.rs/nalgebra/0.33.2/Transform2: ``Transform2``\n\u27e838\u27e9 https://docs.rs/nalgebra/0.33.2/Transform3: ``Transform3``\n\u27e839\u27e9 https://docs.rs/nalgebra/0.33.2/Perspective3: ``Perspective3``\n\u27e840\u27e9 https://docs.rs/nalgebra/0.33.2/Orthographic3: ``Orthographic3``\n\u27e841\u27e9 https://docs.rs/nalgebra/0.33.2/Cholesky: ``Cholesky``\n\u27e842\u27e9 https://docs.rs/nalgebra/0.33.2/QR: ``QR``\n\u27e843\u27e9 https://docs.rs/nalgebra/0.33.2/LU: ``LU``\n\u27e844\u27e9 https://docs.rs/nalgebra/0.33.2/FullPivLU: ``FullPivLU``\n\u27e845\u27e9 https://docs.rs/nalgebra/0.33.2/SVD: ``SVD``\n\u27e846\u27e9 https://docs.rs/nalgebra/0.33.2/Schur: ``Schur``\n\u27e847\u27e9 https://docs.rs/nalgebra/0.33.2/Hessenberg: ``Hessenberg``\n\u27e848\u27e9 https://docs.rs/nalgebra/0.33.2/SymmetricEigen: ``SymmetricEigen``\n\u27e849\u27e9 https://lib.rs/crates/nalgebra/features#feature-alga: alga is optional feature -  optional \n\u27e850\u27e9 https://lib.rs/crates/alga: new - alga\n\u27e851\u27e9 https://lib.rs/crates/approx: 0.5 - approx\n\u27e852\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-bytemuck: optional feature - convert-bytemuck?\n\u27e853\u27e9 https://lib.rs/crates/bytemuck: 1.5 - bytemuck\n\u27e854\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam014: optional feature - convert-glam014?\n\u27e855\u27e9 https://lib.rs/crates/glam: renamed glam014, obsolete - glam\n\u27e856\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam015: optional feature - convert-glam015?\n\u27e857\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam016: optional feature - convert-glam016?\n\u27e858\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam017: optional feature - convert-glam017?\n\u27e859\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam018: optional feature - convert-glam018?\n\u27e860\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam019: optional feature - convert-glam019?\n\u27e861\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam020: optional feature - convert-glam020?\n\u27e862\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam021: optional feature - convert-glam021?\n\u27e863\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam022: optional feature - convert-glam022?\n\u27e864\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam023: optional feature - convert-glam023?\n\u27e865\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam024: optional feature - convert-glam024?\n\u27e866\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam025: optional feature - convert-glam025?\n\u27e867\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam027: optional feature - convert-glam027?\n\u27e868\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam028: optional feature - convert-glam028?\n\u27e869\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-glam029: optional feature - convert-glam029?\n\u27e870\u27e9 https://lib.rs/crates/nalgebra/features#feature-compare: optional feature - compare?\n\u27e871\u27e9 https://lib.rs/crates/matrixcompare-core: 0.1 - matrixcompare-core\n\u27e872\u27e9 https://lib.rs/crates/nalgebra/features#feature-std: default feature - std\n\u27e873\u27e9 https://lib.rs/crates/matrixmultiply: 0.3 - matrixmultiply\n\u27e874\u27e9 https://lib.rs/crates/nalgebra/features#feature-convert-mint: optional feature - convert-mint?\n\u27e875\u27e9 https://lib.rs/crates/mint: 0.5 - mint\n\u27e876\u27e9 https://lib.rs/crates/nalgebra/features#feature-macros: default feature - macros\n\u27e877\u27e9 https://lib.rs/crates/nalgebra-macros: 0.2.2 - nalgebra-macros\n\u27e878\u27e9 https://lib.rs/crates/num-complex: 0.4 - num-complex\n\u27e879\u27e9 https://lib.rs/crates/num-rational: new - num-rational\n\u27e880\u27e9 https://lib.rs/crates/num-traits: 0.2 - num-traits\n\u27e881\u27e9 https://lib.rs/crates/nalgebra/features#feature-io: optional feature - io?\n\u27e882\u27e9 https://lib.rs/crates/pest: 2 - pest\n\u27e883\u27e9 https://lib.rs/crates/pest_derive: 2 - pest_derive\n\u27e884\u27e9 https://lib.rs/crates/nalgebra/features#feature-proptest-support: optional feature - proptest-support?\n\u27e885\u27e9 https://lib.rs/crates/proptest: 1 - proptest\n\u27e886\u27e9 https://lib.rs/crates/proptest/features#feature-std: +std\n\u27e887\u27e9 https://lib.rs/crates/nalgebra/features#feature-arbitrary: optional feature - arbitrary?\n\u27e888\u27e9 https://lib.rs/crates/quickcheck: new - quickcheck\n\u27e889\u27e9 https://lib.rs/crates/nalgebra/features#feature-rand: optional feature - rand?\n\u27e890\u27e9 https://lib.rs/crates/rand: renamed rand-package, outdated - rand\n\u27e891\u27e9 https://lib.rs/crates/rand_distr: 0.4 - rand_distr\n\u27e892\u27e9 https://lib.rs/crates/nalgebra/features#feature-rayon: rayon is optional feature -  optional \n\u27e893\u27e9 https://lib.rs/crates/rayon: 1.6 - rayon\n\u27e894\u27e9 https://lib.rs/crates/nalgebra/features#feature-rkyv-safe-deser: optional feature - rkyv-safe-deser?\n\u27e895\u27e9 https://lib.rs/crates/nalgebra/features#feature-rkyv-serialize: optional feature - rkyv-serialize?\n\u27e896\u27e9 https://lib.rs/crates/nalgebra/features#feature-rkyv-serialize-no-std: optional feature - rkyv-serialize-no-std?\n\u27e897\u27e9 https://lib.rs/crates/rkyv: outdated - rkyv\n\u27e898\u27e9 https://lib.rs/crates/nalgebra/features#feature-serde-serialize: optional feature - serde-serialize?\n\u27e899\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e8100\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e8101\u27e9 https://lib.rs/crates/simba: new - simba\n\u27e8102\u27e9 https://lib.rs/crates/typenum: 1.12 - typenum\n\u27e8103\u27e9 https://lib.rs/crates/cool_asserts: 2.0.3 - cool_asserts\n\u27e8104\u27e9 https://lib.rs/crates/criterion: obsolete - criterion\n\u27e8105\u27e9 https://lib.rs/crates/criterion/features#feature-html_reports: +html_reports\n\u27e8106\u27e9 https://lib.rs/crates/itertools: obsolete - itertools\n\u27e8107\u27e9 https://lib.rs/crates/matrixcompare: 0.3.0 - matrixcompare\n\u27e8108\u27e9 https://lib.rs/crates/rand_isaac: obsolete - rand_isaac\n\u27e8109\u27e9 https://lib.rs/crates/rand_xorshift: obsolete - rand_xorshift\n\u27e8110\u27e9 https://lib.rs/crates/serde_json: 1.0 - serde_json\n\u27e8111\u27e9 https://lib.rs/crates/trybuild: 1.0.90 - trybuild\n\u27e8112\u27e9 https://lib.rs/crates/nalgebra/features: Other features\n\u27e8113\u27e9 https://lib.rs/crates/nalgebra/features#feature-alloc: alloc\n\u27e8114\u27e9 https://lib.rs/crates/nalgebra/features#feature-debug: debug\n\u27e8115\u27e9 https://lib.rs/crates/nalgebra/features#feature-libm: libm\n\u27e8116\u27e9 https://lib.rs/crates/nalgebra/features#feature-libm-force: libm-force\n\u27e8117\u27e9 https://lib.rs/crates/nalgebra/features#feature-rand-no-std: rand-no-std\n\u27e8118\u27e9 https://lib.rs/crates/nalgebra/features#feature-serde-serialize-no-std: serde-serialize-no-std\n\u27e8119\u27e9 https://lib.rs/crates/nalgebra/features#feature-slow-tests: slow-tests\n\u27e8120\u27e9 https://lib.rs/crates/nalgebra/features#feature-sparse: sparse\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 13233,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "119434.2199102"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rawpointer@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rawpointer-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rawpointer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rawpointer-0.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\librawpointer-225467d3e2c7fcda.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libautocfg-e2a9d558a9c0d2ca.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libautocfg-e2a9d558a9c0d2ca.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytemuck@1.16.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytemuck-1.16.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytemuck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytemuck-1.16.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libbytemuck-76ab0124b513ad9a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\paste-6d6b8744b3b7eee8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\paste-6d6b8744b3b7eee8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\proc-macro2-c0b3994f52be66a9\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\proc-macro2-c0b3994f52be66a9\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\paste-aa068a1285d656ea\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\build\\main.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\typenum-1ede41c9f5fe6591\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\typenum-1ede41c9f5fe6591\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\proc-macro2-5d56abe8000a765e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\num-traits-c293e95e29c208da\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\num-traits-c293e95e29c208da\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matrixmultiply@0.3.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matrixmultiply-0.3.8\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matrixmultiply-0.3.8\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\matrixmultiply-36f5941869a12382\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\matrixmultiply-36f5941869a12382\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\typenum-2aff0e15c6771793\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matrixmultiply@0.3.8",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\matrixmultiply-75b344d4c0c7f620\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_total_cmp"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\num-traits-7bdf8667148bd367\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#safe_arch@0.7.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\safe_arch-0.7.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "safe_arch",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\safe_arch-0.7.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "bytemuck",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libsafe_arch-a48cc58395c713b4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "paste",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\paste-cb904e5b1edfca26.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\paste-cb904e5b1edfca26.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\paste-cb904e5b1edfca26.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\paste-cb904e5b1edfca26.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matrixmultiply@0.3.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matrixmultiply-0.3.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matrixmultiply",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matrixmultiply-0.3.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libmatrixmultiply-48371c6dcdf62009.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libproc_macro2-1cafc3e379b9e32d.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libproc_macro2-1cafc3e379b9e32d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libquote-419fb43554fee568.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libquote-419fb43554fee568.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libtypenum-3a52b75683a35e9c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnum_traits-a752a119670786ad.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#approx@0.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\approx-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "approx",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\approx-0.5.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libapprox-80e42dd2c57e75ae.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_integer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnum_integer-de6f96163d893b31.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-complex@0.4.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-complex-0.4.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_complex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-complex-0.4.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnum_complex-c44aaa2ba890fb05.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-rational@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-rational-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_rational",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-rational-0.4.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnum_rational-162364cb7833fc75.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#wide@0.7.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wide-0.7.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "wide",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wide-0.7.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libwide-ac16d503e7de28b1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.67",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.67\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.67\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libsyn-fe585fad1ef3b999.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libsyn-fe585fad1ef3b999.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#nalgebra-macros@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nalgebra-macros-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "nalgebra_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nalgebra-macros-0.2.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\nalgebra_macros-d8f53b5d7a125816.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\nalgebra_macros-d8f53b5d7a125816.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\nalgebra_macros-d8f53b5d7a125816.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\nalgebra_macros-d8f53b5d7a125816.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#simba@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\simba-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "simba",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\simba-0.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std",
                "wide"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libsimba-45c981195863eb24.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unused imports: `Isometry3`, `Quaternion`, `Vector3`, and `Vector4`\n  --> src\\geometry\\isometry.rs:17:13\n   |\n17 | use crate::{Isometry3, Quaternion, Vector3, Vector4};\n   |             ^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^  ^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unused_imports)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove the whole `use` item",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 570,
                        "byte_start": 515,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\geometry\\isometry.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 18,
                        "line_start": 17,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unused_imports",
                  "explanation": null
                },
                "level": "warning",
                "message": "unused imports: `Isometry3`, `Quaternion`, `Vector3`, and `Vector4`",
                "spans": [
                  {
                    "byte_end": 536,
                    "byte_start": 527,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\geometry\\isometry.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                      }
                    ]
                  },
                  {
                    "byte_end": 548,
                    "byte_start": 538,
                    "column_end": 34,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\geometry\\isometry.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 24,
                        "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                      }
                    ]
                  },
                  {
                    "byte_end": 557,
                    "byte_start": 550,
                    "column_end": 43,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\geometry\\isometry.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 36,
                        "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                      }
                    ]
                  },
                  {
                    "byte_end": 566,
                    "byte_start": 559,
                    "column_end": 52,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\geometry\\isometry.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 45,
                        "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "macros",
                "matrixmultiply",
                "nalgebra-macros",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnalgebra-673db596e88610df.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libautocfg-e2a9d558a9c0d2ca.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libautocfg-e2a9d558a9c0d2ca.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\num-traits-c293e95e29c208da\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\num-traits-c293e95e29c208da\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\proc-macro2-c0b3994f52be66a9\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\proc-macro2-c0b3994f52be66a9\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytemuck@1.16.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytemuck-1.16.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytemuck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytemuck-1.16.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libbytemuck-76ab0124b513ad9a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\paste-6d6b8744b3b7eee8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\paste-6d6b8744b3b7eee8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matrixmultiply@0.3.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matrixmultiply-0.3.8\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matrixmultiply-0.3.8\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\matrixmultiply-36f5941869a12382\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\matrixmultiply-36f5941869a12382\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\build\\main.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\typenum-1ede41c9f5fe6591\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\typenum-1ede41c9f5fe6591\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_total_cmp"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\num-traits-7bdf8667148bd367\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\proc-macro2-5d56abe8000a765e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#safe_arch@0.7.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\safe_arch-0.7.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "safe_arch",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\safe_arch-0.7.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "bytemuck",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libsafe_arch-a48cc58395c713b4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\paste-aa068a1285d656ea\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\typenum-2aff0e15c6771793\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matrixmultiply@0.3.8",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\build\\matrixmultiply-75b344d4c0c7f620\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rawpointer@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rawpointer-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rawpointer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rawpointer-0.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\librawpointer-225467d3e2c7fcda.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnum_traits-a752a119670786ad.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libproc_macro2-1cafc3e379b9e32d.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libproc_macro2-1cafc3e379b9e32d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "paste",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\paste-cb904e5b1edfca26.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\paste-cb904e5b1edfca26.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\paste-cb904e5b1edfca26.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\paste-cb904e5b1edfca26.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#wide@0.7.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wide-0.7.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "wide",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wide-0.7.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libwide-ac16d503e7de28b1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matrixmultiply@0.3.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matrixmultiply-0.3.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matrixmultiply",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matrixmultiply-0.3.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libmatrixmultiply-48371c6dcdf62009.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.17.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libtypenum-3a52b75683a35e9c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libquote-419fb43554fee568.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libquote-419fb43554fee568.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#approx@0.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\approx-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "approx",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\approx-0.5.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libapprox-80e42dd2c57e75ae.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_integer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnum_integer-de6f96163d893b31.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-complex@0.4.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-complex-0.4.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_complex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-complex-0.4.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnum_complex-c44aaa2ba890fb05.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.67",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.67\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.67\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libsyn-fe585fad1ef3b999.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libsyn-fe585fad1ef3b999.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-rational@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-rational-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_rational",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-rational-0.4.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnum_rational-162364cb7833fc75.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#simba@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\simba-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "simba",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\simba-0.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std",
                "wide"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libsimba-45c981195863eb24.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#nalgebra-macros@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nalgebra-macros-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "nalgebra_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nalgebra-macros-0.2.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\nalgebra_macros-d8f53b5d7a125816.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\nalgebra_macros-d8f53b5d7a125816.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\nalgebra_macros-d8f53b5d7a125816.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\nalgebra_macros-d8f53b5d7a125816.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n  --> src\\geometry\\quaternion_construction.rs:62:17\n   |\n62 |     pub fn cast<To: Scalar>(self) -> Quaternion<To>\n   |                 ^^\n...\n65 |         To: SupersetOf<T>,\n   |         ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n   = note: `#[warn(clippy::multiple_bound_locations)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::multiple_bound_locations)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 2106,
                    "byte_start": 2104,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\geometry\\quaternion_construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "    pub fn cast<To: Scalar>(self) -> Quaternion<To>"
                      }
                    ]
                  },
                  {
                    "byte_end": 2182,
                    "byte_start": 2180,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\quaternion_construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        To: SupersetOf<T>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\geometry\\quaternion_construction.rs:234:17\n    |\n234 |     pub fn cast<To: Scalar>(self) -> UnitQuaternion<To>\n    |                 ^^\n235 |     where\n236 |         To: SupersetOf<T>,\n    |         ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 6674,
                    "byte_start": 6672,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\geometry\\quaternion_construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 234,
                    "line_start": 234,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "    pub fn cast<To: Scalar>(self) -> UnitQuaternion<To>"
                      }
                    ]
                  },
                  {
                    "byte_end": 6734,
                    "byte_start": 6732,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\quaternion_construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 236,
                    "line_start": 236,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        To: SupersetOf<T>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unused imports: `Isometry3`, `Quaternion`, `Vector3`, and `Vector4`\n  --> src\\geometry\\isometry.rs:17:13\n   |\n17 | use crate::{Isometry3, Quaternion, Vector3, Vector4};\n   |             ^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^  ^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unused_imports)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove the whole `use` item",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 570,
                        "byte_start": 515,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\geometry\\isometry.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 18,
                        "line_start": 17,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unused_imports",
                  "explanation": null
                },
                "level": "warning",
                "message": "unused imports: `Isometry3`, `Quaternion`, `Vector3`, and `Vector4`",
                "spans": [
                  {
                    "byte_end": 536,
                    "byte_start": 527,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\geometry\\isometry.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                      }
                    ]
                  },
                  {
                    "byte_end": 548,
                    "byte_start": 538,
                    "column_end": 34,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\geometry\\isometry.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 24,
                        "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                      }
                    ]
                  },
                  {
                    "byte_end": 557,
                    "byte_start": 550,
                    "column_end": 43,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\geometry\\isometry.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 36,
                        "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                      }
                    ]
                  },
                  {
                    "byte_end": 566,
                    "byte_start": 559,
                    "column_end": 52,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\geometry\\isometry.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 45,
                        "text": "use crate::{Isometry3, Quaternion, Vector3, Vector4};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\base\\ops.rs:98:6\n   |\n98 | impl<'a, T, R: Dim, C: Dim, S> Neg for &'a Matrix<T, R, C, S>\n   |      ^^                                 ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n98 - impl<'a, T, R: Dim, C: Dim, S> Neg for &'a Matrix<T, R, C, S>\n98 + impl<T, R: Dim, C: Dim, S> Neg for &Matrix<T, R, C, S>\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2666,
                        "byte_start": 2662,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\base\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 98,
                        "line_start": 98,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T, R: Dim, C: Dim, S> Neg for &'a Matrix<T, R, C, S>"
                          }
                        ]
                      },
                      {
                        "byte_end": 2700,
                        "byte_start": 2697,
                        "column_end": 44,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\base\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 98,
                        "line_start": 98,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 41,
                            "text": "impl<'a, T, R: Dim, C: Dim, S> Neg for &'a Matrix<T, R, C, S>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 2664,
                    "byte_start": 2662,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\base\\ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T, R: Dim, C: Dim, S> Neg for &'a Matrix<T, R, C, S>"
                      }
                    ]
                  },
                  {
                    "byte_end": 2699,
                    "byte_start": 2697,
                    "column_end": 43,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\base\\ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 41,
                        "text": "impl<'a, T, R: Dim, C: Dim, S> Neg for &'a Matrix<T, R, C, S>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\base\\ops.rs:553:6\n    |\n553 | impl<'a, 'b, T, R1: Dim, C1: Dim, R2: Dim, C2: Dim, SA, SB> Mul<&'b Matrix<T, R2, C2, SB>>\n    |      ^^\n554 |     for &'a Matrix<T, R1, C1, SA>\n    |          ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n553 ~ impl<'b, T, R1: Dim, C1: Dim, R2: Dim, C2: Dim, SA, SB> Mul<&'b Matrix<T, R2, C2, SB>>\n554 ~     for &Matrix<T, R1, C1, SA>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21276,
                        "byte_start": 21272,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\base\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 553,
                        "line_start": 553,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, 'b, T, R1: Dim, C1: Dim, R2: Dim, C2: Dim, SA, SB> Mul<&'b Matrix<T, R2, C2, SB>>"
                          }
                        ]
                      },
                      {
                        "byte_end": 21371,
                        "byte_start": 21368,
                        "column_end": 13,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\base\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 554,
                        "line_start": 554,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 10,
                            "text": "    for &'a Matrix<T, R1, C1, SA>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 21274,
                    "byte_start": 21272,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\base\\ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 553,
                    "line_start": 553,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, 'b, T, R1: Dim, C1: Dim, R2: Dim, C2: Dim, SA, SB> Mul<&'b Matrix<T, R2, C2, SB>>"
                      }
                    ]
                  },
                  {
                    "byte_end": 21370,
                    "byte_start": 21368,
                    "column_end": 12,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\base\\ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 554,
                    "line_start": 554,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 10,
                        "text": "    for &'a Matrix<T, R1, C1, SA>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\base\\ops.rs:575:6\n    |\n575 | impl<'a, T, R1: Dim, C1: Dim, R2: Dim, C2: Dim, SA, SB> Mul<Matrix<T, R2, C2, SB>>\n    |      ^^\n576 |     for &'a Matrix<T, R1, C1, SA>\n    |          ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n575 ~ impl<T, R1: Dim, C1: Dim, R2: Dim, C2: Dim, SA, SB> Mul<Matrix<T, R2, C2, SB>>\n576 ~     for &Matrix<T, R1, C1, SA>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22063,
                        "byte_start": 22059,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\base\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 575,
                        "line_start": 575,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T, R1: Dim, C1: Dim, R2: Dim, C2: Dim, SA, SB> Mul<Matrix<T, R2, C2, SB>>"
                          }
                        ]
                      },
                      {
                        "byte_end": 22150,
                        "byte_start": 22147,
                        "column_end": 13,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\base\\ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 576,
                        "line_start": 576,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 10,
                            "text": "    for &'a Matrix<T, R1, C1, SA>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 22061,
                    "byte_start": 22059,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\base\\ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 575,
                    "line_start": 575,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T, R1: Dim, C1: Dim, R2: Dim, C2: Dim, SA, SB> Mul<Matrix<T, R2, C2, SB>>"
                      }
                    ]
                  },
                  {
                    "byte_end": 22149,
                    "byte_start": 22147,
                    "column_end": 12,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\base\\ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 576,
                    "line_start": 576,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 10,
                        "text": "    for &'a Matrix<T, R1, C1, SA>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `repeat().take()` can be written more concisely\n  --> src\\base\\construction.rs:59:51\n   |\n59 |         Self::from_iterator_generic(nrows, ncols, iter::repeat(elem).take(len))\n   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `repeat_n()` instead: `std::iter::repeat_n(elem, len)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_repeat_n\n   = note: `#[warn(clippy::manual_repeat_n)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_repeat_n",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::manual_repeat_n)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using `repeat_n()` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1985,
                        "byte_start": 1957,
                        "column_end": 79,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\base\\construction.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 59,
                        "line_start": 59,
                        "suggested_replacement": "std::iter::repeat_n(elem, len)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 51,
                            "text": "        Self::from_iterator_generic(nrows, ncols, iter::repeat(elem).take(len))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::manual_repeat_n",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `repeat().take()` can be written more concisely",
                "spans": [
                  {
                    "byte_end": 1985,
                    "byte_start": 1957,
                    "column_end": 79,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "src\\base\\construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 51,
                        "text": "        Self::from_iterator_generic(nrows, ncols, iter::repeat(elem).take(len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `repeat().take()` can be written more concisely\n  --> src\\base\\construction.rs:68:51\n   |\n68 |         Self::from_iterator_generic(nrows, ncols, iter::repeat(elem).take(len))\n   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `repeat_n()` instead: `std::iter::repeat_n(elem, len)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_repeat_n\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_repeat_n",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using `repeat_n()` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2319,
                        "byte_start": 2291,
                        "column_end": 79,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\base\\construction.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 68,
                        "line_start": 68,
                        "suggested_replacement": "std::iter::repeat_n(elem, len)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 51,
                            "text": "        Self::from_iterator_generic(nrows, ncols, iter::repeat(elem).take(len))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::manual_repeat_n",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `repeat().take()` can be written more concisely",
                "spans": [
                  {
                    "byte_end": 2319,
                    "byte_start": 2291,
                    "column_end": 79,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "src\\base\\construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 68,
                    "line_start": 68,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 51,
                        "text": "        Self::from_iterator_generic(nrows, ncols, iter::repeat(elem).take(len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n    --> src\\base\\matrix.rs:2039:9\n     |\n2039 | /         assert_eq!(\n2040 | |             shape,\n2041 | |             (2, 1),\n2042 | |             \"2D perpendicular product requires (2, 1) vectors {:?}\",\n2043 | |             shape\n2044 | |         );\n     | |_________^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n     = note: `#[warn(clippy::uninlined_format_args)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 70976,
                        "byte_start": 70976,
                        "column_end": 64,
                        "column_start": 64,
                        "expansion": null,
                        "file_name": "src\\base\\matrix.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2042,
                        "line_start": 2042,
                        "suggested_replacement": "shape",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 64,
                            "text": "            \"2D perpendicular product requires (2, 1) vectors {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 71000,
                        "byte_start": 70980,
                        "column_end": 18,
                        "column_start": 68,
                        "expansion": null,
                        "file_name": "src\\base\\matrix.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2043,
                        "line_start": 2042,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 68,
                            "text": "            \"2D perpendicular product requires (2, 1) vectors {:?}\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "            shape"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 71011,
                    "byte_start": 70859,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\base\\matrix.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2044,
                    "line_start": 2039,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 9,
                        "text": "        assert_eq!("
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "            shape,"
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "            (2, 1),"
                      },
                      {
                        "highlight_end": 69,
                        "highlight_start": 1,
                        "text": "            \"2D perpendicular product requires (2, 1) vectors {:?}\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "            shape"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        );"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\geometry\\point_ops.rs:65:6\n   |\n65 | impl<'a, T: Scalar + ClosedNeg, D: DimName> Neg for &'a OPoint<T, D>\n   |      ^^                                              ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n65 - impl<'a, T: Scalar + ClosedNeg, D: DimName> Neg for &'a OPoint<T, D>\n65 + impl<T: Scalar + ClosedNeg, D: DimName> Neg for &OPoint<T, D>\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1381,
                        "byte_start": 1377,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\geometry\\point_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: Scalar + ClosedNeg, D: DimName> Neg for &'a OPoint<T, D>"
                          }
                        ]
                      },
                      {
                        "byte_end": 1428,
                        "byte_start": 1425,
                        "column_end": 57,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\geometry\\point_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 54,
                            "text": "impl<'a, T: Scalar + ClosedNeg, D: DimName> Neg for &'a OPoint<T, D>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 1379,
                    "byte_start": 1377,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\geometry\\point_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: Scalar + ClosedNeg, D: DimName> Neg for &'a OPoint<T, D>"
                      }
                    ]
                  },
                  {
                    "byte_end": 1427,
                    "byte_start": 1425,
                    "column_end": 56,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "src\\geometry\\point_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 54,
                        "text": "impl<'a, T: Scalar + ClosedNeg, D: DimName> Neg for &'a OPoint<T, D>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\geometry\\rotation_specialization.rs:96:9\n   |\n96 |     ///           to the actual solution is provided. Can be set to `Rotation2::identity()` if no other\n   |         ^^^^^^^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n   = note: `#[warn(clippy::doc_overindented_list_items)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_overindented_list_items)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3599,
                        "byte_start": 3589,
                        "column_end": 19,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\geometry\\rotation_specialization.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 96,
                        "line_start": 96,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 9,
                            "text": "    ///           to the actual solution is provided. Can be set to `Rotation2::identity()` if no other"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3599,
                    "byte_start": 3589,
                    "column_end": 19,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\rotation_specialization.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 96,
                    "line_start": 96,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 9,
                        "text": "    ///           to the actual solution is provided. Can be set to `Rotation2::identity()` if no other"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\geometry\\rotation_specialization.rs:97:9\n   |\n97 |     ///           guesses come to mind.\n   |         ^^^^^^^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3704,
                        "byte_start": 3694,
                        "column_end": 19,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\geometry\\rotation_specialization.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 9,
                            "text": "    ///           guesses come to mind."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3704,
                    "byte_start": 3694,
                    "column_end": 19,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\rotation_specialization.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 9,
                        "text": "    ///           guesses come to mind."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\geometry\\rotation_specialization.rs:729:9\n    |\n729 |     ///           to the actual solution is provided. Can be set to `Rotation3::identity()` if no other\n    |         ^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 26838,
                        "byte_start": 26828,
                        "column_end": 19,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\geometry\\rotation_specialization.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 729,
                        "line_start": 729,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 9,
                            "text": "    ///           to the actual solution is provided. Can be set to `Rotation3::identity()` if no other"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 26838,
                    "byte_start": 26828,
                    "column_end": 19,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\rotation_specialization.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 729,
                    "line_start": 729,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 9,
                        "text": "    ///           to the actual solution is provided. Can be set to `Rotation3::identity()` if no other"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\geometry\\rotation_specialization.rs:730:9\n    |\n730 |     ///           guesses come to mind.\n    |         ^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 26943,
                        "byte_start": 26933,
                        "column_end": 19,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\geometry\\rotation_specialization.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 730,
                        "line_start": 730,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 9,
                            "text": "    ///           guesses come to mind."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 26943,
                    "byte_start": 26933,
                    "column_end": 19,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\rotation_specialization.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 730,
                    "line_start": 730,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 9,
                        "text": "    ///           guesses come to mind."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n    --> src\\geometry\\quaternion.rs:1230:9\n     |\n1230 |     ///    must be to return `None`.\n     |         ^^^ help: try using `  ` (2 spaces)\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 39552,
                        "byte_start": 39549,
                        "column_end": 12,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\geometry\\quaternion.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1230,
                        "line_start": 1230,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 9,
                            "text": "    ///    must be to return `None`."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 39552,
                    "byte_start": 39549,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\quaternion.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1230,
                    "line_start": 1230,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "    ///    must be to return `None`."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\geometry\\quaternion_construction.rs:430:9\n    |\n430 |     ///           to the actual solution is provided. Can be set to `UnitQuaternion::identity()` if no other\n    |         ^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15308,
                        "byte_start": 15298,
                        "column_end": 19,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\geometry\\quaternion_construction.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 430,
                        "line_start": 430,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 9,
                            "text": "    ///           to the actual solution is provided. Can be set to `UnitQuaternion::identity()` if no other"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 15308,
                    "byte_start": 15298,
                    "column_end": 19,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\quaternion_construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 430,
                    "line_start": 430,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 9,
                        "text": "    ///           to the actual solution is provided. Can be set to `UnitQuaternion::identity()` if no other"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\geometry\\quaternion_construction.rs:431:9\n    |\n431 |     ///           guesses come to mind.\n    |         ^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15418,
                        "byte_start": 15408,
                        "column_end": 19,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\geometry\\quaternion_construction.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 431,
                        "line_start": 431,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 9,
                            "text": "    ///           guesses come to mind."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 15418,
                    "byte_start": 15408,
                    "column_end": 19,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\quaternion_construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 431,
                    "line_start": 431,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 9,
                        "text": "    ///           guesses come to mind."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\geometry\\quaternion_ops.rs:552:6\n    |\n552 | impl<'a, T: SimdRealField> Neg for &'a Quaternion<T>\n    |      ^^                             ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n552 - impl<'a, T: SimdRealField> Neg for &'a Quaternion<T>\n552 + impl<T: SimdRealField> Neg for &Quaternion<T>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14965,
                        "byte_start": 14961,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\geometry\\quaternion_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 552,
                        "line_start": 552,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: SimdRealField> Neg for &'a Quaternion<T>"
                          }
                        ]
                      },
                      {
                        "byte_end": 14995,
                        "byte_start": 14992,
                        "column_end": 40,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\geometry\\quaternion_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 552,
                        "line_start": 552,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 37,
                            "text": "impl<'a, T: SimdRealField> Neg for &'a Quaternion<T>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 14963,
                    "byte_start": 14961,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\geometry\\quaternion_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 552,
                    "line_start": 552,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: SimdRealField> Neg for &'a Quaternion<T>"
                      }
                    ]
                  },
                  {
                    "byte_end": 14994,
                    "byte_start": 14992,
                    "column_end": 39,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\geometry\\quaternion_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 552,
                    "line_start": 552,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 37,
                        "text": "impl<'a, T: SimdRealField> Neg for &'a Quaternion<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\geometry\\dual_quaternion_ops.rs:101:6\n    |\n101 | impl<'a, T: SimdRealField> Neg for &'a DualQuaternion<T>\n    |      ^^                             ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n101 - impl<'a, T: SimdRealField> Neg for &'a DualQuaternion<T>\n101 + impl<T: SimdRealField> Neg for &DualQuaternion<T>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2752,
                        "byte_start": 2748,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\geometry\\dual_quaternion_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: SimdRealField> Neg for &'a DualQuaternion<T>"
                          }
                        ]
                      },
                      {
                        "byte_end": 2782,
                        "byte_start": 2779,
                        "column_end": 40,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\geometry\\dual_quaternion_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 37,
                            "text": "impl<'a, T: SimdRealField> Neg for &'a DualQuaternion<T>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 2750,
                    "byte_start": 2748,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\geometry\\dual_quaternion_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 101,
                    "line_start": 101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: SimdRealField> Neg for &'a DualQuaternion<T>"
                      }
                    ]
                  },
                  {
                    "byte_end": 2781,
                    "byte_start": 2779,
                    "column_end": 39,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\geometry\\dual_quaternion_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 101,
                    "line_start": 101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 37,
                        "text": "impl<'a, T: SimdRealField> Neg for &'a DualQuaternion<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\geometry\\dual_quaternion_ops.rs:125:6\n    |\n125 | impl<'a, T: SimdRealField> Neg for &'a UnitDualQuaternion<T>\n    |      ^^                             ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n125 - impl<'a, T: SimdRealField> Neg for &'a UnitDualQuaternion<T>\n125 + impl<T: SimdRealField> Neg for &UnitDualQuaternion<T>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3291,
                        "byte_start": 3287,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\geometry\\dual_quaternion_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 125,
                        "line_start": 125,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: SimdRealField> Neg for &'a UnitDualQuaternion<T>"
                          }
                        ]
                      },
                      {
                        "byte_end": 3321,
                        "byte_start": 3318,
                        "column_end": 40,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\geometry\\dual_quaternion_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 125,
                        "line_start": 125,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 37,
                            "text": "impl<'a, T: SimdRealField> Neg for &'a UnitDualQuaternion<T>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 3289,
                    "byte_start": 3287,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\geometry\\dual_quaternion_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: SimdRealField> Neg for &'a UnitDualQuaternion<T>"
                      }
                    ]
                  },
                  {
                    "byte_end": 3320,
                    "byte_start": 3318,
                    "column_end": 39,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\geometry\\dual_quaternion_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 37,
                        "text": "impl<'a, T: SimdRealField> Neg for &'a UnitDualQuaternion<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\geometry\\unit_complex_construction.rs:232:9\n    |\n232 |     ///           to the actual solution is provided. Can be set to `UnitQuaternion::identity()` if no other\n    |         ^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7805,
                        "byte_start": 7795,
                        "column_end": 19,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_construction.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 232,
                        "line_start": 232,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 9,
                            "text": "    ///           to the actual solution is provided. Can be set to `UnitQuaternion::identity()` if no other"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 7805,
                    "byte_start": 7795,
                    "column_end": 19,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 232,
                    "line_start": 232,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 9,
                        "text": "    ///           to the actual solution is provided. Can be set to `UnitQuaternion::identity()` if no other"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\geometry\\unit_complex_construction.rs:233:9\n    |\n233 |     ///           guesses come to mind.\n    |         ^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7915,
                        "byte_start": 7905,
                        "column_end": 19,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_construction.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 233,
                        "line_start": 233,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 9,
                            "text": "    ///           guesses come to mind."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 7915,
                    "byte_start": 7905,
                    "column_end": 19,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_construction.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 233,
                    "line_start": 233,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 9,
                        "text": "    ///           guesses come to mind."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\geometry\\unit_complex_ops.rs:55:6\n   |\n55 | impl<'a, T: SimdRealField> Mul<UnitComplex<T>> for &'a UnitComplex<T>\n   |      ^^                                             ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n55 - impl<'a, T: SimdRealField> Mul<UnitComplex<T>> for &'a UnitComplex<T>\n55 + impl<T: SimdRealField> Mul<UnitComplex<T>> for &UnitComplex<T>\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1385,
                        "byte_start": 1381,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: SimdRealField> Mul<UnitComplex<T>> for &'a UnitComplex<T>"
                          }
                        ]
                      },
                      {
                        "byte_end": 1431,
                        "byte_start": 1428,
                        "column_end": 56,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 53,
                            "text": "impl<'a, T: SimdRealField> Mul<UnitComplex<T>> for &'a UnitComplex<T>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 1383,
                    "byte_start": 1381,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: SimdRealField> Mul<UnitComplex<T>> for &'a UnitComplex<T>"
                      }
                    ]
                  },
                  {
                    "byte_end": 1430,
                    "byte_start": 1428,
                    "column_end": 55,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 53,
                        "text": "impl<'a, T: SimdRealField> Mul<UnitComplex<T>> for &'a UnitComplex<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\geometry\\unit_complex_ops.rs:79:6\n   |\n79 | impl<'a, 'b, T: SimdRealField> Mul<&'b UnitComplex<T>> for &'a UnitComplex<T>\n   |      ^^                                                     ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n79 - impl<'a, 'b, T: SimdRealField> Mul<&'b UnitComplex<T>> for &'a UnitComplex<T>\n79 + impl<'b, T: SimdRealField> Mul<&'b UnitComplex<T>> for &UnitComplex<T>\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1974,
                        "byte_start": 1970,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 79,
                        "line_start": 79,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, 'b, T: SimdRealField> Mul<&'b UnitComplex<T>> for &'a UnitComplex<T>"
                          }
                        ]
                      },
                      {
                        "byte_end": 2028,
                        "byte_start": 2025,
                        "column_end": 64,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 79,
                        "line_start": 79,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 61,
                            "text": "impl<'a, 'b, T: SimdRealField> Mul<&'b UnitComplex<T>> for &'a UnitComplex<T>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 1972,
                    "byte_start": 1970,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, 'b, T: SimdRealField> Mul<&'b UnitComplex<T>> for &'a UnitComplex<T>"
                      }
                    ]
                  },
                  {
                    "byte_end": 2027,
                    "byte_start": 2025,
                    "column_end": 63,
                    "column_start": 61,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 61,
                        "text": "impl<'a, 'b, T: SimdRealField> Mul<&'b UnitComplex<T>> for &'a UnitComplex<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\geometry\\unit_complex_ops.rs:105:6\n    |\n105 | impl<'a, T: SimdRealField> Div<UnitComplex<T>> for &'a UnitComplex<T>\n    |      ^^                                             ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n105 - impl<'a, T: SimdRealField> Div<UnitComplex<T>> for &'a UnitComplex<T>\n105 + impl<T: SimdRealField> Div<UnitComplex<T>> for &UnitComplex<T>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2640,
                        "byte_start": 2636,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: SimdRealField> Div<UnitComplex<T>> for &'a UnitComplex<T>"
                          }
                        ]
                      },
                      {
                        "byte_end": 2686,
                        "byte_start": 2683,
                        "column_end": 56,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 53,
                            "text": "impl<'a, T: SimdRealField> Div<UnitComplex<T>> for &'a UnitComplex<T>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 2638,
                    "byte_start": 2636,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 105,
                    "line_start": 105,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: SimdRealField> Div<UnitComplex<T>> for &'a UnitComplex<T>"
                      }
                    ]
                  },
                  {
                    "byte_end": 2685,
                    "byte_start": 2683,
                    "column_end": 55,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 105,
                    "line_start": 105,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 53,
                        "text": "impl<'a, T: SimdRealField> Div<UnitComplex<T>> for &'a UnitComplex<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\geometry\\unit_complex_ops.rs:131:6\n    |\n131 | impl<'a, 'b, T: SimdRealField> Div<&'b UnitComplex<T>> for &'a UnitComplex<T>\n    |      ^^                                                     ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n131 - impl<'a, 'b, T: SimdRealField> Div<&'b UnitComplex<T>> for &'a UnitComplex<T>\n131 + impl<'b, T: SimdRealField> Div<&'b UnitComplex<T>> for &UnitComplex<T>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3365,
                        "byte_start": 3361,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, 'b, T: SimdRealField> Div<&'b UnitComplex<T>> for &'a UnitComplex<T>"
                          }
                        ]
                      },
                      {
                        "byte_end": 3419,
                        "byte_start": 3416,
                        "column_end": 64,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\geometry\\unit_complex_ops.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 61,
                            "text": "impl<'a, 'b, T: SimdRealField> Div<&'b UnitComplex<T>> for &'a UnitComplex<T>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 3363,
                    "byte_start": 3361,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 131,
                    "line_start": 131,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, 'b, T: SimdRealField> Div<&'b UnitComplex<T>> for &'a UnitComplex<T>"
                      }
                    ]
                  },
                  {
                    "byte_end": 3418,
                    "byte_start": 3416,
                    "column_end": 63,
                    "column_start": 61,
                    "expansion": null,
                    "file_name": "src\\geometry\\unit_complex_ops.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 131,
                    "line_start": 131,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 61,
                        "text": "impl<'a, 'b, T: SimdRealField> Div<&'b UnitComplex<T>> for &'a UnitComplex<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this item has comments with 4 forward slashes (`////`). These look like doc comments, but they aren't\n  --> src\\linalg\\mod.rs:33:1\n   |\n33 | / //// TODO: Not complete enough for publishing.\n34 | | //// This handles only cases where each eigenvalue has multiplicity one.\n...  |\n37 | | pub use self::bidiagonal::*;\n   | |_^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#four_forward_slashes\n   = note: `#[warn(clippy::four_forward_slashes)]` on by default\nhelp: turn these into doc comments by removing one `/`\n   |\n33 + /// TODO: Not complete enough for publishing.\n34 ~ /// This handles only cases where each eigenvalue has multiplicity one.\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#four_forward_slashes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::four_forward_slashes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "turn these into doc comments by removing one `/`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 808,
                        "byte_start": 734,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\linalg\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 35,
                        "line_start": 34,
                        "suggested_replacement": "/// This handles only cases where each eigenvalue has multiplicity one.\n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 1,
                            "text": "//// This handles only cases where each eigenvalue has multiplicity one."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "// mod eigen;"
                          }
                        ]
                      },
                      {
                        "byte_end": 734,
                        "byte_start": 686,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\linalg\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 34,
                        "line_start": 33,
                        "suggested_replacement": "/// TODO: Not complete enough for publishing.\n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 1,
                            "text": "//// TODO: Not complete enough for publishing."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "//// This handles only cases where each eigenvalue has multiplicity one."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::four_forward_slashes",
                  "explanation": null
                },
                "level": "warning",
                "message": "this item has comments with 4 forward slashes (`////`). These look like doc comments, but they aren't",
                "spans": [
                  {
                    "byte_end": 825,
                    "byte_start": 686,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\linalg\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 1,
                        "text": "//// TODO: Not complete enough for publishing."
                      },
                      {
                        "highlight_end": 73,
                        "highlight_start": 1,
                        "text": "//// This handles only cases where each eigenvalue has multiplicity one."
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "// mod eigen;"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": "pub use self::bidiagonal::*;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8l4xxbu3/nalgebra-0.33.2#nalgebra@0.33.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nalgebra",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "macros",
                "matrixmultiply",
                "nalgebra-macros",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8l4xxbu3\\nalgebra-0.33.2\\target\\debug\\deps\\libnalgebra-82bbf509d3e77f46.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 174
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.155",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0375",
                    "package": "atty",
                    "title": "`atty` is unmaintained",
                    "description": "The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2024-09-25",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/57",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "paste",
                    "version": "1.0.15",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0436",
                    "package": "paste",
                    "title": "paste - no longer maintained",
                    "description": "The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \nthat this project is not longer maintained as well as archived the repository",
                    "date": "2024-10-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/dtolnay/paste",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.155",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0145",
                    "package": "atty",
                    "title": "Potential unaligned read",
                    "description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2021-07-04",
                    "aliases": [
                      "GHSA-g98v-hv3f-hcfr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "unaligned-read"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [
                      "https://github.com/softprops/atty/pull/51",
                      "https://github.com/softprops/atty/issues/57"
                    ],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/50",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "bytemuck",
                    "version": "1.16.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "b236fc92302c97ed75b38da1f4917b5cdda4984745740f153a5d3059e48d725e",
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "bytes",
                    "version": "1.6.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9",
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "nalgebra",
          "version": "0.33.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/nalgebra/latest/nalgebra/all.html \"show sidebar\")\n# Crate nalgebraCopy item path\n[Settings](https://docs.rs/nalgebra/latest/settings.html)\n[Help](https://docs.rs/nalgebra/latest/help.html)\nSummary[Source](https://docs.rs/nalgebra/latest/src/nalgebra/lib.rs.html#1-549)\nExpand description\n## [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#nalgebra)nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n### [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#using-nalgebra)Using **nalgebra**\nYou will need the last stable build of the [rust compiler](https://www.rust-lang.org) and the official package manager: [cargo](https://github.com/rust-lang/cargo).\nSimply add the following to your `Cargo.toml` file:\n[\u24d8](https://docs.rs/nalgebra/latest/nalgebra/ \"This example is not tested\")```\n[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module `nalgebra::`.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the `na::` prefix:\n```\n#[macro_use]\nextern crate approx; // For the macro assert_relative_eq!\nextern crate nalgebra as na;\nuse na::{Vector3, Rotation3};\nfn main() {\n  let axis = Vector3::x_axis();\n  let angle = 1.57;\n  let b   = Rotation3::from_axis_angle(&axis, angle);\n  assert_relative_eq!(b.axis().unwrap(), axis);\n  assert_relative_eq!(b.angle(), angle);\n}\n```\n\n### [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#features)Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type [`Matrix`](https://docs.rs/nalgebra/latest/nalgebra/base/struct.Matrix.html \"struct nalgebra::base::Matrix\") for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: [`Vector1`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector1.html \"type nalgebra::base::Vector1\") to [`Vector6`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector6.html \"type nalgebra::base::Vector6\") and [`Matrix1x1`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix1.html \"type nalgebra::base::Matrix1\") to [`Matrix6x6`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix6.html \"type nalgebra::base::Matrix6\"), including rectangular matrices like [`Matrix2x5`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix2x5.html \"type nalgebra::base::Matrix2x5\").\n  * Points sizes known at compile time, and convenience aliases: [`Point1`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point1.html \"type nalgebra::geometry::Point1\") to [`Point6`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point6.html \"type nalgebra::geometry::Point6\").\n  * Translation (seen as a transformation that composes by multiplication): [`Translation2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation2.html \"type nalgebra::geometry::Translation2\"), [`Translation3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation3.html \"type nalgebra::geometry::Translation3\").\n  * Rotation matrices: [`Rotation2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation2.html \"type nalgebra::geometry::Rotation2\"), [`Rotation3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation3.html \"type nalgebra::geometry::Rotation3\").\n  * Quaternions: [`Quaternion`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Quaternion.html \"struct nalgebra::geometry::Quaternion\"), [`UnitQuaternion`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitQuaternion.html \"type nalgebra::geometry::UnitQuaternion\") (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: [`UnitComplex`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitComplex.html \"type nalgebra::geometry::UnitComplex\").\n  * Algebraic entities with a norm equal to one: [`Unit<T>`](https://docs.rs/nalgebra/latest/nalgebra/base/struct.Unit.html \"struct nalgebra::base::Unit\"), e.g., `Unit<Vector3<f32>>`.\n  * Isometries (translation \u2a2f rotation): [`Isometry2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry2.html \"type nalgebra::geometry::Isometry2\"), [`Isometry3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry3.html \"type nalgebra::geometry::Isometry3\")\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): [`Similarity2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity2.html \"type nalgebra::geometry::Similarity2\"), [`Similarity3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity3.html \"type nalgebra::geometry::Similarity3\").\n  * Affine transformations stored as a homogeneous matrix: [`Affine2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine2.html \"type nalgebra::geometry::Affine2\"), [`Affine3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine3.html \"type nalgebra::geometry::Affine3\").\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: [`Projective2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective2.html \"type nalgebra::geometry::Projective2\"), [`Projective3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective3.html \"type nalgebra::geometry::Projective3\").\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: [`Transform2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform2.html \"type nalgebra::geometry::Transform2\"), [`Transform3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform3.html \"type nalgebra::geometry::Transform3\").\n  * 3D projections for computer graphics: [`Perspective3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Perspective3.html \"struct nalgebra::geometry::Perspective3\"), [`Orthographic3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Orthographic3.html \"struct nalgebra::geometry::Orthographic3\").\n  * Matrix factorizations: [`Cholesky`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Cholesky.html \"struct nalgebra::linalg::Cholesky\"), [`QR`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.QR.html \"struct nalgebra::linalg::QR\"), [`LU`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.LU.html \"struct nalgebra::linalg::LU\"), [`FullPivLU`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.FullPivLU.html \"struct nalgebra::linalg::FullPivLU\"), [`SVD`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SVD.html \"struct nalgebra::linalg::SVD\"), [`Schur`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Schur.html \"struct nalgebra::linalg::Schur\"), [`Hessenberg`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Hessenberg.html \"struct nalgebra::linalg::Hessenberg\"), [`SymmetricEigen`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SymmetricEigen.html \"struct nalgebra::linalg::SymmetricEigen\").\n  * Insertion and removal of rows of columns of a matrix.\n\n\n## Re-exports[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#reexports)\n\n`pub use base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\") as core;`\n\n\n`pub use crate::base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")::*;`\n\n\n`pub use crate::geometry[](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")::*;`\n\n\n`pub use crate::linalg[](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")::*;`\n\n\n`pub use crate::sparse[](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")::*;`\n\n## Modules[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#modules)\n\n[base](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")\n    [Reexported at the root of this crate.] Data structures for vector and matrix computations.\n\n[debug](https://docs.rs/nalgebra/latest/nalgebra/debug/index.html \"mod nalgebra::debug\")\n    Various tools useful for testing/debugging/benchmarking.\n\n[geometry](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")\n    [Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)\n\n[io](https://docs.rs/nalgebra/latest/nalgebra/io/index.html \"mod nalgebra::io\")\n    Parsers for various matrix formats.\n\n[linalg](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")\n    [Reexported at the root of this crate.] Factorization of real matrices.\n\n[proptest](https://docs.rs/nalgebra/latest/nalgebra/proptest/index.html \"mod nalgebra::proptest\")\n    `proptest`-related features for `nalgebra` data structures.\n\n[sparse](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")\n    Sparse matrices.\n## Macros[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#macros)\n\n[dmatrix](https://docs.rs/nalgebra/latest/nalgebra/macro.dmatrix.html \"macro nalgebra::dmatrix\")\n    Construct a dynamic matrix directly from data.\n\n[dvector](https://docs.rs/nalgebra/latest/nalgebra/macro.dvector.html \"macro nalgebra::dvector\")\n    Construct a dynamic column vector directly from data.\n\n[matrix](https://docs.rs/nalgebra/latest/nalgebra/macro.matrix.html \"macro nalgebra::matrix\")\n    Construct a fixed-size matrix directly from data.\n\n[point](https://docs.rs/nalgebra/latest/nalgebra/macro.point.html \"macro nalgebra::point\")\n    Construct a fixed-size point directly from data.\n\n[stack](https://docs.rs/nalgebra/latest/nalgebra/macro.stack.html \"macro nalgebra::stack\")\n    Construct a new matrix by stacking matrices in a block matrix.\n\n[vector](https://docs.rs/nalgebra/latest/nalgebra/macro.vector.html \"macro nalgebra::vector\")\n    Construct a fixed-size column vector directly from data.\n## Structs[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#structs)\n\n[Complex](https://docs.rs/nalgebra/latest/nalgebra/struct.Complex.html \"struct nalgebra::Complex\")\n    A complex number in Cartesian form.\n## Traits[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#traits)\n\n[ClosedAddAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedAddAssign.html \"trait nalgebra::ClosedAddAssign\")\n    Trait **alias** for `Add` and `AddAssign` with result of type `Self`.\n\n[ClosedDivAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedDivAssign.html \"trait nalgebra::ClosedDivAssign\")\n    Trait **alias** for `Div` and `DivAssign` with result of type `Self`.\n\n[ClosedMulAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedMulAssign.html \"trait nalgebra::ClosedMulAssign\")\n    Trait **alias** for `Mul` and `MulAssign` with result of type `Self`.\n\n[ClosedSubAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedSubAssign.html \"trait nalgebra::ClosedSubAssign\")\n    Trait **alias** for `Sub` and `SubAssign` with result of type `Self`.\n\n[ComplexField](https://docs.rs/nalgebra/latest/nalgebra/trait.ComplexField.html \"trait nalgebra::ComplexField\")\n    Trait shared by all complex fields and its subfields (like real numbers).\n\n[Field](https://docs.rs/nalgebra/latest/nalgebra/trait.Field.html \"trait nalgebra::Field\")\n    Trait implemented by fields, i.e., complex numbers and floats.\n\n[RealField](https://docs.rs/nalgebra/latest/nalgebra/trait.RealField.html \"trait nalgebra::RealField\")\n    Trait shared by all reals.\n\n[SimdBool](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdBool.html \"trait nalgebra::SimdBool\")\n    Lane-wise generalization of `bool` for SIMD booleans.\n\n[SimdComplexField](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdComplexField.html \"trait nalgebra::SimdComplexField\")\n    Lane-wise generalisation of `ComplexField` for SIMD complex fields.\n\n[SimdPartialOrd](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdPartialOrd.html \"trait nalgebra::SimdPartialOrd\")\n    Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n\n[SimdRealField](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdRealField.html \"trait nalgebra::SimdRealField\")\n    Lanewise generalization of `RealField` for SIMD reals.\n\n[SimdValue](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdValue.html \"trait nalgebra::SimdValue\")\n    Base trait for every SIMD types.\n## Functions[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#functions)\n\n[abs](https://docs.rs/nalgebra/latest/nalgebra/fn.abs.html \"fn nalgebra::abs\")Deprecated\n    The absolute value of `a`.\n\n[center](https://docs.rs/nalgebra/latest/nalgebra/fn.center.html \"fn nalgebra::center\")\n    The center of two points.\n\n[clamp](https://docs.rs/nalgebra/latest/nalgebra/fn.clamp.html \"fn nalgebra::clamp\")\n    Returns a reference to the input value clamped to the interval `[min, max]`.\n\n[convert](https://docs.rs/nalgebra/latest/nalgebra/fn.convert.html \"fn nalgebra::convert\")\n    Converts an object from one type to an equivalent or more general one.\n\n[convert_ref](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref.html \"fn nalgebra::convert_ref\")\n    Converts an object from one type to an equivalent or more general one.\n\n[convert_ref_unchecked](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref_unchecked.html \"fn nalgebra::convert_ref_unchecked\")\n    Use with care! Same as [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") but without any property checks.\n\n[convert_unchecked](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_unchecked.html \"fn nalgebra::convert_unchecked\")\n    Use with care! Same as [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") but without any property checks.\n\n[distance](https://docs.rs/nalgebra/latest/nalgebra/fn.distance.html \"fn nalgebra::distance\")\n    The distance between two points.\n\n[distance_squared](https://docs.rs/nalgebra/latest/nalgebra/fn.distance_squared.html \"fn nalgebra::distance_squared\")\n    The squared distance between two points.\n\n[inf](https://docs.rs/nalgebra/latest/nalgebra/fn.inf.html \"fn nalgebra::inf\")Deprecated\n    Returns the infimum of `a` and `b`.\n\n[inf_sup](https://docs.rs/nalgebra/latest/nalgebra/fn.inf_sup.html \"fn nalgebra::inf_sup\")Deprecated\n    Returns simultaneously the infimum and supremum of `a` and `b`.\n\n[is_convertible](https://docs.rs/nalgebra/latest/nalgebra/fn.is_convertible.html \"fn nalgebra::is_convertible\")\n    Indicates if [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") will succeed without actually performing the conversion.\n\n[max](https://docs.rs/nalgebra/latest/nalgebra/fn.max.html \"fn nalgebra::max\")\n    Same as `cmp::max`.\n\n[min](https://docs.rs/nalgebra/latest/nalgebra/fn.min.html \"fn nalgebra::min\")\n    Same as `cmp::min`.\n\n[one](https://docs.rs/nalgebra/latest/nalgebra/fn.one.html \"fn nalgebra::one\")\n    Gets the multiplicative identity element.\n\n[partial_clamp](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_clamp.html \"fn nalgebra::partial_clamp\")\n    Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.\n\n[partial_cmp](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_cmp.html \"fn nalgebra::partial_cmp\")\n    Compare `a` and `b` using a partial ordering relation.\n\n[partial_ge](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_ge.html \"fn nalgebra::partial_ge\")\n    Returns `true` iff `a` and `b` are comparable and `a >= b`.\n\n[partial_gt](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_gt.html \"fn nalgebra::partial_gt\")\n    Returns `true` iff `a` and `b` are comparable and `a > b`.\n\n[partial_le](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_le.html \"fn nalgebra::partial_le\")\n    Returns `true` iff `a` and `b` are comparable and `a <= b`.\n\n[partial_lt](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_lt.html \"fn nalgebra::partial_lt\")\n    Returns `true` iff `a` and `b` are comparable and `a < b`.\n\n[partial_max](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_max.html \"fn nalgebra::partial_max\")\n    Return the maximum of `a` and `b` if they are comparable.\n\n[partial_min](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_min.html \"fn nalgebra::partial_min\")\n    Return the minimum of `a` and `b` if they are comparable.\n\n[partial_sort2](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_sort2.html \"fn nalgebra::partial_sort2\")\n    Sorts two values in increasing order using a partial ordering.\n\n[sup](https://docs.rs/nalgebra/latest/nalgebra/fn.sup.html \"fn nalgebra::sup\")Deprecated\n    Returns the supremum of `a` and `b`.\n\n[try_convert](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\")\n    Attempts to convert an object to a more specific one.\n\n[try_convert_ref](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert_ref.html \"fn nalgebra::try_convert_ref\")\n    Attempts to convert an object to a more specific one.\n\n[wrap](https://docs.rs/nalgebra/latest/nalgebra/fn.wrap.html \"fn nalgebra::wrap\")\n    Wraps `val` into the range `[min, max]` using modular arithmetics.\n\n[zero](https://docs.rs/nalgebra/latest/nalgebra/fn.zero.html \"fn nalgebra::zero\")\n    Gets the additive identity element.\n",
            "markdown_with_citations": "[](https://docs.rs/nalgebra/latest/nalgebra/all.html \"show sidebar\")\n# Crate nalgebraCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n### \u00a7\u27e85\u27e9Using **nalgebra**\nYou will need the last stable build of the rust compiler\u27e86\u27e9 and the official package manager: cargo\u27e87\u27e9.\nSimply add the following to your `Cargo.toml` file:\n\u24d8\u27e88\u27e9```\n[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module `nalgebra::`.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the `na::` prefix:\n```\n#[macro_use]\nextern crate approx; // For the macro assert_relative_eq!\nextern crate nalgebra as na;\nuse na::{Vector3, Rotation3};\nfn main() {\n  let axis = Vector3::x_axis();\n  let angle = 1.57;\n  let b   = Rotation3::from_axis_angle(&axis, angle);\n  assert_relative_eq!(b.axis().unwrap(), axis);\n  assert_relative_eq!(b.angle(), angle);\n}\n```\n\n### \u00a7\u27e89\u27e9Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type `Matrix`\u27e810\u27e9 for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: `Vector1`\u27e811\u27e9 to `Vector6`\u27e812\u27e9 and `Matrix1x1`\u27e813\u27e9 to `Matrix6x6`\u27e814\u27e9, including rectangular matrices like `Matrix2x5`\u27e815\u27e9.\n  * Points sizes known at compile time, and convenience aliases: `Point1`\u27e816\u27e9 to `Point6`\u27e817\u27e9.\n  * Translation (seen as a transformation that composes by multiplication): `Translation2`\u27e818\u27e9, `Translation3`\u27e819\u27e9.\n  * Rotation matrices: `Rotation2`\u27e820\u27e9, `Rotation3`\u27e821\u27e9.\n  * Quaternions: `Quaternion`\u27e822\u27e9, `UnitQuaternion`\u27e823\u27e9 (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: `UnitComplex`\u27e824\u27e9.\n  * Algebraic entities with a norm equal to one: `Unit<T>`\u27e825\u27e9, e.g., `Unit<Vector3<f32>>`.\n  * Isometries (translation \u2a2f rotation): `Isometry2`\u27e826\u27e9, `Isometry3`\u27e827\u27e9\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): `Similarity2`\u27e828\u27e9, `Similarity3`\u27e829\u27e9.\n  * Affine transformations stored as a homogeneous matrix: `Affine2`\u27e830\u27e9, `Affine3`\u27e831\u27e9.\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: `Projective2`\u27e832\u27e9, `Projective3`\u27e833\u27e9.\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: `Transform2`\u27e834\u27e9, `Transform3`\u27e835\u27e9.\n  * 3D projections for computer graphics: `Perspective3`\u27e836\u27e9, `Orthographic3`\u27e837\u27e9.\n  * Matrix factorizations: `Cholesky`\u27e838\u27e9, `QR`\u27e839\u27e9, `LU`\u27e840\u27e9, `FullPivLU`\u27e841\u27e9, `SVD`\u27e842\u27e9, `Schur`\u27e843\u27e9, `Hessenberg`\u27e844\u27e9, `SymmetricEigen`\u27e845\u27e9.\n  * Insertion and removal of rows of columns of a matrix.\n\n\n## Re-exports\u00a7\u27e846\u27e9\n\n`pub use base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\") as core;`\n\n\n`pub use crate::base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")::*;`\n\n\n`pub use crate::geometry[](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")::*;`\n\n\n`pub use crate::linalg[](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")::*;`\n\n\n`pub use crate::sparse[](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")::*;`\n\n## Modules\u00a7\u27e847\u27e9\n\nbase\u27e848\u27e9\n    [Reexported at the root of this crate.] Data structures for vector and matrix computations.\n\ndebug\u27e849\u27e9\n    Various tools useful for testing/debugging/benchmarking.\n\ngeometry\u27e850\u27e9\n    [Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)\n\nio\u27e851\u27e9\n    Parsers for various matrix formats.\n\nlinalg\u27e852\u27e9\n    [Reexported at the root of this crate.] Factorization of real matrices.\n\nproptest\u27e853\u27e9\n    `proptest`-related features for `nalgebra` data structures.\n\nsparse\u27e854\u27e9\n    Sparse matrices.\n## Macros\u00a7\u27e855\u27e9\n\ndmatrix\u27e856\u27e9\n    Construct a dynamic matrix directly from data.\n\ndvector\u27e857\u27e9\n    Construct a dynamic column vector directly from data.\n\nmatrix\u27e858\u27e9\n    Construct a fixed-size matrix directly from data.\n\npoint\u27e859\u27e9\n    Construct a fixed-size point directly from data.\n\nstack\u27e860\u27e9\n    Construct a new matrix by stacking matrices in a block matrix.\n\nvector\u27e861\u27e9\n    Construct a fixed-size column vector directly from data.\n## Structs\u00a7\u27e862\u27e9\n\nComplex\u27e863\u27e9\n    A complex number in Cartesian form.\n## Traits\u00a7\u27e864\u27e9\n\nClosedAddAssign\u27e865\u27e9\n    Trait **alias** for `Add` and `AddAssign` with result of type `Self`.\n\nClosedDivAssign\u27e866\u27e9\n    Trait **alias** for `Div` and `DivAssign` with result of type `Self`.\n\nClosedMulAssign\u27e867\u27e9\n    Trait **alias** for `Mul` and `MulAssign` with result of type `Self`.\n\nClosedSubAssign\u27e868\u27e9\n    Trait **alias** for `Sub` and `SubAssign` with result of type `Self`.\n\nComplexField\u27e869\u27e9\n    Trait shared by all complex fields and its subfields (like real numbers).\n\nField\u27e870\u27e9\n    Trait implemented by fields, i.e., complex numbers and floats.\n\nRealField\u27e871\u27e9\n    Trait shared by all reals.\n\nSimdBool\u27e872\u27e9\n    Lane-wise generalization of `bool` for SIMD booleans.\n\nSimdComplexField\u27e873\u27e9\n    Lane-wise generalisation of `ComplexField` for SIMD complex fields.\n\nSimdPartialOrd\u27e874\u27e9\n    Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n\nSimdRealField\u27e875\u27e9\n    Lanewise generalization of `RealField` for SIMD reals.\n\nSimdValue\u27e876\u27e9\n    Base trait for every SIMD types.\n## Functions\u00a7\u27e877\u27e9\n\nabs\u27e878\u27e9Deprecated\n    The absolute value of `a`.\n\ncenter\u27e879\u27e9\n    The center of two points.\n\nclamp\u27e880\u27e9\n    Returns a reference to the input value clamped to the interval `[min, max]`.\n\nconvert\u27e881\u27e9\n    Converts an object from one type to an equivalent or more general one.\n\nconvert_ref\u27e882\u27e9\n    Converts an object from one type to an equivalent or more general one.\n\nconvert_ref_unchecked\u27e883\u27e9\n    Use with care! Same as `try_convert()`\u27e884\u27e9 but without any property checks.\n\nconvert_unchecked\u27e885\u27e9\n    Use with care! Same as `try_convert()`\u27e884\u27e9 but without any property checks.\n\ndistance\u27e886\u27e9\n    The distance between two points.\n\ndistance_squared\u27e887\u27e9\n    The squared distance between two points.\n\ninf\u27e888\u27e9Deprecated\n    Returns the infimum of `a` and `b`.\n\ninf_sup\u27e889\u27e9Deprecated\n    Returns simultaneously the infimum and supremum of `a` and `b`.\n\nis_convertible\u27e890\u27e9\n    Indicates if `try_convert()`\u27e884\u27e9 will succeed without actually performing the conversion.\n\nmax\u27e891\u27e9\n    Same as `cmp::max`.\n\nmin\u27e892\u27e9\n    Same as `cmp::min`.\n\none\u27e893\u27e9\n    Gets the multiplicative identity element.\n\npartial_clamp\u27e894\u27e9\n    Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.\n\npartial_cmp\u27e895\u27e9\n    Compare `a` and `b` using a partial ordering relation.\n\npartial_ge\u27e896\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a >= b`.\n\npartial_gt\u27e897\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a > b`.\n\npartial_le\u27e898\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a <= b`.\n\npartial_lt\u27e899\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a < b`.\n\npartial_max\u27e8100\u27e9\n    Return the maximum of `a` and `b` if they are comparable.\n\npartial_min\u27e8101\u27e9\n    Return the minimum of `a` and `b` if they are comparable.\n\npartial_sort2\u27e8102\u27e9\n    Sorts two values in increasing order using a partial ordering.\n\nsup\u27e8103\u27e9Deprecated\n    Returns the supremum of `a` and `b`.\n\ntry_convert\u27e884\u27e9\n    Attempts to convert an object to a more specific one.\n\ntry_convert_ref\u27e8104\u27e9\n    Attempts to convert an object to a more specific one.\n\nwrap\u27e8105\u27e9\n    Wraps `val` into the range `[min, max]` using modular arithmetics.\n\nzero\u27e8106\u27e9\n    Gets the additive identity element.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/nalgebra/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/nalgebra/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/nalgebra/latest/src/nalgebra/lib.rs.html#1-549: Source\n\u27e84\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#nalgebra: \u00a7\n\u27e85\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#using-nalgebra: \u00a7\n\u27e86\u27e9 https://www.rust-lang.org: rust compiler\n\u27e87\u27e9 https://github.com/rust-lang/cargo: cargo\n\u27e88\u27e9 https://docs.rs/nalgebra/latest/nalgebra/: This example is not tested - \u24d8\n\u27e89\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#features: \u00a7\n\u27e810\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/struct.Matrix.html: struct nalgebra::base::Matrix - `Matrix`\n\u27e811\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector1.html: type nalgebra::base::Vector1 - `Vector1`\n\u27e812\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector6.html: type nalgebra::base::Vector6 - `Vector6`\n\u27e813\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix1.html: type nalgebra::base::Matrix1 - `Matrix1x1`\n\u27e814\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix6.html: type nalgebra::base::Matrix6 - `Matrix6x6`\n\u27e815\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix2x5.html: type nalgebra::base::Matrix2x5 - `Matrix2x5`\n\u27e816\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point1.html: type nalgebra::geometry::Point1 - `Point1`\n\u27e817\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point6.html: type nalgebra::geometry::Point6 - `Point6`\n\u27e818\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation2.html: type nalgebra::geometry::Translation2 - `Translation2`\n\u27e819\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation3.html: type nalgebra::geometry::Translation3 - `Translation3`\n\u27e820\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation2.html: type nalgebra::geometry::Rotation2 - `Rotation2`\n\u27e821\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation3.html: type nalgebra::geometry::Rotation3 - `Rotation3`\n\u27e822\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Quaternion.html: struct nalgebra::geometry::Quaternion - `Quaternion`\n\u27e823\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitQuaternion.html: type nalgebra::geometry::UnitQuaternion - `UnitQuaternion`\n\u27e824\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitComplex.html: type nalgebra::geometry::UnitComplex - `UnitComplex`\n\u27e825\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/struct.Unit.html: struct nalgebra::base::Unit - `Unit<T>`\n\u27e826\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry2.html: type nalgebra::geometry::Isometry2 - `Isometry2`\n\u27e827\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry3.html: type nalgebra::geometry::Isometry3 - `Isometry3`\n\u27e828\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity2.html: type nalgebra::geometry::Similarity2 - `Similarity2`\n\u27e829\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity3.html: type nalgebra::geometry::Similarity3 - `Similarity3`\n\u27e830\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine2.html: type nalgebra::geometry::Affine2 - `Affine2`\n\u27e831\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine3.html: type nalgebra::geometry::Affine3 - `Affine3`\n\u27e832\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective2.html: type nalgebra::geometry::Projective2 - `Projective2`\n\u27e833\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective3.html: type nalgebra::geometry::Projective3 - `Projective3`\n\u27e834\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform2.html: type nalgebra::geometry::Transform2 - `Transform2`\n\u27e835\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform3.html: type nalgebra::geometry::Transform3 - `Transform3`\n\u27e836\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Perspective3.html: struct nalgebra::geometry::Perspective3 - `Perspective3`\n\u27e837\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Orthographic3.html: struct nalgebra::geometry::Orthographic3 - `Orthographic3`\n\u27e838\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Cholesky.html: struct nalgebra::linalg::Cholesky - `Cholesky`\n\u27e839\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.QR.html: struct nalgebra::linalg::QR - `QR`\n\u27e840\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.LU.html: struct nalgebra::linalg::LU - `LU`\n\u27e841\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.FullPivLU.html: struct nalgebra::linalg::FullPivLU - `FullPivLU`\n\u27e842\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SVD.html: struct nalgebra::linalg::SVD - `SVD`\n\u27e843\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Schur.html: struct nalgebra::linalg::Schur - `Schur`\n\u27e844\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Hessenberg.html: struct nalgebra::linalg::Hessenberg - `Hessenberg`\n\u27e845\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SymmetricEigen.html: struct nalgebra::linalg::SymmetricEigen - `SymmetricEigen`\n\u27e846\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#reexports: \u00a7\n\u27e847\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#modules: \u00a7\n\u27e848\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/index.html: mod nalgebra::base - base\n\u27e849\u27e9 https://docs.rs/nalgebra/latest/nalgebra/debug/index.html: mod nalgebra::debug - debug\n\u27e850\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html: mod nalgebra::geometry - geometry\n\u27e851\u27e9 https://docs.rs/nalgebra/latest/nalgebra/io/index.html: mod nalgebra::io - io\n\u27e852\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html: mod nalgebra::linalg - linalg\n\u27e853\u27e9 https://docs.rs/nalgebra/latest/nalgebra/proptest/index.html: mod nalgebra::proptest - proptest\n\u27e854\u27e9 https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html: mod nalgebra::sparse - sparse\n\u27e855\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#macros: \u00a7\n\u27e856\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.dmatrix.html: macro nalgebra::dmatrix - dmatrix\n\u27e857\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.dvector.html: macro nalgebra::dvector - dvector\n\u27e858\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.matrix.html: macro nalgebra::matrix - matrix\n\u27e859\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.point.html: macro nalgebra::point - point\n\u27e860\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.stack.html: macro nalgebra::stack - stack\n\u27e861\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.vector.html: macro nalgebra::vector - vector\n\u27e862\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#structs: \u00a7\n\u27e863\u27e9 https://docs.rs/nalgebra/latest/nalgebra/struct.Complex.html: struct nalgebra::Complex - Complex\n\u27e864\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#traits: \u00a7\n\u27e865\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedAddAssign.html: trait nalgebra::ClosedAddAssign - ClosedAddAssign\n\u27e866\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedDivAssign.html: trait nalgebra::ClosedDivAssign - ClosedDivAssign\n\u27e867\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedMulAssign.html: trait nalgebra::ClosedMulAssign - ClosedMulAssign\n\u27e868\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedSubAssign.html: trait nalgebra::ClosedSubAssign - ClosedSubAssign\n\u27e869\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ComplexField.html: trait nalgebra::ComplexField - ComplexField\n\u27e870\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.Field.html: trait nalgebra::Field - Field\n\u27e871\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.RealField.html: trait nalgebra::RealField - RealField\n\u27e872\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdBool.html: trait nalgebra::SimdBool - SimdBool\n\u27e873\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdComplexField.html: trait nalgebra::SimdComplexField - SimdComplexField\n\u27e874\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdPartialOrd.html: trait nalgebra::SimdPartialOrd - SimdPartialOrd\n\u27e875\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdRealField.html: trait nalgebra::SimdRealField - SimdRealField\n\u27e876\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdValue.html: trait nalgebra::SimdValue - SimdValue\n\u27e877\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#functions: \u00a7\n\u27e878\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.abs.html: fn nalgebra::abs - abs\n\u27e879\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.center.html: fn nalgebra::center - center\n\u27e880\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.clamp.html: fn nalgebra::clamp - clamp\n\u27e881\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert.html: fn nalgebra::convert - convert\n\u27e882\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref.html: fn nalgebra::convert_ref - convert_ref\n\u27e883\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref_unchecked.html: fn nalgebra::convert_ref_unchecked - convert_ref_unchecked\n\u27e884\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html: fn nalgebra::try_convert - `try_convert()`\n\u27e885\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_unchecked.html: fn nalgebra::convert_unchecked - convert_unchecked\n\u27e886\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.distance.html: fn nalgebra::distance - distance\n\u27e887\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.distance_squared.html: fn nalgebra::distance_squared - distance_squared\n\u27e888\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.inf.html: fn nalgebra::inf - inf\n\u27e889\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.inf_sup.html: fn nalgebra::inf_sup - inf_sup\n\u27e890\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.is_convertible.html: fn nalgebra::is_convertible - is_convertible\n\u27e891\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.max.html: fn nalgebra::max - max\n\u27e892\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.min.html: fn nalgebra::min - min\n\u27e893\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.one.html: fn nalgebra::one - one\n\u27e894\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_clamp.html: fn nalgebra::partial_clamp - partial_clamp\n\u27e895\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_cmp.html: fn nalgebra::partial_cmp - partial_cmp\n\u27e896\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_ge.html: fn nalgebra::partial_ge - partial_ge\n\u27e897\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_gt.html: fn nalgebra::partial_gt - partial_gt\n\u27e898\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_le.html: fn nalgebra::partial_le - partial_le\n\u27e899\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_lt.html: fn nalgebra::partial_lt - partial_lt\n\u27e8100\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_max.html: fn nalgebra::partial_max - partial_max\n\u27e8101\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_min.html: fn nalgebra::partial_min - partial_min\n\u27e8102\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_sort2.html: fn nalgebra::partial_sort2 - partial_sort2\n\u27e8103\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.sup.html: fn nalgebra::sup - sup\n\u27e8104\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert_ref.html: fn nalgebra::try_convert_ref - try_convert_ref\n\u27e8105\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.wrap.html: fn nalgebra::wrap - wrap\n\u27e8106\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.zero.html: fn nalgebra::zero - zero\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "nalgebra",
          "version": "0.33.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/nalgebra/latest/nalgebra/all.html \"show sidebar\")\n# Crate nalgebraCopy item path\n[Settings](https://docs.rs/nalgebra/latest/settings.html)\n[Help](https://docs.rs/nalgebra/latest/help.html)\nSummary[Source](https://docs.rs/nalgebra/latest/src/nalgebra/lib.rs.html#1-549)\nExpand description\n## [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#nalgebra)nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n### [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#using-nalgebra)Using **nalgebra**\nYou will need the last stable build of the [rust compiler](https://www.rust-lang.org) and the official package manager: [cargo](https://github.com/rust-lang/cargo).\nSimply add the following to your `Cargo.toml` file:\n[\u24d8](https://docs.rs/nalgebra/latest/nalgebra/ \"This example is not tested\")```\n[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module `nalgebra::`.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the `na::` prefix:\n```\n#[macro_use]\nextern crate approx; // For the macro assert_relative_eq!\nextern crate nalgebra as na;\nuse na::{Vector3, Rotation3};\nfn main() {\n  let axis = Vector3::x_axis();\n  let angle = 1.57;\n  let b   = Rotation3::from_axis_angle(&axis, angle);\n  assert_relative_eq!(b.axis().unwrap(), axis);\n  assert_relative_eq!(b.angle(), angle);\n}\n```\n\n### [\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#features)Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type [`Matrix`](https://docs.rs/nalgebra/latest/nalgebra/base/struct.Matrix.html \"struct nalgebra::base::Matrix\") for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: [`Vector1`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector1.html \"type nalgebra::base::Vector1\") to [`Vector6`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector6.html \"type nalgebra::base::Vector6\") and [`Matrix1x1`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix1.html \"type nalgebra::base::Matrix1\") to [`Matrix6x6`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix6.html \"type nalgebra::base::Matrix6\"), including rectangular matrices like [`Matrix2x5`](https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix2x5.html \"type nalgebra::base::Matrix2x5\").\n  * Points sizes known at compile time, and convenience aliases: [`Point1`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point1.html \"type nalgebra::geometry::Point1\") to [`Point6`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point6.html \"type nalgebra::geometry::Point6\").\n  * Translation (seen as a transformation that composes by multiplication): [`Translation2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation2.html \"type nalgebra::geometry::Translation2\"), [`Translation3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation3.html \"type nalgebra::geometry::Translation3\").\n  * Rotation matrices: [`Rotation2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation2.html \"type nalgebra::geometry::Rotation2\"), [`Rotation3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation3.html \"type nalgebra::geometry::Rotation3\").\n  * Quaternions: [`Quaternion`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Quaternion.html \"struct nalgebra::geometry::Quaternion\"), [`UnitQuaternion`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitQuaternion.html \"type nalgebra::geometry::UnitQuaternion\") (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: [`UnitComplex`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitComplex.html \"type nalgebra::geometry::UnitComplex\").\n  * Algebraic entities with a norm equal to one: [`Unit<T>`](https://docs.rs/nalgebra/latest/nalgebra/base/struct.Unit.html \"struct nalgebra::base::Unit\"), e.g., `Unit<Vector3<f32>>`.\n  * Isometries (translation \u2a2f rotation): [`Isometry2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry2.html \"type nalgebra::geometry::Isometry2\"), [`Isometry3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry3.html \"type nalgebra::geometry::Isometry3\")\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): [`Similarity2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity2.html \"type nalgebra::geometry::Similarity2\"), [`Similarity3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity3.html \"type nalgebra::geometry::Similarity3\").\n  * Affine transformations stored as a homogeneous matrix: [`Affine2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine2.html \"type nalgebra::geometry::Affine2\"), [`Affine3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine3.html \"type nalgebra::geometry::Affine3\").\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: [`Projective2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective2.html \"type nalgebra::geometry::Projective2\"), [`Projective3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective3.html \"type nalgebra::geometry::Projective3\").\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: [`Transform2`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform2.html \"type nalgebra::geometry::Transform2\"), [`Transform3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform3.html \"type nalgebra::geometry::Transform3\").\n  * 3D projections for computer graphics: [`Perspective3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Perspective3.html \"struct nalgebra::geometry::Perspective3\"), [`Orthographic3`](https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Orthographic3.html \"struct nalgebra::geometry::Orthographic3\").\n  * Matrix factorizations: [`Cholesky`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Cholesky.html \"struct nalgebra::linalg::Cholesky\"), [`QR`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.QR.html \"struct nalgebra::linalg::QR\"), [`LU`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.LU.html \"struct nalgebra::linalg::LU\"), [`FullPivLU`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.FullPivLU.html \"struct nalgebra::linalg::FullPivLU\"), [`SVD`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SVD.html \"struct nalgebra::linalg::SVD\"), [`Schur`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Schur.html \"struct nalgebra::linalg::Schur\"), [`Hessenberg`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Hessenberg.html \"struct nalgebra::linalg::Hessenberg\"), [`SymmetricEigen`](https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SymmetricEigen.html \"struct nalgebra::linalg::SymmetricEigen\").\n  * Insertion and removal of rows of columns of a matrix.\n\n\n## Re-exports[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#reexports)\n\n`pub use base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\") as core;`\n\n\n`pub use crate::base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")::*;`\n\n\n`pub use crate::geometry[](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")::*;`\n\n\n`pub use crate::linalg[](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")::*;`\n\n\n`pub use crate::sparse[](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")::*;`\n\n## Modules[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#modules)\n\n[base](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")\n    [Reexported at the root of this crate.] Data structures for vector and matrix computations.\n\n[debug](https://docs.rs/nalgebra/latest/nalgebra/debug/index.html \"mod nalgebra::debug\")\n    Various tools useful for testing/debugging/benchmarking.\n\n[geometry](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")\n    [Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)\n\n[io](https://docs.rs/nalgebra/latest/nalgebra/io/index.html \"mod nalgebra::io\")\n    Parsers for various matrix formats.\n\n[linalg](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")\n    [Reexported at the root of this crate.] Factorization of real matrices.\n\n[proptest](https://docs.rs/nalgebra/latest/nalgebra/proptest/index.html \"mod nalgebra::proptest\")\n    `proptest`-related features for `nalgebra` data structures.\n\n[sparse](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")\n    Sparse matrices.\n## Macros[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#macros)\n\n[dmatrix](https://docs.rs/nalgebra/latest/nalgebra/macro.dmatrix.html \"macro nalgebra::dmatrix\")\n    Construct a dynamic matrix directly from data.\n\n[dvector](https://docs.rs/nalgebra/latest/nalgebra/macro.dvector.html \"macro nalgebra::dvector\")\n    Construct a dynamic column vector directly from data.\n\n[matrix](https://docs.rs/nalgebra/latest/nalgebra/macro.matrix.html \"macro nalgebra::matrix\")\n    Construct a fixed-size matrix directly from data.\n\n[point](https://docs.rs/nalgebra/latest/nalgebra/macro.point.html \"macro nalgebra::point\")\n    Construct a fixed-size point directly from data.\n\n[stack](https://docs.rs/nalgebra/latest/nalgebra/macro.stack.html \"macro nalgebra::stack\")\n    Construct a new matrix by stacking matrices in a block matrix.\n\n[vector](https://docs.rs/nalgebra/latest/nalgebra/macro.vector.html \"macro nalgebra::vector\")\n    Construct a fixed-size column vector directly from data.\n## Structs[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#structs)\n\n[Complex](https://docs.rs/nalgebra/latest/nalgebra/struct.Complex.html \"struct nalgebra::Complex\")\n    A complex number in Cartesian form.\n## Traits[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#traits)\n\n[ClosedAddAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedAddAssign.html \"trait nalgebra::ClosedAddAssign\")\n    Trait **alias** for `Add` and `AddAssign` with result of type `Self`.\n\n[ClosedDivAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedDivAssign.html \"trait nalgebra::ClosedDivAssign\")\n    Trait **alias** for `Div` and `DivAssign` with result of type `Self`.\n\n[ClosedMulAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedMulAssign.html \"trait nalgebra::ClosedMulAssign\")\n    Trait **alias** for `Mul` and `MulAssign` with result of type `Self`.\n\n[ClosedSubAssign](https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedSubAssign.html \"trait nalgebra::ClosedSubAssign\")\n    Trait **alias** for `Sub` and `SubAssign` with result of type `Self`.\n\n[ComplexField](https://docs.rs/nalgebra/latest/nalgebra/trait.ComplexField.html \"trait nalgebra::ComplexField\")\n    Trait shared by all complex fields and its subfields (like real numbers).\n\n[Field](https://docs.rs/nalgebra/latest/nalgebra/trait.Field.html \"trait nalgebra::Field\")\n    Trait implemented by fields, i.e., complex numbers and floats.\n\n[RealField](https://docs.rs/nalgebra/latest/nalgebra/trait.RealField.html \"trait nalgebra::RealField\")\n    Trait shared by all reals.\n\n[SimdBool](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdBool.html \"trait nalgebra::SimdBool\")\n    Lane-wise generalization of `bool` for SIMD booleans.\n\n[SimdComplexField](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdComplexField.html \"trait nalgebra::SimdComplexField\")\n    Lane-wise generalisation of `ComplexField` for SIMD complex fields.\n\n[SimdPartialOrd](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdPartialOrd.html \"trait nalgebra::SimdPartialOrd\")\n    Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n\n[SimdRealField](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdRealField.html \"trait nalgebra::SimdRealField\")\n    Lanewise generalization of `RealField` for SIMD reals.\n\n[SimdValue](https://docs.rs/nalgebra/latest/nalgebra/trait.SimdValue.html \"trait nalgebra::SimdValue\")\n    Base trait for every SIMD types.\n## Functions[\u00a7](https://docs.rs/nalgebra/latest/nalgebra/#functions)\n\n[abs](https://docs.rs/nalgebra/latest/nalgebra/fn.abs.html \"fn nalgebra::abs\")Deprecated\n    The absolute value of `a`.\n\n[center](https://docs.rs/nalgebra/latest/nalgebra/fn.center.html \"fn nalgebra::center\")\n    The center of two points.\n\n[clamp](https://docs.rs/nalgebra/latest/nalgebra/fn.clamp.html \"fn nalgebra::clamp\")\n    Returns a reference to the input value clamped to the interval `[min, max]`.\n\n[convert](https://docs.rs/nalgebra/latest/nalgebra/fn.convert.html \"fn nalgebra::convert\")\n    Converts an object from one type to an equivalent or more general one.\n\n[convert_ref](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref.html \"fn nalgebra::convert_ref\")\n    Converts an object from one type to an equivalent or more general one.\n\n[convert_ref_unchecked](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref_unchecked.html \"fn nalgebra::convert_ref_unchecked\")\n    Use with care! Same as [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") but without any property checks.\n\n[convert_unchecked](https://docs.rs/nalgebra/latest/nalgebra/fn.convert_unchecked.html \"fn nalgebra::convert_unchecked\")\n    Use with care! Same as [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") but without any property checks.\n\n[distance](https://docs.rs/nalgebra/latest/nalgebra/fn.distance.html \"fn nalgebra::distance\")\n    The distance between two points.\n\n[distance_squared](https://docs.rs/nalgebra/latest/nalgebra/fn.distance_squared.html \"fn nalgebra::distance_squared\")\n    The squared distance between two points.\n\n[inf](https://docs.rs/nalgebra/latest/nalgebra/fn.inf.html \"fn nalgebra::inf\")Deprecated\n    Returns the infimum of `a` and `b`.\n\n[inf_sup](https://docs.rs/nalgebra/latest/nalgebra/fn.inf_sup.html \"fn nalgebra::inf_sup\")Deprecated\n    Returns simultaneously the infimum and supremum of `a` and `b`.\n\n[is_convertible](https://docs.rs/nalgebra/latest/nalgebra/fn.is_convertible.html \"fn nalgebra::is_convertible\")\n    Indicates if [`try_convert()`](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\") will succeed without actually performing the conversion.\n\n[max](https://docs.rs/nalgebra/latest/nalgebra/fn.max.html \"fn nalgebra::max\")\n    Same as `cmp::max`.\n\n[min](https://docs.rs/nalgebra/latest/nalgebra/fn.min.html \"fn nalgebra::min\")\n    Same as `cmp::min`.\n\n[one](https://docs.rs/nalgebra/latest/nalgebra/fn.one.html \"fn nalgebra::one\")\n    Gets the multiplicative identity element.\n\n[partial_clamp](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_clamp.html \"fn nalgebra::partial_clamp\")\n    Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.\n\n[partial_cmp](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_cmp.html \"fn nalgebra::partial_cmp\")\n    Compare `a` and `b` using a partial ordering relation.\n\n[partial_ge](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_ge.html \"fn nalgebra::partial_ge\")\n    Returns `true` iff `a` and `b` are comparable and `a >= b`.\n\n[partial_gt](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_gt.html \"fn nalgebra::partial_gt\")\n    Returns `true` iff `a` and `b` are comparable and `a > b`.\n\n[partial_le](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_le.html \"fn nalgebra::partial_le\")\n    Returns `true` iff `a` and `b` are comparable and `a <= b`.\n\n[partial_lt](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_lt.html \"fn nalgebra::partial_lt\")\n    Returns `true` iff `a` and `b` are comparable and `a < b`.\n\n[partial_max](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_max.html \"fn nalgebra::partial_max\")\n    Return the maximum of `a` and `b` if they are comparable.\n\n[partial_min](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_min.html \"fn nalgebra::partial_min\")\n    Return the minimum of `a` and `b` if they are comparable.\n\n[partial_sort2](https://docs.rs/nalgebra/latest/nalgebra/fn.partial_sort2.html \"fn nalgebra::partial_sort2\")\n    Sorts two values in increasing order using a partial ordering.\n\n[sup](https://docs.rs/nalgebra/latest/nalgebra/fn.sup.html \"fn nalgebra::sup\")Deprecated\n    Returns the supremum of `a` and `b`.\n\n[try_convert](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html \"fn nalgebra::try_convert\")\n    Attempts to convert an object to a more specific one.\n\n[try_convert_ref](https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert_ref.html \"fn nalgebra::try_convert_ref\")\n    Attempts to convert an object to a more specific one.\n\n[wrap](https://docs.rs/nalgebra/latest/nalgebra/fn.wrap.html \"fn nalgebra::wrap\")\n    Wraps `val` into the range `[min, max]` using modular arithmetics.\n\n[zero](https://docs.rs/nalgebra/latest/nalgebra/fn.zero.html \"fn nalgebra::zero\")\n    Gets the additive identity element.\n",
            "markdown_with_citations": "[](https://docs.rs/nalgebra/latest/nalgebra/all.html \"show sidebar\")\n# Crate nalgebraCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9nalgebra\n**nalgebra** is a linear algebra library written for Rust targeting:\n  * General-purpose linear algebra (still lacks a lot of features\u2026)\n  * Real-time computer graphics.\n  * Real-time computer physics.\n\n\n### \u00a7\u27e85\u27e9Using **nalgebra**\nYou will need the last stable build of the rust compiler\u27e86\u27e9 and the official package manager: cargo\u27e87\u27e9.\nSimply add the following to your `Cargo.toml` file:\n\u24d8\u27e88\u27e9```\n[dependencies]\n// TODO: replace the * by the latest version.\nnalgebra = \"*\"\n```\n\nMost useful functionalities of **nalgebra** are grouped in the root module `nalgebra::`.\nHowever, the recommended way to use **nalgebra** is to import types and traits explicitly, and call free-functions using the `na::` prefix:\n```\n#[macro_use]\nextern crate approx; // For the macro assert_relative_eq!\nextern crate nalgebra as na;\nuse na::{Vector3, Rotation3};\nfn main() {\n  let axis = Vector3::x_axis();\n  let angle = 1.57;\n  let b   = Rotation3::from_axis_angle(&axis, angle);\n  assert_relative_eq!(b.axis().unwrap(), axis);\n  assert_relative_eq!(b.angle(), angle);\n}\n```\n\n### \u00a7\u27e89\u27e9Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with an optimized set of tools for computer graphics and physics. Those features include:\n  * A single parametrizable type `Matrix`\u27e810\u27e9 for vectors, (square or rectangular) matrices, and slices with dimensions known either at compile-time (using type-level integers) or at runtime.\n  * Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are allocated on the heap.\n  * Convenient aliases for low-dimensional matrices and vectors: `Vector1`\u27e811\u27e9 to `Vector6`\u27e812\u27e9 and `Matrix1x1`\u27e813\u27e9 to `Matrix6x6`\u27e814\u27e9, including rectangular matrices like `Matrix2x5`\u27e815\u27e9.\n  * Points sizes known at compile time, and convenience aliases: `Point1`\u27e816\u27e9 to `Point6`\u27e817\u27e9.\n  * Translation (seen as a transformation that composes by multiplication): `Translation2`\u27e818\u27e9, `Translation3`\u27e819\u27e9.\n  * Rotation matrices: `Rotation2`\u27e820\u27e9, `Rotation3`\u27e821\u27e9.\n  * Quaternions: `Quaternion`\u27e822\u27e9, `UnitQuaternion`\u27e823\u27e9 (for 3D rotation).\n  * Unit complex numbers can be used for 2D rotation: `UnitComplex`\u27e824\u27e9.\n  * Algebraic entities with a norm equal to one: `Unit<T>`\u27e825\u27e9, e.g., `Unit<Vector3<f32>>`.\n  * Isometries (translation \u2a2f rotation): `Isometry2`\u27e826\u27e9, `Isometry3`\u27e827\u27e9\n  * Similarity transformations (translation \u2a2f rotation \u2a2f uniform scale): `Similarity2`\u27e828\u27e9, `Similarity3`\u27e829\u27e9.\n  * Affine transformations stored as a homogeneous matrix: `Affine2`\u27e830\u27e9, `Affine3`\u27e831\u27e9.\n  * Projective (i.e. invertible) transformations stored as a homogeneous matrix: `Projective2`\u27e832\u27e9, `Projective3`\u27e833\u27e9.\n  * General transformations that does not have to be invertible, stored as a homogeneous matrix: `Transform2`\u27e834\u27e9, `Transform3`\u27e835\u27e9.\n  * 3D projections for computer graphics: `Perspective3`\u27e836\u27e9, `Orthographic3`\u27e837\u27e9.\n  * Matrix factorizations: `Cholesky`\u27e838\u27e9, `QR`\u27e839\u27e9, `LU`\u27e840\u27e9, `FullPivLU`\u27e841\u27e9, `SVD`\u27e842\u27e9, `Schur`\u27e843\u27e9, `Hessenberg`\u27e844\u27e9, `SymmetricEigen`\u27e845\u27e9.\n  * Insertion and removal of rows of columns of a matrix.\n\n\n## Re-exports\u00a7\u27e846\u27e9\n\n`pub use base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\") as core;`\n\n\n`pub use crate::base[](https://docs.rs/nalgebra/latest/nalgebra/base/index.html \"mod nalgebra::base\")::*;`\n\n\n`pub use crate::geometry[](https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html \"mod nalgebra::geometry\")::*;`\n\n\n`pub use crate::linalg[](https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html \"mod nalgebra::linalg\")::*;`\n\n\n`pub use crate::sparse[](https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html \"mod nalgebra::sparse\")::*;`\n\n## Modules\u00a7\u27e847\u27e9\n\nbase\u27e848\u27e9\n    [Reexported at the root of this crate.] Data structures for vector and matrix computations.\n\ndebug\u27e849\u27e9\n    Various tools useful for testing/debugging/benchmarking.\n\ngeometry\u27e850\u27e9\n    [Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)\n\nio\u27e851\u27e9\n    Parsers for various matrix formats.\n\nlinalg\u27e852\u27e9\n    [Reexported at the root of this crate.] Factorization of real matrices.\n\nproptest\u27e853\u27e9\n    `proptest`-related features for `nalgebra` data structures.\n\nsparse\u27e854\u27e9\n    Sparse matrices.\n## Macros\u00a7\u27e855\u27e9\n\ndmatrix\u27e856\u27e9\n    Construct a dynamic matrix directly from data.\n\ndvector\u27e857\u27e9\n    Construct a dynamic column vector directly from data.\n\nmatrix\u27e858\u27e9\n    Construct a fixed-size matrix directly from data.\n\npoint\u27e859\u27e9\n    Construct a fixed-size point directly from data.\n\nstack\u27e860\u27e9\n    Construct a new matrix by stacking matrices in a block matrix.\n\nvector\u27e861\u27e9\n    Construct a fixed-size column vector directly from data.\n## Structs\u00a7\u27e862\u27e9\n\nComplex\u27e863\u27e9\n    A complex number in Cartesian form.\n## Traits\u00a7\u27e864\u27e9\n\nClosedAddAssign\u27e865\u27e9\n    Trait **alias** for `Add` and `AddAssign` with result of type `Self`.\n\nClosedDivAssign\u27e866\u27e9\n    Trait **alias** for `Div` and `DivAssign` with result of type `Self`.\n\nClosedMulAssign\u27e867\u27e9\n    Trait **alias** for `Mul` and `MulAssign` with result of type `Self`.\n\nClosedSubAssign\u27e868\u27e9\n    Trait **alias** for `Sub` and `SubAssign` with result of type `Self`.\n\nComplexField\u27e869\u27e9\n    Trait shared by all complex fields and its subfields (like real numbers).\n\nField\u27e870\u27e9\n    Trait implemented by fields, i.e., complex numbers and floats.\n\nRealField\u27e871\u27e9\n    Trait shared by all reals.\n\nSimdBool\u27e872\u27e9\n    Lane-wise generalization of `bool` for SIMD booleans.\n\nSimdComplexField\u27e873\u27e9\n    Lane-wise generalisation of `ComplexField` for SIMD complex fields.\n\nSimdPartialOrd\u27e874\u27e9\n    Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n\nSimdRealField\u27e875\u27e9\n    Lanewise generalization of `RealField` for SIMD reals.\n\nSimdValue\u27e876\u27e9\n    Base trait for every SIMD types.\n## Functions\u00a7\u27e877\u27e9\n\nabs\u27e878\u27e9Deprecated\n    The absolute value of `a`.\n\ncenter\u27e879\u27e9\n    The center of two points.\n\nclamp\u27e880\u27e9\n    Returns a reference to the input value clamped to the interval `[min, max]`.\n\nconvert\u27e881\u27e9\n    Converts an object from one type to an equivalent or more general one.\n\nconvert_ref\u27e882\u27e9\n    Converts an object from one type to an equivalent or more general one.\n\nconvert_ref_unchecked\u27e883\u27e9\n    Use with care! Same as `try_convert()`\u27e884\u27e9 but without any property checks.\n\nconvert_unchecked\u27e885\u27e9\n    Use with care! Same as `try_convert()`\u27e884\u27e9 but without any property checks.\n\ndistance\u27e886\u27e9\n    The distance between two points.\n\ndistance_squared\u27e887\u27e9\n    The squared distance between two points.\n\ninf\u27e888\u27e9Deprecated\n    Returns the infimum of `a` and `b`.\n\ninf_sup\u27e889\u27e9Deprecated\n    Returns simultaneously the infimum and supremum of `a` and `b`.\n\nis_convertible\u27e890\u27e9\n    Indicates if `try_convert()`\u27e884\u27e9 will succeed without actually performing the conversion.\n\nmax\u27e891\u27e9\n    Same as `cmp::max`.\n\nmin\u27e892\u27e9\n    Same as `cmp::min`.\n\none\u27e893\u27e9\n    Gets the multiplicative identity element.\n\npartial_clamp\u27e894\u27e9\n    Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.\n\npartial_cmp\u27e895\u27e9\n    Compare `a` and `b` using a partial ordering relation.\n\npartial_ge\u27e896\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a >= b`.\n\npartial_gt\u27e897\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a > b`.\n\npartial_le\u27e898\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a <= b`.\n\npartial_lt\u27e899\u27e9\n    Returns `true` iff `a` and `b` are comparable and `a < b`.\n\npartial_max\u27e8100\u27e9\n    Return the maximum of `a` and `b` if they are comparable.\n\npartial_min\u27e8101\u27e9\n    Return the minimum of `a` and `b` if they are comparable.\n\npartial_sort2\u27e8102\u27e9\n    Sorts two values in increasing order using a partial ordering.\n\nsup\u27e8103\u27e9Deprecated\n    Returns the supremum of `a` and `b`.\n\ntry_convert\u27e884\u27e9\n    Attempts to convert an object to a more specific one.\n\ntry_convert_ref\u27e8104\u27e9\n    Attempts to convert an object to a more specific one.\n\nwrap\u27e8105\u27e9\n    Wraps `val` into the range `[min, max]` using modular arithmetics.\n\nzero\u27e8106\u27e9\n    Gets the additive identity element.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/nalgebra/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/nalgebra/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/nalgebra/latest/src/nalgebra/lib.rs.html#1-549: Source\n\u27e84\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#nalgebra: \u00a7\n\u27e85\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#using-nalgebra: \u00a7\n\u27e86\u27e9 https://www.rust-lang.org: rust compiler\n\u27e87\u27e9 https://github.com/rust-lang/cargo: cargo\n\u27e88\u27e9 https://docs.rs/nalgebra/latest/nalgebra/: This example is not tested - \u24d8\n\u27e89\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#features: \u00a7\n\u27e810\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/struct.Matrix.html: struct nalgebra::base::Matrix - `Matrix`\n\u27e811\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector1.html: type nalgebra::base::Vector1 - `Vector1`\n\u27e812\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Vector6.html: type nalgebra::base::Vector6 - `Vector6`\n\u27e813\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix1.html: type nalgebra::base::Matrix1 - `Matrix1x1`\n\u27e814\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix6.html: type nalgebra::base::Matrix6 - `Matrix6x6`\n\u27e815\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/type.Matrix2x5.html: type nalgebra::base::Matrix2x5 - `Matrix2x5`\n\u27e816\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point1.html: type nalgebra::geometry::Point1 - `Point1`\n\u27e817\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Point6.html: type nalgebra::geometry::Point6 - `Point6`\n\u27e818\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation2.html: type nalgebra::geometry::Translation2 - `Translation2`\n\u27e819\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Translation3.html: type nalgebra::geometry::Translation3 - `Translation3`\n\u27e820\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation2.html: type nalgebra::geometry::Rotation2 - `Rotation2`\n\u27e821\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Rotation3.html: type nalgebra::geometry::Rotation3 - `Rotation3`\n\u27e822\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Quaternion.html: struct nalgebra::geometry::Quaternion - `Quaternion`\n\u27e823\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitQuaternion.html: type nalgebra::geometry::UnitQuaternion - `UnitQuaternion`\n\u27e824\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.UnitComplex.html: type nalgebra::geometry::UnitComplex - `UnitComplex`\n\u27e825\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/struct.Unit.html: struct nalgebra::base::Unit - `Unit<T>`\n\u27e826\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry2.html: type nalgebra::geometry::Isometry2 - `Isometry2`\n\u27e827\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Isometry3.html: type nalgebra::geometry::Isometry3 - `Isometry3`\n\u27e828\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity2.html: type nalgebra::geometry::Similarity2 - `Similarity2`\n\u27e829\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Similarity3.html: type nalgebra::geometry::Similarity3 - `Similarity3`\n\u27e830\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine2.html: type nalgebra::geometry::Affine2 - `Affine2`\n\u27e831\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Affine3.html: type nalgebra::geometry::Affine3 - `Affine3`\n\u27e832\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective2.html: type nalgebra::geometry::Projective2 - `Projective2`\n\u27e833\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Projective3.html: type nalgebra::geometry::Projective3 - `Projective3`\n\u27e834\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform2.html: type nalgebra::geometry::Transform2 - `Transform2`\n\u27e835\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/type.Transform3.html: type nalgebra::geometry::Transform3 - `Transform3`\n\u27e836\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Perspective3.html: struct nalgebra::geometry::Perspective3 - `Perspective3`\n\u27e837\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/struct.Orthographic3.html: struct nalgebra::geometry::Orthographic3 - `Orthographic3`\n\u27e838\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Cholesky.html: struct nalgebra::linalg::Cholesky - `Cholesky`\n\u27e839\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.QR.html: struct nalgebra::linalg::QR - `QR`\n\u27e840\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.LU.html: struct nalgebra::linalg::LU - `LU`\n\u27e841\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.FullPivLU.html: struct nalgebra::linalg::FullPivLU - `FullPivLU`\n\u27e842\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SVD.html: struct nalgebra::linalg::SVD - `SVD`\n\u27e843\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Schur.html: struct nalgebra::linalg::Schur - `Schur`\n\u27e844\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.Hessenberg.html: struct nalgebra::linalg::Hessenberg - `Hessenberg`\n\u27e845\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/struct.SymmetricEigen.html: struct nalgebra::linalg::SymmetricEigen - `SymmetricEigen`\n\u27e846\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#reexports: \u00a7\n\u27e847\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#modules: \u00a7\n\u27e848\u27e9 https://docs.rs/nalgebra/latest/nalgebra/base/index.html: mod nalgebra::base - base\n\u27e849\u27e9 https://docs.rs/nalgebra/latest/nalgebra/debug/index.html: mod nalgebra::debug - debug\n\u27e850\u27e9 https://docs.rs/nalgebra/latest/nalgebra/geometry/index.html: mod nalgebra::geometry - geometry\n\u27e851\u27e9 https://docs.rs/nalgebra/latest/nalgebra/io/index.html: mod nalgebra::io - io\n\u27e852\u27e9 https://docs.rs/nalgebra/latest/nalgebra/linalg/index.html: mod nalgebra::linalg - linalg\n\u27e853\u27e9 https://docs.rs/nalgebra/latest/nalgebra/proptest/index.html: mod nalgebra::proptest - proptest\n\u27e854\u27e9 https://docs.rs/nalgebra/latest/nalgebra/sparse/index.html: mod nalgebra::sparse - sparse\n\u27e855\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#macros: \u00a7\n\u27e856\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.dmatrix.html: macro nalgebra::dmatrix - dmatrix\n\u27e857\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.dvector.html: macro nalgebra::dvector - dvector\n\u27e858\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.matrix.html: macro nalgebra::matrix - matrix\n\u27e859\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.point.html: macro nalgebra::point - point\n\u27e860\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.stack.html: macro nalgebra::stack - stack\n\u27e861\u27e9 https://docs.rs/nalgebra/latest/nalgebra/macro.vector.html: macro nalgebra::vector - vector\n\u27e862\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#structs: \u00a7\n\u27e863\u27e9 https://docs.rs/nalgebra/latest/nalgebra/struct.Complex.html: struct nalgebra::Complex - Complex\n\u27e864\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#traits: \u00a7\n\u27e865\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedAddAssign.html: trait nalgebra::ClosedAddAssign - ClosedAddAssign\n\u27e866\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedDivAssign.html: trait nalgebra::ClosedDivAssign - ClosedDivAssign\n\u27e867\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedMulAssign.html: trait nalgebra::ClosedMulAssign - ClosedMulAssign\n\u27e868\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ClosedSubAssign.html: trait nalgebra::ClosedSubAssign - ClosedSubAssign\n\u27e869\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.ComplexField.html: trait nalgebra::ComplexField - ComplexField\n\u27e870\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.Field.html: trait nalgebra::Field - Field\n\u27e871\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.RealField.html: trait nalgebra::RealField - RealField\n\u27e872\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdBool.html: trait nalgebra::SimdBool - SimdBool\n\u27e873\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdComplexField.html: trait nalgebra::SimdComplexField - SimdComplexField\n\u27e874\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdPartialOrd.html: trait nalgebra::SimdPartialOrd - SimdPartialOrd\n\u27e875\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdRealField.html: trait nalgebra::SimdRealField - SimdRealField\n\u27e876\u27e9 https://docs.rs/nalgebra/latest/nalgebra/trait.SimdValue.html: trait nalgebra::SimdValue - SimdValue\n\u27e877\u27e9 https://docs.rs/nalgebra/latest/nalgebra/#functions: \u00a7\n\u27e878\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.abs.html: fn nalgebra::abs - abs\n\u27e879\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.center.html: fn nalgebra::center - center\n\u27e880\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.clamp.html: fn nalgebra::clamp - clamp\n\u27e881\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert.html: fn nalgebra::convert - convert\n\u27e882\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref.html: fn nalgebra::convert_ref - convert_ref\n\u27e883\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_ref_unchecked.html: fn nalgebra::convert_ref_unchecked - convert_ref_unchecked\n\u27e884\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert.html: fn nalgebra::try_convert - `try_convert()`\n\u27e885\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.convert_unchecked.html: fn nalgebra::convert_unchecked - convert_unchecked\n\u27e886\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.distance.html: fn nalgebra::distance - distance\n\u27e887\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.distance_squared.html: fn nalgebra::distance_squared - distance_squared\n\u27e888\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.inf.html: fn nalgebra::inf - inf\n\u27e889\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.inf_sup.html: fn nalgebra::inf_sup - inf_sup\n\u27e890\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.is_convertible.html: fn nalgebra::is_convertible - is_convertible\n\u27e891\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.max.html: fn nalgebra::max - max\n\u27e892\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.min.html: fn nalgebra::min - min\n\u27e893\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.one.html: fn nalgebra::one - one\n\u27e894\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_clamp.html: fn nalgebra::partial_clamp - partial_clamp\n\u27e895\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_cmp.html: fn nalgebra::partial_cmp - partial_cmp\n\u27e896\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_ge.html: fn nalgebra::partial_ge - partial_ge\n\u27e897\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_gt.html: fn nalgebra::partial_gt - partial_gt\n\u27e898\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_le.html: fn nalgebra::partial_le - partial_le\n\u27e899\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_lt.html: fn nalgebra::partial_lt - partial_lt\n\u27e8100\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_max.html: fn nalgebra::partial_max - partial_max\n\u27e8101\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_min.html: fn nalgebra::partial_min - partial_min\n\u27e8102\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.partial_sort2.html: fn nalgebra::partial_sort2 - partial_sort2\n\u27e8103\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.sup.html: fn nalgebra::sup - sup\n\u27e8104\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.try_convert_ref.html: fn nalgebra::try_convert_ref - try_convert_ref\n\u27e8105\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.wrap.html: fn nalgebra::wrap - wrap\n\u27e8106\u27e9 https://docs.rs/nalgebra/latest/nalgebra/fn.zero.html: fn nalgebra::zero - zero\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `nalgebra` crate is a general-purpose linear algebra library for Rust, optimized for low-dimensional computations in computer graphics and physics. It provides a flexible `Matrix` type for both statically and dynamically sized matrices and vectors, along with convenient aliases for common dimensions. Key features include support for transformations (e.g., rotations, translations, isometries), 3D projections, quaternions, matrix factorizations (e.g., LU, QR, SVD), and operations on affine and projective spaces.",
          "feature_summary": null,
          "use_case": "AI",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Matrix and Vector Types  \n\u2705 Factual: The `nalgebra` crate provides a single parametrizable type `Matrix` that can represent vectors, matrices, and slices with dimensions known at either compile time or runtime.  \n\u274c Counterfactual: The `nalgebra` crate only supports matrices and vectors with dimensions specified at runtime, and does not allow compile-time dimension specification.  \n\n---\n\n### Pair 2: Rotation and Transformation Support  \n\u2705 Factual: `nalgebra` supports rotation matrices like `Rotation2` and `Rotation3`, as well as quaternions (`Quaternion` and `UnitQuaternion`) for 3D rotations.  \n\u274c Counterfactual: `nalgebra` does not support quaternions for rotation and relies exclusively on rotation matrices for all dimensional transformations.  \n\n---\n\n### Pair 3: Memory Allocation  \n\u2705 Factual: Matrices and vectors with compile-time sizes in `nalgebra` are statically allocated, while dynamically sized ones are allocated on the heap.  \n\u274c Counterfactual: All matrices and vectors in `nalgebra` are allocated on the heap, regardless of whether their sizes are known at compile time or runtime.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-ba94b10b-be496d6b-1751265643",
      "timestamp": "2025-06-30T06:40:43.075818+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]