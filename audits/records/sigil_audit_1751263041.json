[
  {
    "execution_id": "exec-75bf5585-9a9fa050-1751263031",
    "timestamp": "2025-06-30T05:57:11.527583+00:00",
    "sacred_chain": {
      "input_data": "arc-swap",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'arc-swap' -> 'arc-swap'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "arc-swap",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/arc-swap",
            "title": "arc-swap v1.7.1",
            "content": {
              "raw_markdown": "#  arc-swap v1.7.1\nAtomically swappable Arc \n  * [ #arc ](https://crates.io/keywords/arc)\n  * [ #atomic ](https://crates.io/keywords/atomic)\n\n\n  * [ Readme ](https://crates.io/crates/arc-swap)\n  * [ 41 Versions ](https://crates.io/crates/arc-swap/versions)\n  * [ Dependencies ](https://crates.io/crates/arc-swap/dependencies)\n  * [ Dependents ](https://crates.io/crates/arc-swap/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n66.9 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add arc-swap\nOr add the following line to your Cargo.toml:\narc-swap = \"1.7.1\"\n## Documentation\n[ docs.rs/arc-swap ](https://docs.rs/arc-swap)\n## Repository\n[ github.com/vorner/arc-swap ](https://github.com/vorner/arc-swap)\n## Owners\n## Categories\n  * [Data structures](https://crates.io/categories/data-structures)\n  * [Memory management](https://crates.io/categories/memory-management)\n\n\n[ Report crate ](https://crates.io/support?crate=arc-swap&inquire=crate-violation)\n### Stats Overview\n111,289,717 Downloads all time\n41 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  arc-swap v1.7.1\nAtomically swappable Arc \n  *  #arc \u27e81\u27e9\n  *  #atomic \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  41 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\nover 1 year ago \n2018 edition \n MIT \u27e87\u27e9 OR  Apache-2.0 \u27e88\u27e9\n66.9 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add arc-swap\nOr add the following line to your Cargo.toml:\narc-swap = \"1.7.1\"\n## Documentation\n docs.rs/arc-swap \u27e89\u27e9\n## Repository\n github.com/vorner/arc-swap \u27e810\u27e9\n## Owners\n## Categories\n  * Data structures\u27e811\u27e9\n  * Memory management\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n111,289,717 Downloads all time\n41 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/arc:  #arc \n\u27e82\u27e9 https://crates.io/keywords/atomic:  #atomic \n\u27e83\u27e9 https://crates.io/crates/arc-swap:  Readme \n\u27e84\u27e9 https://crates.io/crates/arc-swap/versions:  41 Versions \n\u27e85\u27e9 https://crates.io/crates/arc-swap/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/arc-swap/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e89\u27e9 https://docs.rs/arc-swap:  docs.rs/arc-swap \n\u27e810\u27e9 https://github.com/vorner/arc-swap:  github.com/vorner/arc-swap \n\u27e811\u27e9 https://crates.io/categories/data-structures: Data structures\n\u27e812\u27e9 https://crates.io/categories/memory-management: Memory management\n\u27e813\u27e9 https://crates.io/support?crate=arc-swap&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1288,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116821.7011332"
          },
          "docs_rs": {
            "url": "https://docs.rs/arc-swap",
            "title": "Crate arc_swapCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/arc-swap/latest/arc_swap/all.html \"show sidebar\")\n# Crate arc_swapCopy item path\n[Settings](https://docs.rs/arc-swap/latest/settings.html)\n[Help](https://docs.rs/arc-swap/latest/help.html)\nSummary[Source](https://docs.rs/arc-swap/latest/src/arc_swap/lib.rs.html#1-1317)\nExpand description\nMaking [`Arc`](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\") itself atomic\nThe [`ArcSwap`](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\") type is a container for an `Arc` that can be changed atomically. Semantically, it is similar to something like `Atomic<Arc<T>>` (if there was such a thing) or `RwLock<Arc<T>>` (but without the need for the locking). It is optimized for read-mostly scenarios, with consistent performance characteristics.\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#motivation)Motivation\nThere are many situations in which one might want to have some data structure that is often read and seldom updated. Some examples might be a configuration of a service, routing tables, snapshot of some data that is renewed every few minutes, etc.\nIn all these cases one needs:\n  * Being able to read the current value of the data structure, fast, often and concurrently from many threads.\n  * Using the same version of the data structure over longer period of time \u2012 a query should be answered by a consistent version of data, a packet should be routed either by an old or by a new version of the routing table but not by a combination, etc.\n  * Perform an update without disrupting the processing.\n\n\nThe first idea would be to use [`RwLock<T>`](https://doc.rust-lang.org/std/sync/struct.RwLock.html) and keep a read-lock for the whole time of processing. Update would, however, pause all processing until done.\nBetter option would be to have [`RwLock<Arc<T>>`](https://doc.rust-lang.org/std/sync/struct.RwLock.html). Then one would lock, clone the [Arc](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\") and unlock. This suffers from CPU-level contention (on the lock and on the reference count of the [Arc](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\")) which makes it relatively slow. Depending on the implementation, an update may be blocked for arbitrary long time by a steady inflow of readers.\n```\nstatic ROUTING_TABLE: Lazy<RwLock<Arc<RoutingTable>>> = Lazy::new(|| {\n  RwLock::new(Arc::new(RoutingTable))\n});\nfn process_packet(packet: Packet) {\n  let table = Arc::clone(&ROUTING_TABLE.read().unwrap());\n  table.route(packet);\n}\n```\n\nThe [ArcSwap](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\") can be used instead, which solves the above problems and has better performance characteristics than the [RwLock](https://doc.rust-lang.org/std/sync/struct.RwLock.html), both in contended and non-contended scenarios.\n```\nstatic ROUTING_TABLE: Lazy<ArcSwap<RoutingTable>> = Lazy::new(|| {\n  ArcSwap::from_pointee(RoutingTable)\n});\nfn process_packet(packet: Packet) {\n  let table = ROUTING_TABLE.load();\n  table.route(packet);\n}\n```\n\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#crate-contents)Crate contents\nAt the heart of the crate there are [`ArcSwap`](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\") and [`ArcSwapOption`](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapOption.html \"type arc_swap::ArcSwapOption\") types, containers for an [`Arc`](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\") and [`Option<Arc>`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\nTechnically, these are type aliases for partial instantiations of the [`ArcSwapAny`](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\") type. The [`ArcSwapAny`](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\") is more flexible and allows tweaking of many things (can store other things than [`Arc`](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\")s, can configure the locking [`Strategy`](https://docs.rs/arc-swap/latest/arc_swap/strategy/trait.Strategy.html \"trait arc_swap::strategy::Strategy\")). For details about the tweaking, see the documentation of the [`strategy`](https://docs.rs/arc-swap/latest/arc_swap/strategy/index.html \"mod arc_swap::strategy\") module and the [`RefCnt`](https://docs.rs/arc-swap/latest/arc_swap/trait.RefCnt.html \"trait arc_swap::RefCnt\") trait.\nThe [`cache`](https://docs.rs/arc-swap/latest/arc_swap/cache/index.html \"mod arc_swap::cache\") module provides means for speeding up read access of the contained data at the cost of delayed reclamation.\nThe [`access`](https://docs.rs/arc-swap/latest/arc_swap/access/index.html \"mod arc_swap::access\") module can be used to do projections into the contained data to separate parts of application from each other (eg. giving a component access to only its own part of configuration while still having it reloaded as a whole).\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#before-using)Before using\nThe data structure is a bit niche. Before using, please check the [limitations and common pitfalls](https://docs.rs/arc-swap/latest/arc_swap/docs/limitations/index.html \"mod arc_swap::docs::limitations\") and the [performance characteristics](https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html \"mod arc_swap::docs::performance\"), including choosing the right [read operation](https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html#read-operations \"mod arc_swap::docs::performance\").\nYou can also get an inspiration about what\u2019s possible in the [common patterns](https://docs.rs/arc-swap/latest/arc_swap/docs/patterns/index.html \"mod arc_swap::docs::patterns\") section.\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#examples)Examples\n```\nuse std::sync::Arc;\nuse arc_swap::ArcSwap;\nuse crossbeam_utils::thread;\nlet config = ArcSwap::from(Arc::new(String::default()));\nthread::scope(|scope| {\n  scope.spawn(|_| {\n    let new_conf = Arc::new(\"New configuration\".to_owned());\n    config.store(new_conf);\n  });\n  for _ in 0..10 {\n    scope.spawn(|_| {\n      loop {\n        let cfg = config.load();\n        if !cfg.is_empty() {\n          assert_eq!(**cfg, \"New configuration\");\n          return;\n        }\n      }\n    });\n  }\n}).unwrap();\n```\n\n## Re-exports[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#reexports)\n\n`pub use crate::cache::Cache[](https://docs.rs/arc-swap/latest/arc_swap/cache/struct.Cache.html \"struct arc_swap::cache::Cache\");`\n\n\n`pub use crate::strategy::DefaultStrategy[](https://docs.rs/arc-swap/latest/arc_swap/strategy/type.DefaultStrategy.html \"type arc_swap::strategy::DefaultStrategy\");`\n\n## Modules[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#modules)\n\n[access](https://docs.rs/arc-swap/latest/arc_swap/access/index.html \"mod arc_swap::access\")\n    Abstracting over accessing parts of stored value.\n\n[cache](https://docs.rs/arc-swap/latest/arc_swap/cache/index.html \"mod arc_swap::cache\")\n    Caching handle into the [ArcSwapAny](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\").\n\n[docs](https://docs.rs/arc-swap/latest/arc_swap/docs/index.html \"mod arc_swap::docs\")\n    Additional documentation.\n\n[strategy](https://docs.rs/arc-swap/latest/arc_swap/strategy/index.html \"mod arc_swap::strategy\")\n    Strategies for protecting the reference counts.\n## Structs[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#structs)\n\n[ArcSwapAny](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\")\n    An atomic storage for a reference counted smart pointer like [`Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html) or `Option<Arc>`.\n\n[Guard](https://docs.rs/arc-swap/latest/arc_swap/struct.Guard.html \"struct arc_swap::Guard\")\n    A temporary storage of the pointer.\n## Traits[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#traits)\n\n[AsRaw](https://docs.rs/arc-swap/latest/arc_swap/trait.AsRaw.html \"trait arc_swap::AsRaw\")\n    A trait describing things that can be turned into a raw pointer.\n\n[RefCnt](https://docs.rs/arc-swap/latest/arc_swap/trait.RefCnt.html \"trait arc_swap::RefCnt\")\n    A trait describing smart reference counted pointers.\n## Type Aliases[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#types)\n\n[ArcSwap](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\")\n    An atomic storage for `Arc`.\n\n[ArcSwapOption](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapOption.html \"type arc_swap::ArcSwapOption\")\n    An atomic storage for `Option<Arc>`.\n\n[ArcSwapWeak](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapWeak.html \"type arc_swap::ArcSwapWeak\")\n    Arc swap for the [Weak](https://doc.rust-lang.org/nightly/alloc/sync/struct.Weak.html \"struct alloc::sync::Weak\") pointer.\n",
              "markdown_with_citations": "[](https://docs.rs/arc-swap/latest/arc_swap/all.html \"show sidebar\")\n# Crate arc_swapCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMaking `Arc`\u27e84\u27e9 itself atomic\nThe `ArcSwap`\u27e85\u27e9 type is a container for an `Arc` that can be changed atomically. Semantically, it is similar to something like `Atomic<Arc<T>>` (if there was such a thing) or `RwLock<Arc<T>>` (but without the need for the locking). It is optimized for read-mostly scenarios, with consistent performance characteristics.\n## \u00a7\u27e86\u27e9Motivation\nThere are many situations in which one might want to have some data structure that is often read and seldom updated. Some examples might be a configuration of a service, routing tables, snapshot of some data that is renewed every few minutes, etc.\nIn all these cases one needs:\n  * Being able to read the current value of the data structure, fast, often and concurrently from many threads.\n  * Using the same version of the data structure over longer period of time \u2012 a query should be answered by a consistent version of data, a packet should be routed either by an old or by a new version of the routing table but not by a combination, etc.\n  * Perform an update without disrupting the processing.\n\n\nThe first idea would be to use `RwLock<T>`\u27e87\u27e9 and keep a read-lock for the whole time of processing. Update would, however, pause all processing until done.\nBetter option would be to have `RwLock<Arc<T>>`\u27e87\u27e9. Then one would lock, clone the Arc\u27e84\u27e9 and unlock. This suffers from CPU-level contention (on the lock and on the reference count of the Arc\u27e84\u27e9) which makes it relatively slow. Depending on the implementation, an update may be blocked for arbitrary long time by a steady inflow of readers.\n```\nstatic ROUTING_TABLE: Lazy<RwLock<Arc<RoutingTable>>> = Lazy::new(|| {\n  RwLock::new(Arc::new(RoutingTable))\n});\nfn process_packet(packet: Packet) {\n  let table = Arc::clone(&ROUTING_TABLE.read().unwrap());\n  table.route(packet);\n}\n```\n\nThe ArcSwap\u27e85\u27e9 can be used instead, which solves the above problems and has better performance characteristics than the RwLock\u27e87\u27e9, both in contended and non-contended scenarios.\n```\nstatic ROUTING_TABLE: Lazy<ArcSwap<RoutingTable>> = Lazy::new(|| {\n  ArcSwap::from_pointee(RoutingTable)\n});\nfn process_packet(packet: Packet) {\n  let table = ROUTING_TABLE.load();\n  table.route(packet);\n}\n```\n\n## \u00a7\u27e88\u27e9Crate contents\nAt the heart of the crate there are `ArcSwap`\u27e85\u27e9 and `ArcSwapOption`\u27e89\u27e9 types, containers for an `Arc`\u27e84\u27e9 and `Option<Arc>`\u27e810\u27e9.\nTechnically, these are type aliases for partial instantiations of the `ArcSwapAny`\u27e811\u27e9 type. The `ArcSwapAny`\u27e811\u27e9 is more flexible and allows tweaking of many things (can store other things than `Arc`\u27e84\u27e9s, can configure the locking `Strategy`\u27e812\u27e9). For details about the tweaking, see the documentation of the `strategy`\u27e813\u27e9 module and the `RefCnt`\u27e814\u27e9 trait.\nThe `cache`\u27e815\u27e9 module provides means for speeding up read access of the contained data at the cost of delayed reclamation.\nThe `access`\u27e816\u27e9 module can be used to do projections into the contained data to separate parts of application from each other (eg. giving a component access to only its own part of configuration while still having it reloaded as a whole).\n## \u00a7\u27e817\u27e9Before using\nThe data structure is a bit niche. Before using, please check the limitations and common pitfalls\u27e818\u27e9 and the performance characteristics\u27e819\u27e9, including choosing the right read operation\u27e820\u27e9.\nYou can also get an inspiration about what\u2019s possible in the common patterns\u27e821\u27e9 section.\n## \u00a7\u27e822\u27e9Examples\n```\nuse std::sync::Arc;\nuse arc_swap::ArcSwap;\nuse crossbeam_utils::thread;\nlet config = ArcSwap::from(Arc::new(String::default()));\nthread::scope(|scope| {\n  scope.spawn(|_| {\n    let new_conf = Arc::new(\"New configuration\".to_owned());\n    config.store(new_conf);\n  });\n  for _ in 0..10 {\n    scope.spawn(|_| {\n      loop {\n        let cfg = config.load();\n        if !cfg.is_empty() {\n          assert_eq!(**cfg, \"New configuration\");\n          return;\n        }\n      }\n    });\n  }\n}).unwrap();\n```\n\n## Re-exports\u00a7\u27e823\u27e9\n\n`pub use crate::cache::Cache[](https://docs.rs/arc-swap/latest/arc_swap/cache/struct.Cache.html \"struct arc_swap::cache::Cache\");`\n\n\n`pub use crate::strategy::DefaultStrategy[](https://docs.rs/arc-swap/latest/arc_swap/strategy/type.DefaultStrategy.html \"type arc_swap::strategy::DefaultStrategy\");`\n\n## Modules\u00a7\u27e824\u27e9\n\naccess\u27e816\u27e9\n    Abstracting over accessing parts of stored value.\n\ncache\u27e815\u27e9\n    Caching handle into the ArcSwapAny\u27e811\u27e9.\n\ndocs\u27e825\u27e9\n    Additional documentation.\n\nstrategy\u27e813\u27e9\n    Strategies for protecting the reference counts.\n## Structs\u00a7\u27e826\u27e9\n\nArcSwapAny\u27e811\u27e9\n    An atomic storage for a reference counted smart pointer like `Arc`\u27e827\u27e9 or `Option<Arc>`.\n\nGuard\u27e828\u27e9\n    A temporary storage of the pointer.\n## Traits\u00a7\u27e829\u27e9\n\nAsRaw\u27e830\u27e9\n    A trait describing things that can be turned into a raw pointer.\n\nRefCnt\u27e814\u27e9\n    A trait describing smart reference counted pointers.\n## Type Aliases\u00a7\u27e831\u27e9\n\nArcSwap\u27e85\u27e9\n    An atomic storage for `Arc`.\n\nArcSwapOption\u27e89\u27e9\n    An atomic storage for `Option<Arc>`.\n\nArcSwapWeak\u27e832\u27e9\n    Arc swap for the Weak\u27e833\u27e9 pointer.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/arc-swap/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/arc-swap/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/arc-swap/latest/src/arc_swap/lib.rs.html#1-1317: Source\n\u27e84\u27e9 https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html: struct alloc::sync::Arc - `Arc`\n\u27e85\u27e9 https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html: type arc_swap::ArcSwap - `ArcSwap`\n\u27e86\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#motivation: \u00a7\n\u27e87\u27e9 https://doc.rust-lang.org/std/sync/struct.RwLock.html: `RwLock<T>`\n\u27e88\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#crate-contents: \u00a7\n\u27e89\u27e9 https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapOption.html: type arc_swap::ArcSwapOption - `ArcSwapOption`\n\u27e810\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option<Arc>`\n\u27e811\u27e9 https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html: struct arc_swap::ArcSwapAny - `ArcSwapAny`\n\u27e812\u27e9 https://docs.rs/arc-swap/latest/arc_swap/strategy/trait.Strategy.html: trait arc_swap::strategy::Strategy - `Strategy`\n\u27e813\u27e9 https://docs.rs/arc-swap/latest/arc_swap/strategy/index.html: mod arc_swap::strategy - `strategy`\n\u27e814\u27e9 https://docs.rs/arc-swap/latest/arc_swap/trait.RefCnt.html: trait arc_swap::RefCnt - `RefCnt`\n\u27e815\u27e9 https://docs.rs/arc-swap/latest/arc_swap/cache/index.html: mod arc_swap::cache - `cache`\n\u27e816\u27e9 https://docs.rs/arc-swap/latest/arc_swap/access/index.html: mod arc_swap::access - `access`\n\u27e817\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#before-using: \u00a7\n\u27e818\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/limitations/index.html: mod arc_swap::docs::limitations - limitations and common pitfalls\n\u27e819\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html: mod arc_swap::docs::performance - performance characteristics\n\u27e820\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html#read-operations: mod arc_swap::docs::performance - read operation\n\u27e821\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/patterns/index.html: mod arc_swap::docs::patterns - common patterns\n\u27e822\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#examples: \u00a7\n\u27e823\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#reexports: \u00a7\n\u27e824\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#modules: \u00a7\n\u27e825\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/index.html: mod arc_swap::docs - docs\n\u27e826\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#structs: \u00a7\n\u27e827\u27e9 https://doc.rust-lang.org/std/sync/struct.Arc.html: `Arc`\n\u27e828\u27e9 https://docs.rs/arc-swap/latest/arc_swap/struct.Guard.html: struct arc_swap::Guard - Guard\n\u27e829\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#traits: \u00a7\n\u27e830\u27e9 https://docs.rs/arc-swap/latest/arc_swap/trait.AsRaw.html: trait arc_swap::AsRaw - AsRaw\n\u27e831\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#types: \u00a7\n\u27e832\u27e9 https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapWeak.html: type arc_swap::ArcSwapWeak - ArcSwapWeak\n\u27e833\u27e9 https://doc.rust-lang.org/nightly/alloc/sync/struct.Weak.html: struct alloc::sync::Weak - Weak\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8989,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116822.258748"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/arc-swap",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [33 releases](https://lib.rs/crates/arc-swap/versions) (11 stable)\n1.7.1 |  Mar 23, 2024   \n---|---  \n1.6.0 |  Dec 31, 2022   \n1.5.1 |  Jul 30, 2022   \n1.5.0 |  Nov 15, 2021   \n0.3.0 |  Jul 23, 2018   \n#**2** in [Memory management](https://lib.rs/memory-management \"Crates to help with allocation, memory mapping, garbage collection, reference counting, or interfaces to foreign memory managers.\")\nDownload history 1674661/week @ 2025-03-05 1545308/week @ 2025-03-12 2175357/week @ 2025-03-19 1470029/week @ 2025-03-26 1493593/week @ 2025-04-02 1459436/week @ 2025-04-09 1204117/week @ 2025-04-16 1230401/week @ 2025-04-23 1185250/week @ 2025-04-30 1288764/week @ 2025-05-07 1267010/week @ 2025-05-14 1169791/week @ 2025-05-21 1283810/week @ 2025-05-28 1315659/week @ 2025-06-04 1479096/week @ 2025-06-11 1447224/week @ 2025-06-18\n**5,757,572** downloads per month Used in [**3,171** crates (356 directly)](https://lib.rs/crates/arc-swap/rev)\n**MIT/Apache**\n185KB  2K  SLoC\n# ArcSwap\n[![Actions Status](https://img.gs/czjpqfbdkz/full/https://github.com/vorner/arc-swap/workflows/test/badge.svg)](https://github.com/vorner/arc-swap/actions) [![codecov](https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/vorner/arc-swap/branch/master/graph/badge.svg?token=3KA3R2D9fV)](https://codecov.io/gh/vorner/arc-swap) [![docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/arc-swap/badge.svg)](https://docs.rs/arc-swap)\nThis provides something similar to what ```RwLock`<`Arc`<`T`>``>```` is or what ```Atomic`<`Arc`<`T`>``>```` would be if it existed, optimized for read-mostly write-seldom scenarios, with consistent performance characteristics.\nRead [the documentation](https://docs.rs/arc-swap) before using.\n## Rust version policy\nThe 1. version will build on any edition 2018 capable compiler. This does not include:\n  * Tests. Tests build and run on recent compilers, mostly because of dependencies.\n  * Additional feature flags. Most feature flags are guaranteed to build since the version they are introduced. Experimental features are without any guarantees.\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/vorner/arc-swap/blob/ec5291f4206561f8ecb0f719e61d791cee8f060f/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/vorner/arc-swap/blob/ec5291f4206561f8ecb0f719e61d791cee8f060f/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n  * [ optional ](https://lib.rs/crates/arc-swap/features#feature-serde \"serde is optional feature\") [serde](https://lib.rs/crates/serde \"1\")[+rc](https://lib.rs/crates/serde/features#feature-rc)\n\n\n  * dev  [adaptive-barrier](https://lib.rs/crates/adaptive-barrier \"~1\")\n  * dev  [criterion](https://lib.rs/crates/criterion \"outdated\") 0.5.0\n  * dev  [crossbeam-utils](https://lib.rs/crates/crossbeam-utils \"~0.8\")\n  * dev  [itertools](https://lib.rs/crates/itertools \"obsolete\") 0.12\n  * dev  [num_cpus](https://lib.rs/crates/num_cpus \"~1\")\n  * dev  [once_cell](https://lib.rs/crates/once_cell \"~1\")\n  * dev  [parking_lot](https://lib.rs/crates/parking_lot \"~0.12\")\n  * dev  [proptest](https://lib.rs/crates/proptest \"1\")\n  * dev  [serde_derive](https://lib.rs/crates/serde_derive \"1.0.130\")\n  * dev  [serde_test](https://lib.rs/crates/serde_test \"1.0.130\")\n\n\n#### [Other features](https://lib.rs/crates/arc-swap/features)\n  * [experimental-strategies](https://lib.rs/crates/arc-swap/features#feature-experimental-strategies)\n  * [experimental-thread-local](https://lib.rs/crates/arc-swap/features#feature-experimental-thread-local)\n  * [internal-test-strategies](https://lib.rs/crates/arc-swap/features#feature-internal-test-strategies)\n  * [weak](https://lib.rs/crates/arc-swap/features#feature-weak)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  33 releases\u27e81\u27e9 (11 stable)\n1.7.1 |  Mar 23, 2024   \n---|---  \n1.6.0 |  Dec 31, 2022   \n1.5.1 |  Jul 30, 2022   \n1.5.0 |  Nov 15, 2021   \n0.3.0 |  Jul 23, 2018   \n#**2** in Memory management\u27e82\u27e9\nDownload history 1674661/week @ 2025-03-05 1545308/week @ 2025-03-12 2175357/week @ 2025-03-19 1470029/week @ 2025-03-26 1493593/week @ 2025-04-02 1459436/week @ 2025-04-09 1204117/week @ 2025-04-16 1230401/week @ 2025-04-23 1185250/week @ 2025-04-30 1288764/week @ 2025-05-07 1267010/week @ 2025-05-14 1169791/week @ 2025-05-21 1283810/week @ 2025-05-28 1315659/week @ 2025-06-04 1479096/week @ 2025-06-11 1447224/week @ 2025-06-18\n**5,757,572** downloads per month Used in **3,171** crates (356 directly)\u27e83\u27e9\n**MIT/Apache**\n185KB  2K  SLoC\n# ArcSwap\n![Actions Status\u27e84\u27e9](https://github.com/vorner/arc-swap/actions) ![codecov\u27e85\u27e9](https://codecov.io/gh/vorner/arc-swap) ![docs\u27e86\u27e9](https://docs.rs/arc-swap)\nThis provides something similar to what ```RwLock`<`Arc`<`T`>``>```` is or what ```Atomic`<`Arc`<`T`>``>```` would be if it existed, optimized for read-mostly write-seldom scenarios, with consistent performance characteristics.\nRead the documentation\u27e87\u27e9 before using.\n## Rust version policy\nThe 1. version will build on any edition 2018 capable compiler. This does not include:\n  * Tests. Tests build and run on recent compilers, mostly because of dependencies.\n  * Additional feature flags. Most feature flags are guaranteed to build since the version they are introduced. Experimental features are without any guarantees.\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e88\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e89\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n  *  optional \u27e810\u27e9 serde\u27e811\u27e9+rc\u27e812\u27e9\n\n\n  * dev  adaptive-barrier\u27e813\u27e9\n  * dev  criterion\u27e814\u27e9 0.5.0\n  * dev  crossbeam-utils\u27e815\u27e9\n  * dev  itertools\u27e816\u27e9 0.12\n  * dev  num_cpus\u27e817\u27e9\n  * dev  once_cell\u27e818\u27e9\n  * dev  parking_lot\u27e819\u27e9\n  * dev  proptest\u27e820\u27e9\n  * dev  serde_derive\u27e821\u27e9\n  * dev  serde_test\u27e822\u27e9\n\n\n#### Other features\u27e823\u27e9\n  * experimental-strategies\u27e824\u27e9\n  * experimental-thread-local\u27e825\u27e9\n  * internal-test-strategies\u27e826\u27e9\n  * weak\u27e827\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/arc-swap/versions: 33 releases\n\u27e82\u27e9 https://lib.rs/memory-management: Crates to help with allocation, memory mapping, garbage collection, reference counting, or interfaces to foreign memory managers. - Memory management\n\u27e83\u27e9 https://lib.rs/crates/arc-swap/rev: **3,171** crates (356 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/vorner/arc-swap/workflows/test/badge.svg: ![Actions Status\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/vorner/arc-swap/branch/master/graph/badge.svg?token=3KA3R2D9fV: ![codecov\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/arc-swap/badge.svg: ![docs\n\u27e87\u27e9 https://docs.rs/arc-swap: the documentation\n\u27e88\u27e9 https://github.com/vorner/arc-swap/blob/ec5291f4206561f8ecb0f719e61d791cee8f060f/LICENSE-APACHE: LICENSE-APACHE\n\u27e89\u27e9 https://github.com/vorner/arc-swap/blob/ec5291f4206561f8ecb0f719e61d791cee8f060f/LICENSE-MIT: LICENSE-MIT\n\u27e810\u27e9 https://lib.rs/crates/arc-swap/features#feature-serde: serde is optional feature -  optional \n\u27e811\u27e9 https://lib.rs/crates/serde: 1 - serde\n\u27e812\u27e9 https://lib.rs/crates/serde/features#feature-rc: +rc\n\u27e813\u27e9 https://lib.rs/crates/adaptive-barrier: ~1 - adaptive-barrier\n\u27e814\u27e9 https://lib.rs/crates/criterion: outdated - criterion\n\u27e815\u27e9 https://lib.rs/crates/crossbeam-utils: ~0.8 - crossbeam-utils\n\u27e816\u27e9 https://lib.rs/crates/itertools: obsolete - itertools\n\u27e817\u27e9 https://lib.rs/crates/num_cpus: ~1 - num_cpus\n\u27e818\u27e9 https://lib.rs/crates/once_cell: ~1 - once_cell\n\u27e819\u27e9 https://lib.rs/crates/parking_lot: ~0.12 - parking_lot\n\u27e820\u27e9 https://lib.rs/crates/proptest: 1 - proptest\n\u27e821\u27e9 https://lib.rs/crates/serde_derive: 1.0.130 - serde_derive\n\u27e822\u27e9 https://lib.rs/crates/serde_test: 1.0.130 - serde_test\n\u27e823\u27e9 https://lib.rs/crates/arc-swap/features: Other features\n\u27e824\u27e9 https://lib.rs/crates/arc-swap/features#feature-experimental-strategies: experimental-strategies\n\u27e825\u27e9 https://lib.rs/crates/arc-swap/features#feature-experimental-thread-local: experimental-thread-local\n\u27e826\u27e9 https://lib.rs/crates/arc-swap/features#feature-internal-test-strategies: internal-test-strategies\n\u27e827\u27e9 https://lib.rs/crates/arc-swap/features#feature-weak: weak\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4099,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116822.6285115"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpr8as_ypd/arc-swap-1.7.1#arc-swap@1.7.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arc_swap",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\target\\debug\\deps\\libarc_swap-9ba8593190d9cf20.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpr8as_ypd/arc-swap-1.7.1#arc-swap@1.7.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arc_swap",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\as_raw.rs:39:6\n   |\n39 | impl<'a, T: RefCnt> Sealed for &'a T {}\n   |      ^^                         ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n39 - impl<'a, T: RefCnt> Sealed for &'a T {}\n39 + impl<T: RefCnt> Sealed for &T {}\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1088,
                        "byte_start": 1084,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\as_raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: RefCnt> Sealed for &'a T {}"
                          }
                        ]
                      },
                      {
                        "byte_end": 1114,
                        "byte_start": 1111,
                        "column_end": 36,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\as_raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 33,
                            "text": "impl<'a, T: RefCnt> Sealed for &'a T {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 1086,
                    "byte_start": 1084,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\as_raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: RefCnt> Sealed for &'a T {}"
                      }
                    ]
                  },
                  {
                    "byte_end": 1113,
                    "byte_start": 1111,
                    "column_end": 35,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\as_raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 33,
                        "text": "impl<'a, T: RefCnt> Sealed for &'a T {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpr8as_ypd/arc-swap-1.7.1#arc-swap@1.7.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arc_swap",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\as_raw.rs:40:6\n   |\n40 | impl<'a, T: RefCnt> AsRaw<T::Base> for &'a T {\n   |      ^^                                 ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n40 - impl<'a, T: RefCnt> AsRaw<T::Base> for &'a T {\n40 + impl<T: RefCnt> AsRaw<T::Base> for &T {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1128,
                        "byte_start": 1124,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\as_raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 40,
                        "line_start": 40,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: RefCnt> AsRaw<T::Base> for &'a T {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1162,
                        "byte_start": 1159,
                        "column_end": 44,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\as_raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 40,
                        "line_start": 40,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 41,
                            "text": "impl<'a, T: RefCnt> AsRaw<T::Base> for &'a T {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 1126,
                    "byte_start": 1124,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\as_raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: RefCnt> AsRaw<T::Base> for &'a T {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1161,
                    "byte_start": 1159,
                    "column_end": 43,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\as_raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 41,
                        "text": "impl<'a, T: RefCnt> AsRaw<T::Base> for &'a T {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpr8as_ypd/arc-swap-1.7.1#arc-swap@1.7.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arc_swap",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\as_raw.rs:46:6\n   |\n46 | impl<'a, T: RefCnt> Sealed for &'a Guard<T> {}\n   |      ^^                         ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n46 - impl<'a, T: RefCnt> Sealed for &'a Guard<T> {}\n46 + impl<T: RefCnt> Sealed for &Guard<T> {}\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1247,
                        "byte_start": 1243,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\as_raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: RefCnt> Sealed for &'a Guard<T> {}"
                          }
                        ]
                      },
                      {
                        "byte_end": 1273,
                        "byte_start": 1270,
                        "column_end": 36,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\as_raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 33,
                            "text": "impl<'a, T: RefCnt> Sealed for &'a Guard<T> {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 1245,
                    "byte_start": 1243,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\as_raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 46,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: RefCnt> Sealed for &'a Guard<T> {}"
                      }
                    ]
                  },
                  {
                    "byte_end": 1272,
                    "byte_start": 1270,
                    "column_end": 35,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\as_raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 46,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 33,
                        "text": "impl<'a, T: RefCnt> Sealed for &'a Guard<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpr8as_ypd/arc-swap-1.7.1#arc-swap@1.7.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arc_swap",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\as_raw.rs:47:6\n   |\n47 | impl<'a, T: RefCnt> AsRaw<T::Base> for &'a Guard<T> {\n   |      ^^                                 ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n47 - impl<'a, T: RefCnt> AsRaw<T::Base> for &'a Guard<T> {\n47 + impl<T: RefCnt> AsRaw<T::Base> for &Guard<T> {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1294,
                        "byte_start": 1290,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\as_raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: RefCnt> AsRaw<T::Base> for &'a Guard<T> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1328,
                        "byte_start": 1325,
                        "column_end": 44,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\as_raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 41,
                            "text": "impl<'a, T: RefCnt> AsRaw<T::Base> for &'a Guard<T> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 1292,
                    "byte_start": 1290,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\as_raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: RefCnt> AsRaw<T::Base> for &'a Guard<T> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1327,
                    "byte_start": 1325,
                    "column_end": 43,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\as_raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 41,
                        "text": "impl<'a, T: RefCnt> AsRaw<T::Base> for &'a Guard<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpr8as_ypd/arc-swap-1.7.1#arc-swap@1.7.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arc_swap",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpr8as_ypd\\arc-swap-1.7.1\\target\\debug\\deps\\libarc_swap-96b01ae2be3ddc89.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 116
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "arc-swap",
          "version": "1.7.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/arc-swap/latest/arc_swap/all.html \"show sidebar\")\n# Crate arc_swapCopy item path\n[Settings](https://docs.rs/arc-swap/latest/settings.html)\n[Help](https://docs.rs/arc-swap/latest/help.html)\nSummary[Source](https://docs.rs/arc-swap/latest/src/arc_swap/lib.rs.html#1-1317)\nExpand description\nMaking [`Arc`](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\") itself atomic\nThe [`ArcSwap`](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\") type is a container for an `Arc` that can be changed atomically. Semantically, it is similar to something like `Atomic<Arc<T>>` (if there was such a thing) or `RwLock<Arc<T>>` (but without the need for the locking). It is optimized for read-mostly scenarios, with consistent performance characteristics.\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#motivation)Motivation\nThere are many situations in which one might want to have some data structure that is often read and seldom updated. Some examples might be a configuration of a service, routing tables, snapshot of some data that is renewed every few minutes, etc.\nIn all these cases one needs:\n  * Being able to read the current value of the data structure, fast, often and concurrently from many threads.\n  * Using the same version of the data structure over longer period of time \u2012 a query should be answered by a consistent version of data, a packet should be routed either by an old or by a new version of the routing table but not by a combination, etc.\n  * Perform an update without disrupting the processing.\n\n\nThe first idea would be to use [`RwLock<T>`](https://doc.rust-lang.org/std/sync/struct.RwLock.html) and keep a read-lock for the whole time of processing. Update would, however, pause all processing until done.\nBetter option would be to have [`RwLock<Arc<T>>`](https://doc.rust-lang.org/std/sync/struct.RwLock.html). Then one would lock, clone the [Arc](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\") and unlock. This suffers from CPU-level contention (on the lock and on the reference count of the [Arc](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\")) which makes it relatively slow. Depending on the implementation, an update may be blocked for arbitrary long time by a steady inflow of readers.\n```\nstatic ROUTING_TABLE: Lazy<RwLock<Arc<RoutingTable>>> = Lazy::new(|| {\n  RwLock::new(Arc::new(RoutingTable))\n});\nfn process_packet(packet: Packet) {\n  let table = Arc::clone(&ROUTING_TABLE.read().unwrap());\n  table.route(packet);\n}\n```\n\nThe [ArcSwap](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\") can be used instead, which solves the above problems and has better performance characteristics than the [RwLock](https://doc.rust-lang.org/std/sync/struct.RwLock.html), both in contended and non-contended scenarios.\n```\nstatic ROUTING_TABLE: Lazy<ArcSwap<RoutingTable>> = Lazy::new(|| {\n  ArcSwap::from_pointee(RoutingTable)\n});\nfn process_packet(packet: Packet) {\n  let table = ROUTING_TABLE.load();\n  table.route(packet);\n}\n```\n\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#crate-contents)Crate contents\nAt the heart of the crate there are [`ArcSwap`](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\") and [`ArcSwapOption`](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapOption.html \"type arc_swap::ArcSwapOption\") types, containers for an [`Arc`](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\") and [`Option<Arc>`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\nTechnically, these are type aliases for partial instantiations of the [`ArcSwapAny`](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\") type. The [`ArcSwapAny`](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\") is more flexible and allows tweaking of many things (can store other things than [`Arc`](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\")s, can configure the locking [`Strategy`](https://docs.rs/arc-swap/latest/arc_swap/strategy/trait.Strategy.html \"trait arc_swap::strategy::Strategy\")). For details about the tweaking, see the documentation of the [`strategy`](https://docs.rs/arc-swap/latest/arc_swap/strategy/index.html \"mod arc_swap::strategy\") module and the [`RefCnt`](https://docs.rs/arc-swap/latest/arc_swap/trait.RefCnt.html \"trait arc_swap::RefCnt\") trait.\nThe [`cache`](https://docs.rs/arc-swap/latest/arc_swap/cache/index.html \"mod arc_swap::cache\") module provides means for speeding up read access of the contained data at the cost of delayed reclamation.\nThe [`access`](https://docs.rs/arc-swap/latest/arc_swap/access/index.html \"mod arc_swap::access\") module can be used to do projections into the contained data to separate parts of application from each other (eg. giving a component access to only its own part of configuration while still having it reloaded as a whole).\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#before-using)Before using\nThe data structure is a bit niche. Before using, please check the [limitations and common pitfalls](https://docs.rs/arc-swap/latest/arc_swap/docs/limitations/index.html \"mod arc_swap::docs::limitations\") and the [performance characteristics](https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html \"mod arc_swap::docs::performance\"), including choosing the right [read operation](https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html#read-operations \"mod arc_swap::docs::performance\").\nYou can also get an inspiration about what\u2019s possible in the [common patterns](https://docs.rs/arc-swap/latest/arc_swap/docs/patterns/index.html \"mod arc_swap::docs::patterns\") section.\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#examples)Examples\n```\nuse std::sync::Arc;\nuse arc_swap::ArcSwap;\nuse crossbeam_utils::thread;\nlet config = ArcSwap::from(Arc::new(String::default()));\nthread::scope(|scope| {\n  scope.spawn(|_| {\n    let new_conf = Arc::new(\"New configuration\".to_owned());\n    config.store(new_conf);\n  });\n  for _ in 0..10 {\n    scope.spawn(|_| {\n      loop {\n        let cfg = config.load();\n        if !cfg.is_empty() {\n          assert_eq!(**cfg, \"New configuration\");\n          return;\n        }\n      }\n    });\n  }\n}).unwrap();\n```\n\n## Re-exports[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#reexports)\n\n`pub use crate::cache::Cache[](https://docs.rs/arc-swap/latest/arc_swap/cache/struct.Cache.html \"struct arc_swap::cache::Cache\");`\n\n\n`pub use crate::strategy::DefaultStrategy[](https://docs.rs/arc-swap/latest/arc_swap/strategy/type.DefaultStrategy.html \"type arc_swap::strategy::DefaultStrategy\");`\n\n## Modules[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#modules)\n\n[access](https://docs.rs/arc-swap/latest/arc_swap/access/index.html \"mod arc_swap::access\")\n    Abstracting over accessing parts of stored value.\n\n[cache](https://docs.rs/arc-swap/latest/arc_swap/cache/index.html \"mod arc_swap::cache\")\n    Caching handle into the [ArcSwapAny](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\").\n\n[docs](https://docs.rs/arc-swap/latest/arc_swap/docs/index.html \"mod arc_swap::docs\")\n    Additional documentation.\n\n[strategy](https://docs.rs/arc-swap/latest/arc_swap/strategy/index.html \"mod arc_swap::strategy\")\n    Strategies for protecting the reference counts.\n## Structs[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#structs)\n\n[ArcSwapAny](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\")\n    An atomic storage for a reference counted smart pointer like [`Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html) or `Option<Arc>`.\n\n[Guard](https://docs.rs/arc-swap/latest/arc_swap/struct.Guard.html \"struct arc_swap::Guard\")\n    A temporary storage of the pointer.\n## Traits[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#traits)\n\n[AsRaw](https://docs.rs/arc-swap/latest/arc_swap/trait.AsRaw.html \"trait arc_swap::AsRaw\")\n    A trait describing things that can be turned into a raw pointer.\n\n[RefCnt](https://docs.rs/arc-swap/latest/arc_swap/trait.RefCnt.html \"trait arc_swap::RefCnt\")\n    A trait describing smart reference counted pointers.\n## Type Aliases[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#types)\n\n[ArcSwap](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\")\n    An atomic storage for `Arc`.\n\n[ArcSwapOption](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapOption.html \"type arc_swap::ArcSwapOption\")\n    An atomic storage for `Option<Arc>`.\n\n[ArcSwapWeak](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapWeak.html \"type arc_swap::ArcSwapWeak\")\n    Arc swap for the [Weak](https://doc.rust-lang.org/nightly/alloc/sync/struct.Weak.html \"struct alloc::sync::Weak\") pointer.\n",
            "markdown_with_citations": "[](https://docs.rs/arc-swap/latest/arc_swap/all.html \"show sidebar\")\n# Crate arc_swapCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMaking `Arc`\u27e84\u27e9 itself atomic\nThe `ArcSwap`\u27e85\u27e9 type is a container for an `Arc` that can be changed atomically. Semantically, it is similar to something like `Atomic<Arc<T>>` (if there was such a thing) or `RwLock<Arc<T>>` (but without the need for the locking). It is optimized for read-mostly scenarios, with consistent performance characteristics.\n## \u00a7\u27e86\u27e9Motivation\nThere are many situations in which one might want to have some data structure that is often read and seldom updated. Some examples might be a configuration of a service, routing tables, snapshot of some data that is renewed every few minutes, etc.\nIn all these cases one needs:\n  * Being able to read the current value of the data structure, fast, often and concurrently from many threads.\n  * Using the same version of the data structure over longer period of time \u2012 a query should be answered by a consistent version of data, a packet should be routed either by an old or by a new version of the routing table but not by a combination, etc.\n  * Perform an update without disrupting the processing.\n\n\nThe first idea would be to use `RwLock<T>`\u27e87\u27e9 and keep a read-lock for the whole time of processing. Update would, however, pause all processing until done.\nBetter option would be to have `RwLock<Arc<T>>`\u27e87\u27e9. Then one would lock, clone the Arc\u27e84\u27e9 and unlock. This suffers from CPU-level contention (on the lock and on the reference count of the Arc\u27e84\u27e9) which makes it relatively slow. Depending on the implementation, an update may be blocked for arbitrary long time by a steady inflow of readers.\n```\nstatic ROUTING_TABLE: Lazy<RwLock<Arc<RoutingTable>>> = Lazy::new(|| {\n  RwLock::new(Arc::new(RoutingTable))\n});\nfn process_packet(packet: Packet) {\n  let table = Arc::clone(&ROUTING_TABLE.read().unwrap());\n  table.route(packet);\n}\n```\n\nThe ArcSwap\u27e85\u27e9 can be used instead, which solves the above problems and has better performance characteristics than the RwLock\u27e87\u27e9, both in contended and non-contended scenarios.\n```\nstatic ROUTING_TABLE: Lazy<ArcSwap<RoutingTable>> = Lazy::new(|| {\n  ArcSwap::from_pointee(RoutingTable)\n});\nfn process_packet(packet: Packet) {\n  let table = ROUTING_TABLE.load();\n  table.route(packet);\n}\n```\n\n## \u00a7\u27e88\u27e9Crate contents\nAt the heart of the crate there are `ArcSwap`\u27e85\u27e9 and `ArcSwapOption`\u27e89\u27e9 types, containers for an `Arc`\u27e84\u27e9 and `Option<Arc>`\u27e810\u27e9.\nTechnically, these are type aliases for partial instantiations of the `ArcSwapAny`\u27e811\u27e9 type. The `ArcSwapAny`\u27e811\u27e9 is more flexible and allows tweaking of many things (can store other things than `Arc`\u27e84\u27e9s, can configure the locking `Strategy`\u27e812\u27e9). For details about the tweaking, see the documentation of the `strategy`\u27e813\u27e9 module and the `RefCnt`\u27e814\u27e9 trait.\nThe `cache`\u27e815\u27e9 module provides means for speeding up read access of the contained data at the cost of delayed reclamation.\nThe `access`\u27e816\u27e9 module can be used to do projections into the contained data to separate parts of application from each other (eg. giving a component access to only its own part of configuration while still having it reloaded as a whole).\n## \u00a7\u27e817\u27e9Before using\nThe data structure is a bit niche. Before using, please check the limitations and common pitfalls\u27e818\u27e9 and the performance characteristics\u27e819\u27e9, including choosing the right read operation\u27e820\u27e9.\nYou can also get an inspiration about what\u2019s possible in the common patterns\u27e821\u27e9 section.\n## \u00a7\u27e822\u27e9Examples\n```\nuse std::sync::Arc;\nuse arc_swap::ArcSwap;\nuse crossbeam_utils::thread;\nlet config = ArcSwap::from(Arc::new(String::default()));\nthread::scope(|scope| {\n  scope.spawn(|_| {\n    let new_conf = Arc::new(\"New configuration\".to_owned());\n    config.store(new_conf);\n  });\n  for _ in 0..10 {\n    scope.spawn(|_| {\n      loop {\n        let cfg = config.load();\n        if !cfg.is_empty() {\n          assert_eq!(**cfg, \"New configuration\");\n          return;\n        }\n      }\n    });\n  }\n}).unwrap();\n```\n\n## Re-exports\u00a7\u27e823\u27e9\n\n`pub use crate::cache::Cache[](https://docs.rs/arc-swap/latest/arc_swap/cache/struct.Cache.html \"struct arc_swap::cache::Cache\");`\n\n\n`pub use crate::strategy::DefaultStrategy[](https://docs.rs/arc-swap/latest/arc_swap/strategy/type.DefaultStrategy.html \"type arc_swap::strategy::DefaultStrategy\");`\n\n## Modules\u00a7\u27e824\u27e9\n\naccess\u27e816\u27e9\n    Abstracting over accessing parts of stored value.\n\ncache\u27e815\u27e9\n    Caching handle into the ArcSwapAny\u27e811\u27e9.\n\ndocs\u27e825\u27e9\n    Additional documentation.\n\nstrategy\u27e813\u27e9\n    Strategies for protecting the reference counts.\n## Structs\u00a7\u27e826\u27e9\n\nArcSwapAny\u27e811\u27e9\n    An atomic storage for a reference counted smart pointer like `Arc`\u27e827\u27e9 or `Option<Arc>`.\n\nGuard\u27e828\u27e9\n    A temporary storage of the pointer.\n## Traits\u00a7\u27e829\u27e9\n\nAsRaw\u27e830\u27e9\n    A trait describing things that can be turned into a raw pointer.\n\nRefCnt\u27e814\u27e9\n    A trait describing smart reference counted pointers.\n## Type Aliases\u00a7\u27e831\u27e9\n\nArcSwap\u27e85\u27e9\n    An atomic storage for `Arc`.\n\nArcSwapOption\u27e89\u27e9\n    An atomic storage for `Option<Arc>`.\n\nArcSwapWeak\u27e832\u27e9\n    Arc swap for the Weak\u27e833\u27e9 pointer.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/arc-swap/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/arc-swap/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/arc-swap/latest/src/arc_swap/lib.rs.html#1-1317: Source\n\u27e84\u27e9 https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html: struct alloc::sync::Arc - `Arc`\n\u27e85\u27e9 https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html: type arc_swap::ArcSwap - `ArcSwap`\n\u27e86\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#motivation: \u00a7\n\u27e87\u27e9 https://doc.rust-lang.org/std/sync/struct.RwLock.html: `RwLock<T>`\n\u27e88\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#crate-contents: \u00a7\n\u27e89\u27e9 https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapOption.html: type arc_swap::ArcSwapOption - `ArcSwapOption`\n\u27e810\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option<Arc>`\n\u27e811\u27e9 https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html: struct arc_swap::ArcSwapAny - `ArcSwapAny`\n\u27e812\u27e9 https://docs.rs/arc-swap/latest/arc_swap/strategy/trait.Strategy.html: trait arc_swap::strategy::Strategy - `Strategy`\n\u27e813\u27e9 https://docs.rs/arc-swap/latest/arc_swap/strategy/index.html: mod arc_swap::strategy - `strategy`\n\u27e814\u27e9 https://docs.rs/arc-swap/latest/arc_swap/trait.RefCnt.html: trait arc_swap::RefCnt - `RefCnt`\n\u27e815\u27e9 https://docs.rs/arc-swap/latest/arc_swap/cache/index.html: mod arc_swap::cache - `cache`\n\u27e816\u27e9 https://docs.rs/arc-swap/latest/arc_swap/access/index.html: mod arc_swap::access - `access`\n\u27e817\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#before-using: \u00a7\n\u27e818\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/limitations/index.html: mod arc_swap::docs::limitations - limitations and common pitfalls\n\u27e819\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html: mod arc_swap::docs::performance - performance characteristics\n\u27e820\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html#read-operations: mod arc_swap::docs::performance - read operation\n\u27e821\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/patterns/index.html: mod arc_swap::docs::patterns - common patterns\n\u27e822\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#examples: \u00a7\n\u27e823\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#reexports: \u00a7\n\u27e824\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#modules: \u00a7\n\u27e825\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/index.html: mod arc_swap::docs - docs\n\u27e826\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#structs: \u00a7\n\u27e827\u27e9 https://doc.rust-lang.org/std/sync/struct.Arc.html: `Arc`\n\u27e828\u27e9 https://docs.rs/arc-swap/latest/arc_swap/struct.Guard.html: struct arc_swap::Guard - Guard\n\u27e829\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#traits: \u00a7\n\u27e830\u27e9 https://docs.rs/arc-swap/latest/arc_swap/trait.AsRaw.html: trait arc_swap::AsRaw - AsRaw\n\u27e831\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#types: \u00a7\n\u27e832\u27e9 https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapWeak.html: type arc_swap::ArcSwapWeak - ArcSwapWeak\n\u27e833\u27e9 https://doc.rust-lang.org/nightly/alloc/sync/struct.Weak.html: struct alloc::sync::Weak - Weak\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "arc-swap",
          "version": "1.7.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/arc-swap/latest/arc_swap/all.html \"show sidebar\")\n# Crate arc_swapCopy item path\n[Settings](https://docs.rs/arc-swap/latest/settings.html)\n[Help](https://docs.rs/arc-swap/latest/help.html)\nSummary[Source](https://docs.rs/arc-swap/latest/src/arc_swap/lib.rs.html#1-1317)\nExpand description\nMaking [`Arc`](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\") itself atomic\nThe [`ArcSwap`](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\") type is a container for an `Arc` that can be changed atomically. Semantically, it is similar to something like `Atomic<Arc<T>>` (if there was such a thing) or `RwLock<Arc<T>>` (but without the need for the locking). It is optimized for read-mostly scenarios, with consistent performance characteristics.\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#motivation)Motivation\nThere are many situations in which one might want to have some data structure that is often read and seldom updated. Some examples might be a configuration of a service, routing tables, snapshot of some data that is renewed every few minutes, etc.\nIn all these cases one needs:\n  * Being able to read the current value of the data structure, fast, often and concurrently from many threads.\n  * Using the same version of the data structure over longer period of time \u2012 a query should be answered by a consistent version of data, a packet should be routed either by an old or by a new version of the routing table but not by a combination, etc.\n  * Perform an update without disrupting the processing.\n\n\nThe first idea would be to use [`RwLock<T>`](https://doc.rust-lang.org/std/sync/struct.RwLock.html) and keep a read-lock for the whole time of processing. Update would, however, pause all processing until done.\nBetter option would be to have [`RwLock<Arc<T>>`](https://doc.rust-lang.org/std/sync/struct.RwLock.html). Then one would lock, clone the [Arc](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\") and unlock. This suffers from CPU-level contention (on the lock and on the reference count of the [Arc](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\")) which makes it relatively slow. Depending on the implementation, an update may be blocked for arbitrary long time by a steady inflow of readers.\n```\nstatic ROUTING_TABLE: Lazy<RwLock<Arc<RoutingTable>>> = Lazy::new(|| {\n  RwLock::new(Arc::new(RoutingTable))\n});\nfn process_packet(packet: Packet) {\n  let table = Arc::clone(&ROUTING_TABLE.read().unwrap());\n  table.route(packet);\n}\n```\n\nThe [ArcSwap](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\") can be used instead, which solves the above problems and has better performance characteristics than the [RwLock](https://doc.rust-lang.org/std/sync/struct.RwLock.html), both in contended and non-contended scenarios.\n```\nstatic ROUTING_TABLE: Lazy<ArcSwap<RoutingTable>> = Lazy::new(|| {\n  ArcSwap::from_pointee(RoutingTable)\n});\nfn process_packet(packet: Packet) {\n  let table = ROUTING_TABLE.load();\n  table.route(packet);\n}\n```\n\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#crate-contents)Crate contents\nAt the heart of the crate there are [`ArcSwap`](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\") and [`ArcSwapOption`](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapOption.html \"type arc_swap::ArcSwapOption\") types, containers for an [`Arc`](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\") and [`Option<Arc>`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\nTechnically, these are type aliases for partial instantiations of the [`ArcSwapAny`](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\") type. The [`ArcSwapAny`](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\") is more flexible and allows tweaking of many things (can store other things than [`Arc`](https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html \"struct alloc::sync::Arc\")s, can configure the locking [`Strategy`](https://docs.rs/arc-swap/latest/arc_swap/strategy/trait.Strategy.html \"trait arc_swap::strategy::Strategy\")). For details about the tweaking, see the documentation of the [`strategy`](https://docs.rs/arc-swap/latest/arc_swap/strategy/index.html \"mod arc_swap::strategy\") module and the [`RefCnt`](https://docs.rs/arc-swap/latest/arc_swap/trait.RefCnt.html \"trait arc_swap::RefCnt\") trait.\nThe [`cache`](https://docs.rs/arc-swap/latest/arc_swap/cache/index.html \"mod arc_swap::cache\") module provides means for speeding up read access of the contained data at the cost of delayed reclamation.\nThe [`access`](https://docs.rs/arc-swap/latest/arc_swap/access/index.html \"mod arc_swap::access\") module can be used to do projections into the contained data to separate parts of application from each other (eg. giving a component access to only its own part of configuration while still having it reloaded as a whole).\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#before-using)Before using\nThe data structure is a bit niche. Before using, please check the [limitations and common pitfalls](https://docs.rs/arc-swap/latest/arc_swap/docs/limitations/index.html \"mod arc_swap::docs::limitations\") and the [performance characteristics](https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html \"mod arc_swap::docs::performance\"), including choosing the right [read operation](https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html#read-operations \"mod arc_swap::docs::performance\").\nYou can also get an inspiration about what\u2019s possible in the [common patterns](https://docs.rs/arc-swap/latest/arc_swap/docs/patterns/index.html \"mod arc_swap::docs::patterns\") section.\n## [\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#examples)Examples\n```\nuse std::sync::Arc;\nuse arc_swap::ArcSwap;\nuse crossbeam_utils::thread;\nlet config = ArcSwap::from(Arc::new(String::default()));\nthread::scope(|scope| {\n  scope.spawn(|_| {\n    let new_conf = Arc::new(\"New configuration\".to_owned());\n    config.store(new_conf);\n  });\n  for _ in 0..10 {\n    scope.spawn(|_| {\n      loop {\n        let cfg = config.load();\n        if !cfg.is_empty() {\n          assert_eq!(**cfg, \"New configuration\");\n          return;\n        }\n      }\n    });\n  }\n}).unwrap();\n```\n\n## Re-exports[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#reexports)\n\n`pub use crate::cache::Cache[](https://docs.rs/arc-swap/latest/arc_swap/cache/struct.Cache.html \"struct arc_swap::cache::Cache\");`\n\n\n`pub use crate::strategy::DefaultStrategy[](https://docs.rs/arc-swap/latest/arc_swap/strategy/type.DefaultStrategy.html \"type arc_swap::strategy::DefaultStrategy\");`\n\n## Modules[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#modules)\n\n[access](https://docs.rs/arc-swap/latest/arc_swap/access/index.html \"mod arc_swap::access\")\n    Abstracting over accessing parts of stored value.\n\n[cache](https://docs.rs/arc-swap/latest/arc_swap/cache/index.html \"mod arc_swap::cache\")\n    Caching handle into the [ArcSwapAny](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\").\n\n[docs](https://docs.rs/arc-swap/latest/arc_swap/docs/index.html \"mod arc_swap::docs\")\n    Additional documentation.\n\n[strategy](https://docs.rs/arc-swap/latest/arc_swap/strategy/index.html \"mod arc_swap::strategy\")\n    Strategies for protecting the reference counts.\n## Structs[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#structs)\n\n[ArcSwapAny](https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html \"struct arc_swap::ArcSwapAny\")\n    An atomic storage for a reference counted smart pointer like [`Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html) or `Option<Arc>`.\n\n[Guard](https://docs.rs/arc-swap/latest/arc_swap/struct.Guard.html \"struct arc_swap::Guard\")\n    A temporary storage of the pointer.\n## Traits[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#traits)\n\n[AsRaw](https://docs.rs/arc-swap/latest/arc_swap/trait.AsRaw.html \"trait arc_swap::AsRaw\")\n    A trait describing things that can be turned into a raw pointer.\n\n[RefCnt](https://docs.rs/arc-swap/latest/arc_swap/trait.RefCnt.html \"trait arc_swap::RefCnt\")\n    A trait describing smart reference counted pointers.\n## Type Aliases[\u00a7](https://docs.rs/arc-swap/latest/arc_swap/#types)\n\n[ArcSwap](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html \"type arc_swap::ArcSwap\")\n    An atomic storage for `Arc`.\n\n[ArcSwapOption](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapOption.html \"type arc_swap::ArcSwapOption\")\n    An atomic storage for `Option<Arc>`.\n\n[ArcSwapWeak](https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapWeak.html \"type arc_swap::ArcSwapWeak\")\n    Arc swap for the [Weak](https://doc.rust-lang.org/nightly/alloc/sync/struct.Weak.html \"struct alloc::sync::Weak\") pointer.\n",
            "markdown_with_citations": "[](https://docs.rs/arc-swap/latest/arc_swap/all.html \"show sidebar\")\n# Crate arc_swapCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMaking `Arc`\u27e84\u27e9 itself atomic\nThe `ArcSwap`\u27e85\u27e9 type is a container for an `Arc` that can be changed atomically. Semantically, it is similar to something like `Atomic<Arc<T>>` (if there was such a thing) or `RwLock<Arc<T>>` (but without the need for the locking). It is optimized for read-mostly scenarios, with consistent performance characteristics.\n## \u00a7\u27e86\u27e9Motivation\nThere are many situations in which one might want to have some data structure that is often read and seldom updated. Some examples might be a configuration of a service, routing tables, snapshot of some data that is renewed every few minutes, etc.\nIn all these cases one needs:\n  * Being able to read the current value of the data structure, fast, often and concurrently from many threads.\n  * Using the same version of the data structure over longer period of time \u2012 a query should be answered by a consistent version of data, a packet should be routed either by an old or by a new version of the routing table but not by a combination, etc.\n  * Perform an update without disrupting the processing.\n\n\nThe first idea would be to use `RwLock<T>`\u27e87\u27e9 and keep a read-lock for the whole time of processing. Update would, however, pause all processing until done.\nBetter option would be to have `RwLock<Arc<T>>`\u27e87\u27e9. Then one would lock, clone the Arc\u27e84\u27e9 and unlock. This suffers from CPU-level contention (on the lock and on the reference count of the Arc\u27e84\u27e9) which makes it relatively slow. Depending on the implementation, an update may be blocked for arbitrary long time by a steady inflow of readers.\n```\nstatic ROUTING_TABLE: Lazy<RwLock<Arc<RoutingTable>>> = Lazy::new(|| {\n  RwLock::new(Arc::new(RoutingTable))\n});\nfn process_packet(packet: Packet) {\n  let table = Arc::clone(&ROUTING_TABLE.read().unwrap());\n  table.route(packet);\n}\n```\n\nThe ArcSwap\u27e85\u27e9 can be used instead, which solves the above problems and has better performance characteristics than the RwLock\u27e87\u27e9, both in contended and non-contended scenarios.\n```\nstatic ROUTING_TABLE: Lazy<ArcSwap<RoutingTable>> = Lazy::new(|| {\n  ArcSwap::from_pointee(RoutingTable)\n});\nfn process_packet(packet: Packet) {\n  let table = ROUTING_TABLE.load();\n  table.route(packet);\n}\n```\n\n## \u00a7\u27e88\u27e9Crate contents\nAt the heart of the crate there are `ArcSwap`\u27e85\u27e9 and `ArcSwapOption`\u27e89\u27e9 types, containers for an `Arc`\u27e84\u27e9 and `Option<Arc>`\u27e810\u27e9.\nTechnically, these are type aliases for partial instantiations of the `ArcSwapAny`\u27e811\u27e9 type. The `ArcSwapAny`\u27e811\u27e9 is more flexible and allows tweaking of many things (can store other things than `Arc`\u27e84\u27e9s, can configure the locking `Strategy`\u27e812\u27e9). For details about the tweaking, see the documentation of the `strategy`\u27e813\u27e9 module and the `RefCnt`\u27e814\u27e9 trait.\nThe `cache`\u27e815\u27e9 module provides means for speeding up read access of the contained data at the cost of delayed reclamation.\nThe `access`\u27e816\u27e9 module can be used to do projections into the contained data to separate parts of application from each other (eg. giving a component access to only its own part of configuration while still having it reloaded as a whole).\n## \u00a7\u27e817\u27e9Before using\nThe data structure is a bit niche. Before using, please check the limitations and common pitfalls\u27e818\u27e9 and the performance characteristics\u27e819\u27e9, including choosing the right read operation\u27e820\u27e9.\nYou can also get an inspiration about what\u2019s possible in the common patterns\u27e821\u27e9 section.\n## \u00a7\u27e822\u27e9Examples\n```\nuse std::sync::Arc;\nuse arc_swap::ArcSwap;\nuse crossbeam_utils::thread;\nlet config = ArcSwap::from(Arc::new(String::default()));\nthread::scope(|scope| {\n  scope.spawn(|_| {\n    let new_conf = Arc::new(\"New configuration\".to_owned());\n    config.store(new_conf);\n  });\n  for _ in 0..10 {\n    scope.spawn(|_| {\n      loop {\n        let cfg = config.load();\n        if !cfg.is_empty() {\n          assert_eq!(**cfg, \"New configuration\");\n          return;\n        }\n      }\n    });\n  }\n}).unwrap();\n```\n\n## Re-exports\u00a7\u27e823\u27e9\n\n`pub use crate::cache::Cache[](https://docs.rs/arc-swap/latest/arc_swap/cache/struct.Cache.html \"struct arc_swap::cache::Cache\");`\n\n\n`pub use crate::strategy::DefaultStrategy[](https://docs.rs/arc-swap/latest/arc_swap/strategy/type.DefaultStrategy.html \"type arc_swap::strategy::DefaultStrategy\");`\n\n## Modules\u00a7\u27e824\u27e9\n\naccess\u27e816\u27e9\n    Abstracting over accessing parts of stored value.\n\ncache\u27e815\u27e9\n    Caching handle into the ArcSwapAny\u27e811\u27e9.\n\ndocs\u27e825\u27e9\n    Additional documentation.\n\nstrategy\u27e813\u27e9\n    Strategies for protecting the reference counts.\n## Structs\u00a7\u27e826\u27e9\n\nArcSwapAny\u27e811\u27e9\n    An atomic storage for a reference counted smart pointer like `Arc`\u27e827\u27e9 or `Option<Arc>`.\n\nGuard\u27e828\u27e9\n    A temporary storage of the pointer.\n## Traits\u00a7\u27e829\u27e9\n\nAsRaw\u27e830\u27e9\n    A trait describing things that can be turned into a raw pointer.\n\nRefCnt\u27e814\u27e9\n    A trait describing smart reference counted pointers.\n## Type Aliases\u00a7\u27e831\u27e9\n\nArcSwap\u27e85\u27e9\n    An atomic storage for `Arc`.\n\nArcSwapOption\u27e89\u27e9\n    An atomic storage for `Option<Arc>`.\n\nArcSwapWeak\u27e832\u27e9\n    Arc swap for the Weak\u27e833\u27e9 pointer.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/arc-swap/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/arc-swap/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/arc-swap/latest/src/arc_swap/lib.rs.html#1-1317: Source\n\u27e84\u27e9 https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html: struct alloc::sync::Arc - `Arc`\n\u27e85\u27e9 https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwap.html: type arc_swap::ArcSwap - `ArcSwap`\n\u27e86\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#motivation: \u00a7\n\u27e87\u27e9 https://doc.rust-lang.org/std/sync/struct.RwLock.html: `RwLock<T>`\n\u27e88\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#crate-contents: \u00a7\n\u27e89\u27e9 https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapOption.html: type arc_swap::ArcSwapOption - `ArcSwapOption`\n\u27e810\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option<Arc>`\n\u27e811\u27e9 https://docs.rs/arc-swap/latest/arc_swap/struct.ArcSwapAny.html: struct arc_swap::ArcSwapAny - `ArcSwapAny`\n\u27e812\u27e9 https://docs.rs/arc-swap/latest/arc_swap/strategy/trait.Strategy.html: trait arc_swap::strategy::Strategy - `Strategy`\n\u27e813\u27e9 https://docs.rs/arc-swap/latest/arc_swap/strategy/index.html: mod arc_swap::strategy - `strategy`\n\u27e814\u27e9 https://docs.rs/arc-swap/latest/arc_swap/trait.RefCnt.html: trait arc_swap::RefCnt - `RefCnt`\n\u27e815\u27e9 https://docs.rs/arc-swap/latest/arc_swap/cache/index.html: mod arc_swap::cache - `cache`\n\u27e816\u27e9 https://docs.rs/arc-swap/latest/arc_swap/access/index.html: mod arc_swap::access - `access`\n\u27e817\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#before-using: \u00a7\n\u27e818\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/limitations/index.html: mod arc_swap::docs::limitations - limitations and common pitfalls\n\u27e819\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html: mod arc_swap::docs::performance - performance characteristics\n\u27e820\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/performance/index.html#read-operations: mod arc_swap::docs::performance - read operation\n\u27e821\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/patterns/index.html: mod arc_swap::docs::patterns - common patterns\n\u27e822\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#examples: \u00a7\n\u27e823\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#reexports: \u00a7\n\u27e824\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#modules: \u00a7\n\u27e825\u27e9 https://docs.rs/arc-swap/latest/arc_swap/docs/index.html: mod arc_swap::docs - docs\n\u27e826\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#structs: \u00a7\n\u27e827\u27e9 https://doc.rust-lang.org/std/sync/struct.Arc.html: `Arc`\n\u27e828\u27e9 https://docs.rs/arc-swap/latest/arc_swap/struct.Guard.html: struct arc_swap::Guard - Guard\n\u27e829\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#traits: \u00a7\n\u27e830\u27e9 https://docs.rs/arc-swap/latest/arc_swap/trait.AsRaw.html: trait arc_swap::AsRaw - AsRaw\n\u27e831\u27e9 https://docs.rs/arc-swap/latest/arc_swap/#types: \u00a7\n\u27e832\u27e9 https://docs.rs/arc-swap/latest/arc_swap/type.ArcSwapWeak.html: type arc_swap::ArcSwapWeak - ArcSwapWeak\n\u27e833\u27e9 https://doc.rust-lang.org/nightly/alloc/sync/struct.Weak.html: struct alloc::sync::Weak - Weak\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `arc-swap` crate provides atomic containers for `Arc` and `Option<Arc>` types, enabling fast, thread-safe reads and updates without locking, making it ideal for read-heavy scenarios like configuration management or routing tables. Its core types, `ArcSwap` and `ArcSwapOption`, allow consistent access to shared data while supporting efficient updates. Additional features include caching for faster reads and projection mechanisms to isolate parts of the stored data for specific use cases.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Atomic Updates and Read-Mostly Optimization  \n\u2705 **Factual**: The `ArcSwap` type in the `arc-swap` crate allows atomic updates to an `Arc` while optimizing for read-mostly scenarios, ensuring consistent performance even under high contention.  \n\u274c **Counterfactual**: The `ArcSwap` type requires locking mechanisms like `RwLock` to ensure atomic updates, which can introduce contention during reads and writes.  \n\n---\n\n### Pair 2: Performance Compared to `RwLock`  \n\u2705 **Factual**: The `arc-swap` crate provides better performance than `RwLock<Arc<T>>` in scenarios with frequent reads and infrequent writes, as it avoids CPU-level contention and blocking during updates.  \n\u274c **Counterfactual**: The `arc-swap` crate performs worse than `RwLock<Arc<T>>` in read-heavy workloads due to higher overhead in managing atomic operations.  \n\n---\n\n### Pair 3: Type Aliases and Flexibility  \n\u2705 **Factual**: The crate defines `ArcSwap` and `ArcSwapOption` as type aliases for partial instantiations of the more flexible `ArcSwapAny`, which can be customized to use different locking strategies or store non-`Arc` types.  \n\u274c **Counterfactual**: The `ArcSwap` and `ArcSwapOption` types are standalone implementations and cannot be customized to use alternative locking strategies or store non",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-75bf5585-9a9fa050-1751263031",
      "timestamp": "2025-06-30T05:57:11.527583+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]