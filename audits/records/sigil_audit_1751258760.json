[
  {
    "execution_id": "exec-f5790693-94f31e2e-1751258752",
    "timestamp": "2025-06-30T04:45:52.110981+00:00",
    "sacred_chain": {
      "input_data": "futures-channel",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'futures-channel' -> 'futures-channel'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "futures-channel",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/futures-channel",
            "title": "futures-channel v0.3.31",
            "content": {
              "raw_markdown": "#  futures-channel v0.3.31\nChannels for asynchronous communication using futures-rs. \n  * [ Readme ](https://crates.io/crates/futures-channel)\n  * [ 36 Versions ](https://crates.io/crates/futures-channel/versions)\n  * [ Dependencies ](https://crates.io/crates/futures-channel/dependencies)\n  * [ Dependents ](https://crates.io/crates/futures-channel/reverse_dependencies)\n\n\n## Metadata\n9 months ago \nv1.56.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n31.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures-channel\nOr add the following line to your Cargo.toml:\nfutures-channel = \"0.3.31\"\n## Homepage\n[ rust-lang.github.io/futures-rs ](https://rust-lang.github.io/futures-rs)\n## Repository\n[ github.com/rust-lang/futures-rs ](https://github.com/rust-lang/futures-rs)\n## Owners\n[ Report crate ](https://crates.io/support?crate=futures-channel&inquire=crate-violation)\n### Stats Overview\n306,912,201 Downloads all time\n36 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  futures-channel v0.3.31\nChannels for asynchronous communication using futures-rs. \n  *  Readme \u27e81\u27e9\n  *  36 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\n9 months ago \nv1.56.0 \n MIT \u27e85\u27e9 OR  Apache-2.0 \u27e86\u27e9\n31.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures-channel\nOr add the following line to your Cargo.toml:\nfutures-channel = \"0.3.31\"\n## Homepage\n rust-lang.github.io/futures-rs \u27e87\u27e9\n## Repository\n github.com/rust-lang/futures-rs \u27e88\u27e9\n## Owners\n Report crate \u27e89\u27e9\n### Stats Overview\n306,912,201 Downloads all time\n36 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/futures-channel:  Readme \n\u27e82\u27e9 https://crates.io/crates/futures-channel/versions:  36 Versions \n\u27e83\u27e9 https://crates.io/crates/futures-channel/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/futures-channel/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://rust-lang.github.io/futures-rs:  rust-lang.github.io/futures-rs \n\u27e88\u27e9 https://github.com/rust-lang/futures-rs:  github.com/rust-lang/futures-rs \n\u27e89\u27e9 https://crates.io/support?crate=futures-channel&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1150,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112542.0627174"
          },
          "docs_rs": {
            "url": "https://docs.rs/futures-channel",
            "title": "Crate futures_channelCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/futures-channel/latest/futures_channel/all.html \"show sidebar\")\n# Crate futures_channelCopy item path\n[Settings](https://docs.rs/futures-channel/latest/settings.html)\n[Help](https://docs.rs/futures-channel/latest/help.html)\nSummary[Source](https://docs.rs/futures-channel/latest/src/futures_channel/lib.rs.html#1-38)\nExpand description\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * [oneshot](https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html \"mod futures_channel::oneshot\"), a way of sending a single value from one task to another.\n  * [mpsc](https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html \"mod futures_channel::mpsc\"), a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the `std` or `alloc` feature of this library is activated, and it is activated by default.\n## Modules[\u00a7](https://docs.rs/futures-channel/latest/futures_channel/#modules)\n\n[mpsc](https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html \"mod futures_channel::mpsc\")\n    A multi-producer, single-consumer queue for sending values across asynchronous tasks.\n\n[oneshot](https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html \"mod futures_channel::oneshot\")\n    A channel for sending a single message between asynchronous tasks.\n",
              "markdown_with_citations": "[](https://docs.rs/futures-channel/latest/futures_channel/all.html \"show sidebar\")\n# Crate futures_channelCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * oneshot\u27e84\u27e9, a way of sending a single value from one task to another.\n  * mpsc\u27e85\u27e9, a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the `std` or `alloc` feature of this library is activated, and it is activated by default.\n## Modules\u00a7\u27e86\u27e9\n\nmpsc\u27e85\u27e9\n    A multi-producer, single-consumer queue for sending values across asynchronous tasks.\n\noneshot\u27e84\u27e9\n    A channel for sending a single message between asynchronous tasks.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-channel/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-channel/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-channel/latest/src/futures_channel/lib.rs.html#1-38: Source\n\u27e84\u27e9 https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html: mod futures_channel::oneshot - oneshot\n\u27e85\u27e9 https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html: mod futures_channel::mpsc - mpsc\n\u27e86\u27e9 https://docs.rs/futures-channel/latest/futures_channel/#modules: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1541,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112542.7831804"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/futures-channel",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [34 releases](https://lib.rs/crates/futures-channel/versions)\n0.3.31 |  Oct 5, 2024   \n---|---  \n0.3.30 |  Dec 24, 2023   \n0.3.29 |  Oct 26, 2023   \n0.3.28 |  Mar 30, 2023   \n0.2.0-beta |  Mar 20, 2018   \n#**56** in [Concurrency](https://lib.rs/concurrency \"Crates for implementing concurrent and parallel computation.\")\nDownload history 3252191/week @ 2025-03-02 3348696/week @ 2025-03-09 3638307/week @ 2025-03-16 3750122/week @ 2025-03-23 3280255/week @ 2025-03-30 3481437/week @ 2025-04-06 3099645/week @ 2025-04-13 3044989/week @ 2025-04-20 3017401/week @ 2025-04-27 3090583/week @ 2025-05-04 3160150/week @ 2025-05-11 3246854/week @ 2025-05-18 2937862/week @ 2025-05-25 3258441/week @ 2025-06-01 3380583/week @ 2025-06-08 3395299/week @ 2025-06-15\n**13,179,527** downloads per month Used in [**38,337** crates (412 directly)](https://lib.rs/crates/futures-channel/rev)\n**MIT/Apache**\n110KB  1.5K  SLoC\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * [oneshot], a way of sending a single value from one task to another.\n  * [mpsc], a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the ``std`` or ``alloc`` feature of this library is activated, and it is activated by default.\n# futures-channel\nChannels for asynchronous communication using futures-rs.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`futures-channel ``=` ``\"`0.3`\"``\n``\n```\n\nThe current ``futures-channel`` requires Rust 1.56 or later.\n## License\nLicensed under either of [Apache License, Version 2.0](https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures-channel/LICENSE-APACHE) or [MIT license](https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures-channel/LICENSE-MIT) at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n  * [futures-core](https://lib.rs/crates/futures-core \"0.3.31\")\n  * [sink?](https://lib.rs/crates/futures-channel/features#feature-sink \"optional feature\") [futures-sink](https://lib.rs/crates/futures-sink \"0.3.31\")\n\n\n#### [Other features](https://lib.rs/crates/futures-channel/features)\n  * [alloc](https://lib.rs/crates/futures-channel/features#feature-alloc)\n  * [cfg-target-has-atomic](https://lib.rs/crates/futures-channel/features#feature-cfg-target-has-atomic)\n  * [std](https://lib.rs/crates/futures-channel/features#feature-std)\n  * [unstable](https://lib.rs/crates/futures-channel/features#feature-unstable)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  34 releases\u27e81\u27e9\n0.3.31 |  Oct 5, 2024   \n---|---  \n0.3.30 |  Dec 24, 2023   \n0.3.29 |  Oct 26, 2023   \n0.3.28 |  Mar 30, 2023   \n0.2.0-beta |  Mar 20, 2018   \n#**56** in Concurrency\u27e82\u27e9\nDownload history 3252191/week @ 2025-03-02 3348696/week @ 2025-03-09 3638307/week @ 2025-03-16 3750122/week @ 2025-03-23 3280255/week @ 2025-03-30 3481437/week @ 2025-04-06 3099645/week @ 2025-04-13 3044989/week @ 2025-04-20 3017401/week @ 2025-04-27 3090583/week @ 2025-05-04 3160150/week @ 2025-05-11 3246854/week @ 2025-05-18 2937862/week @ 2025-05-25 3258441/week @ 2025-06-01 3380583/week @ 2025-06-08 3395299/week @ 2025-06-15\n**13,179,527** downloads per month Used in **38,337** crates (412 directly)\u27e83\u27e9\n**MIT/Apache**\n110KB  1.5K  SLoC\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * [oneshot], a way of sending a single value from one task to another.\n  * [mpsc], a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the ``std`` or ``alloc`` feature of this library is activated, and it is activated by default.\n# futures-channel\nChannels for asynchronous communication using futures-rs.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`futures-channel ``=` ``\"`0.3`\"``\n``\n```\n\nThe current ``futures-channel`` requires Rust 1.56 or later.\n## License\nLicensed under either of Apache License, Version 2.0\u27e84\u27e9 or MIT license\u27e85\u27e9 at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n  * futures-core\u27e86\u27e9\n  * sink?\u27e87\u27e9 futures-sink\u27e88\u27e9\n\n\n#### Other features\u27e89\u27e9\n  * alloc\u27e810\u27e9\n  * cfg-target-has-atomic\u27e811\u27e9\n  * std\u27e812\u27e9\n  * unstable\u27e813\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/futures-channel/versions: 34 releases\n\u27e82\u27e9 https://lib.rs/concurrency: Crates for implementing concurrent and parallel computation. - Concurrency\n\u27e83\u27e9 https://lib.rs/crates/futures-channel/rev: **38,337** crates (412 directly)\n\u27e84\u27e9 https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures-channel/LICENSE-APACHE: Apache License, Version 2.0\n\u27e85\u27e9 https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures-channel/LICENSE-MIT: MIT license\n\u27e86\u27e9 https://lib.rs/crates/futures-core: 0.3.31 - futures-core\n\u27e87\u27e9 https://lib.rs/crates/futures-channel/features#feature-sink: optional feature - sink?\n\u27e88\u27e9 https://lib.rs/crates/futures-sink: 0.3.31 - futures-sink\n\u27e89\u27e9 https://lib.rs/crates/futures-channel/features: Other features\n\u27e810\u27e9 https://lib.rs/crates/futures-channel/features#feature-alloc: alloc\n\u27e811\u27e9 https://lib.rs/crates/futures-channel/features#feature-cfg-target-has-atomic: cfg-target-has-atomic\n\u27e812\u27e9 https://lib.rs/crates/futures-channel/features#feature-std: std\n\u27e813\u27e9 https://lib.rs/crates/futures-channel/features#feature-unstable: unstable\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 2924,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112543.1658156"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\target\\debug\\deps\\libfutures_core-c0247814193dd354.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjehys3bn/futures-channel-0.3.31#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\target\\debug\\deps\\libfutures_channel-fc185dfd7eb3b454.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\target\\debug\\deps\\libfutures_core-c0247814193dd354.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjehys3bn/futures-channel-0.3.31#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n   --> src\\mpsc\\mod.rs:190:9\n    |\n190 | /         match self.kind {\n191 | |             SendErrorKind::Full => true,\n192 | |             _ => false,\n193 | |         }\n    | |_________^ help: try: `matches!(self.kind, SendErrorKind::Full)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n    = note: `#[warn(clippy::match_like_matches_macro)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::match_like_matches_macro)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7132,
                        "byte_start": 7040,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\mpsc\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 193,
                        "line_start": 190,
                        "suggested_replacement": "matches!(self.kind, SendErrorKind::Full)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 9,
                            "text": "        match self.kind {"
                          },
                          {
                            "highlight_end": 41,
                            "highlight_start": 1,
                            "text": "            SendErrorKind::Full => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 7132,
                    "byte_start": 7040,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\mpsc\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 193,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 9,
                        "text": "        match self.kind {"
                      },
                      {
                        "highlight_end": 41,
                        "highlight_start": 1,
                        "text": "            SendErrorKind::Full => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjehys3bn/futures-channel-0.3.31#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n   --> src\\mpsc\\mod.rs:198:9\n    |\n198 | /         match self.kind {\n199 | |             SendErrorKind::Disconnected => true,\n200 | |             _ => false,\n201 | |         }\n    | |_________^ help: try: `matches!(self.kind, SendErrorKind::Disconnected)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7372,
                        "byte_start": 7272,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\mpsc\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 201,
                        "line_start": 198,
                        "suggested_replacement": "matches!(self.kind, SendErrorKind::Disconnected)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 9,
                            "text": "        match self.kind {"
                          },
                          {
                            "highlight_end": 49,
                            "highlight_start": 1,
                            "text": "            SendErrorKind::Disconnected => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 7372,
                    "byte_start": 7272,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\mpsc\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 201,
                    "line_start": 198,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 9,
                        "text": "        match self.kind {"
                      },
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "            SendErrorKind::Disconnected => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjehys3bn/futures-channel-0.3.31#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjehys3bn\\futures-channel-0.3.31\\target\\debug\\deps\\libfutures_channel-eea4544ad0089aef.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 3
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "futures-channel",
          "version": "0.3.31",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures-channel/latest/futures_channel/all.html \"show sidebar\")\n# Crate futures_channelCopy item path\n[Settings](https://docs.rs/futures-channel/latest/settings.html)\n[Help](https://docs.rs/futures-channel/latest/help.html)\nSummary[Source](https://docs.rs/futures-channel/latest/src/futures_channel/lib.rs.html#1-38)\nExpand description\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * [oneshot](https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html \"mod futures_channel::oneshot\"), a way of sending a single value from one task to another.\n  * [mpsc](https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html \"mod futures_channel::mpsc\"), a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the `std` or `alloc` feature of this library is activated, and it is activated by default.\n## Modules[\u00a7](https://docs.rs/futures-channel/latest/futures_channel/#modules)\n\n[mpsc](https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html \"mod futures_channel::mpsc\")\n    A multi-producer, single-consumer queue for sending values across asynchronous tasks.\n\n[oneshot](https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html \"mod futures_channel::oneshot\")\n    A channel for sending a single message between asynchronous tasks.\n",
            "markdown_with_citations": "[](https://docs.rs/futures-channel/latest/futures_channel/all.html \"show sidebar\")\n# Crate futures_channelCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * oneshot\u27e84\u27e9, a way of sending a single value from one task to another.\n  * mpsc\u27e85\u27e9, a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the `std` or `alloc` feature of this library is activated, and it is activated by default.\n## Modules\u00a7\u27e86\u27e9\n\nmpsc\u27e85\u27e9\n    A multi-producer, single-consumer queue for sending values across asynchronous tasks.\n\noneshot\u27e84\u27e9\n    A channel for sending a single message between asynchronous tasks.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-channel/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-channel/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-channel/latest/src/futures_channel/lib.rs.html#1-38: Source\n\u27e84\u27e9 https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html: mod futures_channel::oneshot - oneshot\n\u27e85\u27e9 https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html: mod futures_channel::mpsc - mpsc\n\u27e86\u27e9 https://docs.rs/futures-channel/latest/futures_channel/#modules: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "futures-channel",
          "version": "0.3.31",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures-channel/latest/futures_channel/all.html \"show sidebar\")\n# Crate futures_channelCopy item path\n[Settings](https://docs.rs/futures-channel/latest/settings.html)\n[Help](https://docs.rs/futures-channel/latest/help.html)\nSummary[Source](https://docs.rs/futures-channel/latest/src/futures_channel/lib.rs.html#1-38)\nExpand description\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * [oneshot](https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html \"mod futures_channel::oneshot\"), a way of sending a single value from one task to another.\n  * [mpsc](https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html \"mod futures_channel::mpsc\"), a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the `std` or `alloc` feature of this library is activated, and it is activated by default.\n## Modules[\u00a7](https://docs.rs/futures-channel/latest/futures_channel/#modules)\n\n[mpsc](https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html \"mod futures_channel::mpsc\")\n    A multi-producer, single-consumer queue for sending values across asynchronous tasks.\n\n[oneshot](https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html \"mod futures_channel::oneshot\")\n    A channel for sending a single message between asynchronous tasks.\n",
            "markdown_with_citations": "[](https://docs.rs/futures-channel/latest/futures_channel/all.html \"show sidebar\")\n# Crate futures_channelCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAsynchronous channels.\nLike threads, concurrent tasks sometimes need to communicate with each other. This module contains two basic abstractions for doing so:\n  * oneshot\u27e84\u27e9, a way of sending a single value from one task to another.\n  * mpsc\u27e85\u27e9, a multi-producer, single-consumer channel for sending values between tasks, analogous to the similarly-named structure in the standard library.\n\n\nAll items are only available when the `std` or `alloc` feature of this library is activated, and it is activated by default.\n## Modules\u00a7\u27e86\u27e9\n\nmpsc\u27e85\u27e9\n    A multi-producer, single-consumer queue for sending values across asynchronous tasks.\n\noneshot\u27e84\u27e9\n    A channel for sending a single message between asynchronous tasks.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-channel/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-channel/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-channel/latest/src/futures_channel/lib.rs.html#1-38: Source\n\u27e84\u27e9 https://docs.rs/futures-channel/latest/futures_channel/oneshot/index.html: mod futures_channel::oneshot - oneshot\n\u27e85\u27e9 https://docs.rs/futures-channel/latest/futures_channel/mpsc/index.html: mod futures_channel::mpsc - mpsc\n\u27e86\u27e9 https://docs.rs/futures-channel/latest/futures_channel/#modules: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `futures-channel` crate provides asynchronous communication primitives for Rust tasks, including `oneshot` channels for sending a single value and `mpsc` channels for multi-producer, single-consumer message passing. These channels enable efficient task coordination in asynchronous environments and require the `std` or `alloc` feature, which is enabled by default.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1:\n\u2705 Factual: The `futures-channel` crate provides an `oneshot` channel for sending a single value between asynchronous tasks, ensuring efficient communication with minimal overhead.  \n\u274c Counterfactual: The `oneshot` channel in `futures-channel` supports sending multiple values sequentially between tasks, similar to an `mpsc` channel.\n\n---\n\n### Pair 2:\n\u2705 Factual: The `mpsc` module in `futures-channel` implements a multi-producer, single-consumer channel, allowing multiple tasks to send values to a single receiving task asynchronously.  \n\u274c Counterfactual: The `mpsc` module in `futures-channel` supports multi-producer, multi-consumer communication, enabling multiple tasks to both send and receive values concurrently.\n\n---\n\n### Pair 3:\n\u2705 Factual: All items in the `futures-channel` crate are only available when the `std` or `alloc` feature is activated, and these features are enabled by default.  \n\u274c Counterfactual: The `futures-channel` crate does not require any features to be activated for its functionality, and it works seamlessly without `std` or `alloc`.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-f5790693-94f31e2e-1751258752",
      "timestamp": "2025-06-30T04:45:52.110981+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]