[
  {
    "execution_id": "exec-28c2dec1-4c8e2055-1751260786",
    "timestamp": "2025-06-30T05:19:46.430645+00:00",
    "sacred_chain": {
      "input_data": "glob",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'glob' -> 'glob'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "glob",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/glob",
            "title": "glob v0.3.2",
            "content": {
              "raw_markdown": "#  glob v0.3.2\nSupport for matching file paths against Unix shell style patterns. \n  * [ Readme ](https://crates.io/crates/glob)\n  * [ 28 Versions ](https://crates.io/crates/glob/versions)\n  * [ Dependencies ](https://crates.io/crates/glob/dependencies)\n  * [ Dependents ](https://crates.io/crates/glob/reverse_dependencies)\n\n\n## Metadata\n6 months ago \nv1.23.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n21.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add glob\nOr add the following line to your Cargo.toml:\nglob = \"0.3.2\"\n## Documentation\n[ docs.rs/glob/0.3.1 ](https://docs.rs/glob/0.3.1)\n## Repository\n[ github.com/rust-lang/glob ](https://github.com/rust-lang/glob)\n## Owners\n## Categories\n  * [Filesystem](https://crates.io/categories/filesystem)\n\n\n[ Report crate ](https://crates.io/support?crate=glob&inquire=crate-violation)\n### Stats Overview\n231,487,529 Downloads all time\n28 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  glob v0.3.2\nSupport for matching file paths against Unix shell style patterns. \n  *  Readme \u27e81\u27e9\n  *  28 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\n6 months ago \nv1.23.0 \n MIT \u27e85\u27e9 OR  Apache-2.0 \u27e86\u27e9\n21.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add glob\nOr add the following line to your Cargo.toml:\nglob = \"0.3.2\"\n## Documentation\n docs.rs/glob/0.3.1 \u27e87\u27e9\n## Repository\n github.com/rust-lang/glob \u27e88\u27e9\n## Owners\n## Categories\n  * Filesystem\u27e89\u27e9\n\n\n Report crate \u27e810\u27e9\n### Stats Overview\n231,487,529 Downloads all time\n28 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/glob:  Readme \n\u27e82\u27e9 https://crates.io/crates/glob/versions:  28 Versions \n\u27e83\u27e9 https://crates.io/crates/glob/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/glob/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://docs.rs/glob/0.3.1:  docs.rs/glob/0.3.1 \n\u27e88\u27e9 https://github.com/rust-lang/glob:  github.com/rust-lang/glob \n\u27e89\u27e9 https://crates.io/categories/filesystem: Filesystem\n\u27e810\u27e9 https://crates.io/support?crate=glob&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1112,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114575.570364"
          },
          "docs_rs": {
            "url": "https://docs.rs/glob",
            "title": "Crate globCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/glob/latest/glob/all.html \"show sidebar\")\n# Crate globCopy item path\n[Settings](https://docs.rs/glob/latest/settings.html)\n[Help](https://docs.rs/glob/latest/help.html)\nSummary[Source](https://docs.rs/glob/latest/src/glob/lib.rs.html#11-1501)\nExpand description\nSupport for matching file paths against Unix shell style patterns.\nThe `glob` and `glob_with` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc `glob` function). The methods on the `Pattern` type provide functionality for checking if individual paths match a particular pattern (similar to the libc `fnmatch` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc `glob`/`fnmatch` functions.\n## [\u00a7](https://docs.rs/glob/latest/glob/#examples)Examples\nTo print all jpg files in `/media/` and all of its subdirectories.\n```\nuse glob::glob;\nfor entry in glob(\"/media/**/*.jpg\").expect(\"Failed to read glob pattern\") {\n  match entry {\n    Ok(path) => println!(\"{:?}\", path.display()),\n    Err(e) => println!(\"{:?}\", e),\n  }\n}\n```\n\nTo print all files containing the letter \u201ca\u201d, case insensitive, in a `local` directory relative to the current working directory. This ignores errors instead of printing them.\n```\nuse glob::glob_with;\nuse glob::MatchOptions;\nlet options = MatchOptions {\n  case_sensitive: false,\n  require_literal_separator: false,\n  require_literal_leading_dot: false,\n};\nfor entry in glob_with(\"local/*a*\", options).unwrap() {\n  if let Ok(path) = entry {\n    println!(\"{:?}\", path.display())\n  }\n}\n```\n\n## Structs[\u00a7](https://docs.rs/glob/latest/glob/#structs)\n\n[GlobError](https://docs.rs/glob/latest/glob/struct.GlobError.html \"struct glob::GlobError\")\n    A glob iteration error.\n\n[MatchOptions](https://docs.rs/glob/latest/glob/struct.MatchOptions.html \"struct glob::MatchOptions\")\n    Configuration options to modify the behaviour of `Pattern::matches_with(..)`.\n\n[Paths](https://docs.rs/glob/latest/glob/struct.Paths.html \"struct glob::Paths\")\n    An iterator that yields `Path`s from the filesystem that match a particular pattern.\n\n[Pattern](https://docs.rs/glob/latest/glob/struct.Pattern.html \"struct glob::Pattern\")\n    A compiled Unix shell style pattern.\n\n[PatternError](https://docs.rs/glob/latest/glob/struct.PatternError.html \"struct glob::PatternError\")\n    A pattern parsing error.\n## Functions[\u00a7](https://docs.rs/glob/latest/glob/#functions)\n\n[glob](https://docs.rs/glob/latest/glob/fn.glob.html \"fn glob::glob\")\n    Return an iterator that produces all the `Path`s that match the given pattern using default match options, which may be absolute or relative to the current working directory.\n\n[glob_with](https://docs.rs/glob/latest/glob/fn.glob_with.html \"fn glob::glob_with\")\n    Return an iterator that produces all the `Path`s that match the given pattern using the specified match options, which may be absolute or relative to the current working directory.\n## Type Aliases[\u00a7](https://docs.rs/glob/latest/glob/#types)\n\n[GlobResult](https://docs.rs/glob/latest/glob/type.GlobResult.html \"type glob::GlobResult\")\n    An alias for a glob iteration result.\n",
              "markdown_with_citations": "[](https://docs.rs/glob/latest/glob/all.html \"show sidebar\")\n# Crate globCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nSupport for matching file paths against Unix shell style patterns.\nThe `glob` and `glob_with` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc `glob` function). The methods on the `Pattern` type provide functionality for checking if individual paths match a particular pattern (similar to the libc `fnmatch` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc `glob`/`fnmatch` functions.\n## \u00a7\u27e84\u27e9Examples\nTo print all jpg files in `/media/` and all of its subdirectories.\n```\nuse glob::glob;\nfor entry in glob(\"/media/**/*.jpg\").expect(\"Failed to read glob pattern\") {\n  match entry {\n    Ok(path) => println!(\"{:?}\", path.display()),\n    Err(e) => println!(\"{:?}\", e),\n  }\n}\n```\n\nTo print all files containing the letter \u201ca\u201d, case insensitive, in a `local` directory relative to the current working directory. This ignores errors instead of printing them.\n```\nuse glob::glob_with;\nuse glob::MatchOptions;\nlet options = MatchOptions {\n  case_sensitive: false,\n  require_literal_separator: false,\n  require_literal_leading_dot: false,\n};\nfor entry in glob_with(\"local/*a*\", options).unwrap() {\n  if let Ok(path) = entry {\n    println!(\"{:?}\", path.display())\n  }\n}\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nGlobError\u27e86\u27e9\n    A glob iteration error.\n\nMatchOptions\u27e87\u27e9\n    Configuration options to modify the behaviour of `Pattern::matches_with(..)`.\n\nPaths\u27e88\u27e9\n    An iterator that yields `Path`s from the filesystem that match a particular pattern.\n\nPattern\u27e89\u27e9\n    A compiled Unix shell style pattern.\n\nPatternError\u27e810\u27e9\n    A pattern parsing error.\n## Functions\u00a7\u27e811\u27e9\n\nglob\u27e812\u27e9\n    Return an iterator that produces all the `Path`s that match the given pattern using default match options, which may be absolute or relative to the current working directory.\n\nglob_with\u27e813\u27e9\n    Return an iterator that produces all the `Path`s that match the given pattern using the specified match options, which may be absolute or relative to the current working directory.\n## Type Aliases\u00a7\u27e814\u27e9\n\nGlobResult\u27e815\u27e9\n    An alias for a glob iteration result.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/glob/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/glob/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/glob/latest/src/glob/lib.rs.html#11-1501: Source\n\u27e84\u27e9 https://docs.rs/glob/latest/glob/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/glob/latest/glob/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/glob/latest/glob/struct.GlobError.html: struct glob::GlobError - GlobError\n\u27e87\u27e9 https://docs.rs/glob/latest/glob/struct.MatchOptions.html: struct glob::MatchOptions - MatchOptions\n\u27e88\u27e9 https://docs.rs/glob/latest/glob/struct.Paths.html: struct glob::Paths - Paths\n\u27e89\u27e9 https://docs.rs/glob/latest/glob/struct.Pattern.html: struct glob::Pattern - Pattern\n\u27e810\u27e9 https://docs.rs/glob/latest/glob/struct.PatternError.html: struct glob::PatternError - PatternError\n\u27e811\u27e9 https://docs.rs/glob/latest/glob/#functions: \u00a7\n\u27e812\u27e9 https://docs.rs/glob/latest/glob/fn.glob.html: fn glob::glob - glob\n\u27e813\u27e9 https://docs.rs/glob/latest/glob/fn.glob_with.html: fn glob::glob_with - glob_with\n\u27e814\u27e9 https://docs.rs/glob/latest/glob/#types: \u00a7\n\u27e815\u27e9 https://docs.rs/glob/latest/glob/type.GlobResult.html: type glob::GlobResult - GlobResult\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3219,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114576.9909465"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/glob",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [28 releases](https://lib.rs/crates/glob/versions)\nUses old Rust 2015\n0.3.2 |  Dec 29, 2024   \n---|---  \n0.3.1 |  Jan 6, 2023   \n0.3.0 |  Mar 7, 2019   \n0.2.11 |  Mar 6, 2016   \n0.1.0 |  Nov 27, 2014   \n#**6** in [Filesystem](https://lib.rs/filesystem \"Crates for dealing with files and filesystems.\")\nDownload history 2882173/week @ 2025-03-08 3079014/week @ 2025-03-15 3366294/week @ 2025-03-22 2816958/week @ 2025-03-29 2926560/week @ 2025-04-05 2593795/week @ 2025-04-12 2598604/week @ 2025-04-19 2438489/week @ 2025-04-26 2539232/week @ 2025-05-03 2598809/week @ 2025-05-10 2664221/week @ 2025-05-17 2388820/week @ 2025-05-24 2554376/week @ 2025-05-31 2614282/week @ 2025-06-07 2712449/week @ 2025-06-14 2945578/week @ 2025-06-21\n**11,262,052** downloads per month Used in [**18,463** crates (1,979 directly)](https://lib.rs/crates/glob/rev)\n**MIT/Apache**\n56KB  1K  SLoC\nSupport for matching file paths against Unix shell style patterns.\nThe ``glob`` and ``glob_with`` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc ``glob`` function). The methods on the ``Pattern`` type provide functionality for checking if individual paths match a particular pattern (similar to the libc ``fnmatch`` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc ``glob``/``fnmatch`` functions.\n# Examples\nTo print all jpg files in ``/media/`` and all of its subdirectories.\n```\n``use` `glob`::``glob`;`\n`for` entry `in` `glob``(```\"`/media/**/*.jpg`\"```)``.``expect``(```\"`Failed to read glob pattern`\"```)` ``{`\n  `match` entry `{`\n    `Ok``(`path`)` `=>` `println!``(```\"``{:?}``\"```,` path`.``display``(``)``)``,`\n    `Err``(`e`)` `=>` `println!``(```\"``{:?}``\"```,` e`)``,`\n  `}`\n```}``\n`\n```\n\nTo print all files containing the letter \"a\", case insensitive, in a ``local`` directory relative to the current working directory. This ignores errors instead of printing them.\n```\n``use` `glob`::``glob_with`;`\n`use` `glob`::``MatchOptions`;`\n`let` options `=` MatchOptions ``{`\n  case_sensitive`:` `false``,`\n  require_literal_separator`:` `false``,`\n  require_literal_leading_dot`:` `false``,`\n```}```;`\n`for` entry `in` `glob_with``(```\"`local/*a*`\"```,` options`)``.``unwrap``(``)` ``{`\n  `if` `let` `Ok``(`path`)` `=` entry `{`\n    `println!``(```\"``{:?}``\"```,` path`.``display``(``)``)`\n  `}`\n```}``\n`\n```\n\n# glob\nSupport for matching file paths against Unix shell style patterns.\n[![Continuous integration](https://img.gs/czjpqfbdkz/full/https://github.com/rust-lang/glob/actions/workflows/rust.yml/badge.svg)](https://github.com/rust-lang/glob/actions/workflows/rust.yml)\n[Documentation](https://docs.rs/glob)\n## Usage\nTo use ``glob``, add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`glob ``=` ``\"`0.3.1`\"``\n``\n```\n\nIf you're using Rust 1.30 or earlier, or edition 2015, add this to your crate root:\n```\n``extern` `crate` glob`;`\n`\n```\n\n## Examples\nPrint all jpg files in /media/ and all of its subdirectories.\n```\n``use` `glob`::``glob`;`\n`for` entry `in` `glob``(```\"`/media/**/*.jpg`\"```)``.``expect``(```\"`Failed to read glob pattern`\"```)` ``{`\n  `match` entry `{`\n    `Ok``(`path`)` `=>` `println!``(```\"``{:?}``\"```,` path`.``display``(``)``)``,`\n    `Err``(`e`)` `=>` `println!``(```\"``{:?}``\"```,` e`)``,`\n  `}`\n```}``\n`\n```\n\n#### No runtime deps\n  * dev  [doc-comment](https://lib.rs/crates/doc-comment \"0.3\")\n  * dev  [tempdir](https://lib.rs/crates/tempdir \"deprecated\") 0.3\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  28 releases\u27e81\u27e9\nUses old Rust 2015\n0.3.2 |  Dec 29, 2024   \n---|---  \n0.3.1 |  Jan 6, 2023   \n0.3.0 |  Mar 7, 2019   \n0.2.11 |  Mar 6, 2016   \n0.1.0 |  Nov 27, 2014   \n#**6** in Filesystem\u27e82\u27e9\nDownload history 2882173/week @ 2025-03-08 3079014/week @ 2025-03-15 3366294/week @ 2025-03-22 2816958/week @ 2025-03-29 2926560/week @ 2025-04-05 2593795/week @ 2025-04-12 2598604/week @ 2025-04-19 2438489/week @ 2025-04-26 2539232/week @ 2025-05-03 2598809/week @ 2025-05-10 2664221/week @ 2025-05-17 2388820/week @ 2025-05-24 2554376/week @ 2025-05-31 2614282/week @ 2025-06-07 2712449/week @ 2025-06-14 2945578/week @ 2025-06-21\n**11,262,052** downloads per month Used in **18,463** crates (1,979 directly)\u27e83\u27e9\n**MIT/Apache**\n56KB  1K  SLoC\nSupport for matching file paths against Unix shell style patterns.\nThe ``glob`` and ``glob_with`` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc ``glob`` function). The methods on the ``Pattern`` type provide functionality for checking if individual paths match a particular pattern (similar to the libc ``fnmatch`` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc ``glob``/``fnmatch`` functions.\n# Examples\nTo print all jpg files in ``/media/`` and all of its subdirectories.\n```\n``use` `glob`::``glob`;`\n`for` entry `in` `glob``(```\"`/media/**/*.jpg`\"```)``.``expect``(```\"`Failed to read glob pattern`\"```)` ``{`\n  `match` entry `{`\n    `Ok``(`path`)` `=>` `println!``(```\"``{:?}``\"```,` path`.``display``(``)``)``,`\n    `Err``(`e`)` `=>` `println!``(```\"``{:?}``\"```,` e`)``,`\n  `}`\n```}``\n`\n```\n\nTo print all files containing the letter \"a\", case insensitive, in a ``local`` directory relative to the current working directory. This ignores errors instead of printing them.\n```\n``use` `glob`::``glob_with`;`\n`use` `glob`::``MatchOptions`;`\n`let` options `=` MatchOptions ``{`\n  case_sensitive`:` `false``,`\n  require_literal_separator`:` `false``,`\n  require_literal_leading_dot`:` `false``,`\n```}```;`\n`for` entry `in` `glob_with``(```\"`local/*a*`\"```,` options`)``.``unwrap``(``)` ``{`\n  `if` `let` `Ok``(`path`)` `=` entry `{`\n    `println!``(```\"``{:?}``\"```,` path`.``display``(``)``)`\n  `}`\n```}``\n`\n```\n\n# glob\nSupport for matching file paths against Unix shell style patterns.\n![Continuous integration\u27e84\u27e9](https://github.com/rust-lang/glob/actions/workflows/rust.yml)\nDocumentation\u27e85\u27e9\n## Usage\nTo use ``glob``, add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`glob ``=` ``\"`0.3.1`\"``\n``\n```\n\nIf you're using Rust 1.30 or earlier, or edition 2015, add this to your crate root:\n```\n``extern` `crate` glob`;`\n`\n```\n\n## Examples\nPrint all jpg files in /media/ and all of its subdirectories.\n```\n``use` `glob`::``glob`;`\n`for` entry `in` `glob``(```\"`/media/**/*.jpg`\"```)``.``expect``(```\"`Failed to read glob pattern`\"```)` ``{`\n  `match` entry `{`\n    `Ok``(`path`)` `=>` `println!``(```\"``{:?}``\"```,` path`.``display``(``)``)``,`\n    `Err``(`e`)` `=>` `println!``(```\"``{:?}``\"```,` e`)``,`\n  `}`\n```}``\n`\n```\n\n#### No runtime deps\n  * dev  doc-comment\u27e86\u27e9\n  * dev  tempdir\u27e87\u27e9 0.3\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/glob/versions: 28 releases\n\u27e82\u27e9 https://lib.rs/filesystem: Crates for dealing with files and filesystems. - Filesystem\n\u27e83\u27e9 https://lib.rs/crates/glob/rev: **18,463** crates (1,979 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/rust-lang/glob/actions/workflows/rust.yml/badge.svg: ![Continuous integration\n\u27e85\u27e9 https://docs.rs/glob: Documentation\n\u27e86\u27e9 https://lib.rs/crates/doc-comment: 0.3 - doc-comment\n\u27e87\u27e9 https://lib.rs/crates/tempdir: deprecated - tempdir\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3599,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114577.5075255"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\target\\debug\\deps\\libglob-f075b64d32a13803.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this block may be rewritten with the `?` operator\n   --> src\\lib.rs:211:5\n    |\n211 | /     if let Err(err) = Pattern::new(pattern) {\n212 | |         return Err(err);\n213 | |     }\n    | |_____^ help: replace it with: `Pattern::new(pattern)?;`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark\n    = note: `#[warn(clippy::question_mark)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::question_mark)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace it with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7141,
                        "byte_start": 7069,
                        "column_end": 6,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 213,
                        "line_start": 211,
                        "suggested_replacement": "Pattern::new(pattern)?;",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 5,
                            "text": "    if let Err(err) = Pattern::new(pattern) {"
                          },
                          {
                            "highlight_end": 25,
                            "highlight_start": 1,
                            "text": "        return Err(err);"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::question_mark",
                  "explanation": null
                },
                "level": "warning",
                "message": "this block may be rewritten with the `?` operator",
                "spans": [
                  {
                    "byte_end": 7141,
                    "byte_start": 7069,
                    "column_end": 6,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 213,
                    "line_start": 211,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 5,
                        "text": "    if let Err(err) = Pattern::new(pattern) {"
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "        return Err(err);"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this loop could be written as a `while let` loop\n   --> src\\lib.rs:216:5\n    |\n216 | /     loop {\n217 | |         match components.peek() {\n218 | |             Some(&Component::Prefix(..)) | Some(&Component::RootDir) => {\n219 | |                 components.next();\n...   |\n223 | |     }\n    | |_____^ help: try: `while let Some(&Component::Prefix(..)) | Some(&Component::RootDir) = components.peek() { .. }`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop\n    = note: `#[warn(clippy::while_let_loop)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::while_let_loop)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7419,
                        "byte_start": 7216,
                        "column_end": 6,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 223,
                        "line_start": 216,
                        "suggested_replacement": "while let Some(&Component::Prefix(..)) | Some(&Component::RootDir) = components.peek() { .. }",
                        "suggestion_applicability": "HasPlaceholders",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 5,
                            "text": "    loop {"
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "        match components.peek() {"
                          },
                          {
                            "highlight_end": 74,
                            "highlight_start": 1,
                            "text": "            Some(&Component::Prefix(..)) | Some(&Component::RootDir) => {"
                          },
                          {
                            "highlight_end": 35,
                            "highlight_start": 1,
                            "text": "                components.next();"
                          },
                          {
                            "highlight_end": 14,
                            "highlight_start": 1,
                            "text": "            }"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => break,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::while_let_loop",
                  "explanation": null
                },
                "level": "warning",
                "message": "this loop could be written as a `while let` loop",
                "spans": [
                  {
                    "byte_end": 7419,
                    "byte_start": 7216,
                    "column_end": 6,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 223,
                    "line_start": 216,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 5,
                        "text": "    loop {"
                      },
                      {
                        "highlight_end": 34,
                        "highlight_start": 1,
                        "text": "        match components.peek() {"
                      },
                      {
                        "highlight_end": 74,
                        "highlight_start": 1,
                        "text": "            Some(&Component::Prefix(..)) | Some(&Component::RootDir) => {"
                      },
                      {
                        "highlight_end": 35,
                        "highlight_start": 1,
                        "text": "                components.next();"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            }"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => break,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src\\lib.rs:394:51\n    |\n394 |                 assert!(self.dir_patterns.len() < !0 as usize);\n    |                                                   ^^^^^^^^^^^ help: try: `!0`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n    = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unnecessary_cast)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12303,
                        "byte_start": 12292,
                        "column_end": 62,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 394,
                        "line_start": 394,
                        "suggested_replacement": "!0",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 51,
                            "text": "                assert!(self.dir_patterns.len() < !0 as usize);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_cast",
                  "explanation": null
                },
                "level": "warning",
                "message": "casting to the same type is unnecessary (`usize` -> `usize`)",
                "spans": [
                  {
                    "byte_end": 12303,
                    "byte_start": 12292,
                    "column_end": 62,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 394,
                    "line_start": 394,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 51,
                        "text": "                assert!(self.dir_patterns.len() < !0 as usize);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src\\lib.rs:412:23\n    |\n412 |             if idx == !0 as usize {\n    |                       ^^^^^^^^^^^ help: try: `!0`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12896,
                        "byte_start": 12885,
                        "column_end": 34,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 412,
                        "line_start": 412,
                        "suggested_replacement": "!0",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 23,
                            "text": "            if idx == !0 as usize {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_cast",
                  "explanation": null
                },
                "level": "warning",
                "message": "casting to the same type is unnecessary (`usize` -> `usize`)",
                "spans": [
                  {
                    "byte_end": 12896,
                    "byte_start": 12885,
                    "column_end": 34,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 412,
                    "line_start": 412,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 23,
                        "text": "            if idx == !0 as usize {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\lib.rs:846:73\n    |\n846 |                         AnyWithin(ref specifiers) => in_char_specifiers(&specifiers, c, options),\n    |                                                                         ^^^^^^^^^^^ help: change this to: `specifiers`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28809,
                        "byte_start": 28798,
                        "column_end": 84,
                        "column_start": 73,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 846,
                        "line_start": 846,
                        "suggested_replacement": "specifiers",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 73,
                            "text": "                        AnyWithin(ref specifiers) => in_char_specifiers(&specifiers, c, options),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 28809,
                    "byte_start": 28798,
                    "column_end": 84,
                    "column_start": 73,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 846,
                    "line_start": 846,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 73,
                        "text": "                        AnyWithin(ref specifiers) => in_char_specifiers(&specifiers, c, options),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\lib.rs:847:74\n    |\n847 |                         AnyExcept(ref specifiers) => !in_char_specifiers(&specifiers, c, options),\n    |                                                                          ^^^^^^^^^^^ help: change this to: `specifiers`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28908,
                        "byte_start": 28897,
                        "column_end": 85,
                        "column_start": 74,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 847,
                        "line_start": 847,
                        "suggested_replacement": "specifiers",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 85,
                            "highlight_start": 74,
                            "text": "                        AnyExcept(ref specifiers) => !in_char_specifiers(&specifiers, c, options),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 28908,
                    "byte_start": 28897,
                    "column_end": 85,
                    "column_start": 74,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 847,
                    "line_start": 847,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 85,
                        "highlight_start": 74,
                        "text": "                        AnyExcept(ref specifiers) => !in_char_specifiers(&specifiers, c, options),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src\\lib.rs:895:38\n    |\n895 |             todo.push(Ok((next_path, !0 as usize)));\n    |                                      ^^^^^^^^^^^ help: try: `(!0)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 30512,
                        "byte_start": 30501,
                        "column_end": 49,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 895,
                        "line_start": 895,
                        "suggested_replacement": "(!0)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 38,
                            "text": "            todo.push(Ok((next_path, !0 as usize)));"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_cast",
                  "explanation": null
                },
                "level": "warning",
                "message": "casting to the same type is unnecessary (`usize` -> `usize`)",
                "spans": [
                  {
                    "byte_end": 30512,
                    "byte_start": 30501,
                    "column_end": 49,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 895,
                    "line_start": 895,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 38,
                        "text": "            todo.push(Ok((next_path, !0 as usize)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: manual case-insensitive ASCII comparison\n    --> src\\lib.rs:1034:9\n     |\n1034 |         a.to_ascii_lowercase() == b.to_ascii_lowercase()\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_ignore_case_cmp\n     = note: `#[warn(clippy::manual_ignore_case_cmp)]` on by default\nhelp: consider using `.eq_ignore_ascii_case()` instead\n     |\n1034 -         a.to_ascii_lowercase() == b.to_ascii_lowercase()\n1034 +         a.eq_ignore_ascii_case(&b)\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_ignore_case_cmp",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::manual_ignore_case_cmp)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using `.eq_ignore_ascii_case()` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 35784,
                        "byte_start": 35736,
                        "column_end": 57,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1034,
                        "line_start": 1034,
                        "suggested_replacement": "a.eq_ignore_ascii_case(&b)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 9,
                            "text": "        a.to_ascii_lowercase() == b.to_ascii_lowercase()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::manual_ignore_case_cmp",
                  "explanation": null
                },
                "level": "warning",
                "message": "manual case-insensitive ASCII comparison",
                "spans": [
                  {
                    "byte_end": 35784,
                    "byte_start": 35736,
                    "column_end": 57,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1034,
                    "line_start": 1034,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 9,
                        "text": "        a.to_ascii_lowercase() == b.to_ascii_lowercase()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph4yc7vo4/glob-0.3.2#glob@0.3.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph4yc7vo4\\glob-0.3.2\\target\\debug\\deps\\libglob-09b71ec4dd8f4ecf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 13
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 1,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0018",
                    "package": "remove_dir_all",
                    "title": "Race Condition Enabling Link Following and Time-of-check Time-of-use (TOCTOU)",
                    "description": "The remove_dir_all crate is a Rust library that offers additional features over the Rust\nstandard library fs::remove_dir_all function.\n\nIt was possible to trick a privileged process doing a recursive delete in an\nattacker controlled directory into deleting privileged files, on all operating systems.\n\nFor instance, consider deleting a tree called 'etc' in a parent directory\ncalled 'p'. Between calling `remove_dir_all(\"a\")` and remove_dir_all(\"a\")\nactually starting its work, the attacker can move 'p' to 'p-prime', and\nreplace 'p' with a symlink to '/'. Then the privileged process deletes 'p/etc'\nwhich is actually /etc, and now your system is broken. There are some\nmitigations for this exact scenario, such as CWD relative file lookup, but\nthey are not guaranteed - any code using absolute paths will not have that\nprotection in place.\n\nThe same attack could be performed at any point in the directory tree being\ndeleted: if 'a' contains a child directory called 'etc', attacking the\ndeletion by replacing 'a' with a link is possible.\n\nThe new code in this release mitigates the attack within the directory tree\nbeing deleted by using file-handle relative operations: to open 'a/etc', the\npath 'etc' relative to 'a' is opened, where 'a' is represented by a file\ndescriptor (Unix) or handle (Windows). With the exception of the entry points\ninto the directory deletion logic, this is robust against manipulation of the\ndirectory hierarchy, and remove_dir_all will only delete files and directories\ncontained in the tree it is deleting.\n\nThe entry path however is a challenge - as described above, there are some\npotential mitigations, but since using them must be done by the calling code,\nit is hard to be confident about the security properties of the path based\ninterface.\n\nThe new extension trait `RemoveDir` provides an interface where it is much\nharder to get it wrong.\n\n`somedir.remove_dir_contents(\"name-of-child\")`.\n\nCallers can then make their own security evaluation about how to securely get\na directory handle. That is still not particularly obvious, and we're going to\nfollow up with a helper of some sort (probably in the `fs_at` crate). Once\nthat is available, the path based entry points will get deprecated.\n\nIn the interim, processes that might run with elevated privileges should\nfigure out how to securely identify the directory they are going to delete, to\navoid the initial race. Pragmatically, other processes should be fine with the\npath based entry points : this is the same interface `std::fs::remove_dir_all`\noffers, and an unprivileged process running in an attacker controlled\ndirectory can't do anything that the attacker can't already do.",
                    "date": "2023-02-24",
                    "aliases": [
                      "GHSA-mc8h-8q98-g5hr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "TOCTOU"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/advisories/GHSA-mc8h-8q98-g5hr"
                    ],
                    "source": null,
                    "url": "https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.8.0"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "remove_dir_all::ensure_empty_dir": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_all": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_contents": [
                        "<0.8.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "remove_dir_all",
                    "version": "0.5.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "tempdir",
                    "version": "0.3.7",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8",
                    "dependencies": [
                      {
                        "name": "rand",
                        "version": "0.4.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "remove_dir_all",
                        "version": "0.5.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2018-0017",
                    "package": "tempdir",
                    "title": "`tempdir` crate has been deprecated; use `tempfile` instead",
                    "description": "The [`tempdir`](https://crates.io/crates/tempdir) crate has been deprecated\nand the functionality is merged into [`tempfile`](https://crates.io/crates/tempfile).",
                    "date": "2018-02-13",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rust-lang-deprecated/tempdir/pull/46",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "glob",
          "version": "0.3.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/glob/latest/glob/all.html \"show sidebar\")\n# Crate globCopy item path\n[Settings](https://docs.rs/glob/latest/settings.html)\n[Help](https://docs.rs/glob/latest/help.html)\nSummary[Source](https://docs.rs/glob/latest/src/glob/lib.rs.html#11-1501)\nExpand description\nSupport for matching file paths against Unix shell style patterns.\nThe `glob` and `glob_with` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc `glob` function). The methods on the `Pattern` type provide functionality for checking if individual paths match a particular pattern (similar to the libc `fnmatch` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc `glob`/`fnmatch` functions.\n## [\u00a7](https://docs.rs/glob/latest/glob/#examples)Examples\nTo print all jpg files in `/media/` and all of its subdirectories.\n```\nuse glob::glob;\nfor entry in glob(\"/media/**/*.jpg\").expect(\"Failed to read glob pattern\") {\n  match entry {\n    Ok(path) => println!(\"{:?}\", path.display()),\n    Err(e) => println!(\"{:?}\", e),\n  }\n}\n```\n\nTo print all files containing the letter \u201ca\u201d, case insensitive, in a `local` directory relative to the current working directory. This ignores errors instead of printing them.\n```\nuse glob::glob_with;\nuse glob::MatchOptions;\nlet options = MatchOptions {\n  case_sensitive: false,\n  require_literal_separator: false,\n  require_literal_leading_dot: false,\n};\nfor entry in glob_with(\"local/*a*\", options).unwrap() {\n  if let Ok(path) = entry {\n    println!(\"{:?}\", path.display())\n  }\n}\n```\n\n## Structs[\u00a7](https://docs.rs/glob/latest/glob/#structs)\n\n[GlobError](https://docs.rs/glob/latest/glob/struct.GlobError.html \"struct glob::GlobError\")\n    A glob iteration error.\n\n[MatchOptions](https://docs.rs/glob/latest/glob/struct.MatchOptions.html \"struct glob::MatchOptions\")\n    Configuration options to modify the behaviour of `Pattern::matches_with(..)`.\n\n[Paths](https://docs.rs/glob/latest/glob/struct.Paths.html \"struct glob::Paths\")\n    An iterator that yields `Path`s from the filesystem that match a particular pattern.\n\n[Pattern](https://docs.rs/glob/latest/glob/struct.Pattern.html \"struct glob::Pattern\")\n    A compiled Unix shell style pattern.\n\n[PatternError](https://docs.rs/glob/latest/glob/struct.PatternError.html \"struct glob::PatternError\")\n    A pattern parsing error.\n## Functions[\u00a7](https://docs.rs/glob/latest/glob/#functions)\n\n[glob](https://docs.rs/glob/latest/glob/fn.glob.html \"fn glob::glob\")\n    Return an iterator that produces all the `Path`s that match the given pattern using default match options, which may be absolute or relative to the current working directory.\n\n[glob_with](https://docs.rs/glob/latest/glob/fn.glob_with.html \"fn glob::glob_with\")\n    Return an iterator that produces all the `Path`s that match the given pattern using the specified match options, which may be absolute or relative to the current working directory.\n## Type Aliases[\u00a7](https://docs.rs/glob/latest/glob/#types)\n\n[GlobResult](https://docs.rs/glob/latest/glob/type.GlobResult.html \"type glob::GlobResult\")\n    An alias for a glob iteration result.\n",
            "markdown_with_citations": "[](https://docs.rs/glob/latest/glob/all.html \"show sidebar\")\n# Crate globCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nSupport for matching file paths against Unix shell style patterns.\nThe `glob` and `glob_with` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc `glob` function). The methods on the `Pattern` type provide functionality for checking if individual paths match a particular pattern (similar to the libc `fnmatch` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc `glob`/`fnmatch` functions.\n## \u00a7\u27e84\u27e9Examples\nTo print all jpg files in `/media/` and all of its subdirectories.\n```\nuse glob::glob;\nfor entry in glob(\"/media/**/*.jpg\").expect(\"Failed to read glob pattern\") {\n  match entry {\n    Ok(path) => println!(\"{:?}\", path.display()),\n    Err(e) => println!(\"{:?}\", e),\n  }\n}\n```\n\nTo print all files containing the letter \u201ca\u201d, case insensitive, in a `local` directory relative to the current working directory. This ignores errors instead of printing them.\n```\nuse glob::glob_with;\nuse glob::MatchOptions;\nlet options = MatchOptions {\n  case_sensitive: false,\n  require_literal_separator: false,\n  require_literal_leading_dot: false,\n};\nfor entry in glob_with(\"local/*a*\", options).unwrap() {\n  if let Ok(path) = entry {\n    println!(\"{:?}\", path.display())\n  }\n}\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nGlobError\u27e86\u27e9\n    A glob iteration error.\n\nMatchOptions\u27e87\u27e9\n    Configuration options to modify the behaviour of `Pattern::matches_with(..)`.\n\nPaths\u27e88\u27e9\n    An iterator that yields `Path`s from the filesystem that match a particular pattern.\n\nPattern\u27e89\u27e9\n    A compiled Unix shell style pattern.\n\nPatternError\u27e810\u27e9\n    A pattern parsing error.\n## Functions\u00a7\u27e811\u27e9\n\nglob\u27e812\u27e9\n    Return an iterator that produces all the `Path`s that match the given pattern using default match options, which may be absolute or relative to the current working directory.\n\nglob_with\u27e813\u27e9\n    Return an iterator that produces all the `Path`s that match the given pattern using the specified match options, which may be absolute or relative to the current working directory.\n## Type Aliases\u00a7\u27e814\u27e9\n\nGlobResult\u27e815\u27e9\n    An alias for a glob iteration result.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/glob/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/glob/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/glob/latest/src/glob/lib.rs.html#11-1501: Source\n\u27e84\u27e9 https://docs.rs/glob/latest/glob/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/glob/latest/glob/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/glob/latest/glob/struct.GlobError.html: struct glob::GlobError - GlobError\n\u27e87\u27e9 https://docs.rs/glob/latest/glob/struct.MatchOptions.html: struct glob::MatchOptions - MatchOptions\n\u27e88\u27e9 https://docs.rs/glob/latest/glob/struct.Paths.html: struct glob::Paths - Paths\n\u27e89\u27e9 https://docs.rs/glob/latest/glob/struct.Pattern.html: struct glob::Pattern - Pattern\n\u27e810\u27e9 https://docs.rs/glob/latest/glob/struct.PatternError.html: struct glob::PatternError - PatternError\n\u27e811\u27e9 https://docs.rs/glob/latest/glob/#functions: \u00a7\n\u27e812\u27e9 https://docs.rs/glob/latest/glob/fn.glob.html: fn glob::glob - glob\n\u27e813\u27e9 https://docs.rs/glob/latest/glob/fn.glob_with.html: fn glob::glob_with - glob_with\n\u27e814\u27e9 https://docs.rs/glob/latest/glob/#types: \u00a7\n\u27e815\u27e9 https://docs.rs/glob/latest/glob/type.GlobResult.html: type glob::GlobResult - GlobResult\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "glob",
          "version": "0.3.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/glob/latest/glob/all.html \"show sidebar\")\n# Crate globCopy item path\n[Settings](https://docs.rs/glob/latest/settings.html)\n[Help](https://docs.rs/glob/latest/help.html)\nSummary[Source](https://docs.rs/glob/latest/src/glob/lib.rs.html#11-1501)\nExpand description\nSupport for matching file paths against Unix shell style patterns.\nThe `glob` and `glob_with` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc `glob` function). The methods on the `Pattern` type provide functionality for checking if individual paths match a particular pattern (similar to the libc `fnmatch` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc `glob`/`fnmatch` functions.\n## [\u00a7](https://docs.rs/glob/latest/glob/#examples)Examples\nTo print all jpg files in `/media/` and all of its subdirectories.\n```\nuse glob::glob;\nfor entry in glob(\"/media/**/*.jpg\").expect(\"Failed to read glob pattern\") {\n  match entry {\n    Ok(path) => println!(\"{:?}\", path.display()),\n    Err(e) => println!(\"{:?}\", e),\n  }\n}\n```\n\nTo print all files containing the letter \u201ca\u201d, case insensitive, in a `local` directory relative to the current working directory. This ignores errors instead of printing them.\n```\nuse glob::glob_with;\nuse glob::MatchOptions;\nlet options = MatchOptions {\n  case_sensitive: false,\n  require_literal_separator: false,\n  require_literal_leading_dot: false,\n};\nfor entry in glob_with(\"local/*a*\", options).unwrap() {\n  if let Ok(path) = entry {\n    println!(\"{:?}\", path.display())\n  }\n}\n```\n\n## Structs[\u00a7](https://docs.rs/glob/latest/glob/#structs)\n\n[GlobError](https://docs.rs/glob/latest/glob/struct.GlobError.html \"struct glob::GlobError\")\n    A glob iteration error.\n\n[MatchOptions](https://docs.rs/glob/latest/glob/struct.MatchOptions.html \"struct glob::MatchOptions\")\n    Configuration options to modify the behaviour of `Pattern::matches_with(..)`.\n\n[Paths](https://docs.rs/glob/latest/glob/struct.Paths.html \"struct glob::Paths\")\n    An iterator that yields `Path`s from the filesystem that match a particular pattern.\n\n[Pattern](https://docs.rs/glob/latest/glob/struct.Pattern.html \"struct glob::Pattern\")\n    A compiled Unix shell style pattern.\n\n[PatternError](https://docs.rs/glob/latest/glob/struct.PatternError.html \"struct glob::PatternError\")\n    A pattern parsing error.\n## Functions[\u00a7](https://docs.rs/glob/latest/glob/#functions)\n\n[glob](https://docs.rs/glob/latest/glob/fn.glob.html \"fn glob::glob\")\n    Return an iterator that produces all the `Path`s that match the given pattern using default match options, which may be absolute or relative to the current working directory.\n\n[glob_with](https://docs.rs/glob/latest/glob/fn.glob_with.html \"fn glob::glob_with\")\n    Return an iterator that produces all the `Path`s that match the given pattern using the specified match options, which may be absolute or relative to the current working directory.\n## Type Aliases[\u00a7](https://docs.rs/glob/latest/glob/#types)\n\n[GlobResult](https://docs.rs/glob/latest/glob/type.GlobResult.html \"type glob::GlobResult\")\n    An alias for a glob iteration result.\n",
            "markdown_with_citations": "[](https://docs.rs/glob/latest/glob/all.html \"show sidebar\")\n# Crate globCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nSupport for matching file paths against Unix shell style patterns.\nThe `glob` and `glob_with` functions allow querying the filesystem for all files that match a particular pattern (similar to the libc `glob` function). The methods on the `Pattern` type provide functionality for checking if individual paths match a particular pattern (similar to the libc `fnmatch` function).\nFor consistency across platforms, and for Windows support, this module is implemented entirely in Rust rather than deferring to the libc `glob`/`fnmatch` functions.\n## \u00a7\u27e84\u27e9Examples\nTo print all jpg files in `/media/` and all of its subdirectories.\n```\nuse glob::glob;\nfor entry in glob(\"/media/**/*.jpg\").expect(\"Failed to read glob pattern\") {\n  match entry {\n    Ok(path) => println!(\"{:?}\", path.display()),\n    Err(e) => println!(\"{:?}\", e),\n  }\n}\n```\n\nTo print all files containing the letter \u201ca\u201d, case insensitive, in a `local` directory relative to the current working directory. This ignores errors instead of printing them.\n```\nuse glob::glob_with;\nuse glob::MatchOptions;\nlet options = MatchOptions {\n  case_sensitive: false,\n  require_literal_separator: false,\n  require_literal_leading_dot: false,\n};\nfor entry in glob_with(\"local/*a*\", options).unwrap() {\n  if let Ok(path) = entry {\n    println!(\"{:?}\", path.display())\n  }\n}\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nGlobError\u27e86\u27e9\n    A glob iteration error.\n\nMatchOptions\u27e87\u27e9\n    Configuration options to modify the behaviour of `Pattern::matches_with(..)`.\n\nPaths\u27e88\u27e9\n    An iterator that yields `Path`s from the filesystem that match a particular pattern.\n\nPattern\u27e89\u27e9\n    A compiled Unix shell style pattern.\n\nPatternError\u27e810\u27e9\n    A pattern parsing error.\n## Functions\u00a7\u27e811\u27e9\n\nglob\u27e812\u27e9\n    Return an iterator that produces all the `Path`s that match the given pattern using default match options, which may be absolute or relative to the current working directory.\n\nglob_with\u27e813\u27e9\n    Return an iterator that produces all the `Path`s that match the given pattern using the specified match options, which may be absolute or relative to the current working directory.\n## Type Aliases\u00a7\u27e814\u27e9\n\nGlobResult\u27e815\u27e9\n    An alias for a glob iteration result.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/glob/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/glob/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/glob/latest/src/glob/lib.rs.html#11-1501: Source\n\u27e84\u27e9 https://docs.rs/glob/latest/glob/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/glob/latest/glob/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/glob/latest/glob/struct.GlobError.html: struct glob::GlobError - GlobError\n\u27e87\u27e9 https://docs.rs/glob/latest/glob/struct.MatchOptions.html: struct glob::MatchOptions - MatchOptions\n\u27e88\u27e9 https://docs.rs/glob/latest/glob/struct.Paths.html: struct glob::Paths - Paths\n\u27e89\u27e9 https://docs.rs/glob/latest/glob/struct.Pattern.html: struct glob::Pattern - Pattern\n\u27e810\u27e9 https://docs.rs/glob/latest/glob/struct.PatternError.html: struct glob::PatternError - PatternError\n\u27e811\u27e9 https://docs.rs/glob/latest/glob/#functions: \u00a7\n\u27e812\u27e9 https://docs.rs/glob/latest/glob/fn.glob.html: fn glob::glob - glob\n\u27e813\u27e9 https://docs.rs/glob/latest/glob/fn.glob_with.html: fn glob::glob_with - glob_with\n\u27e814\u27e9 https://docs.rs/glob/latest/glob/#types: \u00a7\n\u27e815\u27e9 https://docs.rs/glob/latest/glob/type.GlobResult.html: type glob::GlobResult - GlobResult\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `glob` crate provides functionality for matching file paths against Unix shell-style patterns, enabling filesystem queries for paths that match specific patterns. It includes the `glob` and `glob_with` functions for pattern-based path iteration, customizable matching options via `MatchOptions`, and support for case-insensitive or flexible separator handling. Fully implemented in Rust for cross-platform consistency, it is ideal for tasks like recursive file searching or pattern-based path filtering.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: File Matching Capabilities  \n\u2705 Factual: The `glob` crate supports matching file paths against Unix shell-style patterns, including recursive patterns like `**` for matching files in subdirectories.  \n\u274c Counterfactual: The `glob` crate only supports exact file path matching and does not allow recursive patterns like `**`.  \n\n---\n\n### Pair 2: Cross-Platform Implementation  \n\u2705 Factual: The `glob` crate is implemented entirely in Rust for consistency across platforms, including Windows, and does not rely on libc's `glob` or `fnmatch` functions.  \n\u274c Counterfactual: The `glob` crate relies on libc's `glob` and `fnmatch` functions for Unix compatibility, making it less consistent across platforms like Windows.  \n\n---\n\n### Pair 3: Case Sensitivity Options  \n\u2705 Factual: The `glob_with` function allows users to specify case-insensitive matching through the `MatchOptions` struct.  \n\u274c Counterfactual: The `glob_with` function does not support case-insensitive matching and always performs case-sensitive comparisons.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-28c2dec1-4c8e2055-1751260786",
      "timestamp": "2025-06-30T05:19:46.430645+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]