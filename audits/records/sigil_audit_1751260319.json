[
  {
    "execution_id": "exec-41d62868-3a75acc2-1751260311",
    "timestamp": "2025-06-30T05:11:51.222122+00:00",
    "sacred_chain": {
      "input_data": "yansi",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'yansi' -> 'yansi'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "yansi",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/yansi",
            "title": "yansi v1.0.1",
            "content": {
              "raw_markdown": "#  yansi v1.0.1\nA dead simple ANSI terminal color painting library. \n  * [ #paint ](https://crates.io/keywords/paint)\n  * [ #format ](https://crates.io/keywords/format)\n  * [ #color ](https://crates.io/keywords/color)\n  * [ #ansi ](https://crates.io/keywords/ansi)\n  * [ #terminal ](https://crates.io/keywords/terminal)\n\n\n  * [ Readme ](https://crates.io/crates/yansi)\n  * [ 17 Versions ](https://crates.io/crates/yansi/versions)\n  * [ Dependencies ](https://crates.io/crates/yansi/dependencies)\n  * [ Dependents ](https://crates.io/crates/yansi/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.63.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n73.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add yansi\nOr add the following line to your Cargo.toml:\nyansi = \"1.0.1\"\n## Documentation\n[ docs.rs/yansi ](https://docs.rs/yansi)\n## Repository\n[ github.com/SergioBenitez/yansi ](https://github.com/SergioBenitez/yansi)\n## Owners\n## Categories\n  * [Command-line interface](https://crates.io/categories/command-line-interface)\n\n\n[ Report crate ](https://crates.io/support?crate=yansi&inquire=crate-violation)\n### Stats Overview\n85,678,343 Downloads all time\n17 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  yansi v1.0.1\nA dead simple ANSI terminal color painting library. \n  *  #paint \u27e81\u27e9\n  *  #format \u27e82\u27e9\n  *  #color \u27e83\u27e9\n  *  #ansi \u27e84\u27e9\n  *  #terminal \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  17 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.63.0 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n73.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add yansi\nOr add the following line to your Cargo.toml:\nyansi = \"1.0.1\"\n## Documentation\n docs.rs/yansi \u27e812\u27e9\n## Repository\n github.com/SergioBenitez/yansi \u27e813\u27e9\n## Owners\n## Categories\n  * Command-line interface\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n85,678,343 Downloads all time\n17 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/paint:  #paint \n\u27e82\u27e9 https://crates.io/keywords/format:  #format \n\u27e83\u27e9 https://crates.io/keywords/color:  #color \n\u27e84\u27e9 https://crates.io/keywords/ansi:  #ansi \n\u27e85\u27e9 https://crates.io/keywords/terminal:  #terminal \n\u27e86\u27e9 https://crates.io/crates/yansi:  Readme \n\u27e87\u27e9 https://crates.io/crates/yansi/versions:  17 Versions \n\u27e88\u27e9 https://crates.io/crates/yansi/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/yansi/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://docs.rs/yansi:  docs.rs/yansi \n\u27e813\u27e9 https://github.com/SergioBenitez/yansi:  github.com/SergioBenitez/yansi \n\u27e814\u27e9 https://crates.io/categories/command-line-interface: Command-line interface\n\u27e815\u27e9 https://crates.io/support?crate=yansi&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1384,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114100.9201849"
          },
          "docs_rs": {
            "url": "https://docs.rs/yansi",
            "title": "Crate yansiCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/yansi/latest/yansi/all.html \"show sidebar\")\n# Crate yansiCopy item path\n[Settings](https://docs.rs/yansi/latest/settings.html)\n[Help](https://docs.rs/yansi/latest/help.html)\nSummary[Source](https://docs.rs/yansi/latest/src/yansi/lib.rs.html#1-373)\nExpand description\nA dead simple ANSI terminal color painting library.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#features)Features\nWhy _y_ et another _ANSI_ terminal coloring library? Here are some reasons:\n  * This library makes simple things _simple_ : `use` [`Paint`](https://docs.rs/yansi/latest/yansi/trait.Paint.html \"trait yansi::Paint\") and go!\n  * Zero dependencies by default. It really is simple.\n  * Zero allocations except as needed by opt-in [wrapping](https://docs.rs/yansi/latest/yansi/#wrapping).\n  * [Automatic Windows support](https://docs.rs/yansi/latest/yansi/#windows) for the vast majority (95%+) of Windows users.\n  * [Featureful `no_std`](https://docs.rs/yansi/latest/yansi/#crate-features), no-`alloc`, support with `default-features = false`.\n  * [`Style` constructors are `const`](https://docs.rs/yansi/latest/yansi/#uniform-const-builders): store styles statically, even with dynamic conditions!\n  * _Any_ type implementing a formatting trait can be styled, not just strings.\n  * Styling can be [enabled](https://docs.rs/yansi/latest/yansi/fn.enable.html \"fn yansi::enable\") and [disabled](https://docs.rs/yansi/latest/yansi/fn.disable.html \"fn yansi::disable\") globally and [dynamically](https://docs.rs/yansi/latest/yansi/fn.whenever.html \"fn yansi::whenever\"), on the fly.\n  * A `Style` can be predicated on arbitrary [conditions](https://docs.rs/yansi/latest/yansi/#per-style).\n  * Formatting specifiers like `{:x}` and `{:08b}` are supported and preserved!\n  * [Built-in (optional) conditions](https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions \"struct yansi::Condition\") for [TTY detection](https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-1 \"struct yansi::Condition\") and [common environment variables](https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-2 \"struct yansi::Condition\").\n  * Arbitrary items can be [_masked_](https://docs.rs/yansi/latest/yansi/#masking) for selective disabling.\n  * Styling can [_wrap_](https://docs.rs/yansi/latest/yansi/#wrapping) to preserve styling across resets.\n  * Styling can [_linger_](https://docs.rs/yansi/latest/yansi/#lingering) beyond a single value.\n  * Experimental support for [hyperlinking](https://docs.rs/yansi/latest/yansi/hyperlink/index.html \"mod yansi::hyperlink\") is included.\n  * The name `yansi` is pretty cool \ud83d\ude0e.\n\n\nAll that said, `yansi` borrows API ideas from older libraries as well as implementation details from [`ansi_term`](https://crates.io/crates/ansi_term).\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#usage)Usage\nThe [`Paint`](https://docs.rs/yansi/latest/yansi/trait.Paint.html \"trait yansi::Paint\") trait is implemented for every type. Import it and call chainable builder methods:\n```\nuse yansi::Paint;\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().italic(),\n  \"STOP\".white().on_red().bright().underline().bold());\n```\n\n`>` Testing, **Ready** , _**Set**_ , _**STOP**_!\nThe methods return a [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\") type which consists of a [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\") and a reference to the receiver. Displaying a [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\") (via `print!()`, `format!()`, etc) results in emitting ANSI escape codes that effectuate the style.\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#uniform-const-builders)Uniform `const` Builders\nAll builder methods are uniformly available for [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\"), [`Color`](https://docs.rs/yansi/latest/yansi/enum.Color.html \"enum yansi::Color\"), and [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\"), which means you can chain calls across library types. All methods are `const`, allowing creations of `const` or `static` [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\")s. A `Style` can be directly applied to values with [`.paint()`](https://docs.rs/yansi/latest/yansi/trait.Paint.html#method.paint \"method yansi::Paint::paint\"), from [`Paint::paint()`](https://docs.rs/yansi/latest/yansi/trait.Paint.html#method.paint \"method yansi::Paint::paint\"), available for every type:\n```\nuse yansi::{Paint, Style, Color::*};\n// `const` constructors allow static `Style`s for easy reuse\nstatic ALERT: Style = White.bright().underline().italic().on_red();\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().bold(),\n  \"STOP\".paint(ALERT));\n```\n\n`>` Testing, **Ready** , **Set** , __STOP__!\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#conditional-styling)Conditional Styling\n#### [\u00a7](https://docs.rs/yansi/latest/yansi/#globally)Globally\nStyling is enabled by default but can be enabled and disabled globally via [`enable()`](https://docs.rs/yansi/latest/yansi/fn.enable.html \"fn yansi::enable\") and [`disable()`](https://docs.rs/yansi/latest/yansi/fn.disable.html \"fn yansi::disable\"). When styling is disabled, no ANSI escape codes are emitted, and [_masked_](https://docs.rs/yansi/latest/yansi/#masking) values are omitted entirely.\nGlobal styling can also be dynamically enabled and disabled using [`whenever()`](https://docs.rs/yansi/latest/yansi/fn.whenever.html \"fn yansi::whenever\") with an arbitrary [`Condition`](https://docs.rs/yansi/latest/yansi/struct.Condition.html \"struct yansi::Condition\"): a function that returns `true` or `false`. This condition is evaluated each time a [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\") item is displayed. The associated styling is enabled, and mask values emitted, exactly when and only when the condition returns `true`.\n#### [\u00a7](https://docs.rs/yansi/latest/yansi/#per-style)Per-`Style`\nA specific `Style` can itself be conditionally applied by using [`.whenever()`](https://docs.rs/yansi/latest/yansi/struct.Style.html#method.whenever \"method yansi::Style::whenever\"):\n```\nuse yansi::{Paint, Style, Color::*, Condition};\nstatic WARNING: Style = Black.bold().on_yellow().whenever(Condition::STDERR_IS_TTY);\neprintln!(\"{}\", \"Bees can sting!\".paint(WARNING));\n```\n\nWith the above, if `stderr` is a TTY, then: `>` **Bees can sting!**\nIf it is not a TTY, styling is not emitted: `>` Bees can sting!\nSee [`Condition`](https://docs.rs/yansi/latest/yansi/struct.Condition.html \"struct yansi::Condition\") for a list of built-in conditions which require enabling crate features.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#quirks)Quirks\nAs a convenience, `yansi` implements several \u201cquirks\u201d, applicable via [`Quirk`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html \"enum yansi::Quirk\") and the respective methods, that modify if and how styling is presented to the terminal. These quirks do not correspond to any ANSI styling sequences.\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#masking)Masking\nItems can be arbitrarily _masked_ with the [`mask()`](https://docs.rs/yansi/latest/yansi/trait.Paint.html#tymethod.mask \"method yansi::Paint::mask\") builder method. Masked values are not emitted when styling is disabled, globally or for a given style. This allows selective output based on whether styling is enabled.\nOne use for this feature is to print certain characters only when styling is enabled. For instance, you might wish to emit the \ud83c\udfa8 emoji when coloring is enabled but not otherwise. This can be accomplished by masking the emoji:\n```\nuse yansi::Paint;\nprintln!(\"I like colors!{}\", \" \ud83c\udfa8\".mask());\n```\n\nWhen styling is enabled, this prints: `>` I like colors! \ud83c\udfa8\nWith styling disabled, this prints: `>` I like colors!\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#wrapping)Wrapping\n**Note:** _Either the`std` or `alloc` feature is required for wrapping. `std` is enabled by default. See [crate features](https://docs.rs/yansi/latest/yansi/#crate-features)._\nStyling can _wrap_ via [`Quirk::Wrap`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Wrap \"variant yansi::Quirk::Wrap\") or the equivalent [`wrap()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.wrap \"method yansi::Painted::wrap\") constructor. A wrapping style modifies any styling resets emitted by the internal value so that they correspond to the wrapping style. In other words, the \u201creset\u201d style of the wrapped item is modified to be the style being `.wrap()`d.\nWrapping is useful in situations where opaque and arbitrary values must be styled consistently irrespective of any existing styling. For example, a generic logger might want to style messages based on log levels consistently, even when those messages may already include styling. Wrapping exists to enable such consistent styling:\n```\nuse yansi::Paint;\n// Imagine that `inner` is opaque and we don't know it's styling.\nlet inner = format!(\"{} and {}\", \"Stop\".red(), \"Go\".green());\n// We can use `wrap` to ensure anything in `inner` not styled is blue.\nprintln!(\"Hey! {}\", inner.blue().wrap());\n```\n\nThanks to wrapping, this prints: `>` Hey!  Stop and Go\nWithout wrapping, the reset after `\"Stop\".red()` would not be overwritten: `>` Hey! Stop and Go\nWrapping incurs a performance cost due to an extra allocation and replacement if the wrapped item has styling applied to it. Otherwise, it does not allocate nor incur a meaningful performance cost.\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#lingering)Lingering\nStyling can _linger_ beyond a single value via [`Quirk::Linger`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Linger \"variant yansi::Quirk::Linger\") or the equivalent [`linger()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.linger \"method yansi::Painted::linger\") constructor. A lingering style does not reset itself after being applied. In other words, the style lingers on beyond the value it\u2019s applied to, until something else resets the respective styling.\nThe complement to lingering is force resetting via [`Quirk::Resetting`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Resetting \"variant yansi::Quirk::Resetting\") or the equivalent [`resetting()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.resetting \"method yansi::Painted::resetting\") constructor. Force resetting, as the name implies, forces a reset suffix to be emitted after the value, irrespective of any lingering applied. It can be used as a way to finalize a lingering style.\nLingering itself is useful in situations where a given style is to be repeated across multiple values, or when style is intended to persist even across values that are not styled with `yansi`. It also allows avoiding unnecessarily repeated ANSI code sequences. The examples below illustrate some scenarios in which lingering is useful:\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic().linger(),\n  \"you\".on_yellow(), // doesn't linger, so all styling is reset here\n  \"today\".blue());\n```\n\n`>` Hello!  _How _are things with you__ today?\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic(), // doesn't linger, so all styling is reset here\n  \"you\".on_yellow().linger(),\n  \"today\".blue()); // doesn't linger; styling is reset\n```\n\n`>` Hello!  _How _are__ things with  you today?\n```\nuse yansi::Paint;\nprintln!(\"{} B {} {} {} F\",\n  \"A\".red().linger(),\n  \"C\".underline().linger(),\n  \"D\", // doesn't linger, but no styling applied, thus no reset\n  \"E\".resetting()); // explicitly reset\n```\n\n`>` A B _C D E_ F\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#brightening)Brightening\nMost pimrary colors are available in regular and _bright_ variants, e.g., [`Color::Red`](https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.Red \"variant yansi::Color::Red\") and [`Color::BrightRed`](https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.BrightRed \"variant yansi::Color::BrightRed\"). The [`Quirk::Bright`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Bright \"variant yansi::Quirk::Bright\") and [`Quirk::OnBright`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.OnBright \"variant yansi::Quirk::OnBright\") quirks, typically applied via [`.bright()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.bright \"method yansi::Painted::bright\") and [`.on_bright()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.on_bright \"method yansi::Painted::on_bright\"), provide an alternative, convenient mechanism to select the bright variant of the selected foreground or background color, respectively. The quirk provides no additional colors and is equivalent to selecting the bright variants directly.\n```\nuse yansi::Paint;\n// These are all equivalent.\nprint!(\"{}\", \"Regular\".red());\nprint!(\"{}\", \"Bright\".bright_red());\nprint!(\"{}\", \"Bright\".bright().red());\nprint!(\"{}\", \"Bright\".red().bright());\n// The `bright` quirk lets use choose the bright variants of _any_ color,\n// even when the color or style is unknown at the call site.\nprint!(\"{}\", \"Normal\".paint(STYLE));\nprint!(\"{}\", \"Bright\".paint(STYLE).bright());\n```\n\n`>` Regular Bright Bright Bright **Normal** **Bright**\nThe `bright()` quirk can be applied before or after a color is selected while having the same effect.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#windows)Windows\nStyling is supported and enabled automatically on Windows beginning with the Windows 10 Anniversary Update, or about [96% of all Windows machines worldwide](https://gs.statcounter.com/os-version-market-share/windows/desktop/worldwide), and likely closer to 100% of developer machines (e.g., 99% of visitors to [rocket.rs](https://rocket.rs) on Windows are on Windows 10+).\nYansi enables styling support on Windows by querying the Windows API on the first attempt to color. If support is available, it is enabled. If support is not available, styling is disabled and no styling sequences are emitted.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#crate-features)Crate Features\nFeature| Default?| Also Enables| Notes  \n---|---|---|---  \n`std`| **Y**| `alloc`|  Use `std` library.  \n`alloc`| **Y**| |  Use `alloc`. Enables [wrapping](https://docs.rs/yansi/latest/yansi/#wrapping).  \n`detect-tty`| N| `std`| See [optional conditions](https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions \"struct yansi::Condition\").  \n`detect-env`| N| `std`| See [optional conditions](https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions \"struct yansi::Condition\").  \n`hyperlink`| N| `std`| Enables [hyperlinking](https://docs.rs/yansi/latest/yansi/hyperlink/index.html \"mod yansi::hyperlink\") support.  \nWith `default-features = false`, this crate is `#[no_std]`.\nWithout any features enabled, all functionality except [wrapping](https://docs.rs/yansi/latest/yansi/#wrapping) is available. To recover wrapping _with_ `#[no_std]`, set `default-features = false` and enable the `alloc` feature, which requires `alloc` support.\n## Modules[\u00a7](https://docs.rs/yansi/latest/yansi/#modules)\n\n[hyperlink](https://docs.rs/yansi/latest/yansi/hyperlink/index.html \"mod yansi::hyperlink\")`hyperlink`\n    Experimental support for hyperlinking.\n## Structs[\u00a7](https://docs.rs/yansi/latest/yansi/#structs)\n\n[Condition](https://docs.rs/yansi/latest/yansi/struct.Condition.html \"struct yansi::Condition\")\n    A function that decides whether styling should be applied.\n\n[Painted](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\")\n    An arbitrary value with a [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\") applied to it.\n\n[Style](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\")\n    A set of styling options.\n## Enums[\u00a7](https://docs.rs/yansi/latest/yansi/#enums)\n\n[Attribute](https://docs.rs/yansi/latest/yansi/enum.Attribute.html \"enum yansi::Attribute\")\n    Enum representing text attributes, largely for text formatting.\n\n[Color](https://docs.rs/yansi/latest/yansi/enum.Color.html \"enum yansi::Color\")\n    Enum representing a terminal color.\n\n[Quirk](https://docs.rs/yansi/latest/yansi/enum.Quirk.html \"enum yansi::Quirk\")\n    Enum representing a `yansi` quirk.\n## Traits[\u00a7](https://docs.rs/yansi/latest/yansi/#traits)\n\n[Paint](https://docs.rs/yansi/latest/yansi/trait.Paint.html \"trait yansi::Paint\")\n    A trait to apply styling to any value. Implemented for all types.\n## Functions[\u00a7](https://docs.rs/yansi/latest/yansi/#functions)\n\n[disable](https://docs.rs/yansi/latest/yansi/fn.disable.html \"fn yansi::disable\")\n    Unconditionally disables styling globally.\n\n[enable](https://docs.rs/yansi/latest/yansi/fn.enable.html \"fn yansi::enable\")\n    Unconditionally enables styling globally.\n\n[is_enabled](https://docs.rs/yansi/latest/yansi/fn.is_enabled.html \"fn yansi::is_enabled\")\n    Returns `true` if styling is globally enabled and `false` otherwise.\n\n[whenever](https://docs.rs/yansi/latest/yansi/fn.whenever.html \"fn yansi::whenever\")\n    Dynamically enables and disables styling globally based on `condition`.\n",
              "markdown_with_citations": "[](https://docs.rs/yansi/latest/yansi/all.html \"show sidebar\")\n# Crate yansiCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA dead simple ANSI terminal color painting library.\n## \u00a7\u27e84\u27e9Features\nWhy _y_ et another _ANSI_ terminal coloring library? Here are some reasons:\n  * This library makes simple things _simple_ : `use` `Paint`\u27e85\u27e9 and go!\n  * Zero dependencies by default. It really is simple.\n  * Zero allocations except as needed by opt-in wrapping\u27e86\u27e9.\n  * Automatic Windows support\u27e87\u27e9 for the vast majority (95%+) of Windows users.\n  * Featureful `no_std`\u27e88\u27e9, no-`alloc`, support with `default-features = false`.\n  * `Style` constructors are `const`\u27e89\u27e9: store styles statically, even with dynamic conditions!\n  * _Any_ type implementing a formatting trait can be styled, not just strings.\n  * Styling can be enabled\u27e810\u27e9 and disabled\u27e811\u27e9 globally and dynamically\u27e812\u27e9, on the fly.\n  * A `Style` can be predicated on arbitrary conditions\u27e813\u27e9.\n  * Formatting specifiers like `{:x}` and `{:08b}` are supported and preserved!\n  * Built-in (optional) conditions\u27e814\u27e9 for TTY detection\u27e815\u27e9 and common environment variables\u27e816\u27e9.\n  * Arbitrary items can be _masked_\u27e817\u27e9 for selective disabling.\n  * Styling can _wrap_\u27e86\u27e9 to preserve styling across resets.\n  * Styling can _linger_\u27e818\u27e9 beyond a single value.\n  * Experimental support for hyperlinking\u27e819\u27e9 is included.\n  * The name `yansi` is pretty cool \ud83d\ude0e.\n\n\nAll that said, `yansi` borrows API ideas from older libraries as well as implementation details from `ansi_term`\u27e820\u27e9.\n## \u00a7\u27e821\u27e9Usage\nThe `Paint`\u27e85\u27e9 trait is implemented for every type. Import it and call chainable builder methods:\n```\nuse yansi::Paint;\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().italic(),\n  \"STOP\".white().on_red().bright().underline().bold());\n```\n\n`>` Testing, **Ready** , _**Set**_ , _**STOP**_!\nThe methods return a `Painted`\u27e822\u27e9 type which consists of a `Style`\u27e823\u27e9 and a reference to the receiver. Displaying a `Painted`\u27e822\u27e9 (via `print!()`, `format!()`, etc) results in emitting ANSI escape codes that effectuate the style.\n### \u00a7\u27e89\u27e9Uniform `const` Builders\nAll builder methods are uniformly available for `Style`\u27e823\u27e9, `Color`\u27e824\u27e9, and `Painted`\u27e822\u27e9, which means you can chain calls across library types. All methods are `const`, allowing creations of `const` or `static` `Style`\u27e823\u27e9s. A `Style` can be directly applied to values with `.paint()`\u27e825\u27e9, from `Paint::paint()`\u27e825\u27e9, available for every type:\n```\nuse yansi::{Paint, Style, Color::*};\n// `const` constructors allow static `Style`s for easy reuse\nstatic ALERT: Style = White.bright().underline().italic().on_red();\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().bold(),\n  \"STOP\".paint(ALERT));\n```\n\n`>` Testing, **Ready** , **Set** , __STOP__!\n### \u00a7\u27e826\u27e9Conditional Styling\n#### \u00a7\u27e827\u27e9Globally\nStyling is enabled by default but can be enabled and disabled globally via `enable()`\u27e810\u27e9 and `disable()`\u27e811\u27e9. When styling is disabled, no ANSI escape codes are emitted, and _masked_\u27e817\u27e9 values are omitted entirely.\nGlobal styling can also be dynamically enabled and disabled using `whenever()`\u27e812\u27e9 with an arbitrary `Condition`\u27e828\u27e9: a function that returns `true` or `false`. This condition is evaluated each time a `Painted`\u27e822\u27e9 item is displayed. The associated styling is enabled, and mask values emitted, exactly when and only when the condition returns `true`.\n#### \u00a7\u27e813\u27e9Per-`Style`\nA specific `Style` can itself be conditionally applied by using `.whenever()`\u27e829\u27e9:\n```\nuse yansi::{Paint, Style, Color::*, Condition};\nstatic WARNING: Style = Black.bold().on_yellow().whenever(Condition::STDERR_IS_TTY);\neprintln!(\"{}\", \"Bees can sting!\".paint(WARNING));\n```\n\nWith the above, if `stderr` is a TTY, then: `>` **Bees can sting!**\nIf it is not a TTY, styling is not emitted: `>` Bees can sting!\nSee `Condition`\u27e828\u27e9 for a list of built-in conditions which require enabling crate features.\n## \u00a7\u27e830\u27e9Quirks\nAs a convenience, `yansi` implements several \u201cquirks\u201d, applicable via `Quirk`\u27e831\u27e9 and the respective methods, that modify if and how styling is presented to the terminal. These quirks do not correspond to any ANSI styling sequences.\n### \u00a7\u27e817\u27e9Masking\nItems can be arbitrarily _masked_ with the `mask()`\u27e832\u27e9 builder method. Masked values are not emitted when styling is disabled, globally or for a given style. This allows selective output based on whether styling is enabled.\nOne use for this feature is to print certain characters only when styling is enabled. For instance, you might wish to emit the \ud83c\udfa8 emoji when coloring is enabled but not otherwise. This can be accomplished by masking the emoji:\n```\nuse yansi::Paint;\nprintln!(\"I like colors!{}\", \" \ud83c\udfa8\".mask());\n```\n\nWhen styling is enabled, this prints: `>` I like colors! \ud83c\udfa8\nWith styling disabled, this prints: `>` I like colors!\n### \u00a7\u27e86\u27e9Wrapping\n**Note:** _Either the`std` or `alloc` feature is required for wrapping. `std` is enabled by default. See crate features\u27e88\u27e9._\nStyling can _wrap_ via `Quirk::Wrap`\u27e833\u27e9 or the equivalent `wrap()`\u27e834\u27e9 constructor. A wrapping style modifies any styling resets emitted by the internal value so that they correspond to the wrapping style. In other words, the \u201creset\u201d style of the wrapped item is modified to be the style being `.wrap()`d.\nWrapping is useful in situations where opaque and arbitrary values must be styled consistently irrespective of any existing styling. For example, a generic logger might want to style messages based on log levels consistently, even when those messages may already include styling. Wrapping exists to enable such consistent styling:\n```\nuse yansi::Paint;\n// Imagine that `inner` is opaque and we don't know it's styling.\nlet inner = format!(\"{} and {}\", \"Stop\".red(), \"Go\".green());\n// We can use `wrap` to ensure anything in `inner` not styled is blue.\nprintln!(\"Hey! {}\", inner.blue().wrap());\n```\n\nThanks to wrapping, this prints: `>` Hey!  Stop and Go\nWithout wrapping, the reset after `\"Stop\".red()` would not be overwritten: `>` Hey! Stop and Go\nWrapping incurs a performance cost due to an extra allocation and replacement if the wrapped item has styling applied to it. Otherwise, it does not allocate nor incur a meaningful performance cost.\n### \u00a7\u27e818\u27e9Lingering\nStyling can _linger_ beyond a single value via `Quirk::Linger`\u27e835\u27e9 or the equivalent `linger()`\u27e836\u27e9 constructor. A lingering style does not reset itself after being applied. In other words, the style lingers on beyond the value it\u2019s applied to, until something else resets the respective styling.\nThe complement to lingering is force resetting via `Quirk::Resetting`\u27e837\u27e9 or the equivalent `resetting()`\u27e838\u27e9 constructor. Force resetting, as the name implies, forces a reset suffix to be emitted after the value, irrespective of any lingering applied. It can be used as a way to finalize a lingering style.\nLingering itself is useful in situations where a given style is to be repeated across multiple values, or when style is intended to persist even across values that are not styled with `yansi`. It also allows avoiding unnecessarily repeated ANSI code sequences. The examples below illustrate some scenarios in which lingering is useful:\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic().linger(),\n  \"you\".on_yellow(), // doesn't linger, so all styling is reset here\n  \"today\".blue());\n```\n\n`>` Hello!  _How _are things with you__ today?\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic(), // doesn't linger, so all styling is reset here\n  \"you\".on_yellow().linger(),\n  \"today\".blue()); // doesn't linger; styling is reset\n```\n\n`>` Hello!  _How _are__ things with  you today?\n```\nuse yansi::Paint;\nprintln!(\"{} B {} {} {} F\",\n  \"A\".red().linger(),\n  \"C\".underline().linger(),\n  \"D\", // doesn't linger, but no styling applied, thus no reset\n  \"E\".resetting()); // explicitly reset\n```\n\n`>` A B _C D E_ F\n### \u00a7\u27e839\u27e9Brightening\nMost pimrary colors are available in regular and _bright_ variants, e.g., `Color::Red`\u27e840\u27e9 and `Color::BrightRed`\u27e841\u27e9. The `Quirk::Bright`\u27e842\u27e9 and `Quirk::OnBright`\u27e843\u27e9 quirks, typically applied via `.bright()`\u27e844\u27e9 and `.on_bright()`\u27e845\u27e9, provide an alternative, convenient mechanism to select the bright variant of the selected foreground or background color, respectively. The quirk provides no additional colors and is equivalent to selecting the bright variants directly.\n```\nuse yansi::Paint;\n// These are all equivalent.\nprint!(\"{}\", \"Regular\".red());\nprint!(\"{}\", \"Bright\".bright_red());\nprint!(\"{}\", \"Bright\".bright().red());\nprint!(\"{}\", \"Bright\".red().bright());\n// The `bright` quirk lets use choose the bright variants of _any_ color,\n// even when the color or style is unknown at the call site.\nprint!(\"{}\", \"Normal\".paint(STYLE));\nprint!(\"{}\", \"Bright\".paint(STYLE).bright());\n```\n\n`>` Regular Bright Bright Bright **Normal** **Bright**\nThe `bright()` quirk can be applied before or after a color is selected while having the same effect.\n## \u00a7\u27e87\u27e9Windows\nStyling is supported and enabled automatically on Windows beginning with the Windows 10 Anniversary Update, or about 96% of all Windows machines worldwide\u27e846\u27e9, and likely closer to 100% of developer machines (e.g., 99% of visitors to rocket.rs\u27e847\u27e9 on Windows are on Windows 10+).\nYansi enables styling support on Windows by querying the Windows API on the first attempt to color. If support is available, it is enabled. If support is not available, styling is disabled and no styling sequences are emitted.\n## \u00a7\u27e88\u27e9Crate Features\nFeature| Default?| Also Enables| Notes  \n---|---|---|---  \n`std`| **Y**| `alloc`|  Use `std` library.  \n`alloc`| **Y**| |  Use `alloc`. Enables wrapping\u27e86\u27e9.  \n`detect-tty`| N| `std`| See optional conditions\u27e814\u27e9.  \n`detect-env`| N| `std`| See optional conditions\u27e814\u27e9.  \n`hyperlink`| N| `std`| Enables hyperlinking\u27e819\u27e9 support.  \nWith `default-features = false`, this crate is `#[no_std]`.\nWithout any features enabled, all functionality except wrapping\u27e86\u27e9 is available. To recover wrapping _with_ `#[no_std]`, set `default-features = false` and enable the `alloc` feature, which requires `alloc` support.\n## Modules\u00a7\u27e848\u27e9\n\nhyperlink\u27e819\u27e9`hyperlink`\n    Experimental support for hyperlinking.\n## Structs\u00a7\u27e849\u27e9\n\nCondition\u27e828\u27e9\n    A function that decides whether styling should be applied.\n\nPainted\u27e822\u27e9\n    An arbitrary value with a `Style`\u27e823\u27e9 applied to it.\n\nStyle\u27e823\u27e9\n    A set of styling options.\n## Enums\u00a7\u27e850\u27e9\n\nAttribute\u27e851\u27e9\n    Enum representing text attributes, largely for text formatting.\n\nColor\u27e824\u27e9\n    Enum representing a terminal color.\n\nQuirk\u27e831\u27e9\n    Enum representing a `yansi` quirk.\n## Traits\u00a7\u27e852\u27e9\n\nPaint\u27e85\u27e9\n    A trait to apply styling to any value. Implemented for all types.\n## Functions\u00a7\u27e853\u27e9\n\ndisable\u27e811\u27e9\n    Unconditionally disables styling globally.\n\nenable\u27e810\u27e9\n    Unconditionally enables styling globally.\n\nis_enabled\u27e854\u27e9\n    Returns `true` if styling is globally enabled and `false` otherwise.\n\nwhenever\u27e812\u27e9\n    Dynamically enables and disables styling globally based on `condition`.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/yansi/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/yansi/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/yansi/latest/src/yansi/lib.rs.html#1-373: Source\n\u27e84\u27e9 https://docs.rs/yansi/latest/yansi/#features: \u00a7\n\u27e85\u27e9 https://docs.rs/yansi/latest/yansi/trait.Paint.html: trait yansi::Paint - `Paint`\n\u27e86\u27e9 https://docs.rs/yansi/latest/yansi/#wrapping: wrapping\n\u27e87\u27e9 https://docs.rs/yansi/latest/yansi/#windows: Automatic Windows support\n\u27e88\u27e9 https://docs.rs/yansi/latest/yansi/#crate-features: Featureful `no_std`\n\u27e89\u27e9 https://docs.rs/yansi/latest/yansi/#uniform-const-builders: `Style` constructors are `const`\n\u27e810\u27e9 https://docs.rs/yansi/latest/yansi/fn.enable.html: fn yansi::enable - enabled\n\u27e811\u27e9 https://docs.rs/yansi/latest/yansi/fn.disable.html: fn yansi::disable - disabled\n\u27e812\u27e9 https://docs.rs/yansi/latest/yansi/fn.whenever.html: fn yansi::whenever - dynamically\n\u27e813\u27e9 https://docs.rs/yansi/latest/yansi/#per-style: conditions\n\u27e814\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions: struct yansi::Condition - Built-in (optional) conditions\n\u27e815\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-1: struct yansi::Condition - TTY detection\n\u27e816\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-2: struct yansi::Condition - common environment variables\n\u27e817\u27e9 https://docs.rs/yansi/latest/yansi/#masking: _masked_\n\u27e818\u27e9 https://docs.rs/yansi/latest/yansi/#lingering: _linger_\n\u27e819\u27e9 https://docs.rs/yansi/latest/yansi/hyperlink/index.html: mod yansi::hyperlink - hyperlinking\n\u27e820\u27e9 https://crates.io/crates/ansi_term: `ansi_term`\n\u27e821\u27e9 https://docs.rs/yansi/latest/yansi/#usage: \u00a7\n\u27e822\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html: struct yansi::Painted - `Painted`\n\u27e823\u27e9 https://docs.rs/yansi/latest/yansi/struct.Style.html: struct yansi::Style - `Style`\n\u27e824\u27e9 https://docs.rs/yansi/latest/yansi/enum.Color.html: enum yansi::Color - `Color`\n\u27e825\u27e9 https://docs.rs/yansi/latest/yansi/trait.Paint.html#method.paint: method yansi::Paint::paint - `.paint()`\n\u27e826\u27e9 https://docs.rs/yansi/latest/yansi/#conditional-styling: \u00a7\n\u27e827\u27e9 https://docs.rs/yansi/latest/yansi/#globally: \u00a7\n\u27e828\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html: struct yansi::Condition - `Condition`\n\u27e829\u27e9 https://docs.rs/yansi/latest/yansi/struct.Style.html#method.whenever: method yansi::Style::whenever - `.whenever()`\n\u27e830\u27e9 https://docs.rs/yansi/latest/yansi/#quirks: \u00a7\n\u27e831\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html: enum yansi::Quirk - `Quirk`\n\u27e832\u27e9 https://docs.rs/yansi/latest/yansi/trait.Paint.html#tymethod.mask: method yansi::Paint::mask - `mask()`\n\u27e833\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Wrap: variant yansi::Quirk::Wrap - `Quirk::Wrap`\n\u27e834\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.wrap: method yansi::Painted::wrap - `wrap()`\n\u27e835\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Linger: variant yansi::Quirk::Linger - `Quirk::Linger`\n\u27e836\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.linger: method yansi::Painted::linger - `linger()`\n\u27e837\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Resetting: variant yansi::Quirk::Resetting - `Quirk::Resetting`\n\u27e838\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.resetting: method yansi::Painted::resetting - `resetting()`\n\u27e839\u27e9 https://docs.rs/yansi/latest/yansi/#brightening: \u00a7\n\u27e840\u27e9 https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.Red: variant yansi::Color::Red - `Color::Red`\n\u27e841\u27e9 https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.BrightRed: variant yansi::Color::BrightRed - `Color::BrightRed`\n\u27e842\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Bright: variant yansi::Quirk::Bright - `Quirk::Bright`\n\u27e843\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.OnBright: variant yansi::Quirk::OnBright - `Quirk::OnBright`\n\u27e844\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.bright: method yansi::Painted::bright - `.bright()`\n\u27e845\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.on_bright: method yansi::Painted::on_bright - `.on_bright()`\n\u27e846\u27e9 https://gs.statcounter.com/os-version-market-share/windows/desktop/worldwide: 96% of all Windows machines worldwide\n\u27e847\u27e9 https://rocket.rs: rocket.rs\n\u27e848\u27e9 https://docs.rs/yansi/latest/yansi/#modules: \u00a7\n\u27e849\u27e9 https://docs.rs/yansi/latest/yansi/#structs: \u00a7\n\u27e850\u27e9 https://docs.rs/yansi/latest/yansi/#enums: \u00a7\n\u27e851\u27e9 https://docs.rs/yansi/latest/yansi/enum.Attribute.html: enum yansi::Attribute - Attribute\n\u27e852\u27e9 https://docs.rs/yansi/latest/yansi/#traits: \u00a7\n\u27e853\u27e9 https://docs.rs/yansi/latest/yansi/#functions: \u00a7\n\u27e854\u27e9 https://docs.rs/yansi/latest/yansi/fn.is_enabled.html: fn yansi::is_enabled - is_enabled\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 17361,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114101.8968769"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/yansi",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [17 releases](https://lib.rs/crates/yansi/versions) (2 stable)\n1.0.1 |  Mar 13, 2024   \n---|---  \n1.0.0-rc.1 |  Aug 11, 2023   \n1.0.0-rc |  Jul 7, 2023   \n0.5.1 |  Mar 23, 2022   \n0.3.2 |  Jul 26, 2017   \n#**14** in [Command-line interface](https://lib.rs/command-line-interface \"Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting.\")\nDownload history 983103/week @ 2025-02-12 1108656/week @ 2025-02-19 1134468/week @ 2025-02-26 1182009/week @ 2025-03-05 1208837/week @ 2025-03-12 1179986/week @ 2025-03-19 1199127/week @ 2025-03-26 1211243/week @ 2025-04-02 1241646/week @ 2025-04-09 1155188/week @ 2025-04-16 1234345/week @ 2025-04-23 1165845/week @ 2025-04-30 1281165/week @ 2025-05-07 1348335/week @ 2025-05-14 1171986/week @ 2025-05-21 905785/week @ 2025-05-28\n**4,940,064** downloads per month Used in [**4,768** crates (237 directly)](https://lib.rs/crates/yansi/rev)\n**MIT/Apache**\n93KB  1K  SLoC\n![yansi logo](https://img.gs/czjpqfbdkz/62/https://raw.githubusercontent.com/SergioBenitez/yansi/master/.github/yansi-logo.png) **Yansi**\nA dead simple ANSI terminal color painting library.\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/SergioBenitez/yansi/workflows/CI/badge.svg)](https://github.com/SergioBenitez/yansi/actions) [![Current Crates.io Version](https://img.shields.io/crates/v/yansi.svg)](https://crates.io/crates/yansi) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/yansi/badge.svg)](https://docs.rs/yansi)\n## Usage\nIn your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`yansi ``=` ``\"`1.0`\"``\n``\n```\n\nIn your source code:\n```\n``use` `yansi`::``Paint`;`\n`println!``(```\"`Testing, `{}`, `{}`, `{}`!`\"```,`\n  ``\"`Ready`\"```.``bold``(``)``,`\n  ``\"`Set`\"```.``black``(``)``.``on_yellow``(``)``.``invert``(``)``.``italic``(``)``,`\n  ``\"`STOP`\"```.``white``(``)``.``on_red``(``)``.``bright``(``)``.``underline``(``)``.``bold``(``)``)``;`\n`\n```\n\n![> Testing, Ready, Set, STOP!](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/SergioBenitez/yansi/master/.github/yansi-example.svg)\n[See the rustdocs](https://docs.rs/yansi) for complete usage details.\n## Features\nWhy _y_ et another _ANSI_ terminal coloring library? Here are some reasons:\n  * This library makes simple things _simple_ : ```use``` [``Paint``](https://docs.rs/yansi/1.0.0/yansi/trait.Paint.html) and go!\n  * Zero dependencies by default. It really is simple.\n  * Zero allocations except as needed by opt-in [wrapping](https://docs.rs/yansi/1.0.0/yansi/#wrapping).\n  * [Automatic Windows support](https://docs.rs/yansi/1.0.0/yansi/#windows) for the vast majority (95%+) of Windows users.\n  * [Featureful ``no_std``](https://docs.rs/yansi/1.0.0/yansi/#crate-features), no-``alloc``, support with ``default`-`features `=` `false```.\n  * [``Style`` constructors are ```const```](https://docs.rs/yansi/1.0.0/yansi/#uniform-const-builders): store styles statically, even with dynamic conditions!\n  * _Any_ type implementing a formatting trait can be styled, not just strings.\n  * Styling can be [enabled](https://docs.rs/yansi/1.0.0/yansi/fn.enable.html) and [disabled](https://docs.rs/yansi/1.0.0/yansi/fn.disable.html) globally and [dynamically](https://docs.rs/yansi/1.0.0/yansi/fn.whenever.html), on the fly.\n  * A ``Style`` can be predicated on arbitrary [conditions](https://docs.rs/yansi/1.0.0/yansi/#per-style).\n  * Formatting specifiers like ````{``:`x```}```` and ````{``:`08b```}```` are supported and preserved!\n  * [Built-in (optional) conditions](https://docs.rs/yansi/1.0.0/yansi/struct.Condition.html#built-in-conditions) for [TTY detection](https://docs.rs/yansi/1.0.0/yansi/struct.Condition.html#impl-Condition-1) and [common environment variables](https://docs.rs/yansi/1.0.0/yansi/struct.Condition.html#impl-Condition-2).\n  * Arbitrary items can be [_masked_](https://docs.rs/yansi/1.0.0/yansi/#masking) for selective disabling.\n  * Styling can [_wrap_](https://docs.rs/yansi/1.0.0/yansi/#wrapping) to preserve styling across resets.\n  * Styling can [_linger_](https://docs.rs/yansi/1.0.0/yansi/#lingering) beyond a single value.\n  * Experimental support for [hyperlinking](https://docs.rs/yansi/1.0.0/yansi/hyperlink/index.html) is included.\n  * The name ``yansi`` is pretty cool \ud83d\ude0e.\n\n\n## License\n``yansi`` is licensed under either of the following, at your option:\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/sergiobenitez/yansi/blob/3e35184fc181fef63bc11dedb22413e821168255/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT License ([LICENSE-MIT](https://github.com/sergiobenitez/yansi/blob/3e35184fc181fef63bc11dedb22413e821168255/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\n#### Dependencies\n~0\u20136.5MB  ~31K SLoC\n  * [detect-tty?](https://lib.rs/crates/yansi/features#feature-detect-tty \"optional feature\") [is-terminal](https://lib.rs/crates/is-terminal \"0.4.11\")\n\n\n#### [Other features](https://lib.rs/crates/yansi/features)\n  * [alloc](https://lib.rs/crates/yansi/features#feature-alloc)\n  * [detect-env](https://lib.rs/crates/yansi/features#feature-detect-env)\n  * [hyperlink](https://lib.rs/crates/yansi/features#feature-hyperlink)\n  * [std](https://lib.rs/crates/yansi/features#feature-std)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  17 releases\u27e81\u27e9 (2 stable)\n1.0.1 |  Mar 13, 2024   \n---|---  \n1.0.0-rc.1 |  Aug 11, 2023   \n1.0.0-rc |  Jul 7, 2023   \n0.5.1 |  Mar 23, 2022   \n0.3.2 |  Jul 26, 2017   \n#**14** in Command-line interface\u27e82\u27e9\nDownload history 983103/week @ 2025-02-12 1108656/week @ 2025-02-19 1134468/week @ 2025-02-26 1182009/week @ 2025-03-05 1208837/week @ 2025-03-12 1179986/week @ 2025-03-19 1199127/week @ 2025-03-26 1211243/week @ 2025-04-02 1241646/week @ 2025-04-09 1155188/week @ 2025-04-16 1234345/week @ 2025-04-23 1165845/week @ 2025-04-30 1281165/week @ 2025-05-07 1348335/week @ 2025-05-14 1171986/week @ 2025-05-21 905785/week @ 2025-05-28\n**4,940,064** downloads per month Used in **4,768** crates (237 directly)\u27e83\u27e9\n**MIT/Apache**\n93KB  1K  SLoC\n![yansi logo\u27e84\u27e9] **Yansi**\nA dead simple ANSI terminal color painting library.\n![Build Status\u27e85\u27e9](https://github.com/SergioBenitez/yansi/actions) ![Current Crates.io Version\u27e86\u27e9](https://crates.io/crates/yansi) ![Documentation\u27e87\u27e9](https://docs.rs/yansi)\n## Usage\nIn your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`yansi ``=` ``\"`1.0`\"``\n``\n```\n\nIn your source code:\n```\n``use` `yansi`::``Paint`;`\n`println!``(```\"`Testing, `{}`, `{}`, `{}`!`\"```,`\n  ``\"`Ready`\"```.``bold``(``)``,`\n  ``\"`Set`\"```.``black``(``)``.``on_yellow``(``)``.``invert``(``)``.``italic``(``)``,`\n  ``\"`STOP`\"```.``white``(``)``.``on_red``(``)``.``bright``(``)``.``underline``(``)``.``bold``(``)``)``;`\n`\n```\n\n![> Testing, Ready, Set, STOP!\u27e88\u27e9]\nSee the rustdocs\u27e89\u27e9 for complete usage details.\n## Features\nWhy _y_ et another _ANSI_ terminal coloring library? Here are some reasons:\n  * This library makes simple things _simple_ : ```use``` ``Paint``\u27e810\u27e9 and go!\n  * Zero dependencies by default. It really is simple.\n  * Zero allocations except as needed by opt-in wrapping\u27e811\u27e9.\n  * Automatic Windows support\u27e812\u27e9 for the vast majority (95%+) of Windows users.\n  * Featureful ``no_std``\u27e813\u27e9, no-``alloc``, support with ``default`-`features `=` `false```.\n  * ``Style`` constructors are ```const```\u27e814\u27e9: store styles statically, even with dynamic conditions!\n  * _Any_ type implementing a formatting trait can be styled, not just strings.\n  * Styling can be enabled\u27e815\u27e9 and disabled\u27e816\u27e9 globally and dynamically\u27e817\u27e9, on the fly.\n  * A ``Style`` can be predicated on arbitrary conditions\u27e818\u27e9.\n  * Formatting specifiers like ````{``:`x```}```` and ````{``:`08b```}```` are supported and preserved!\n  * Built-in (optional) conditions\u27e819\u27e9 for TTY detection\u27e820\u27e9 and common environment variables\u27e821\u27e9.\n  * Arbitrary items can be _masked_\u27e822\u27e9 for selective disabling.\n  * Styling can _wrap_\u27e811\u27e9 to preserve styling across resets.\n  * Styling can _linger_\u27e823\u27e9 beyond a single value.\n  * Experimental support for hyperlinking\u27e824\u27e9 is included.\n  * The name ``yansi`` is pretty cool \ud83d\ude0e.\n\n\n## License\n``yansi`` is licensed under either of the following, at your option:\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e825\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT License (LICENSE-MIT\u27e826\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\n#### Dependencies\n~0\u20136.5MB  ~31K SLoC\n  * detect-tty?\u27e827\u27e9 is-terminal\u27e828\u27e9\n\n\n#### Other features\u27e829\u27e9\n  * alloc\u27e830\u27e9\n  * detect-env\u27e831\u27e9\n  * hyperlink\u27e832\u27e9\n  * std\u27e833\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/yansi/versions: 17 releases\n\u27e82\u27e9 https://lib.rs/command-line-interface: Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting. - Command-line interface\n\u27e83\u27e9 https://lib.rs/crates/yansi/rev: **4,768** crates (237 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/62/https://raw.githubusercontent.com/SergioBenitez/yansi/master/.github/yansi-logo.png: yansi logo\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/SergioBenitez/yansi/workflows/CI/badge.svg: ![Build Status\n\u27e86\u27e9 https://img.shields.io/crates/v/yansi.svg: ![Current Crates.io Version\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/yansi/badge.svg: ![Documentation\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/SergioBenitez/yansi/master/.github/yansi-example.svg: > Testing, Ready, Set, STOP!\n\u27e89\u27e9 https://docs.rs/yansi: See the rustdocs\n\u27e810\u27e9 https://docs.rs/yansi/1.0.0/yansi/trait.Paint.html: ``Paint``\n\u27e811\u27e9 https://docs.rs/yansi/1.0.0/yansi/#wrapping: wrapping\n\u27e812\u27e9 https://docs.rs/yansi/1.0.0/yansi/#windows: Automatic Windows support\n\u27e813\u27e9 https://docs.rs/yansi/1.0.0/yansi/#crate-features: Featureful ``no_std``\n\u27e814\u27e9 https://docs.rs/yansi/1.0.0/yansi/#uniform-const-builders: ``Style`` constructors are ```const```\n\u27e815\u27e9 https://docs.rs/yansi/1.0.0/yansi/fn.enable.html: enabled\n\u27e816\u27e9 https://docs.rs/yansi/1.0.0/yansi/fn.disable.html: disabled\n\u27e817\u27e9 https://docs.rs/yansi/1.0.0/yansi/fn.whenever.html: dynamically\n\u27e818\u27e9 https://docs.rs/yansi/1.0.0/yansi/#per-style: conditions\n\u27e819\u27e9 https://docs.rs/yansi/1.0.0/yansi/struct.Condition.html#built-in-conditions: Built-in (optional) conditions\n\u27e820\u27e9 https://docs.rs/yansi/1.0.0/yansi/struct.Condition.html#impl-Condition-1: TTY detection\n\u27e821\u27e9 https://docs.rs/yansi/1.0.0/yansi/struct.Condition.html#impl-Condition-2: common environment variables\n\u27e822\u27e9 https://docs.rs/yansi/1.0.0/yansi/#masking: _masked_\n\u27e823\u27e9 https://docs.rs/yansi/1.0.0/yansi/#lingering: _linger_\n\u27e824\u27e9 https://docs.rs/yansi/1.0.0/yansi/hyperlink/index.html: hyperlinking\n\u27e825\u27e9 https://github.com/sergiobenitez/yansi/blob/3e35184fc181fef63bc11dedb22413e821168255/LICENSE-APACHE: LICENSE-APACHE\n\u27e826\u27e9 https://github.com/sergiobenitez/yansi/blob/3e35184fc181fef63bc11dedb22413e821168255/LICENSE-MIT: LICENSE-MIT\n\u27e827\u27e9 https://lib.rs/crates/yansi/features#feature-detect-tty: optional feature - detect-tty?\n\u27e828\u27e9 https://lib.rs/crates/is-terminal: 0.4.11 - is-terminal\n\u27e829\u27e9 https://lib.rs/crates/yansi/features: Other features\n\u27e830\u27e9 https://lib.rs/crates/yansi/features#feature-alloc: alloc\n\u27e831\u27e9 https://lib.rs/crates/yansi/features#feature-detect-env: detect-env\n\u27e832\u27e9 https://lib.rs/crates/yansi/features#feature-hyperlink: hyperlink\n\u27e833\u27e9 https://lib.rs/crates/yansi/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5326,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114102.2939774"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\target\\debug\\deps\\libyansi-c886c5ed42e25ae5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: sub-expression diverges\n   --> src\\macros.rs:156:1\n    |\n156 | / define_properties! {\n157 | |     /// Returns a styled value derived from `self` with the foreground set to\n158 | |     /// `value`.\n159 | |     ///\n...   |\n351 | |     whenever(Condition),\n352 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n    = note: `#[warn(clippy::diverging_sub_expression)]` on by default\n    = note: this warning originates in the macro `todo` which comes from the expansion of the macro `define_properties` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::diverging_sub_expression)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::diverging_sub_expression",
                  "explanation": null
                },
                "level": "warning",
                "message": "sub-expression diverges",
                "spans": [
                  {
                    "byte_end": 30165,
                    "byte_start": 30118,
                    "column_end": 56,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 30095,
                        "byte_start": 30078,
                        "column_end": 18,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 889,
                        "line_start": 889,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "macro_rules! todo {"
                          }
                        ]
                      },
                      "macro_decl_name": "todo!",
                      "span": {
                        "byte_end": 4131,
                        "byte_start": 4124,
                        "column_end": 45,
                        "column_start": 38,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 3866,
                            "byte_start": 3824,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 125,
                            "line_start": 125,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! check_property_exhaustiveness {"
                              }
                            ]
                          },
                          "macro_decl_name": "check_property_exhaustiveness!",
                          "span": {
                            "byte_end": 4478,
                            "byte_start": 4429,
                            "column_end": 60,
                            "column_start": 11,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 4266,
                                "byte_start": 4236,
                                "column_end": 31,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 139,
                                "line_start": 139,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "macro_rules! define_properties {"
                                  }
                                ]
                              },
                              "macro_decl_name": "define_properties!",
                              "span": {
                                "byte_end": 10787,
                                "byte_start": 4831,
                                "column_end": 2,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 352,
                                "line_start": 156,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "define_properties! {"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the foreground set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`red()`](Self::red()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`green()`](Self::green()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "    /// painted.fg(Color::White);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using [`white()`](Self::white())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// painted.white();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    fg(Color) {"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 27,
                                    "highlight_start": 1,
                                    "text": "        red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 40,
                                    "highlight_start": 1,
                                    "text": "        bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the background set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 62,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`on_red()`](Self::on_red()) and"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// [`on_green()`](Self::on_green()), which have the same functionality but"
                                  },
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "    /// are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bg(Color::Red);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using [`on_red()`](Self::on_red())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// painted.on_red();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    bg(Color) {"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 30,
                                    "highlight_start": 1,
                                    "text": "        on_red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "        on_yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        on_bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 1,
                                    "text": "        on_bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the styling [`Attribute`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 66,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use"
                                  },
                                  {
                                    "highlight_end": 77,
                                    "highlight_start": 1,
                                    "text": "    /// attribute-specific builder methods like [`bold()`](Self::bold()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`underline()`](Self::underline()), which have the same functionality"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// but are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using `attr()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Attribute};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// painted.attr(Attribute::Bold);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 61,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using using [`bold()`](Self::bold())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bold();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "    attr(Attribute) {"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bold => Attribute::Bold,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        dim => Attribute::Dim,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        italic => Attribute::Italic,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        underline => Attribute::Underline,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        blink => Attribute::Blink,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        rapid_blink => Attribute::RapidBlink,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        invert => Attribute::Invert,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        conceal => Attribute::Conceal,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        strike => Attribute::Strike,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the `yansi` [`Quirk`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use quirk-specific"
                                  },
                                  {
                                    "highlight_end": 58,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`mask()`](Self::mask()) and"
                                  },
                                  {
                                    "highlight_end": 76,
                                    "highlight_start": 1,
                                    "text": "    /// [`wrap()`](Self::wrap()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using `.quirk()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Quirk};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "    /// painted.quirk(Quirk::Wrap);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using [`wrap()`](Self::wrap())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.wrap();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 19,
                                    "highlight_start": 1,
                                    "text": "    quirk(Quirk) {"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        mask => Quirk::Mask,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        wrap => Quirk::Wrap,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        linger => Quirk::Linger,"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "        #[deprecated("
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "            since = \"1.0.1\","
                                  },
                                  {
                                    "highlight_end": 86,
                                    "highlight_start": 1,
                                    "text": "            note = \"renamed to `resetting()` due to conflicts with `Vec::clear()`.\\n\\"
                                  },
                                  {
                                    "highlight_end": 75,
                                    "highlight_start": 1,
                                    "text": "                The `clear()` method will be removed in a future release.\""
                                  },
                                  {
                                    "highlight_end": 11,
                                    "highlight_start": 1,
                                    "text": "        )]"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        clear => Quirk::Clear,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        resetting => Quirk::Resetting,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bright => Quirk::Bright,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_bright => Quirk::OnBright,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Conditionally enable styling based on whether the [`Condition`] `value`"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// applies. Replaces any previous condition."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 70,
                                    "highlight_start": 1,
                                    "text": "    /// See the [crate level docs](crate#per-style) for more details."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Enable styling `painted` only when both `stdout` and `stderr` are TTYs:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "    /// # #[cfg(feature = \"detect-tty\")] {"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Condition};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 74,
                                    "highlight_start": 1,
                                    "text": "    /// painted.red().on_yellow().whenever(Condition::STDOUTERR_ARE_TTY);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// # }"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    whenever(Condition),"
                                  },
                                  {
                                    "highlight_end": 2,
                                    "highlight_start": 1,
                                    "text": "}"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 142,
                            "line_start": 142,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 60,
                                "highlight_start": 11,
                                "text": "        $(check_property_exhaustiveness!($A $({ $($t)* })?);)*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 38,
                            "text": "                match { let _v: $A = todo!(); _v } {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 891,
                    "line_start": 891,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 9,
                        "text": "        $crate::panicking::panic(\"not yet implemented\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: sub-expression diverges\n   --> src\\macros.rs:156:1\n    |\n156 | / define_properties! {\n157 | |     /// Returns a styled value derived from `self` with the foreground set to\n158 | |     /// `value`.\n159 | |     ///\n...   |\n351 | |     whenever(Condition),\n352 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n    = note: this warning originates in the macro `todo` which comes from the expansion of the macro `define_properties` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::diverging_sub_expression",
                  "explanation": null
                },
                "level": "warning",
                "message": "sub-expression diverges",
                "spans": [
                  {
                    "byte_end": 30165,
                    "byte_start": 30118,
                    "column_end": 56,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 30095,
                        "byte_start": 30078,
                        "column_end": 18,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 889,
                        "line_start": 889,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "macro_rules! todo {"
                          }
                        ]
                      },
                      "macro_decl_name": "todo!",
                      "span": {
                        "byte_end": 4131,
                        "byte_start": 4124,
                        "column_end": 45,
                        "column_start": 38,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 3866,
                            "byte_start": 3824,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 125,
                            "line_start": 125,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! check_property_exhaustiveness {"
                              }
                            ]
                          },
                          "macro_decl_name": "check_property_exhaustiveness!",
                          "span": {
                            "byte_end": 4478,
                            "byte_start": 4429,
                            "column_end": 60,
                            "column_start": 11,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 4266,
                                "byte_start": 4236,
                                "column_end": 31,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 139,
                                "line_start": 139,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "macro_rules! define_properties {"
                                  }
                                ]
                              },
                              "macro_decl_name": "define_properties!",
                              "span": {
                                "byte_end": 10787,
                                "byte_start": 4831,
                                "column_end": 2,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 352,
                                "line_start": 156,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "define_properties! {"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the foreground set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`red()`](Self::red()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`green()`](Self::green()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "    /// painted.fg(Color::White);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using [`white()`](Self::white())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// painted.white();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    fg(Color) {"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 27,
                                    "highlight_start": 1,
                                    "text": "        red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 40,
                                    "highlight_start": 1,
                                    "text": "        bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the background set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 62,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`on_red()`](Self::on_red()) and"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// [`on_green()`](Self::on_green()), which have the same functionality but"
                                  },
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "    /// are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bg(Color::Red);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using [`on_red()`](Self::on_red())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// painted.on_red();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    bg(Color) {"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 30,
                                    "highlight_start": 1,
                                    "text": "        on_red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "        on_yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        on_bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 1,
                                    "text": "        on_bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the styling [`Attribute`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 66,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use"
                                  },
                                  {
                                    "highlight_end": 77,
                                    "highlight_start": 1,
                                    "text": "    /// attribute-specific builder methods like [`bold()`](Self::bold()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`underline()`](Self::underline()), which have the same functionality"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// but are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using `attr()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Attribute};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// painted.attr(Attribute::Bold);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 61,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using using [`bold()`](Self::bold())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bold();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "    attr(Attribute) {"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bold => Attribute::Bold,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        dim => Attribute::Dim,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        italic => Attribute::Italic,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        underline => Attribute::Underline,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        blink => Attribute::Blink,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        rapid_blink => Attribute::RapidBlink,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        invert => Attribute::Invert,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        conceal => Attribute::Conceal,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        strike => Attribute::Strike,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the `yansi` [`Quirk`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use quirk-specific"
                                  },
                                  {
                                    "highlight_end": 58,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`mask()`](Self::mask()) and"
                                  },
                                  {
                                    "highlight_end": 76,
                                    "highlight_start": 1,
                                    "text": "    /// [`wrap()`](Self::wrap()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using `.quirk()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Quirk};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "    /// painted.quirk(Quirk::Wrap);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using [`wrap()`](Self::wrap())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.wrap();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 19,
                                    "highlight_start": 1,
                                    "text": "    quirk(Quirk) {"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        mask => Quirk::Mask,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        wrap => Quirk::Wrap,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        linger => Quirk::Linger,"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "        #[deprecated("
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "            since = \"1.0.1\","
                                  },
                                  {
                                    "highlight_end": 86,
                                    "highlight_start": 1,
                                    "text": "            note = \"renamed to `resetting()` due to conflicts with `Vec::clear()`.\\n\\"
                                  },
                                  {
                                    "highlight_end": 75,
                                    "highlight_start": 1,
                                    "text": "                The `clear()` method will be removed in a future release.\""
                                  },
                                  {
                                    "highlight_end": 11,
                                    "highlight_start": 1,
                                    "text": "        )]"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        clear => Quirk::Clear,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        resetting => Quirk::Resetting,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bright => Quirk::Bright,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_bright => Quirk::OnBright,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Conditionally enable styling based on whether the [`Condition`] `value`"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// applies. Replaces any previous condition."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 70,
                                    "highlight_start": 1,
                                    "text": "    /// See the [crate level docs](crate#per-style) for more details."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Enable styling `painted` only when both `stdout` and `stderr` are TTYs:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "    /// # #[cfg(feature = \"detect-tty\")] {"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Condition};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 74,
                                    "highlight_start": 1,
                                    "text": "    /// painted.red().on_yellow().whenever(Condition::STDOUTERR_ARE_TTY);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// # }"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    whenever(Condition),"
                                  },
                                  {
                                    "highlight_end": 2,
                                    "highlight_start": 1,
                                    "text": "}"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 142,
                            "line_start": 142,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 60,
                                "highlight_start": 11,
                                "text": "        $(check_property_exhaustiveness!($A $({ $($t)* })?);)*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 38,
                            "text": "                match { let _v: $A = todo!(); _v } {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 891,
                    "line_start": 891,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 9,
                        "text": "        $crate::panicking::panic(\"not yet implemented\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: sub-expression diverges\n   --> src\\macros.rs:156:1\n    |\n156 | / define_properties! {\n157 | |     /// Returns a styled value derived from `self` with the foreground set to\n158 | |     /// `value`.\n159 | |     ///\n...   |\n351 | |     whenever(Condition),\n352 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n    = note: this warning originates in the macro `todo` which comes from the expansion of the macro `define_properties` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::diverging_sub_expression",
                  "explanation": null
                },
                "level": "warning",
                "message": "sub-expression diverges",
                "spans": [
                  {
                    "byte_end": 30165,
                    "byte_start": 30118,
                    "column_end": 56,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 30095,
                        "byte_start": 30078,
                        "column_end": 18,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 889,
                        "line_start": 889,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "macro_rules! todo {"
                          }
                        ]
                      },
                      "macro_decl_name": "todo!",
                      "span": {
                        "byte_end": 4131,
                        "byte_start": 4124,
                        "column_end": 45,
                        "column_start": 38,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 3866,
                            "byte_start": 3824,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 125,
                            "line_start": 125,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! check_property_exhaustiveness {"
                              }
                            ]
                          },
                          "macro_decl_name": "check_property_exhaustiveness!",
                          "span": {
                            "byte_end": 4478,
                            "byte_start": 4429,
                            "column_end": 60,
                            "column_start": 11,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 4266,
                                "byte_start": 4236,
                                "column_end": 31,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 139,
                                "line_start": 139,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "macro_rules! define_properties {"
                                  }
                                ]
                              },
                              "macro_decl_name": "define_properties!",
                              "span": {
                                "byte_end": 10787,
                                "byte_start": 4831,
                                "column_end": 2,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 352,
                                "line_start": 156,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "define_properties! {"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the foreground set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`red()`](Self::red()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`green()`](Self::green()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "    /// painted.fg(Color::White);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using [`white()`](Self::white())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// painted.white();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    fg(Color) {"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 27,
                                    "highlight_start": 1,
                                    "text": "        red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 40,
                                    "highlight_start": 1,
                                    "text": "        bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the background set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 62,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`on_red()`](Self::on_red()) and"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// [`on_green()`](Self::on_green()), which have the same functionality but"
                                  },
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "    /// are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bg(Color::Red);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using [`on_red()`](Self::on_red())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// painted.on_red();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    bg(Color) {"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 30,
                                    "highlight_start": 1,
                                    "text": "        on_red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "        on_yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        on_bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 1,
                                    "text": "        on_bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the styling [`Attribute`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 66,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use"
                                  },
                                  {
                                    "highlight_end": 77,
                                    "highlight_start": 1,
                                    "text": "    /// attribute-specific builder methods like [`bold()`](Self::bold()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`underline()`](Self::underline()), which have the same functionality"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// but are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using `attr()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Attribute};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// painted.attr(Attribute::Bold);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 61,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using using [`bold()`](Self::bold())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bold();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "    attr(Attribute) {"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bold => Attribute::Bold,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        dim => Attribute::Dim,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        italic => Attribute::Italic,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        underline => Attribute::Underline,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        blink => Attribute::Blink,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        rapid_blink => Attribute::RapidBlink,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        invert => Attribute::Invert,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        conceal => Attribute::Conceal,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        strike => Attribute::Strike,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the `yansi` [`Quirk`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use quirk-specific"
                                  },
                                  {
                                    "highlight_end": 58,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`mask()`](Self::mask()) and"
                                  },
                                  {
                                    "highlight_end": 76,
                                    "highlight_start": 1,
                                    "text": "    /// [`wrap()`](Self::wrap()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using `.quirk()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Quirk};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "    /// painted.quirk(Quirk::Wrap);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using [`wrap()`](Self::wrap())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.wrap();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 19,
                                    "highlight_start": 1,
                                    "text": "    quirk(Quirk) {"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        mask => Quirk::Mask,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        wrap => Quirk::Wrap,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        linger => Quirk::Linger,"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "        #[deprecated("
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "            since = \"1.0.1\","
                                  },
                                  {
                                    "highlight_end": 86,
                                    "highlight_start": 1,
                                    "text": "            note = \"renamed to `resetting()` due to conflicts with `Vec::clear()`.\\n\\"
                                  },
                                  {
                                    "highlight_end": 75,
                                    "highlight_start": 1,
                                    "text": "                The `clear()` method will be removed in a future release.\""
                                  },
                                  {
                                    "highlight_end": 11,
                                    "highlight_start": 1,
                                    "text": "        )]"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        clear => Quirk::Clear,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        resetting => Quirk::Resetting,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bright => Quirk::Bright,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_bright => Quirk::OnBright,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Conditionally enable styling based on whether the [`Condition`] `value`"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// applies. Replaces any previous condition."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 70,
                                    "highlight_start": 1,
                                    "text": "    /// See the [crate level docs](crate#per-style) for more details."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Enable styling `painted` only when both `stdout` and `stderr` are TTYs:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "    /// # #[cfg(feature = \"detect-tty\")] {"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Condition};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 74,
                                    "highlight_start": 1,
                                    "text": "    /// painted.red().on_yellow().whenever(Condition::STDOUTERR_ARE_TTY);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// # }"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    whenever(Condition),"
                                  },
                                  {
                                    "highlight_end": 2,
                                    "highlight_start": 1,
                                    "text": "}"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 142,
                            "line_start": 142,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 60,
                                "highlight_start": 11,
                                "text": "        $(check_property_exhaustiveness!($A $({ $($t)* })?);)*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 38,
                            "text": "                match { let _v: $A = todo!(); _v } {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 891,
                    "line_start": 891,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 9,
                        "text": "        $crate::panicking::panic(\"not yet implemented\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: sub-expression diverges\n   --> src\\macros.rs:156:1\n    |\n156 | / define_properties! {\n157 | |     /// Returns a styled value derived from `self` with the foreground set to\n158 | |     /// `value`.\n159 | |     ///\n...   |\n351 | |     whenever(Condition),\n352 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n    = note: this warning originates in the macro `todo` which comes from the expansion of the macro `define_properties` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::diverging_sub_expression",
                  "explanation": null
                },
                "level": "warning",
                "message": "sub-expression diverges",
                "spans": [
                  {
                    "byte_end": 30165,
                    "byte_start": 30118,
                    "column_end": 56,
                    "column_start": 9,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 30095,
                        "byte_start": 30078,
                        "column_end": 18,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 889,
                        "line_start": 889,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "macro_rules! todo {"
                          }
                        ]
                      },
                      "macro_decl_name": "todo!",
                      "span": {
                        "byte_end": 4131,
                        "byte_start": 4124,
                        "column_end": 45,
                        "column_start": 38,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 3866,
                            "byte_start": 3824,
                            "column_end": 43,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 125,
                            "line_start": 125,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 43,
                                "highlight_start": 1,
                                "text": "macro_rules! check_property_exhaustiveness {"
                              }
                            ]
                          },
                          "macro_decl_name": "check_property_exhaustiveness!",
                          "span": {
                            "byte_end": 4478,
                            "byte_start": 4429,
                            "column_end": 60,
                            "column_start": 11,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 4266,
                                "byte_start": 4236,
                                "column_end": 31,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 139,
                                "line_start": 139,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "macro_rules! define_properties {"
                                  }
                                ]
                              },
                              "macro_decl_name": "define_properties!",
                              "span": {
                                "byte_end": 10787,
                                "byte_start": 4831,
                                "column_end": 2,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\macros.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 352,
                                "line_start": 156,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "define_properties! {"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the foreground set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`red()`](Self::red()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`green()`](Self::green()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 52,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "    /// painted.fg(Color::White);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set foreground color to white using [`white()`](Self::white())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// painted.white();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    fg(Color) {"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 27,
                                    "highlight_start": 1,
                                    "text": "        red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 40,
                                    "highlight_start": 1,
                                    "text": "        bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 48,
                                    "highlight_start": 1,
                                    "text": "        bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "        bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "        bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// Returns a styled value derived from `self` with the background set to"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use color-specific"
                                  },
                                  {
                                    "highlight_end": 62,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`on_red()`](Self::on_red()) and"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// [`on_green()`](Self::on_green()), which have the same functionality but"
                                  },
                                  {
                                    "highlight_end": 21,
                                    "highlight_start": 1,
                                    "text": "    /// are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using `fg()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Color};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bg(Color::Red);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 72,
                                    "highlight_start": 1,
                                    "text": "    /// Set background color to red using [`on_red()`](Self::on_red())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// painted.on_red();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    bg(Color) {"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_primary => Color::Primary,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_fixed => Color::Fixed[color: u8],"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_rgb => Color::Rgb[r: u8, g: u8, b: u8],"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_black => Color::Black,"
                                  },
                                  {
                                    "highlight_end": 30,
                                    "highlight_start": 1,
                                    "text": "        on_red => Color::Red,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_green => Color::Green,"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "        on_yellow => Color::Yellow,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_blue => Color::Blue,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_magenta => Color::Magenta,"
                                  },
                                  {
                                    "highlight_end": 32,
                                    "highlight_start": 1,
                                    "text": "        on_cyan => Color::Cyan,"
                                  },
                                  {
                                    "highlight_end": 34,
                                    "highlight_start": 1,
                                    "text": "        on_white => Color::White,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_black => Color::BrightBlack,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        on_bright_red => Color::BrightRed,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_green => Color::BrightGreen,"
                                  },
                                  {
                                    "highlight_end": 49,
                                    "highlight_start": 1,
                                    "text": "        on_bright_yellow => Color::BrightYellow,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_blue => Color::BrightBlue,"
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "        on_bright_magenta => Color::BrightMagenta,"
                                  },
                                  {
                                    "highlight_end": 45,
                                    "highlight_start": 1,
                                    "text": "        on_bright_cyan => Color::BrightCyan,"
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "        on_bright_white => Color::BrightWhite,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 51,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the styling [`Attribute`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 66,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use"
                                  },
                                  {
                                    "highlight_end": 77,
                                    "highlight_start": 1,
                                    "text": "    /// attribute-specific builder methods like [`bold()`](Self::bold()) and"
                                  },
                                  {
                                    "highlight_end": 78,
                                    "highlight_start": 1,
                                    "text": "    /// [`underline()`](Self::underline()), which have the same functionality"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    /// but are pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using `attr()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Attribute};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// painted.attr(Attribute::Bold);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 61,
                                    "highlight_start": 1,
                                    "text": "    /// Make text bold using using [`bold()`](Self::bold())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.bold();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "    attr(Attribute) {"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bold => Attribute::Bold,"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        dim => Attribute::Dim,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        italic => Attribute::Italic,"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "        underline => Attribute::Underline,"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "        blink => Attribute::Blink,"
                                  },
                                  {
                                    "highlight_end": 46,
                                    "highlight_start": 1,
                                    "text": "        rapid_blink => Attribute::RapidBlink,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        invert => Attribute::Invert,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        conceal => Attribute::Conceal,"
                                  },
                                  {
                                    "highlight_end": 37,
                                    "highlight_start": 1,
                                    "text": "        strike => Attribute::Strike,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 47,
                                    "highlight_start": 1,
                                    "text": "    /// Enables the `yansi` [`Quirk`] `value`."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 81,
                                    "highlight_start": 1,
                                    "text": "    /// This method should be used rarely. Instead, prefer to use quirk-specific"
                                  },
                                  {
                                    "highlight_end": 58,
                                    "highlight_start": 1,
                                    "text": "    /// builder methods like [`mask()`](Self::mask()) and"
                                  },
                                  {
                                    "highlight_end": 76,
                                    "highlight_start": 1,
                                    "text": "    /// [`wrap()`](Self::wrap()), which have the same functionality but are"
                                  },
                                  {
                                    "highlight_end": 17,
                                    "highlight_start": 1,
                                    "text": "    /// pithier."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 42,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using `.quirk()`:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 35,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Quirk};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 36,
                                    "highlight_start": 1,
                                    "text": "    /// painted.quirk(Quirk::Wrap);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 56,
                                    "highlight_start": 1,
                                    "text": "    /// Enable wrapping using [`wrap()`](Self::wrap())."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 26,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::Paint;"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 24,
                                    "highlight_start": 1,
                                    "text": "    /// painted.wrap();"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 19,
                                    "highlight_start": 1,
                                    "text": "    quirk(Quirk) {"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        mask => Quirk::Mask,"
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "        wrap => Quirk::Wrap,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        linger => Quirk::Linger,"
                                  },
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "        #[deprecated("
                                  },
                                  {
                                    "highlight_end": 29,
                                    "highlight_start": 1,
                                    "text": "            since = \"1.0.1\","
                                  },
                                  {
                                    "highlight_end": 86,
                                    "highlight_start": 1,
                                    "text": "            note = \"renamed to `resetting()` due to conflicts with `Vec::clear()`.\\n\\"
                                  },
                                  {
                                    "highlight_end": 75,
                                    "highlight_start": 1,
                                    "text": "                The `clear()` method will be removed in a future release.\""
                                  },
                                  {
                                    "highlight_end": 11,
                                    "highlight_start": 1,
                                    "text": "        )]"
                                  },
                                  {
                                    "highlight_end": 31,
                                    "highlight_start": 1,
                                    "text": "        clear => Quirk::Clear,"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "        resetting => Quirk::Resetting,"
                                  },
                                  {
                                    "highlight_end": 33,
                                    "highlight_start": 1,
                                    "text": "        bright => Quirk::Bright,"
                                  },
                                  {
                                    "highlight_end": 38,
                                    "highlight_start": 1,
                                    "text": "        on_bright => Quirk::OnBright,"
                                  },
                                  {
                                    "highlight_end": 7,
                                    "highlight_start": 1,
                                    "text": "    },"
                                  },
                                  {
                                    "highlight_end": 1,
                                    "highlight_start": 1,
                                    "text": ""
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Conditionally enable styling based on whether the [`Condition`] `value`"
                                  },
                                  {
                                    "highlight_end": 50,
                                    "highlight_start": 1,
                                    "text": "    /// applies. Replaces any previous condition."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 70,
                                    "highlight_start": 1,
                                    "text": "    /// See the [crate level docs](crate#per-style) for more details."
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 18,
                                    "highlight_start": 1,
                                    "text": "    /// # Example"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 80,
                                    "highlight_start": 1,
                                    "text": "    /// Enable styling `painted` only when both `stdout` and `stderr` are TTYs:"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 16,
                                    "highlight_start": 1,
                                    "text": "    /// ```rust"
                                  },
                                  {
                                    "highlight_end": 43,
                                    "highlight_start": 1,
                                    "text": "    /// # #[cfg(feature = \"detect-tty\")] {"
                                  },
                                  {
                                    "highlight_end": 39,
                                    "highlight_start": 1,
                                    "text": "    /// use yansi::{Paint, Condition};"
                                  },
                                  {
                                    "highlight_end": 8,
                                    "highlight_start": 1,
                                    "text": "    ///"
                                  },
                                  {
                                    "highlight_end": 28,
                                    "highlight_start": 1,
                                    "text": "    /// # let painted = ();"
                                  },
                                  {
                                    "highlight_end": 74,
                                    "highlight_start": 1,
                                    "text": "    /// painted.red().on_yellow().whenever(Condition::STDOUTERR_ARE_TTY);"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// # }"
                                  },
                                  {
                                    "highlight_end": 12,
                                    "highlight_start": 1,
                                    "text": "    /// ```"
                                  },
                                  {
                                    "highlight_end": 25,
                                    "highlight_start": 1,
                                    "text": "    whenever(Condition),"
                                  },
                                  {
                                    "highlight_end": 2,
                                    "highlight_start": 1,
                                    "text": "}"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\macros.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 142,
                            "line_start": 142,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 60,
                                "highlight_start": 11,
                                "text": "        $(check_property_exhaustiveness!($A $({ $($t)* })?);)*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\macros.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 38,
                            "text": "                match { let _v: $A = todo!(); _v } {"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\macros\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 891,
                    "line_start": 891,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 9,
                        "text": "        $crate::panicking::panic(\"not yet implemented\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `DWORD` contains a capitalized acronym\n  --> src\\windows.rs:10:10\n   |\n10 |     type DWORD = c_ulong;\n   |          ^^^^^ help: consider making the acronym lowercase, except the initial letter: `Dword`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::upper_case_acronyms)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 198,
                        "byte_start": 193,
                        "column_end": 15,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 10,
                        "line_start": 10,
                        "suggested_replacement": "Dword",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 10,
                            "text": "    type DWORD = c_ulong;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `DWORD` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 198,
                    "byte_start": 193,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 10,
                    "line_start": 10,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "    type DWORD = c_ulong;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `LPDWORD` contains a capitalized acronym\n  --> src\\windows.rs:11:10\n   |\n11 |     type LPDWORD = *mut DWORD;\n   |          ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Lpdword`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 226,
                        "byte_start": 219,
                        "column_end": 17,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 11,
                        "line_start": 11,
                        "suggested_replacement": "Lpdword",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 10,
                            "text": "    type LPDWORD = *mut DWORD;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `LPDWORD` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 226,
                    "byte_start": 219,
                    "column_end": 17,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 10,
                        "text": "    type LPDWORD = *mut DWORD;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `HANDLE` contains a capitalized acronym\n  --> src\\windows.rs:12:10\n   |\n12 |     type HANDLE = *mut c_void;\n   |          ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Handle`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 256,
                        "byte_start": 250,
                        "column_end": 16,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 12,
                        "line_start": 12,
                        "suggested_replacement": "Handle",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 10,
                            "text": "    type HANDLE = *mut c_void;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `HANDLE` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 256,
                    "byte_start": 250,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 12,
                    "line_start": 12,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    type HANDLE = *mut c_void;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `BOOL` contains a capitalized acronym\n  --> src\\windows.rs:13:10\n   |\n13 |     type BOOL = c_int;\n   |          ^^^^ help: consider making the acronym lowercase, except the initial letter: `Bool`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 285,
                        "byte_start": 281,
                        "column_end": 14,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 13,
                        "line_start": 13,
                        "suggested_replacement": "Bool",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 10,
                            "text": "    type BOOL = c_int;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `BOOL` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 285,
                    "byte_start": 281,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 13,
                    "line_start": 13,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "    type BOOL = c_int;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `LPCWSTR` contains a capitalized acronym\n  --> src\\windows.rs:14:10\n   |\n14 |     type LPCWSTR = *const WCHAR;\n   |          ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Lpcwstr`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 311,
                        "byte_start": 304,
                        "column_end": 17,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 14,
                        "line_start": 14,
                        "suggested_replacement": "Lpcwstr",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 10,
                            "text": "    type LPCWSTR = *const WCHAR;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `LPCWSTR` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 311,
                    "byte_start": 304,
                    "column_end": 17,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 10,
                        "text": "    type LPCWSTR = *const WCHAR;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `WCHAR` contains a capitalized acronym\n  --> src\\windows.rs:15:10\n   |\n15 |     type WCHAR = wchar_t;\n   |          ^^^^^ help: consider making the acronym lowercase, except the initial letter: `Wchar`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 342,
                        "byte_start": 337,
                        "column_end": 15,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 15,
                        "line_start": 15,
                        "suggested_replacement": "Wchar",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 10,
                            "text": "    type WCHAR = wchar_t;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `WCHAR` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 342,
                    "byte_start": 337,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 15,
                    "line_start": 15,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "    type WCHAR = wchar_t;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: name `LPVOID` contains a capitalized acronym\n  --> src\\windows.rs:17:10\n   |\n17 |     type LPVOID = *mut c_void;\n   |          ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Lpvoid`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider making the acronym lowercase, except the initial letter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 428,
                        "byte_start": 422,
                        "column_end": 16,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\windows.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "Lpvoid",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 10,
                            "text": "    type LPVOID = *mut c_void;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::upper_case_acronyms",
                  "explanation": null
                },
                "level": "warning",
                "message": "name `LPVOID` contains a capitalized acronym",
                "spans": [
                  {
                    "byte_end": 428,
                    "byte_start": 422,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    type LPVOID = *mut c_void;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `if` statement can be collapsed\n   --> src\\style.rs:253:9\n    |\n253 | /         if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {\n254 | |             if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {\n255 | |                 return Ok(());\n256 | |             }\n257 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n    = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n    |\n253 ~         if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear)\n254 ~             && (self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT) {\n255 |                 return Ok(());\n256 ~             }\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::collapsible_if)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "collapse nested if block",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7994,
                        "byte_start": 7992,
                        "column_end": 92,
                        "column_start": 90,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 253,
                        "line_start": 253,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 90,
                            "text": "        if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {"
                          }
                        ]
                      },
                      {
                        "byte_end": 8129,
                        "byte_start": 8119,
                        "column_end": 10,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 257,
                        "line_start": 256,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 14,
                            "text": "            }"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      },
                      {
                        "byte_end": 8009,
                        "byte_start": 8007,
                        "column_end": 15,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 254,
                        "line_start": 254,
                        "suggested_replacement": "&&",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 13,
                            "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                          }
                        ]
                      },
                      {
                        "byte_end": 8010,
                        "byte_start": 8010,
                        "column_end": 16,
                        "column_start": 16,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 0,
                            "byte_start": 0,
                            "column_end": 1,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1,
                            "line_start": 1,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": []
                          },
                          "macro_decl_name": "desugaring of `if` or `while` condition",
                          "span": {
                            "byte_end": 8072,
                            "byte_start": 8010,
                            "column_end": 78,
                            "column_start": 16,
                            "expansion": null,
                            "file_name": "src\\style.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 254,
                            "line_start": 254,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 78,
                                "highlight_start": 16,
                                "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 254,
                        "line_start": 254,
                        "suggested_replacement": "(",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 16,
                            "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                          }
                        ]
                      },
                      {
                        "byte_end": 8072,
                        "byte_start": 8072,
                        "column_end": 78,
                        "column_start": 78,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 0,
                            "byte_start": 0,
                            "column_end": 1,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1,
                            "line_start": 1,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": []
                          },
                          "macro_decl_name": "desugaring of `if` or `while` condition",
                          "span": {
                            "byte_end": 8072,
                            "byte_start": 8010,
                            "column_end": 78,
                            "column_start": 16,
                            "expansion": null,
                            "file_name": "src\\style.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 254,
                            "line_start": 254,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 78,
                                "highlight_start": 16,
                                "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 254,
                        "line_start": 254,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 78,
                            "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::collapsible_if",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `if` statement can be collapsed",
                "spans": [
                  {
                    "byte_end": 8129,
                    "byte_start": 7911,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 257,
                    "line_start": 253,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 92,
                        "highlight_start": 9,
                        "text": "        if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {"
                      },
                      {
                        "highlight_end": 80,
                        "highlight_start": 1,
                        "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                      },
                      {
                        "highlight_end": 31,
                        "highlight_start": 1,
                        "text": "                return Ok(());"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            }"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `if` statement can be collapsed\n   --> src\\style.rs:269:9\n    |\n269 | /         if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {\n270 | |             if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {\n271 | |                 return Cow::from(\"\");\n272 | |             }\n273 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n269 ~         if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear)\n270 ~             && (self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT) {\n271 |                 return Cow::from(\"\");\n272 ~             }\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "collapse nested if block",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8631,
                        "byte_start": 8629,
                        "column_end": 92,
                        "column_start": 90,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 269,
                        "line_start": 269,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 90,
                            "text": "        if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {"
                          }
                        ]
                      },
                      {
                        "byte_end": 8773,
                        "byte_start": 8763,
                        "column_end": 10,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 273,
                        "line_start": 272,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 14,
                            "text": "            }"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      },
                      {
                        "byte_end": 8646,
                        "byte_start": 8644,
                        "column_end": 15,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 270,
                        "line_start": 270,
                        "suggested_replacement": "&&",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 13,
                            "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                          }
                        ]
                      },
                      {
                        "byte_end": 8647,
                        "byte_start": 8647,
                        "column_end": 16,
                        "column_start": 16,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 0,
                            "byte_start": 0,
                            "column_end": 1,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1,
                            "line_start": 1,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": []
                          },
                          "macro_decl_name": "desugaring of `if` or `while` condition",
                          "span": {
                            "byte_end": 8709,
                            "byte_start": 8647,
                            "column_end": 78,
                            "column_start": 16,
                            "expansion": null,
                            "file_name": "src\\style.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 270,
                            "line_start": 270,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 78,
                                "highlight_start": 16,
                                "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 270,
                        "line_start": 270,
                        "suggested_replacement": "(",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 16,
                            "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                          }
                        ]
                      },
                      {
                        "byte_end": 8709,
                        "byte_start": 8709,
                        "column_end": 78,
                        "column_start": 78,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 0,
                            "byte_start": 0,
                            "column_end": 1,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\lib.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1,
                            "line_start": 1,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": []
                          },
                          "macro_decl_name": "desugaring of `if` or `while` condition",
                          "span": {
                            "byte_end": 8709,
                            "byte_start": 8647,
                            "column_end": 78,
                            "column_start": 16,
                            "expansion": null,
                            "file_name": "src\\style.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 270,
                            "line_start": 270,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 78,
                                "highlight_start": 16,
                                "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 270,
                        "line_start": 270,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 78,
                            "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::collapsible_if",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `if` statement can be collapsed",
                "spans": [
                  {
                    "byte_end": 8773,
                    "byte_start": 8548,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 273,
                    "line_start": 269,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 92,
                        "highlight_start": 9,
                        "text": "        if !self.quirks.contains(Quirk::Resetting) && !self.quirks.contains(Quirk::Clear) {"
                      },
                      {
                        "highlight_end": 80,
                        "highlight_start": 1,
                        "text": "            if self.quirks.contains(Quirk::Linger) || self == &Style::DEFAULT {"
                      },
                      {
                        "highlight_end": 38,
                        "highlight_start": 1,
                        "text": "                return Cow::from(\"\");"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            }"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `partial_cmp` on an `Ord` type\n   --> src\\style.rs:328:1\n    |\n328 | /  impl PartialOrd for Style {\n329 | |      fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n    | | ________________________________________________________________________-\n330 | ||         let Style {\n331 | ||             foreground: fg_a,\n332 | ||             background: bg_a,\n...   ||\n356 | ||         attrs_a.partial_cmp(&attrs_b)\n357 | ||     }\n    | ||_____- help: change this to: `{ Some(self.cmp(other)) }`\n358 | |  }\n    | |__^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n    = note: `#[warn(clippy::non_canonical_partial_ord_impl)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_canonical_partial_ord_impl)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10752,
                        "byte_start": 10078,
                        "column_end": 6,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 357,
                        "line_start": 329,
                        "suggested_replacement": "{ Some(self.cmp(other)) }",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 72,
                            "text": "    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {"
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "        let Style {"
                          },
                          {
                            "highlight_end": 30,
                            "highlight_start": 1,
                            "text": "            foreground: fg_a,"
                          },
                          {
                            "highlight_end": 30,
                            "highlight_start": 1,
                            "text": "            background: bg_a,"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            attributes: attrs_a,"
                          },
                          {
                            "highlight_end": 23,
                            "highlight_start": 1,
                            "text": "            quirks: _,"
                          },
                          {
                            "highlight_end": 26,
                            "highlight_start": 1,
                            "text": "            condition: _,"
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "        } = self;"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "        let Style {"
                          },
                          {
                            "highlight_end": 30,
                            "highlight_start": 1,
                            "text": "            foreground: fg_b,"
                          },
                          {
                            "highlight_end": 30,
                            "highlight_start": 1,
                            "text": "            background: bg_b,"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            attributes: attrs_b,"
                          },
                          {
                            "highlight_end": 23,
                            "highlight_start": 1,
                            "text": "            quirks: _,"
                          },
                          {
                            "highlight_end": 26,
                            "highlight_start": 1,
                            "text": "            condition: _,"
                          },
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "        } = other;"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          },
                          {
                            "highlight_end": 40,
                            "highlight_start": 1,
                            "text": "        match fg_a.partial_cmp(&fg_b) {"
                          },
                          {
                            "highlight_end": 51,
                            "highlight_start": 1,
                            "text": "            Some(core::cmp::Ordering::Equal) => {}"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            ord => return ord,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          },
                          {
                            "highlight_end": 40,
                            "highlight_start": 1,
                            "text": "        match bg_a.partial_cmp(&bg_b) {"
                          },
                          {
                            "highlight_end": 51,
                            "highlight_start": 1,
                            "text": "            Some(core::cmp::Ordering::Equal) => {}"
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "            ord => return ord,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "        attrs_a.partial_cmp(&attrs_b)"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_partial_ord_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `partial_cmp` on an `Ord` type",
                "spans": [
                  {
                    "byte_end": 10754,
                    "byte_start": 9979,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 358,
                    "line_start": 328,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "impl PartialOrd for Style {"
                      },
                      {
                        "highlight_end": 73,
                        "highlight_start": 1,
                        "text": "    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {"
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "        let Style {"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "            foreground: fg_a,"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "            background: bg_a,"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            attributes: attrs_a,"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "            quirks: _,"
                      },
                      {
                        "highlight_end": 26,
                        "highlight_start": 1,
                        "text": "            condition: _,"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "        } = self;"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "        let Style {"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "            foreground: fg_b,"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "            background: bg_b,"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            attributes: attrs_b,"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "            quirks: _,"
                      },
                      {
                        "highlight_end": 26,
                        "highlight_start": 1,
                        "text": "            condition: _,"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "        } = other;"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 40,
                        "highlight_start": 1,
                        "text": "        match fg_a.partial_cmp(&fg_b) {"
                      },
                      {
                        "highlight_end": 51,
                        "highlight_start": 1,
                        "text": "            Some(core::cmp::Ordering::Equal) => {}"
                      },
                      {
                        "highlight_end": 31,
                        "highlight_start": 1,
                        "text": "            ord => return ord,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 40,
                        "highlight_start": 1,
                        "text": "        match bg_a.partial_cmp(&bg_b) {"
                      },
                      {
                        "highlight_end": 51,
                        "highlight_start": 1,
                        "text": "            Some(core::cmp::Ordering::Equal) => {}"
                      },
                      {
                        "highlight_end": 31,
                        "highlight_start": 1,
                        "text": "            ord => return ord,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 38,
                        "highlight_start": 1,
                        "text": "        attrs_a.partial_cmp(&attrs_b)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:346:32\n    |\n346 |         match fg_a.partial_cmp(&fg_b) {\n    |                                ^^^^^ help: change this to: `fg_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10479,
                        "byte_start": 10474,
                        "column_end": 37,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 346,
                        "line_start": 346,
                        "suggested_replacement": "fg_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 32,
                            "text": "        match fg_a.partial_cmp(&fg_b) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 10479,
                    "byte_start": 10474,
                    "column_end": 37,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 346,
                    "line_start": 346,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 32,
                        "text": "        match fg_a.partial_cmp(&fg_b) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:351:32\n    |\n351 |         match bg_a.partial_cmp(&bg_b) {\n    |                                ^^^^^ help: change this to: `bg_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10612,
                        "byte_start": 10607,
                        "column_end": 37,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 351,
                        "line_start": 351,
                        "suggested_replacement": "bg_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 32,
                            "text": "        match bg_a.partial_cmp(&bg_b) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 10612,
                    "byte_start": 10607,
                    "column_end": 37,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 351,
                    "line_start": 351,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 32,
                        "text": "        match bg_a.partial_cmp(&bg_b) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:356:29\n    |\n356 |         attrs_a.partial_cmp(&attrs_b)\n    |                             ^^^^^^^^ help: change this to: `attrs_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10745,
                        "byte_start": 10737,
                        "column_end": 37,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 356,
                        "line_start": 356,
                        "suggested_replacement": "attrs_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 29,
                            "text": "        attrs_a.partial_cmp(&attrs_b)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 10745,
                    "byte_start": 10737,
                    "column_end": 37,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 356,
                    "line_start": 356,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 29,
                        "text": "        attrs_a.partial_cmp(&attrs_b)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:378:24\n    |\n378 |         match fg_a.cmp(&fg_b) {\n    |                        ^^^^^ help: change this to: `fg_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11225,
                        "byte_start": 11220,
                        "column_end": 29,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 378,
                        "line_start": 378,
                        "suggested_replacement": "fg_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 24,
                            "text": "        match fg_a.cmp(&fg_b) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 11225,
                    "byte_start": 11220,
                    "column_end": 29,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 378,
                    "line_start": 378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 24,
                        "text": "        match fg_a.cmp(&fg_b) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:383:24\n    |\n383 |         match bg_a.cmp(&bg_b) {\n    |                        ^^^^^ help: change this to: `bg_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11344,
                        "byte_start": 11339,
                        "column_end": 29,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 383,
                        "line_start": 383,
                        "suggested_replacement": "bg_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 24,
                            "text": "        match bg_a.cmp(&bg_b) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 11344,
                    "byte_start": 11339,
                    "column_end": 29,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 383,
                    "line_start": 383,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 24,
                        "text": "        match bg_a.cmp(&bg_b) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\style.rs:388:21\n    |\n388 |         attrs_a.cmp(&attrs_b)\n    |                     ^^^^^^^^ help: change this to: `attrs_b`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11463,
                        "byte_start": 11455,
                        "column_end": 29,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\style.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 388,
                        "line_start": 388,
                        "suggested_replacement": "attrs_b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 21,
                            "text": "        attrs_a.cmp(&attrs_b)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 11463,
                    "byte_start": 11455,
                    "column_end": 29,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\style.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 388,
                    "line_start": 388,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 21,
                        "text": "        attrs_a.cmp(&attrs_b)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\color.rs:151:34\n    |\n151 |             Color::Fixed(num) => write!(f, \"{};5;{}\", base, num),\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n151 -             Color::Fixed(num) => write!(f, \"{};5;{}\", base, num),\n151 +             Color::Fixed(num) => write!(f, \"{base};5;{num}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5495,
                        "byte_start": 5495,
                        "column_end": 46,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "base",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 46,
                            "text": "            Color::Fixed(num) => write!(f, \"{};5;{}\", base, num),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5500,
                        "byte_start": 5500,
                        "column_end": 51,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "num",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 51,
                            "text": "            Color::Fixed(num) => write!(f, \"{};5;{}\", base, num),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5508,
                        "byte_start": 5502,
                        "column_end": 59,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 53,
                            "text": "            Color::Fixed(num) => write!(f, \"{};5;{}\", base, num),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5513,
                        "byte_start": 5508,
                        "column_end": 64,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 59,
                            "text": "            Color::Fixed(num) => write!(f, \"{};5;{}\", base, num),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5514,
                    "byte_start": 5483,
                    "column_end": 65,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\color.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 151,
                    "line_start": 151,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 34,
                        "text": "            Color::Fixed(num) => write!(f, \"{};5;{}\", base, num),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\color.rs:152:36\n    |\n152 |             Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n152 -             Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),\n152 +             Color::Rgb(r, g, b) => write!(f, \"{base};2;{r};{g};{b}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5563,
                        "byte_start": 5563,
                        "column_end": 48,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 152,
                        "line_start": 152,
                        "suggested_replacement": "base",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 48,
                            "text": "            Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5568,
                        "byte_start": 5568,
                        "column_end": 53,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 152,
                        "line_start": 152,
                        "suggested_replacement": "r",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "            Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5571,
                        "byte_start": 5571,
                        "column_end": 56,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 152,
                        "line_start": 152,
                        "suggested_replacement": "g",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 56,
                            "text": "            Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5574,
                        "byte_start": 5574,
                        "column_end": 59,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 152,
                        "line_start": 152,
                        "suggested_replacement": "b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 59,
                            "text": "            Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5582,
                        "byte_start": 5576,
                        "column_end": 67,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 152,
                        "line_start": 152,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 61,
                            "text": "            Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5585,
                        "byte_start": 5582,
                        "column_end": 70,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 152,
                        "line_start": 152,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 67,
                            "text": "            Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5588,
                        "byte_start": 5585,
                        "column_end": 73,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 152,
                        "line_start": 152,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 70,
                            "text": "            Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5591,
                        "byte_start": 5588,
                        "column_end": 76,
                        "column_start": 73,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 152,
                        "line_start": 152,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 73,
                            "text": "            Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5592,
                    "byte_start": 5551,
                    "column_end": 77,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\color.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 152,
                    "line_start": 152,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 36,
                        "text": "            Color::Rgb(r, g, b) => write!(f, \"{};2;{};{};{}\", base, r, g, b),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\color.rs:153:18\n    |\n153 |             _ => write!(f, \"{}\", base)\n    |                  ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n153 -             _ => write!(f, \"{}\", base)\n153 +             _ => write!(f, \"{base}\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5623,
                        "byte_start": 5623,
                        "column_end": 30,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 153,
                        "line_start": 153,
                        "suggested_replacement": "base",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 30,
                            "text": "            _ => write!(f, \"{}\", base)"
                          }
                        ]
                      },
                      {
                        "byte_end": 5631,
                        "byte_start": 5625,
                        "column_end": 38,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 153,
                        "line_start": 153,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 32,
                            "text": "            _ => write!(f, \"{}\", base)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5632,
                    "byte_start": 5611,
                    "column_end": 39,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\color.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 153,
                    "line_start": 153,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 18,
                        "text": "            _ => write!(f, \"{}\", base)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `impl` can be derived\n   --> src\\color.rs:217:1\n    |\n217 | / impl Default for Color {\n218 | |     fn default() -> Self {\n219 | |         Color::Primary\n220 | |     }\n221 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\n    = note: `#[warn(clippy::derivable_impls)]` on by default\nhelp: replace the manual implementation with a derive attribute and mark the default variant\n    |\n9   + #[derive(Default)]\n10  ~ pub enum Color {\n11  |     /// Terminal primary color #9. (foreground code `39`, background code `49`).\n...\n17  |     /// foreground color.\n18  ~     #[default]\n19  ~     Primary,\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::derivable_impls)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the manual implementation with a derive attribute and mark the default variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7617,
                        "byte_start": 7534,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 222,
                        "line_start": 217,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 1,
                            "text": "impl Default for Color {"
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "    fn default() -> Self {"
                          },
                          {
                            "highlight_end": 23,
                            "highlight_start": 1,
                            "text": "        Color::Primary"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          },
                          {
                            "highlight_end": 2,
                            "highlight_start": 1,
                            "text": "}"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      },
                      {
                        "byte_end": 360,
                        "byte_start": 360,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 9,
                        "line_start": 9,
                        "suggested_replacement": "#[derive(Default)]\n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub enum Color {"
                          }
                        ]
                      },
                      {
                        "byte_end": 811,
                        "byte_start": 811,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "#[default]\n    ",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    Primary,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::derivable_impls",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `impl` can be derived",
                "spans": [
                  {
                    "byte_end": 7616,
                    "byte_start": 7534,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\color.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 221,
                    "line_start": 217,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "impl Default for Color {"
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "    fn default() -> Self {"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "        Color::Primary"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: methods called `new` usually take no `self`\n   --> src\\paint.rs:104:12\n    |\n104 |     fn new(self) -> Painted<Self> where Self: Sized {\n    |            ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention\n    = note: `#[warn(clippy::wrong_self_convention)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider choosing a less ambiguous name",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::wrong_self_convention)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::wrong_self_convention",
                  "explanation": null
                },
                "level": "warning",
                "message": "methods called `new` usually take no `self`",
                "spans": [
                  {
                    "byte_end": 3240,
                    "byte_start": 3236,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "src\\paint.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 104,
                    "line_start": 104,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    fn new(self) -> Painted<Self> where Self: Sized {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\paint.rs:200:18\n    |\n200 |             .map(|string| Cow::Borrowed(string))\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Cow::Borrowed`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n    = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_closure)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5979,
                        "byte_start": 5949,
                        "column_end": 48,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\paint.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 200,
                        "line_start": 200,
                        "suggested_replacement": "Cow::Borrowed",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 18,
                            "text": "            .map(|string| Cow::Borrowed(string))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 5979,
                    "byte_start": 5949,
                    "column_end": 48,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\paint.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 18,
                        "text": "            .map(|string| Cow::Borrowed(string))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\paint.rs:219:18\n    |\n219 |             .map(|string| Cow::Borrowed(string))\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Cow::Borrowed`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6576,
                        "byte_start": 6546,
                        "column_end": 48,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\paint.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 219,
                        "line_start": 219,
                        "suggested_replacement": "Cow::Borrowed",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 18,
                            "text": "            .map(|string| Cow::Borrowed(string))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 6576,
                    "byte_start": 6546,
                    "column_end": 48,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\paint.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 219,
                    "line_start": 219,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 18,
                        "text": "            .map(|string| Cow::Borrowed(string))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: a `const` item should not be interior mutable\n   --> src\\condition.rs:190:5\n    |\n190 |     pub const DEFAULT: AtomicCondition = AtomicCondition::from(Condition::DEFAULT);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const\n    = note: `#[warn(clippy::declare_interior_mutable_const)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::declare_interior_mutable_const)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::declare_interior_mutable_const",
                  "explanation": null
                },
                "level": "warning",
                "message": "a `const` item should not be interior mutable",
                "spans": [
                  {
                    "byte_end": 6698,
                    "byte_start": 6619,
                    "column_end": 84,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\condition.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 190,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 5,
                        "text": "    pub const DEFAULT: AtomicCondition = AtomicCondition::from(Condition::DEFAULT);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: transmute used without annotations\n   --> src\\condition.rs:202:34\n    |\n202 |             Condition(core::mem::transmute(self.0.load(Ordering::Acquire)))\n    |                                  ^^^^^^^^^ help: consider adding missing annotations: `transmute::<*mut (), fn() -> bool>`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_transmute_annotations\n    = note: `#[warn(clippy::missing_transmute_annotations)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_transmute_annotations",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::missing_transmute_annotations)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider adding missing annotations",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7034,
                        "byte_start": 7025,
                        "column_end": 43,
                        "column_start": 34,
                        "expansion": null,
                        "file_name": "src\\condition.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 202,
                        "line_start": 202,
                        "suggested_replacement": "transmute::<*mut (), fn() -> bool>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 34,
                            "text": "            Condition(core::mem::transmute(self.0.load(Ordering::Acquire)))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::missing_transmute_annotations",
                  "explanation": null
                },
                "level": "warning",
                "message": "transmute used without annotations",
                "spans": [
                  {
                    "byte_end": 7034,
                    "byte_start": 7025,
                    "column_end": 43,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\condition.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 34,
                        "text": "            Condition(core::mem::transmute(self.0.load(Ordering::Acquire)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `clone` on a `Copy` type\n  --> src\\set.rs:64:29\n   |\n64 |       fn clone(&self) -> Self {\n   |  _____________________________^\n65 | |         Self(self.0, self.1)\n66 | |     }\n   | |_____^ help: change this to: `{ *self }`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl\n   = note: `#[warn(clippy::non_canonical_clone_impl)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_canonical_clone_impl)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1385,
                        "byte_start": 1349,
                        "column_end": 6,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 66,
                        "line_start": 64,
                        "suggested_replacement": "{ *self }",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 29,
                            "text": "    fn clone(&self) -> Self {"
                          },
                          {
                            "highlight_end": 29,
                            "highlight_start": 1,
                            "text": "        Self(self.0, self.1)"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_clone_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `clone` on a `Copy` type",
                "spans": [
                  {
                    "byte_end": 1385,
                    "byte_start": 1349,
                    "column_end": 6,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\set.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 66,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 29,
                        "text": "    fn clone(&self) -> Self {"
                      },
                      {
                        "highlight_end": 29,
                        "highlight_start": 1,
                        "text": "        Self(self.0, self.1)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `partial_cmp` on an `Ord` type\n  --> src\\set.rs:77:1\n   |\n77 | /  impl<T> PartialOrd for Set<T> {\n78 | |      fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n   | | ________________________________________________________________________-\n79 | ||         self.1.partial_cmp(&other.1)\n80 | ||     }\n   | ||_____- help: change this to: `{ Some(self.cmp(other)) }`\n81 | |  }\n   | |__^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1670,
                        "byte_start": 1626,
                        "column_end": 6,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\set.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 80,
                        "line_start": 78,
                        "suggested_replacement": "{ Some(self.cmp(other)) }",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 72,
                            "text": "    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {"
                          },
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "        self.1.partial_cmp(&other.1)"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_partial_ord_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `partial_cmp` on an `Ord` type",
                "spans": [
                  {
                    "byte_end": 1672,
                    "byte_start": 1523,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\set.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 81,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 1,
                        "text": "impl<T> PartialOrd for Set<T> {"
                      },
                      {
                        "highlight_end": 73,
                        "highlight_start": 1,
                        "text": "    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {"
                      },
                      {
                        "highlight_end": 37,
                        "highlight_start": 1,
                        "text": "        self.1.partial_cmp(&other.1)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_2eqgdi4/yansi-1.0.1#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_2eqgdi4\\yansi-1.0.1\\target\\debug\\deps\\libyansi-2a06d17ea8b8c06d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 14
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "yansi",
          "version": "1.0.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/yansi/latest/yansi/all.html \"show sidebar\")\n# Crate yansiCopy item path\n[Settings](https://docs.rs/yansi/latest/settings.html)\n[Help](https://docs.rs/yansi/latest/help.html)\nSummary[Source](https://docs.rs/yansi/latest/src/yansi/lib.rs.html#1-373)\nExpand description\nA dead simple ANSI terminal color painting library.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#features)Features\nWhy _y_ et another _ANSI_ terminal coloring library? Here are some reasons:\n  * This library makes simple things _simple_ : `use` [`Paint`](https://docs.rs/yansi/latest/yansi/trait.Paint.html \"trait yansi::Paint\") and go!\n  * Zero dependencies by default. It really is simple.\n  * Zero allocations except as needed by opt-in [wrapping](https://docs.rs/yansi/latest/yansi/#wrapping).\n  * [Automatic Windows support](https://docs.rs/yansi/latest/yansi/#windows) for the vast majority (95%+) of Windows users.\n  * [Featureful `no_std`](https://docs.rs/yansi/latest/yansi/#crate-features), no-`alloc`, support with `default-features = false`.\n  * [`Style` constructors are `const`](https://docs.rs/yansi/latest/yansi/#uniform-const-builders): store styles statically, even with dynamic conditions!\n  * _Any_ type implementing a formatting trait can be styled, not just strings.\n  * Styling can be [enabled](https://docs.rs/yansi/latest/yansi/fn.enable.html \"fn yansi::enable\") and [disabled](https://docs.rs/yansi/latest/yansi/fn.disable.html \"fn yansi::disable\") globally and [dynamically](https://docs.rs/yansi/latest/yansi/fn.whenever.html \"fn yansi::whenever\"), on the fly.\n  * A `Style` can be predicated on arbitrary [conditions](https://docs.rs/yansi/latest/yansi/#per-style).\n  * Formatting specifiers like `{:x}` and `{:08b}` are supported and preserved!\n  * [Built-in (optional) conditions](https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions \"struct yansi::Condition\") for [TTY detection](https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-1 \"struct yansi::Condition\") and [common environment variables](https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-2 \"struct yansi::Condition\").\n  * Arbitrary items can be [_masked_](https://docs.rs/yansi/latest/yansi/#masking) for selective disabling.\n  * Styling can [_wrap_](https://docs.rs/yansi/latest/yansi/#wrapping) to preserve styling across resets.\n  * Styling can [_linger_](https://docs.rs/yansi/latest/yansi/#lingering) beyond a single value.\n  * Experimental support for [hyperlinking](https://docs.rs/yansi/latest/yansi/hyperlink/index.html \"mod yansi::hyperlink\") is included.\n  * The name `yansi` is pretty cool \ud83d\ude0e.\n\n\nAll that said, `yansi` borrows API ideas from older libraries as well as implementation details from [`ansi_term`](https://crates.io/crates/ansi_term).\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#usage)Usage\nThe [`Paint`](https://docs.rs/yansi/latest/yansi/trait.Paint.html \"trait yansi::Paint\") trait is implemented for every type. Import it and call chainable builder methods:\n```\nuse yansi::Paint;\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().italic(),\n  \"STOP\".white().on_red().bright().underline().bold());\n```\n\n`>` Testing, **Ready** , _**Set**_ , _**STOP**_!\nThe methods return a [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\") type which consists of a [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\") and a reference to the receiver. Displaying a [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\") (via `print!()`, `format!()`, etc) results in emitting ANSI escape codes that effectuate the style.\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#uniform-const-builders)Uniform `const` Builders\nAll builder methods are uniformly available for [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\"), [`Color`](https://docs.rs/yansi/latest/yansi/enum.Color.html \"enum yansi::Color\"), and [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\"), which means you can chain calls across library types. All methods are `const`, allowing creations of `const` or `static` [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\")s. A `Style` can be directly applied to values with [`.paint()`](https://docs.rs/yansi/latest/yansi/trait.Paint.html#method.paint \"method yansi::Paint::paint\"), from [`Paint::paint()`](https://docs.rs/yansi/latest/yansi/trait.Paint.html#method.paint \"method yansi::Paint::paint\"), available for every type:\n```\nuse yansi::{Paint, Style, Color::*};\n// `const` constructors allow static `Style`s for easy reuse\nstatic ALERT: Style = White.bright().underline().italic().on_red();\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().bold(),\n  \"STOP\".paint(ALERT));\n```\n\n`>` Testing, **Ready** , **Set** , __STOP__!\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#conditional-styling)Conditional Styling\n#### [\u00a7](https://docs.rs/yansi/latest/yansi/#globally)Globally\nStyling is enabled by default but can be enabled and disabled globally via [`enable()`](https://docs.rs/yansi/latest/yansi/fn.enable.html \"fn yansi::enable\") and [`disable()`](https://docs.rs/yansi/latest/yansi/fn.disable.html \"fn yansi::disable\"). When styling is disabled, no ANSI escape codes are emitted, and [_masked_](https://docs.rs/yansi/latest/yansi/#masking) values are omitted entirely.\nGlobal styling can also be dynamically enabled and disabled using [`whenever()`](https://docs.rs/yansi/latest/yansi/fn.whenever.html \"fn yansi::whenever\") with an arbitrary [`Condition`](https://docs.rs/yansi/latest/yansi/struct.Condition.html \"struct yansi::Condition\"): a function that returns `true` or `false`. This condition is evaluated each time a [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\") item is displayed. The associated styling is enabled, and mask values emitted, exactly when and only when the condition returns `true`.\n#### [\u00a7](https://docs.rs/yansi/latest/yansi/#per-style)Per-`Style`\nA specific `Style` can itself be conditionally applied by using [`.whenever()`](https://docs.rs/yansi/latest/yansi/struct.Style.html#method.whenever \"method yansi::Style::whenever\"):\n```\nuse yansi::{Paint, Style, Color::*, Condition};\nstatic WARNING: Style = Black.bold().on_yellow().whenever(Condition::STDERR_IS_TTY);\neprintln!(\"{}\", \"Bees can sting!\".paint(WARNING));\n```\n\nWith the above, if `stderr` is a TTY, then: `>` **Bees can sting!**\nIf it is not a TTY, styling is not emitted: `>` Bees can sting!\nSee [`Condition`](https://docs.rs/yansi/latest/yansi/struct.Condition.html \"struct yansi::Condition\") for a list of built-in conditions which require enabling crate features.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#quirks)Quirks\nAs a convenience, `yansi` implements several \u201cquirks\u201d, applicable via [`Quirk`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html \"enum yansi::Quirk\") and the respective methods, that modify if and how styling is presented to the terminal. These quirks do not correspond to any ANSI styling sequences.\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#masking)Masking\nItems can be arbitrarily _masked_ with the [`mask()`](https://docs.rs/yansi/latest/yansi/trait.Paint.html#tymethod.mask \"method yansi::Paint::mask\") builder method. Masked values are not emitted when styling is disabled, globally or for a given style. This allows selective output based on whether styling is enabled.\nOne use for this feature is to print certain characters only when styling is enabled. For instance, you might wish to emit the \ud83c\udfa8 emoji when coloring is enabled but not otherwise. This can be accomplished by masking the emoji:\n```\nuse yansi::Paint;\nprintln!(\"I like colors!{}\", \" \ud83c\udfa8\".mask());\n```\n\nWhen styling is enabled, this prints: `>` I like colors! \ud83c\udfa8\nWith styling disabled, this prints: `>` I like colors!\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#wrapping)Wrapping\n**Note:** _Either the`std` or `alloc` feature is required for wrapping. `std` is enabled by default. See [crate features](https://docs.rs/yansi/latest/yansi/#crate-features)._\nStyling can _wrap_ via [`Quirk::Wrap`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Wrap \"variant yansi::Quirk::Wrap\") or the equivalent [`wrap()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.wrap \"method yansi::Painted::wrap\") constructor. A wrapping style modifies any styling resets emitted by the internal value so that they correspond to the wrapping style. In other words, the \u201creset\u201d style of the wrapped item is modified to be the style being `.wrap()`d.\nWrapping is useful in situations where opaque and arbitrary values must be styled consistently irrespective of any existing styling. For example, a generic logger might want to style messages based on log levels consistently, even when those messages may already include styling. Wrapping exists to enable such consistent styling:\n```\nuse yansi::Paint;\n// Imagine that `inner` is opaque and we don't know it's styling.\nlet inner = format!(\"{} and {}\", \"Stop\".red(), \"Go\".green());\n// We can use `wrap` to ensure anything in `inner` not styled is blue.\nprintln!(\"Hey! {}\", inner.blue().wrap());\n```\n\nThanks to wrapping, this prints: `>` Hey!  Stop and Go\nWithout wrapping, the reset after `\"Stop\".red()` would not be overwritten: `>` Hey! Stop and Go\nWrapping incurs a performance cost due to an extra allocation and replacement if the wrapped item has styling applied to it. Otherwise, it does not allocate nor incur a meaningful performance cost.\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#lingering)Lingering\nStyling can _linger_ beyond a single value via [`Quirk::Linger`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Linger \"variant yansi::Quirk::Linger\") or the equivalent [`linger()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.linger \"method yansi::Painted::linger\") constructor. A lingering style does not reset itself after being applied. In other words, the style lingers on beyond the value it\u2019s applied to, until something else resets the respective styling.\nThe complement to lingering is force resetting via [`Quirk::Resetting`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Resetting \"variant yansi::Quirk::Resetting\") or the equivalent [`resetting()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.resetting \"method yansi::Painted::resetting\") constructor. Force resetting, as the name implies, forces a reset suffix to be emitted after the value, irrespective of any lingering applied. It can be used as a way to finalize a lingering style.\nLingering itself is useful in situations where a given style is to be repeated across multiple values, or when style is intended to persist even across values that are not styled with `yansi`. It also allows avoiding unnecessarily repeated ANSI code sequences. The examples below illustrate some scenarios in which lingering is useful:\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic().linger(),\n  \"you\".on_yellow(), // doesn't linger, so all styling is reset here\n  \"today\".blue());\n```\n\n`>` Hello!  _How _are things with you__ today?\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic(), // doesn't linger, so all styling is reset here\n  \"you\".on_yellow().linger(),\n  \"today\".blue()); // doesn't linger; styling is reset\n```\n\n`>` Hello!  _How _are__ things with  you today?\n```\nuse yansi::Paint;\nprintln!(\"{} B {} {} {} F\",\n  \"A\".red().linger(),\n  \"C\".underline().linger(),\n  \"D\", // doesn't linger, but no styling applied, thus no reset\n  \"E\".resetting()); // explicitly reset\n```\n\n`>` A B _C D E_ F\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#brightening)Brightening\nMost pimrary colors are available in regular and _bright_ variants, e.g., [`Color::Red`](https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.Red \"variant yansi::Color::Red\") and [`Color::BrightRed`](https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.BrightRed \"variant yansi::Color::BrightRed\"). The [`Quirk::Bright`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Bright \"variant yansi::Quirk::Bright\") and [`Quirk::OnBright`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.OnBright \"variant yansi::Quirk::OnBright\") quirks, typically applied via [`.bright()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.bright \"method yansi::Painted::bright\") and [`.on_bright()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.on_bright \"method yansi::Painted::on_bright\"), provide an alternative, convenient mechanism to select the bright variant of the selected foreground or background color, respectively. The quirk provides no additional colors and is equivalent to selecting the bright variants directly.\n```\nuse yansi::Paint;\n// These are all equivalent.\nprint!(\"{}\", \"Regular\".red());\nprint!(\"{}\", \"Bright\".bright_red());\nprint!(\"{}\", \"Bright\".bright().red());\nprint!(\"{}\", \"Bright\".red().bright());\n// The `bright` quirk lets use choose the bright variants of _any_ color,\n// even when the color or style is unknown at the call site.\nprint!(\"{}\", \"Normal\".paint(STYLE));\nprint!(\"{}\", \"Bright\".paint(STYLE).bright());\n```\n\n`>` Regular Bright Bright Bright **Normal** **Bright**\nThe `bright()` quirk can be applied before or after a color is selected while having the same effect.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#windows)Windows\nStyling is supported and enabled automatically on Windows beginning with the Windows 10 Anniversary Update, or about [96% of all Windows machines worldwide](https://gs.statcounter.com/os-version-market-share/windows/desktop/worldwide), and likely closer to 100% of developer machines (e.g., 99% of visitors to [rocket.rs](https://rocket.rs) on Windows are on Windows 10+).\nYansi enables styling support on Windows by querying the Windows API on the first attempt to color. If support is available, it is enabled. If support is not available, styling is disabled and no styling sequences are emitted.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#crate-features)Crate Features\nFeature| Default?| Also Enables| Notes  \n---|---|---|---  \n`std`| **Y**| `alloc`|  Use `std` library.  \n`alloc`| **Y**| |  Use `alloc`. Enables [wrapping](https://docs.rs/yansi/latest/yansi/#wrapping).  \n`detect-tty`| N| `std`| See [optional conditions](https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions \"struct yansi::Condition\").  \n`detect-env`| N| `std`| See [optional conditions](https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions \"struct yansi::Condition\").  \n`hyperlink`| N| `std`| Enables [hyperlinking](https://docs.rs/yansi/latest/yansi/hyperlink/index.html \"mod yansi::hyperlink\") support.  \nWith `default-features = false`, this crate is `#[no_std]`.\nWithout any features enabled, all functionality except [wrapping](https://docs.rs/yansi/latest/yansi/#wrapping) is available. To recover wrapping _with_ `#[no_std]`, set `default-features = false` and enable the `alloc` feature, which requires `alloc` support.\n## Modules[\u00a7](https://docs.rs/yansi/latest/yansi/#modules)\n\n[hyperlink](https://docs.rs/yansi/latest/yansi/hyperlink/index.html \"mod yansi::hyperlink\")`hyperlink`\n    Experimental support for hyperlinking.\n## Structs[\u00a7](https://docs.rs/yansi/latest/yansi/#structs)\n\n[Condition](https://docs.rs/yansi/latest/yansi/struct.Condition.html \"struct yansi::Condition\")\n    A function that decides whether styling should be applied.\n\n[Painted](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\")\n    An arbitrary value with a [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\") applied to it.\n\n[Style](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\")\n    A set of styling options.\n## Enums[\u00a7](https://docs.rs/yansi/latest/yansi/#enums)\n\n[Attribute](https://docs.rs/yansi/latest/yansi/enum.Attribute.html \"enum yansi::Attribute\")\n    Enum representing text attributes, largely for text formatting.\n\n[Color](https://docs.rs/yansi/latest/yansi/enum.Color.html \"enum yansi::Color\")\n    Enum representing a terminal color.\n\n[Quirk](https://docs.rs/yansi/latest/yansi/enum.Quirk.html \"enum yansi::Quirk\")\n    Enum representing a `yansi` quirk.\n## Traits[\u00a7](https://docs.rs/yansi/latest/yansi/#traits)\n\n[Paint](https://docs.rs/yansi/latest/yansi/trait.Paint.html \"trait yansi::Paint\")\n    A trait to apply styling to any value. Implemented for all types.\n## Functions[\u00a7](https://docs.rs/yansi/latest/yansi/#functions)\n\n[disable](https://docs.rs/yansi/latest/yansi/fn.disable.html \"fn yansi::disable\")\n    Unconditionally disables styling globally.\n\n[enable](https://docs.rs/yansi/latest/yansi/fn.enable.html \"fn yansi::enable\")\n    Unconditionally enables styling globally.\n\n[is_enabled](https://docs.rs/yansi/latest/yansi/fn.is_enabled.html \"fn yansi::is_enabled\")\n    Returns `true` if styling is globally enabled and `false` otherwise.\n\n[whenever](https://docs.rs/yansi/latest/yansi/fn.whenever.html \"fn yansi::whenever\")\n    Dynamically enables and disables styling globally based on `condition`.\n",
            "markdown_with_citations": "[](https://docs.rs/yansi/latest/yansi/all.html \"show sidebar\")\n# Crate yansiCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA dead simple ANSI terminal color painting library.\n## \u00a7\u27e84\u27e9Features\nWhy _y_ et another _ANSI_ terminal coloring library? Here are some reasons:\n  * This library makes simple things _simple_ : `use` `Paint`\u27e85\u27e9 and go!\n  * Zero dependencies by default. It really is simple.\n  * Zero allocations except as needed by opt-in wrapping\u27e86\u27e9.\n  * Automatic Windows support\u27e87\u27e9 for the vast majority (95%+) of Windows users.\n  * Featureful `no_std`\u27e88\u27e9, no-`alloc`, support with `default-features = false`.\n  * `Style` constructors are `const`\u27e89\u27e9: store styles statically, even with dynamic conditions!\n  * _Any_ type implementing a formatting trait can be styled, not just strings.\n  * Styling can be enabled\u27e810\u27e9 and disabled\u27e811\u27e9 globally and dynamically\u27e812\u27e9, on the fly.\n  * A `Style` can be predicated on arbitrary conditions\u27e813\u27e9.\n  * Formatting specifiers like `{:x}` and `{:08b}` are supported and preserved!\n  * Built-in (optional) conditions\u27e814\u27e9 for TTY detection\u27e815\u27e9 and common environment variables\u27e816\u27e9.\n  * Arbitrary items can be _masked_\u27e817\u27e9 for selective disabling.\n  * Styling can _wrap_\u27e86\u27e9 to preserve styling across resets.\n  * Styling can _linger_\u27e818\u27e9 beyond a single value.\n  * Experimental support for hyperlinking\u27e819\u27e9 is included.\n  * The name `yansi` is pretty cool \ud83d\ude0e.\n\n\nAll that said, `yansi` borrows API ideas from older libraries as well as implementation details from `ansi_term`\u27e820\u27e9.\n## \u00a7\u27e821\u27e9Usage\nThe `Paint`\u27e85\u27e9 trait is implemented for every type. Import it and call chainable builder methods:\n```\nuse yansi::Paint;\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().italic(),\n  \"STOP\".white().on_red().bright().underline().bold());\n```\n\n`>` Testing, **Ready** , _**Set**_ , _**STOP**_!\nThe methods return a `Painted`\u27e822\u27e9 type which consists of a `Style`\u27e823\u27e9 and a reference to the receiver. Displaying a `Painted`\u27e822\u27e9 (via `print!()`, `format!()`, etc) results in emitting ANSI escape codes that effectuate the style.\n### \u00a7\u27e89\u27e9Uniform `const` Builders\nAll builder methods are uniformly available for `Style`\u27e823\u27e9, `Color`\u27e824\u27e9, and `Painted`\u27e822\u27e9, which means you can chain calls across library types. All methods are `const`, allowing creations of `const` or `static` `Style`\u27e823\u27e9s. A `Style` can be directly applied to values with `.paint()`\u27e825\u27e9, from `Paint::paint()`\u27e825\u27e9, available for every type:\n```\nuse yansi::{Paint, Style, Color::*};\n// `const` constructors allow static `Style`s for easy reuse\nstatic ALERT: Style = White.bright().underline().italic().on_red();\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().bold(),\n  \"STOP\".paint(ALERT));\n```\n\n`>` Testing, **Ready** , **Set** , __STOP__!\n### \u00a7\u27e826\u27e9Conditional Styling\n#### \u00a7\u27e827\u27e9Globally\nStyling is enabled by default but can be enabled and disabled globally via `enable()`\u27e810\u27e9 and `disable()`\u27e811\u27e9. When styling is disabled, no ANSI escape codes are emitted, and _masked_\u27e817\u27e9 values are omitted entirely.\nGlobal styling can also be dynamically enabled and disabled using `whenever()`\u27e812\u27e9 with an arbitrary `Condition`\u27e828\u27e9: a function that returns `true` or `false`. This condition is evaluated each time a `Painted`\u27e822\u27e9 item is displayed. The associated styling is enabled, and mask values emitted, exactly when and only when the condition returns `true`.\n#### \u00a7\u27e813\u27e9Per-`Style`\nA specific `Style` can itself be conditionally applied by using `.whenever()`\u27e829\u27e9:\n```\nuse yansi::{Paint, Style, Color::*, Condition};\nstatic WARNING: Style = Black.bold().on_yellow().whenever(Condition::STDERR_IS_TTY);\neprintln!(\"{}\", \"Bees can sting!\".paint(WARNING));\n```\n\nWith the above, if `stderr` is a TTY, then: `>` **Bees can sting!**\nIf it is not a TTY, styling is not emitted: `>` Bees can sting!\nSee `Condition`\u27e828\u27e9 for a list of built-in conditions which require enabling crate features.\n## \u00a7\u27e830\u27e9Quirks\nAs a convenience, `yansi` implements several \u201cquirks\u201d, applicable via `Quirk`\u27e831\u27e9 and the respective methods, that modify if and how styling is presented to the terminal. These quirks do not correspond to any ANSI styling sequences.\n### \u00a7\u27e817\u27e9Masking\nItems can be arbitrarily _masked_ with the `mask()`\u27e832\u27e9 builder method. Masked values are not emitted when styling is disabled, globally or for a given style. This allows selective output based on whether styling is enabled.\nOne use for this feature is to print certain characters only when styling is enabled. For instance, you might wish to emit the \ud83c\udfa8 emoji when coloring is enabled but not otherwise. This can be accomplished by masking the emoji:\n```\nuse yansi::Paint;\nprintln!(\"I like colors!{}\", \" \ud83c\udfa8\".mask());\n```\n\nWhen styling is enabled, this prints: `>` I like colors! \ud83c\udfa8\nWith styling disabled, this prints: `>` I like colors!\n### \u00a7\u27e86\u27e9Wrapping\n**Note:** _Either the`std` or `alloc` feature is required for wrapping. `std` is enabled by default. See crate features\u27e88\u27e9._\nStyling can _wrap_ via `Quirk::Wrap`\u27e833\u27e9 or the equivalent `wrap()`\u27e834\u27e9 constructor. A wrapping style modifies any styling resets emitted by the internal value so that they correspond to the wrapping style. In other words, the \u201creset\u201d style of the wrapped item is modified to be the style being `.wrap()`d.\nWrapping is useful in situations where opaque and arbitrary values must be styled consistently irrespective of any existing styling. For example, a generic logger might want to style messages based on log levels consistently, even when those messages may already include styling. Wrapping exists to enable such consistent styling:\n```\nuse yansi::Paint;\n// Imagine that `inner` is opaque and we don't know it's styling.\nlet inner = format!(\"{} and {}\", \"Stop\".red(), \"Go\".green());\n// We can use `wrap` to ensure anything in `inner` not styled is blue.\nprintln!(\"Hey! {}\", inner.blue().wrap());\n```\n\nThanks to wrapping, this prints: `>` Hey!  Stop and Go\nWithout wrapping, the reset after `\"Stop\".red()` would not be overwritten: `>` Hey! Stop and Go\nWrapping incurs a performance cost due to an extra allocation and replacement if the wrapped item has styling applied to it. Otherwise, it does not allocate nor incur a meaningful performance cost.\n### \u00a7\u27e818\u27e9Lingering\nStyling can _linger_ beyond a single value via `Quirk::Linger`\u27e835\u27e9 or the equivalent `linger()`\u27e836\u27e9 constructor. A lingering style does not reset itself after being applied. In other words, the style lingers on beyond the value it\u2019s applied to, until something else resets the respective styling.\nThe complement to lingering is force resetting via `Quirk::Resetting`\u27e837\u27e9 or the equivalent `resetting()`\u27e838\u27e9 constructor. Force resetting, as the name implies, forces a reset suffix to be emitted after the value, irrespective of any lingering applied. It can be used as a way to finalize a lingering style.\nLingering itself is useful in situations where a given style is to be repeated across multiple values, or when style is intended to persist even across values that are not styled with `yansi`. It also allows avoiding unnecessarily repeated ANSI code sequences. The examples below illustrate some scenarios in which lingering is useful:\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic().linger(),\n  \"you\".on_yellow(), // doesn't linger, so all styling is reset here\n  \"today\".blue());\n```\n\n`>` Hello!  _How _are things with you__ today?\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic(), // doesn't linger, so all styling is reset here\n  \"you\".on_yellow().linger(),\n  \"today\".blue()); // doesn't linger; styling is reset\n```\n\n`>` Hello!  _How _are__ things with  you today?\n```\nuse yansi::Paint;\nprintln!(\"{} B {} {} {} F\",\n  \"A\".red().linger(),\n  \"C\".underline().linger(),\n  \"D\", // doesn't linger, but no styling applied, thus no reset\n  \"E\".resetting()); // explicitly reset\n```\n\n`>` A B _C D E_ F\n### \u00a7\u27e839\u27e9Brightening\nMost pimrary colors are available in regular and _bright_ variants, e.g., `Color::Red`\u27e840\u27e9 and `Color::BrightRed`\u27e841\u27e9. The `Quirk::Bright`\u27e842\u27e9 and `Quirk::OnBright`\u27e843\u27e9 quirks, typically applied via `.bright()`\u27e844\u27e9 and `.on_bright()`\u27e845\u27e9, provide an alternative, convenient mechanism to select the bright variant of the selected foreground or background color, respectively. The quirk provides no additional colors and is equivalent to selecting the bright variants directly.\n```\nuse yansi::Paint;\n// These are all equivalent.\nprint!(\"{}\", \"Regular\".red());\nprint!(\"{}\", \"Bright\".bright_red());\nprint!(\"{}\", \"Bright\".bright().red());\nprint!(\"{}\", \"Bright\".red().bright());\n// The `bright` quirk lets use choose the bright variants of _any_ color,\n// even when the color or style is unknown at the call site.\nprint!(\"{}\", \"Normal\".paint(STYLE));\nprint!(\"{}\", \"Bright\".paint(STYLE).bright());\n```\n\n`>` Regular Bright Bright Bright **Normal** **Bright**\nThe `bright()` quirk can be applied before or after a color is selected while having the same effect.\n## \u00a7\u27e87\u27e9Windows\nStyling is supported and enabled automatically on Windows beginning with the Windows 10 Anniversary Update, or about 96% of all Windows machines worldwide\u27e846\u27e9, and likely closer to 100% of developer machines (e.g., 99% of visitors to rocket.rs\u27e847\u27e9 on Windows are on Windows 10+).\nYansi enables styling support on Windows by querying the Windows API on the first attempt to color. If support is available, it is enabled. If support is not available, styling is disabled and no styling sequences are emitted.\n## \u00a7\u27e88\u27e9Crate Features\nFeature| Default?| Also Enables| Notes  \n---|---|---|---  \n`std`| **Y**| `alloc`|  Use `std` library.  \n`alloc`| **Y**| |  Use `alloc`. Enables wrapping\u27e86\u27e9.  \n`detect-tty`| N| `std`| See optional conditions\u27e814\u27e9.  \n`detect-env`| N| `std`| See optional conditions\u27e814\u27e9.  \n`hyperlink`| N| `std`| Enables hyperlinking\u27e819\u27e9 support.  \nWith `default-features = false`, this crate is `#[no_std]`.\nWithout any features enabled, all functionality except wrapping\u27e86\u27e9 is available. To recover wrapping _with_ `#[no_std]`, set `default-features = false` and enable the `alloc` feature, which requires `alloc` support.\n## Modules\u00a7\u27e848\u27e9\n\nhyperlink\u27e819\u27e9`hyperlink`\n    Experimental support for hyperlinking.\n## Structs\u00a7\u27e849\u27e9\n\nCondition\u27e828\u27e9\n    A function that decides whether styling should be applied.\n\nPainted\u27e822\u27e9\n    An arbitrary value with a `Style`\u27e823\u27e9 applied to it.\n\nStyle\u27e823\u27e9\n    A set of styling options.\n## Enums\u00a7\u27e850\u27e9\n\nAttribute\u27e851\u27e9\n    Enum representing text attributes, largely for text formatting.\n\nColor\u27e824\u27e9\n    Enum representing a terminal color.\n\nQuirk\u27e831\u27e9\n    Enum representing a `yansi` quirk.\n## Traits\u00a7\u27e852\u27e9\n\nPaint\u27e85\u27e9\n    A trait to apply styling to any value. Implemented for all types.\n## Functions\u00a7\u27e853\u27e9\n\ndisable\u27e811\u27e9\n    Unconditionally disables styling globally.\n\nenable\u27e810\u27e9\n    Unconditionally enables styling globally.\n\nis_enabled\u27e854\u27e9\n    Returns `true` if styling is globally enabled and `false` otherwise.\n\nwhenever\u27e812\u27e9\n    Dynamically enables and disables styling globally based on `condition`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/yansi/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/yansi/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/yansi/latest/src/yansi/lib.rs.html#1-373: Source\n\u27e84\u27e9 https://docs.rs/yansi/latest/yansi/#features: \u00a7\n\u27e85\u27e9 https://docs.rs/yansi/latest/yansi/trait.Paint.html: trait yansi::Paint - `Paint`\n\u27e86\u27e9 https://docs.rs/yansi/latest/yansi/#wrapping: wrapping\n\u27e87\u27e9 https://docs.rs/yansi/latest/yansi/#windows: Automatic Windows support\n\u27e88\u27e9 https://docs.rs/yansi/latest/yansi/#crate-features: Featureful `no_std`\n\u27e89\u27e9 https://docs.rs/yansi/latest/yansi/#uniform-const-builders: `Style` constructors are `const`\n\u27e810\u27e9 https://docs.rs/yansi/latest/yansi/fn.enable.html: fn yansi::enable - enabled\n\u27e811\u27e9 https://docs.rs/yansi/latest/yansi/fn.disable.html: fn yansi::disable - disabled\n\u27e812\u27e9 https://docs.rs/yansi/latest/yansi/fn.whenever.html: fn yansi::whenever - dynamically\n\u27e813\u27e9 https://docs.rs/yansi/latest/yansi/#per-style: conditions\n\u27e814\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions: struct yansi::Condition - Built-in (optional) conditions\n\u27e815\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-1: struct yansi::Condition - TTY detection\n\u27e816\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-2: struct yansi::Condition - common environment variables\n\u27e817\u27e9 https://docs.rs/yansi/latest/yansi/#masking: _masked_\n\u27e818\u27e9 https://docs.rs/yansi/latest/yansi/#lingering: _linger_\n\u27e819\u27e9 https://docs.rs/yansi/latest/yansi/hyperlink/index.html: mod yansi::hyperlink - hyperlinking\n\u27e820\u27e9 https://crates.io/crates/ansi_term: `ansi_term`\n\u27e821\u27e9 https://docs.rs/yansi/latest/yansi/#usage: \u00a7\n\u27e822\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html: struct yansi::Painted - `Painted`\n\u27e823\u27e9 https://docs.rs/yansi/latest/yansi/struct.Style.html: struct yansi::Style - `Style`\n\u27e824\u27e9 https://docs.rs/yansi/latest/yansi/enum.Color.html: enum yansi::Color - `Color`\n\u27e825\u27e9 https://docs.rs/yansi/latest/yansi/trait.Paint.html#method.paint: method yansi::Paint::paint - `.paint()`\n\u27e826\u27e9 https://docs.rs/yansi/latest/yansi/#conditional-styling: \u00a7\n\u27e827\u27e9 https://docs.rs/yansi/latest/yansi/#globally: \u00a7\n\u27e828\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html: struct yansi::Condition - `Condition`\n\u27e829\u27e9 https://docs.rs/yansi/latest/yansi/struct.Style.html#method.whenever: method yansi::Style::whenever - `.whenever()`\n\u27e830\u27e9 https://docs.rs/yansi/latest/yansi/#quirks: \u00a7\n\u27e831\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html: enum yansi::Quirk - `Quirk`\n\u27e832\u27e9 https://docs.rs/yansi/latest/yansi/trait.Paint.html#tymethod.mask: method yansi::Paint::mask - `mask()`\n\u27e833\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Wrap: variant yansi::Quirk::Wrap - `Quirk::Wrap`\n\u27e834\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.wrap: method yansi::Painted::wrap - `wrap()`\n\u27e835\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Linger: variant yansi::Quirk::Linger - `Quirk::Linger`\n\u27e836\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.linger: method yansi::Painted::linger - `linger()`\n\u27e837\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Resetting: variant yansi::Quirk::Resetting - `Quirk::Resetting`\n\u27e838\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.resetting: method yansi::Painted::resetting - `resetting()`\n\u27e839\u27e9 https://docs.rs/yansi/latest/yansi/#brightening: \u00a7\n\u27e840\u27e9 https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.Red: variant yansi::Color::Red - `Color::Red`\n\u27e841\u27e9 https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.BrightRed: variant yansi::Color::BrightRed - `Color::BrightRed`\n\u27e842\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Bright: variant yansi::Quirk::Bright - `Quirk::Bright`\n\u27e843\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.OnBright: variant yansi::Quirk::OnBright - `Quirk::OnBright`\n\u27e844\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.bright: method yansi::Painted::bright - `.bright()`\n\u27e845\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.on_bright: method yansi::Painted::on_bright - `.on_bright()`\n\u27e846\u27e9 https://gs.statcounter.com/os-version-market-share/windows/desktop/worldwide: 96% of all Windows machines worldwide\n\u27e847\u27e9 https://rocket.rs: rocket.rs\n\u27e848\u27e9 https://docs.rs/yansi/latest/yansi/#modules: \u00a7\n\u27e849\u27e9 https://docs.rs/yansi/latest/yansi/#structs: \u00a7\n\u27e850\u27e9 https://docs.rs/yansi/latest/yansi/#enums: \u00a7\n\u27e851\u27e9 https://docs.rs/yansi/latest/yansi/enum.Attribute.html: enum yansi::Attribute - Attribute\n\u27e852\u27e9 https://docs.rs/yansi/latest/yansi/#traits: \u00a7\n\u27e853\u27e9 https://docs.rs/yansi/latest/yansi/#functions: \u00a7\n\u27e854\u27e9 https://docs.rs/yansi/latest/yansi/fn.is_enabled.html: fn yansi::is_enabled - is_enabled\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "yansi",
          "version": "1.0.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/yansi/latest/yansi/all.html \"show sidebar\")\n# Crate yansiCopy item path\n[Settings](https://docs.rs/yansi/latest/settings.html)\n[Help](https://docs.rs/yansi/latest/help.html)\nSummary[Source](https://docs.rs/yansi/latest/src/yansi/lib.rs.html#1-373)\nExpand description\nA dead simple ANSI terminal color painting library.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#features)Features\nWhy _y_ et another _ANSI_ terminal coloring library? Here are some reasons:\n  * This library makes simple things _simple_ : `use` [`Paint`](https://docs.rs/yansi/latest/yansi/trait.Paint.html \"trait yansi::Paint\") and go!\n  * Zero dependencies by default. It really is simple.\n  * Zero allocations except as needed by opt-in [wrapping](https://docs.rs/yansi/latest/yansi/#wrapping).\n  * [Automatic Windows support](https://docs.rs/yansi/latest/yansi/#windows) for the vast majority (95%+) of Windows users.\n  * [Featureful `no_std`](https://docs.rs/yansi/latest/yansi/#crate-features), no-`alloc`, support with `default-features = false`.\n  * [`Style` constructors are `const`](https://docs.rs/yansi/latest/yansi/#uniform-const-builders): store styles statically, even with dynamic conditions!\n  * _Any_ type implementing a formatting trait can be styled, not just strings.\n  * Styling can be [enabled](https://docs.rs/yansi/latest/yansi/fn.enable.html \"fn yansi::enable\") and [disabled](https://docs.rs/yansi/latest/yansi/fn.disable.html \"fn yansi::disable\") globally and [dynamically](https://docs.rs/yansi/latest/yansi/fn.whenever.html \"fn yansi::whenever\"), on the fly.\n  * A `Style` can be predicated on arbitrary [conditions](https://docs.rs/yansi/latest/yansi/#per-style).\n  * Formatting specifiers like `{:x}` and `{:08b}` are supported and preserved!\n  * [Built-in (optional) conditions](https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions \"struct yansi::Condition\") for [TTY detection](https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-1 \"struct yansi::Condition\") and [common environment variables](https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-2 \"struct yansi::Condition\").\n  * Arbitrary items can be [_masked_](https://docs.rs/yansi/latest/yansi/#masking) for selective disabling.\n  * Styling can [_wrap_](https://docs.rs/yansi/latest/yansi/#wrapping) to preserve styling across resets.\n  * Styling can [_linger_](https://docs.rs/yansi/latest/yansi/#lingering) beyond a single value.\n  * Experimental support for [hyperlinking](https://docs.rs/yansi/latest/yansi/hyperlink/index.html \"mod yansi::hyperlink\") is included.\n  * The name `yansi` is pretty cool \ud83d\ude0e.\n\n\nAll that said, `yansi` borrows API ideas from older libraries as well as implementation details from [`ansi_term`](https://crates.io/crates/ansi_term).\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#usage)Usage\nThe [`Paint`](https://docs.rs/yansi/latest/yansi/trait.Paint.html \"trait yansi::Paint\") trait is implemented for every type. Import it and call chainable builder methods:\n```\nuse yansi::Paint;\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().italic(),\n  \"STOP\".white().on_red().bright().underline().bold());\n```\n\n`>` Testing, **Ready** , _**Set**_ , _**STOP**_!\nThe methods return a [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\") type which consists of a [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\") and a reference to the receiver. Displaying a [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\") (via `print!()`, `format!()`, etc) results in emitting ANSI escape codes that effectuate the style.\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#uniform-const-builders)Uniform `const` Builders\nAll builder methods are uniformly available for [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\"), [`Color`](https://docs.rs/yansi/latest/yansi/enum.Color.html \"enum yansi::Color\"), and [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\"), which means you can chain calls across library types. All methods are `const`, allowing creations of `const` or `static` [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\")s. A `Style` can be directly applied to values with [`.paint()`](https://docs.rs/yansi/latest/yansi/trait.Paint.html#method.paint \"method yansi::Paint::paint\"), from [`Paint::paint()`](https://docs.rs/yansi/latest/yansi/trait.Paint.html#method.paint \"method yansi::Paint::paint\"), available for every type:\n```\nuse yansi::{Paint, Style, Color::*};\n// `const` constructors allow static `Style`s for easy reuse\nstatic ALERT: Style = White.bright().underline().italic().on_red();\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().bold(),\n  \"STOP\".paint(ALERT));\n```\n\n`>` Testing, **Ready** , **Set** , __STOP__!\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#conditional-styling)Conditional Styling\n#### [\u00a7](https://docs.rs/yansi/latest/yansi/#globally)Globally\nStyling is enabled by default but can be enabled and disabled globally via [`enable()`](https://docs.rs/yansi/latest/yansi/fn.enable.html \"fn yansi::enable\") and [`disable()`](https://docs.rs/yansi/latest/yansi/fn.disable.html \"fn yansi::disable\"). When styling is disabled, no ANSI escape codes are emitted, and [_masked_](https://docs.rs/yansi/latest/yansi/#masking) values are omitted entirely.\nGlobal styling can also be dynamically enabled and disabled using [`whenever()`](https://docs.rs/yansi/latest/yansi/fn.whenever.html \"fn yansi::whenever\") with an arbitrary [`Condition`](https://docs.rs/yansi/latest/yansi/struct.Condition.html \"struct yansi::Condition\"): a function that returns `true` or `false`. This condition is evaluated each time a [`Painted`](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\") item is displayed. The associated styling is enabled, and mask values emitted, exactly when and only when the condition returns `true`.\n#### [\u00a7](https://docs.rs/yansi/latest/yansi/#per-style)Per-`Style`\nA specific `Style` can itself be conditionally applied by using [`.whenever()`](https://docs.rs/yansi/latest/yansi/struct.Style.html#method.whenever \"method yansi::Style::whenever\"):\n```\nuse yansi::{Paint, Style, Color::*, Condition};\nstatic WARNING: Style = Black.bold().on_yellow().whenever(Condition::STDERR_IS_TTY);\neprintln!(\"{}\", \"Bees can sting!\".paint(WARNING));\n```\n\nWith the above, if `stderr` is a TTY, then: `>` **Bees can sting!**\nIf it is not a TTY, styling is not emitted: `>` Bees can sting!\nSee [`Condition`](https://docs.rs/yansi/latest/yansi/struct.Condition.html \"struct yansi::Condition\") for a list of built-in conditions which require enabling crate features.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#quirks)Quirks\nAs a convenience, `yansi` implements several \u201cquirks\u201d, applicable via [`Quirk`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html \"enum yansi::Quirk\") and the respective methods, that modify if and how styling is presented to the terminal. These quirks do not correspond to any ANSI styling sequences.\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#masking)Masking\nItems can be arbitrarily _masked_ with the [`mask()`](https://docs.rs/yansi/latest/yansi/trait.Paint.html#tymethod.mask \"method yansi::Paint::mask\") builder method. Masked values are not emitted when styling is disabled, globally or for a given style. This allows selective output based on whether styling is enabled.\nOne use for this feature is to print certain characters only when styling is enabled. For instance, you might wish to emit the \ud83c\udfa8 emoji when coloring is enabled but not otherwise. This can be accomplished by masking the emoji:\n```\nuse yansi::Paint;\nprintln!(\"I like colors!{}\", \" \ud83c\udfa8\".mask());\n```\n\nWhen styling is enabled, this prints: `>` I like colors! \ud83c\udfa8\nWith styling disabled, this prints: `>` I like colors!\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#wrapping)Wrapping\n**Note:** _Either the`std` or `alloc` feature is required for wrapping. `std` is enabled by default. See [crate features](https://docs.rs/yansi/latest/yansi/#crate-features)._\nStyling can _wrap_ via [`Quirk::Wrap`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Wrap \"variant yansi::Quirk::Wrap\") or the equivalent [`wrap()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.wrap \"method yansi::Painted::wrap\") constructor. A wrapping style modifies any styling resets emitted by the internal value so that they correspond to the wrapping style. In other words, the \u201creset\u201d style of the wrapped item is modified to be the style being `.wrap()`d.\nWrapping is useful in situations where opaque and arbitrary values must be styled consistently irrespective of any existing styling. For example, a generic logger might want to style messages based on log levels consistently, even when those messages may already include styling. Wrapping exists to enable such consistent styling:\n```\nuse yansi::Paint;\n// Imagine that `inner` is opaque and we don't know it's styling.\nlet inner = format!(\"{} and {}\", \"Stop\".red(), \"Go\".green());\n// We can use `wrap` to ensure anything in `inner` not styled is blue.\nprintln!(\"Hey! {}\", inner.blue().wrap());\n```\n\nThanks to wrapping, this prints: `>` Hey!  Stop and Go\nWithout wrapping, the reset after `\"Stop\".red()` would not be overwritten: `>` Hey! Stop and Go\nWrapping incurs a performance cost due to an extra allocation and replacement if the wrapped item has styling applied to it. Otherwise, it does not allocate nor incur a meaningful performance cost.\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#lingering)Lingering\nStyling can _linger_ beyond a single value via [`Quirk::Linger`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Linger \"variant yansi::Quirk::Linger\") or the equivalent [`linger()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.linger \"method yansi::Painted::linger\") constructor. A lingering style does not reset itself after being applied. In other words, the style lingers on beyond the value it\u2019s applied to, until something else resets the respective styling.\nThe complement to lingering is force resetting via [`Quirk::Resetting`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Resetting \"variant yansi::Quirk::Resetting\") or the equivalent [`resetting()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.resetting \"method yansi::Painted::resetting\") constructor. Force resetting, as the name implies, forces a reset suffix to be emitted after the value, irrespective of any lingering applied. It can be used as a way to finalize a lingering style.\nLingering itself is useful in situations where a given style is to be repeated across multiple values, or when style is intended to persist even across values that are not styled with `yansi`. It also allows avoiding unnecessarily repeated ANSI code sequences. The examples below illustrate some scenarios in which lingering is useful:\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic().linger(),\n  \"you\".on_yellow(), // doesn't linger, so all styling is reset here\n  \"today\".blue());\n```\n\n`>` Hello!  _How _are things with you__ today?\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic(), // doesn't linger, so all styling is reset here\n  \"you\".on_yellow().linger(),\n  \"today\".blue()); // doesn't linger; styling is reset\n```\n\n`>` Hello!  _How _are__ things with  you today?\n```\nuse yansi::Paint;\nprintln!(\"{} B {} {} {} F\",\n  \"A\".red().linger(),\n  \"C\".underline().linger(),\n  \"D\", // doesn't linger, but no styling applied, thus no reset\n  \"E\".resetting()); // explicitly reset\n```\n\n`>` A B _C D E_ F\n### [\u00a7](https://docs.rs/yansi/latest/yansi/#brightening)Brightening\nMost pimrary colors are available in regular and _bright_ variants, e.g., [`Color::Red`](https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.Red \"variant yansi::Color::Red\") and [`Color::BrightRed`](https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.BrightRed \"variant yansi::Color::BrightRed\"). The [`Quirk::Bright`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Bright \"variant yansi::Quirk::Bright\") and [`Quirk::OnBright`](https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.OnBright \"variant yansi::Quirk::OnBright\") quirks, typically applied via [`.bright()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.bright \"method yansi::Painted::bright\") and [`.on_bright()`](https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.on_bright \"method yansi::Painted::on_bright\"), provide an alternative, convenient mechanism to select the bright variant of the selected foreground or background color, respectively. The quirk provides no additional colors and is equivalent to selecting the bright variants directly.\n```\nuse yansi::Paint;\n// These are all equivalent.\nprint!(\"{}\", \"Regular\".red());\nprint!(\"{}\", \"Bright\".bright_red());\nprint!(\"{}\", \"Bright\".bright().red());\nprint!(\"{}\", \"Bright\".red().bright());\n// The `bright` quirk lets use choose the bright variants of _any_ color,\n// even when the color or style is unknown at the call site.\nprint!(\"{}\", \"Normal\".paint(STYLE));\nprint!(\"{}\", \"Bright\".paint(STYLE).bright());\n```\n\n`>` Regular Bright Bright Bright **Normal** **Bright**\nThe `bright()` quirk can be applied before or after a color is selected while having the same effect.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#windows)Windows\nStyling is supported and enabled automatically on Windows beginning with the Windows 10 Anniversary Update, or about [96% of all Windows machines worldwide](https://gs.statcounter.com/os-version-market-share/windows/desktop/worldwide), and likely closer to 100% of developer machines (e.g., 99% of visitors to [rocket.rs](https://rocket.rs) on Windows are on Windows 10+).\nYansi enables styling support on Windows by querying the Windows API on the first attempt to color. If support is available, it is enabled. If support is not available, styling is disabled and no styling sequences are emitted.\n## [\u00a7](https://docs.rs/yansi/latest/yansi/#crate-features)Crate Features\nFeature| Default?| Also Enables| Notes  \n---|---|---|---  \n`std`| **Y**| `alloc`|  Use `std` library.  \n`alloc`| **Y**| |  Use `alloc`. Enables [wrapping](https://docs.rs/yansi/latest/yansi/#wrapping).  \n`detect-tty`| N| `std`| See [optional conditions](https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions \"struct yansi::Condition\").  \n`detect-env`| N| `std`| See [optional conditions](https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions \"struct yansi::Condition\").  \n`hyperlink`| N| `std`| Enables [hyperlinking](https://docs.rs/yansi/latest/yansi/hyperlink/index.html \"mod yansi::hyperlink\") support.  \nWith `default-features = false`, this crate is `#[no_std]`.\nWithout any features enabled, all functionality except [wrapping](https://docs.rs/yansi/latest/yansi/#wrapping) is available. To recover wrapping _with_ `#[no_std]`, set `default-features = false` and enable the `alloc` feature, which requires `alloc` support.\n## Modules[\u00a7](https://docs.rs/yansi/latest/yansi/#modules)\n\n[hyperlink](https://docs.rs/yansi/latest/yansi/hyperlink/index.html \"mod yansi::hyperlink\")`hyperlink`\n    Experimental support for hyperlinking.\n## Structs[\u00a7](https://docs.rs/yansi/latest/yansi/#structs)\n\n[Condition](https://docs.rs/yansi/latest/yansi/struct.Condition.html \"struct yansi::Condition\")\n    A function that decides whether styling should be applied.\n\n[Painted](https://docs.rs/yansi/latest/yansi/struct.Painted.html \"struct yansi::Painted\")\n    An arbitrary value with a [`Style`](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\") applied to it.\n\n[Style](https://docs.rs/yansi/latest/yansi/struct.Style.html \"struct yansi::Style\")\n    A set of styling options.\n## Enums[\u00a7](https://docs.rs/yansi/latest/yansi/#enums)\n\n[Attribute](https://docs.rs/yansi/latest/yansi/enum.Attribute.html \"enum yansi::Attribute\")\n    Enum representing text attributes, largely for text formatting.\n\n[Color](https://docs.rs/yansi/latest/yansi/enum.Color.html \"enum yansi::Color\")\n    Enum representing a terminal color.\n\n[Quirk](https://docs.rs/yansi/latest/yansi/enum.Quirk.html \"enum yansi::Quirk\")\n    Enum representing a `yansi` quirk.\n## Traits[\u00a7](https://docs.rs/yansi/latest/yansi/#traits)\n\n[Paint](https://docs.rs/yansi/latest/yansi/trait.Paint.html \"trait yansi::Paint\")\n    A trait to apply styling to any value. Implemented for all types.\n## Functions[\u00a7](https://docs.rs/yansi/latest/yansi/#functions)\n\n[disable](https://docs.rs/yansi/latest/yansi/fn.disable.html \"fn yansi::disable\")\n    Unconditionally disables styling globally.\n\n[enable](https://docs.rs/yansi/latest/yansi/fn.enable.html \"fn yansi::enable\")\n    Unconditionally enables styling globally.\n\n[is_enabled](https://docs.rs/yansi/latest/yansi/fn.is_enabled.html \"fn yansi::is_enabled\")\n    Returns `true` if styling is globally enabled and `false` otherwise.\n\n[whenever](https://docs.rs/yansi/latest/yansi/fn.whenever.html \"fn yansi::whenever\")\n    Dynamically enables and disables styling globally based on `condition`.\n",
            "markdown_with_citations": "[](https://docs.rs/yansi/latest/yansi/all.html \"show sidebar\")\n# Crate yansiCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA dead simple ANSI terminal color painting library.\n## \u00a7\u27e84\u27e9Features\nWhy _y_ et another _ANSI_ terminal coloring library? Here are some reasons:\n  * This library makes simple things _simple_ : `use` `Paint`\u27e85\u27e9 and go!\n  * Zero dependencies by default. It really is simple.\n  * Zero allocations except as needed by opt-in wrapping\u27e86\u27e9.\n  * Automatic Windows support\u27e87\u27e9 for the vast majority (95%+) of Windows users.\n  * Featureful `no_std`\u27e88\u27e9, no-`alloc`, support with `default-features = false`.\n  * `Style` constructors are `const`\u27e89\u27e9: store styles statically, even with dynamic conditions!\n  * _Any_ type implementing a formatting trait can be styled, not just strings.\n  * Styling can be enabled\u27e810\u27e9 and disabled\u27e811\u27e9 globally and dynamically\u27e812\u27e9, on the fly.\n  * A `Style` can be predicated on arbitrary conditions\u27e813\u27e9.\n  * Formatting specifiers like `{:x}` and `{:08b}` are supported and preserved!\n  * Built-in (optional) conditions\u27e814\u27e9 for TTY detection\u27e815\u27e9 and common environment variables\u27e816\u27e9.\n  * Arbitrary items can be _masked_\u27e817\u27e9 for selective disabling.\n  * Styling can _wrap_\u27e86\u27e9 to preserve styling across resets.\n  * Styling can _linger_\u27e818\u27e9 beyond a single value.\n  * Experimental support for hyperlinking\u27e819\u27e9 is included.\n  * The name `yansi` is pretty cool \ud83d\ude0e.\n\n\nAll that said, `yansi` borrows API ideas from older libraries as well as implementation details from `ansi_term`\u27e820\u27e9.\n## \u00a7\u27e821\u27e9Usage\nThe `Paint`\u27e85\u27e9 trait is implemented for every type. Import it and call chainable builder methods:\n```\nuse yansi::Paint;\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().italic(),\n  \"STOP\".white().on_red().bright().underline().bold());\n```\n\n`>` Testing, **Ready** , _**Set**_ , _**STOP**_!\nThe methods return a `Painted`\u27e822\u27e9 type which consists of a `Style`\u27e823\u27e9 and a reference to the receiver. Displaying a `Painted`\u27e822\u27e9 (via `print!()`, `format!()`, etc) results in emitting ANSI escape codes that effectuate the style.\n### \u00a7\u27e89\u27e9Uniform `const` Builders\nAll builder methods are uniformly available for `Style`\u27e823\u27e9, `Color`\u27e824\u27e9, and `Painted`\u27e822\u27e9, which means you can chain calls across library types. All methods are `const`, allowing creations of `const` or `static` `Style`\u27e823\u27e9s. A `Style` can be directly applied to values with `.paint()`\u27e825\u27e9, from `Paint::paint()`\u27e825\u27e9, available for every type:\n```\nuse yansi::{Paint, Style, Color::*};\n// `const` constructors allow static `Style`s for easy reuse\nstatic ALERT: Style = White.bright().underline().italic().on_red();\nprintln!(\"Testing, {}, {}, {}!\",\n  \"Ready\".bold(),\n  \"Set\".yellow().bold(),\n  \"STOP\".paint(ALERT));\n```\n\n`>` Testing, **Ready** , **Set** , __STOP__!\n### \u00a7\u27e826\u27e9Conditional Styling\n#### \u00a7\u27e827\u27e9Globally\nStyling is enabled by default but can be enabled and disabled globally via `enable()`\u27e810\u27e9 and `disable()`\u27e811\u27e9. When styling is disabled, no ANSI escape codes are emitted, and _masked_\u27e817\u27e9 values are omitted entirely.\nGlobal styling can also be dynamically enabled and disabled using `whenever()`\u27e812\u27e9 with an arbitrary `Condition`\u27e828\u27e9: a function that returns `true` or `false`. This condition is evaluated each time a `Painted`\u27e822\u27e9 item is displayed. The associated styling is enabled, and mask values emitted, exactly when and only when the condition returns `true`.\n#### \u00a7\u27e813\u27e9Per-`Style`\nA specific `Style` can itself be conditionally applied by using `.whenever()`\u27e829\u27e9:\n```\nuse yansi::{Paint, Style, Color::*, Condition};\nstatic WARNING: Style = Black.bold().on_yellow().whenever(Condition::STDERR_IS_TTY);\neprintln!(\"{}\", \"Bees can sting!\".paint(WARNING));\n```\n\nWith the above, if `stderr` is a TTY, then: `>` **Bees can sting!**\nIf it is not a TTY, styling is not emitted: `>` Bees can sting!\nSee `Condition`\u27e828\u27e9 for a list of built-in conditions which require enabling crate features.\n## \u00a7\u27e830\u27e9Quirks\nAs a convenience, `yansi` implements several \u201cquirks\u201d, applicable via `Quirk`\u27e831\u27e9 and the respective methods, that modify if and how styling is presented to the terminal. These quirks do not correspond to any ANSI styling sequences.\n### \u00a7\u27e817\u27e9Masking\nItems can be arbitrarily _masked_ with the `mask()`\u27e832\u27e9 builder method. Masked values are not emitted when styling is disabled, globally or for a given style. This allows selective output based on whether styling is enabled.\nOne use for this feature is to print certain characters only when styling is enabled. For instance, you might wish to emit the \ud83c\udfa8 emoji when coloring is enabled but not otherwise. This can be accomplished by masking the emoji:\n```\nuse yansi::Paint;\nprintln!(\"I like colors!{}\", \" \ud83c\udfa8\".mask());\n```\n\nWhen styling is enabled, this prints: `>` I like colors! \ud83c\udfa8\nWith styling disabled, this prints: `>` I like colors!\n### \u00a7\u27e86\u27e9Wrapping\n**Note:** _Either the`std` or `alloc` feature is required for wrapping. `std` is enabled by default. See crate features\u27e88\u27e9._\nStyling can _wrap_ via `Quirk::Wrap`\u27e833\u27e9 or the equivalent `wrap()`\u27e834\u27e9 constructor. A wrapping style modifies any styling resets emitted by the internal value so that they correspond to the wrapping style. In other words, the \u201creset\u201d style of the wrapped item is modified to be the style being `.wrap()`d.\nWrapping is useful in situations where opaque and arbitrary values must be styled consistently irrespective of any existing styling. For example, a generic logger might want to style messages based on log levels consistently, even when those messages may already include styling. Wrapping exists to enable such consistent styling:\n```\nuse yansi::Paint;\n// Imagine that `inner` is opaque and we don't know it's styling.\nlet inner = format!(\"{} and {}\", \"Stop\".red(), \"Go\".green());\n// We can use `wrap` to ensure anything in `inner` not styled is blue.\nprintln!(\"Hey! {}\", inner.blue().wrap());\n```\n\nThanks to wrapping, this prints: `>` Hey!  Stop and Go\nWithout wrapping, the reset after `\"Stop\".red()` would not be overwritten: `>` Hey! Stop and Go\nWrapping incurs a performance cost due to an extra allocation and replacement if the wrapped item has styling applied to it. Otherwise, it does not allocate nor incur a meaningful performance cost.\n### \u00a7\u27e818\u27e9Lingering\nStyling can _linger_ beyond a single value via `Quirk::Linger`\u27e835\u27e9 or the equivalent `linger()`\u27e836\u27e9 constructor. A lingering style does not reset itself after being applied. In other words, the style lingers on beyond the value it\u2019s applied to, until something else resets the respective styling.\nThe complement to lingering is force resetting via `Quirk::Resetting`\u27e837\u27e9 or the equivalent `resetting()`\u27e838\u27e9 constructor. Force resetting, as the name implies, forces a reset suffix to be emitted after the value, irrespective of any lingering applied. It can be used as a way to finalize a lingering style.\nLingering itself is useful in situations where a given style is to be repeated across multiple values, or when style is intended to persist even across values that are not styled with `yansi`. It also allows avoiding unnecessarily repeated ANSI code sequences. The examples below illustrate some scenarios in which lingering is useful:\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic().linger(),\n  \"you\".on_yellow(), // doesn't linger, so all styling is reset here\n  \"today\".blue());\n```\n\n`>` Hello!  _How _are things with you__ today?\n```\nuse yansi::Paint;\nprintln!(\"Hello! {} {} things with {} {}?\",\n  \"How\".magenta().underline().linger(),\n  \"are\".italic(), // doesn't linger, so all styling is reset here\n  \"you\".on_yellow().linger(),\n  \"today\".blue()); // doesn't linger; styling is reset\n```\n\n`>` Hello!  _How _are__ things with  you today?\n```\nuse yansi::Paint;\nprintln!(\"{} B {} {} {} F\",\n  \"A\".red().linger(),\n  \"C\".underline().linger(),\n  \"D\", // doesn't linger, but no styling applied, thus no reset\n  \"E\".resetting()); // explicitly reset\n```\n\n`>` A B _C D E_ F\n### \u00a7\u27e839\u27e9Brightening\nMost pimrary colors are available in regular and _bright_ variants, e.g., `Color::Red`\u27e840\u27e9 and `Color::BrightRed`\u27e841\u27e9. The `Quirk::Bright`\u27e842\u27e9 and `Quirk::OnBright`\u27e843\u27e9 quirks, typically applied via `.bright()`\u27e844\u27e9 and `.on_bright()`\u27e845\u27e9, provide an alternative, convenient mechanism to select the bright variant of the selected foreground or background color, respectively. The quirk provides no additional colors and is equivalent to selecting the bright variants directly.\n```\nuse yansi::Paint;\n// These are all equivalent.\nprint!(\"{}\", \"Regular\".red());\nprint!(\"{}\", \"Bright\".bright_red());\nprint!(\"{}\", \"Bright\".bright().red());\nprint!(\"{}\", \"Bright\".red().bright());\n// The `bright` quirk lets use choose the bright variants of _any_ color,\n// even when the color or style is unknown at the call site.\nprint!(\"{}\", \"Normal\".paint(STYLE));\nprint!(\"{}\", \"Bright\".paint(STYLE).bright());\n```\n\n`>` Regular Bright Bright Bright **Normal** **Bright**\nThe `bright()` quirk can be applied before or after a color is selected while having the same effect.\n## \u00a7\u27e87\u27e9Windows\nStyling is supported and enabled automatically on Windows beginning with the Windows 10 Anniversary Update, or about 96% of all Windows machines worldwide\u27e846\u27e9, and likely closer to 100% of developer machines (e.g., 99% of visitors to rocket.rs\u27e847\u27e9 on Windows are on Windows 10+).\nYansi enables styling support on Windows by querying the Windows API on the first attempt to color. If support is available, it is enabled. If support is not available, styling is disabled and no styling sequences are emitted.\n## \u00a7\u27e88\u27e9Crate Features\nFeature| Default?| Also Enables| Notes  \n---|---|---|---  \n`std`| **Y**| `alloc`|  Use `std` library.  \n`alloc`| **Y**| |  Use `alloc`. Enables wrapping\u27e86\u27e9.  \n`detect-tty`| N| `std`| See optional conditions\u27e814\u27e9.  \n`detect-env`| N| `std`| See optional conditions\u27e814\u27e9.  \n`hyperlink`| N| `std`| Enables hyperlinking\u27e819\u27e9 support.  \nWith `default-features = false`, this crate is `#[no_std]`.\nWithout any features enabled, all functionality except wrapping\u27e86\u27e9 is available. To recover wrapping _with_ `#[no_std]`, set `default-features = false` and enable the `alloc` feature, which requires `alloc` support.\n## Modules\u00a7\u27e848\u27e9\n\nhyperlink\u27e819\u27e9`hyperlink`\n    Experimental support for hyperlinking.\n## Structs\u00a7\u27e849\u27e9\n\nCondition\u27e828\u27e9\n    A function that decides whether styling should be applied.\n\nPainted\u27e822\u27e9\n    An arbitrary value with a `Style`\u27e823\u27e9 applied to it.\n\nStyle\u27e823\u27e9\n    A set of styling options.\n## Enums\u00a7\u27e850\u27e9\n\nAttribute\u27e851\u27e9\n    Enum representing text attributes, largely for text formatting.\n\nColor\u27e824\u27e9\n    Enum representing a terminal color.\n\nQuirk\u27e831\u27e9\n    Enum representing a `yansi` quirk.\n## Traits\u00a7\u27e852\u27e9\n\nPaint\u27e85\u27e9\n    A trait to apply styling to any value. Implemented for all types.\n## Functions\u00a7\u27e853\u27e9\n\ndisable\u27e811\u27e9\n    Unconditionally disables styling globally.\n\nenable\u27e810\u27e9\n    Unconditionally enables styling globally.\n\nis_enabled\u27e854\u27e9\n    Returns `true` if styling is globally enabled and `false` otherwise.\n\nwhenever\u27e812\u27e9\n    Dynamically enables and disables styling globally based on `condition`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/yansi/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/yansi/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/yansi/latest/src/yansi/lib.rs.html#1-373: Source\n\u27e84\u27e9 https://docs.rs/yansi/latest/yansi/#features: \u00a7\n\u27e85\u27e9 https://docs.rs/yansi/latest/yansi/trait.Paint.html: trait yansi::Paint - `Paint`\n\u27e86\u27e9 https://docs.rs/yansi/latest/yansi/#wrapping: wrapping\n\u27e87\u27e9 https://docs.rs/yansi/latest/yansi/#windows: Automatic Windows support\n\u27e88\u27e9 https://docs.rs/yansi/latest/yansi/#crate-features: Featureful `no_std`\n\u27e89\u27e9 https://docs.rs/yansi/latest/yansi/#uniform-const-builders: `Style` constructors are `const`\n\u27e810\u27e9 https://docs.rs/yansi/latest/yansi/fn.enable.html: fn yansi::enable - enabled\n\u27e811\u27e9 https://docs.rs/yansi/latest/yansi/fn.disable.html: fn yansi::disable - disabled\n\u27e812\u27e9 https://docs.rs/yansi/latest/yansi/fn.whenever.html: fn yansi::whenever - dynamically\n\u27e813\u27e9 https://docs.rs/yansi/latest/yansi/#per-style: conditions\n\u27e814\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html#built-in-conditions: struct yansi::Condition - Built-in (optional) conditions\n\u27e815\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-1: struct yansi::Condition - TTY detection\n\u27e816\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html#impl-Condition-2: struct yansi::Condition - common environment variables\n\u27e817\u27e9 https://docs.rs/yansi/latest/yansi/#masking: _masked_\n\u27e818\u27e9 https://docs.rs/yansi/latest/yansi/#lingering: _linger_\n\u27e819\u27e9 https://docs.rs/yansi/latest/yansi/hyperlink/index.html: mod yansi::hyperlink - hyperlinking\n\u27e820\u27e9 https://crates.io/crates/ansi_term: `ansi_term`\n\u27e821\u27e9 https://docs.rs/yansi/latest/yansi/#usage: \u00a7\n\u27e822\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html: struct yansi::Painted - `Painted`\n\u27e823\u27e9 https://docs.rs/yansi/latest/yansi/struct.Style.html: struct yansi::Style - `Style`\n\u27e824\u27e9 https://docs.rs/yansi/latest/yansi/enum.Color.html: enum yansi::Color - `Color`\n\u27e825\u27e9 https://docs.rs/yansi/latest/yansi/trait.Paint.html#method.paint: method yansi::Paint::paint - `.paint()`\n\u27e826\u27e9 https://docs.rs/yansi/latest/yansi/#conditional-styling: \u00a7\n\u27e827\u27e9 https://docs.rs/yansi/latest/yansi/#globally: \u00a7\n\u27e828\u27e9 https://docs.rs/yansi/latest/yansi/struct.Condition.html: struct yansi::Condition - `Condition`\n\u27e829\u27e9 https://docs.rs/yansi/latest/yansi/struct.Style.html#method.whenever: method yansi::Style::whenever - `.whenever()`\n\u27e830\u27e9 https://docs.rs/yansi/latest/yansi/#quirks: \u00a7\n\u27e831\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html: enum yansi::Quirk - `Quirk`\n\u27e832\u27e9 https://docs.rs/yansi/latest/yansi/trait.Paint.html#tymethod.mask: method yansi::Paint::mask - `mask()`\n\u27e833\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Wrap: variant yansi::Quirk::Wrap - `Quirk::Wrap`\n\u27e834\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.wrap: method yansi::Painted::wrap - `wrap()`\n\u27e835\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Linger: variant yansi::Quirk::Linger - `Quirk::Linger`\n\u27e836\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.linger: method yansi::Painted::linger - `linger()`\n\u27e837\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Resetting: variant yansi::Quirk::Resetting - `Quirk::Resetting`\n\u27e838\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.resetting: method yansi::Painted::resetting - `resetting()`\n\u27e839\u27e9 https://docs.rs/yansi/latest/yansi/#brightening: \u00a7\n\u27e840\u27e9 https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.Red: variant yansi::Color::Red - `Color::Red`\n\u27e841\u27e9 https://docs.rs/yansi/latest/yansi/enum.Color.html#variant.BrightRed: variant yansi::Color::BrightRed - `Color::BrightRed`\n\u27e842\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.Bright: variant yansi::Quirk::Bright - `Quirk::Bright`\n\u27e843\u27e9 https://docs.rs/yansi/latest/yansi/enum.Quirk.html#variant.OnBright: variant yansi::Quirk::OnBright - `Quirk::OnBright`\n\u27e844\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.bright: method yansi::Painted::bright - `.bright()`\n\u27e845\u27e9 https://docs.rs/yansi/latest/yansi/struct.Painted.html#method.on_bright: method yansi::Painted::on_bright - `.on_bright()`\n\u27e846\u27e9 https://gs.statcounter.com/os-version-market-share/windows/desktop/worldwide: 96% of all Windows machines worldwide\n\u27e847\u27e9 https://rocket.rs: rocket.rs\n\u27e848\u27e9 https://docs.rs/yansi/latest/yansi/#modules: \u00a7\n\u27e849\u27e9 https://docs.rs/yansi/latest/yansi/#structs: \u00a7\n\u27e850\u27e9 https://docs.rs/yansi/latest/yansi/#enums: \u00a7\n\u27e851\u27e9 https://docs.rs/yansi/latest/yansi/enum.Attribute.html: enum yansi::Attribute - Attribute\n\u27e852\u27e9 https://docs.rs/yansi/latest/yansi/#traits: \u00a7\n\u27e853\u27e9 https://docs.rs/yansi/latest/yansi/#functions: \u00a7\n\u27e854\u27e9 https://docs.rs/yansi/latest/yansi/fn.is_enabled.html: fn yansi::is_enabled - is_enabled\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `yansi` crate is a lightweight, zero-dependency library for styling terminal output using ANSI escape codes. It supports chainable styling methods, conditional and global enabling/disabling of styles, `no_std` compatibility, and `const` style constructors for efficient reuse. Additional features include TTY detection, masking, wrapping, lingering styles, and experimental hyperlinking support.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Styling and ANSI Escape Codes\n\u2705 Factual: The `yansi` crate allows styling any type that implements a formatting trait, not just strings, by emitting ANSI escape codes to effectuate the style during display operations like `print!()` or `format!()`.  \n\u274c Counterfactual: The `yansi` crate only supports styling strings and cannot be used to format other types like integers or custom structs.\n\n---\n\n### Pair 2: Dependency-Free Design\n\u2705 Factual: By default, `yansi` has zero dependencies, making it lightweight and simple to integrate into projects without introducing additional dependencies.  \n\u274c Counterfactual: The `yansi` crate requires several dependencies, including `ansi_term`, for its core functionality.\n\n---\n\n### Pair 3: Windows Compatibility\n\u2705 Factual: `yansi` provides automatic Windows support for the vast majority of Windows users (95%+), ensuring proper rendering of ANSI escape codes on Windows terminals.  \n\u274c Counterfactual: `yansi` does not support Windows terminals and requires additional configuration or external libraries to work on Windows systems.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-41d62868-3a75acc2-1751260311",
      "timestamp": "2025-06-30T05:11:51.222122+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]