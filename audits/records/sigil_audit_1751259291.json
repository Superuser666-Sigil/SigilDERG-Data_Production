[
  {
    "execution_id": "exec-49f09a66-6941e5a9-1751259271",
    "timestamp": "2025-06-30T04:54:31.398836+00:00",
    "sacred_chain": {
      "input_data": "serde_with",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'serde_with' -> 'serde_with'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "serde_with",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/serde_with",
            "title": "serde_with v3.13.0",
            "content": {
              "raw_markdown": "#  serde_with v3.13.0\nCustom de/serialization functions for Rust's serde \n  * [ #deserialization ](https://crates.io/keywords/deserialization)\n  * [ #serde ](https://crates.io/keywords/serde)\n  * [ #serialization ](https://crates.io/keywords/serialization)\n  * [ #utilities ](https://crates.io/keywords/utilities)\n\n\n  * [ Readme ](https://crates.io/crates/serde_with)\n  * [ 64 Versions ](https://crates.io/crates/serde_with/versions)\n  * [ Dependencies ](https://crates.io/crates/serde_with/dependencies)\n  * [ Dependents ](https://crates.io/crates/serde_with/reverse_dependencies)\n\n\n## Metadata\n16 days ago \nv1.74.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n169 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add serde_with\nOr add the following line to your Cargo.toml:\nserde_with = \"3.13.0\"\n## Documentation\n[ docs.rs/serde_with ](https://docs.rs/serde_with/)\n## Repository\n[ github.com/jonasbb/serde_with ](https://github.com/jonasbb/serde_with/)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Encoding](https://crates.io/categories/encoding)\n  * [No dynamic allocation](https://crates.io/categories/no-std::no-alloc)\n\n\n[ Report crate ](https://crates.io/support?crate=serde_with&inquire=crate-violation)\n### Stats Overview\n124,032,377 Downloads all time\n64 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  serde_with v3.13.0\nCustom de/serialization functions for Rust's serde \n  *  #deserialization \u27e81\u27e9\n  *  #serde \u27e82\u27e9\n  *  #serialization \u27e83\u27e9\n  *  #utilities \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  64 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\n16 days ago \nv1.74.0 \n MIT \u27e89\u27e9 OR  Apache-2.0 \u27e810\u27e9\n169 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add serde_with\nOr add the following line to your Cargo.toml:\nserde_with = \"3.13.0\"\n## Documentation\n docs.rs/serde_with \u27e811\u27e9\n## Repository\n github.com/jonasbb/serde_with \u27e812\u27e9\n## Owners\n## Categories\n  * No standard library\u27e813\u27e9\n  * Encoding\u27e814\u27e9\n  * No dynamic allocation\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n124,032,377 Downloads all time\n64 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/deserialization:  #deserialization \n\u27e82\u27e9 https://crates.io/keywords/serde:  #serde \n\u27e83\u27e9 https://crates.io/keywords/serialization:  #serialization \n\u27e84\u27e9 https://crates.io/keywords/utilities:  #utilities \n\u27e85\u27e9 https://crates.io/crates/serde_with:  Readme \n\u27e86\u27e9 https://crates.io/crates/serde_with/versions:  64 Versions \n\u27e87\u27e9 https://crates.io/crates/serde_with/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/serde_with/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://docs.rs/serde_with/:  docs.rs/serde_with \n\u27e812\u27e9 https://github.com/jonasbb/serde_with/:  github.com/jonasbb/serde_with \n\u27e813\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e814\u27e9 https://crates.io/categories/encoding: Encoding\n\u27e815\u27e9 https://crates.io/categories/no-std::no-alloc: No dynamic allocation\n\u27e816\u27e9 https://crates.io/support?crate=serde_with&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1530,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113060.6079146"
          },
          "docs_rs": {
            "url": "https://docs.rs/serde_with",
            "title": "Crate serde_withCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/serde_with/latest/serde_with/all.html \"show sidebar\")\n# Crate serde_withCopy item path\n[Settings](https://docs.rs/serde_with/latest/settings.html)\n[Help](https://docs.rs/serde_with/latest/help.html)\nSummary[Source](https://docs.rs/serde_with/latest/src/serde_with/lib.rs.html#1-2603)\nExpand description\n[![crates.io badge](https://img.shields.io/crates/v/serde_with.svg)](https://crates.io/crates/serde_with/) [![Build Status](https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg)](https://github.com/jonasbb/serde_with) [![codecov](https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg)](https://codecov.io/gh/jonasbb/serde_with) [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/4322/badge)](https://bestpractices.coreinfrastructure.org/projects/4322) [![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with [serde\u2019s `with` annotation](https://serde.rs/field-attrs.html#with) and with the improved [`serde_as`](https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html)-annotation. Some common use cases are:\n  * De/Serializing a type using the `Display` and `FromStr` traits, e.g., for `u8`, `url::Url`, or `mime::Mime`. Check [`DisplayFromStr`](https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html) for details.\n  * Support for arrays larger than 32 elements or using const generics. With `serde_as` large arrays are supported, even if they are nested in other types. `[bool; 64]`, `Option<[u8; M]>`, and `Box<[[u8; 64]; N]>` are all supported, as [this examples shows](https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays).\n  * Skip serializing all empty `Option` types with [`#[skip_serializing_none]`](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using [`with_prefix!`](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html) / [`with_suffix!`](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html).\n  * Deserialize a comma separated list like `#hash,#tags,#are,#great` into a `Vec<String>`. Check the documentation for [`serde_with::StringWithSeparator::<CommaSeparator, T>`](https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html).\n\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#getting-help)Getting Help\n**Check out the[user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html) to find out more tips and tricks about this crate.**\nFor further help using this crate you can [open a new discussion](https://github.com/jonasbb/serde_with/discussions/new) or ask on [users.rust-lang.org](https://users.rust-lang.org/). For bugs, please open a [new issue](https://github.com/jonasbb/serde_with/issues/new) on GitHub.\n## [\u00a7](https://docs.rs/serde_with/latest/serde_with/#use-serde_with-in-your-project)Use `serde_with` in your Project\n```\n# Add the current version to your Cargo.toml\ncargo add serde_with\n```\n\nThe crate contains different features for integration with other common crates. Check the [feature flags](https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html) section for information about all available features.\n## [\u00a7](https://docs.rs/serde_with/latest/serde_with/#examples)Examples\nAnnotate your struct or enum to enable the custom de/serializer. The `#[serde_as]` attribute must be placed _before_ the `#[derive]`.\nThe `as` is analogous to the `with` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., `Vec<DisplayFromStr>`. The default de/serialization behavior can be restored by using `_` as a placeholder, e.g., `BTreeMap<_, DisplayFromStr>`.\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#displayfromstr)`DisplayFromStr`\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  // Serialize with Display, deserialize with FromStr\n  #[serde_as(as = \"DisplayFromStr\")]\n  bar: u8,\n}\n// This will serialize\nFoo {bar: 12}\n// into this JSON\n{\"bar\": \"12\"}\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays)Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The `serde_as` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, `[u8; N]` (aka, bytes) can use the specialized `\"Bytes\"` for efficiency much like the `serde_bytes` crate.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/um0xyi)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Arrays<const N: usize, const M: usize> {\n  #[serde_as(as = \"[_; N]\")]\n  constgeneric: [bool; N],\n  #[serde_as(as = \"Box<[[_; 64]; N]>\")]\n  nested: Box<[[u8; 64]; N]>,\n  #[serde_as(as = \"Option<[_; M]>\")]\n  optional: Option<[u8; M]>,\n  #[serde_as(as = \"Bytes\")]\n  bytes: [u8; M],\n}\n// This allows us to serialize a struct like this\nlet arrays: Arrays<100, 128> = Arrays {\n  constgeneric: [true; 100],\n  nested: Box::new([[111; 64]; 100]),\n  optional: Some([222; 128]),\n  bytes: [0x42; 128],\n};\nassert!(serde_json::to_string(&arrays).is_ok());\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#skip_serializing_none)`skip_serializing_none`\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The `#[skip_serializing_none]` attribute must be placed _before_ the `#[derive]`.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/xr1tm0)\n```\n#[skip_serializing_none]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  a: Option<usize>,\n  b: Option<usize>,\n  c: Option<usize>,\n  d: Option<usize>,\n  e: Option<usize>,\n  f: Option<usize>,\n  g: Option<usize>,\n}\n// This will serialize\nFoo {a: None, b: None, c: None, d: Some(4), e: None, f: None, g: Some(7)}\n// into this JSON\n{\"d\": 4, \"g\": 7}\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#advanced-serde_as-usage)Advanced `serde_as` usage\nThis example is mainly supposed to highlight the flexibility of the `serde_as` annotation compared to [serde\u2019s `with` annotation](https://serde.rs/field-attrs.html#with). More details about `serde_as` can be found in the [user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html).\n```\nuse std::time::Duration;\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nenum Foo {\n  Durations(\n    // Serialize them into a list of number as seconds\n    #[serde_as(as = \"Vec<DurationSeconds>\")]\n    Vec<Duration>,\n  ),\n  Bytes {\n    // We can treat a Vec like a map with duplicates.\n    // JSON only allows string keys, so convert i32 to strings\n    // The bytes will be hex encoded\n    #[serde_as(as = \"Map<DisplayFromStr, Hex>\")]\n    bytes: Vec<(i32, Vec<u8>)>,\n  }\n}\n// This will serialize\nFoo::Durations(\n  vec![Duration::new(5, 0), Duration::new(3600, 0), Duration::new(0, 0)]\n)\n// into this JSON\n{\n  \"Durations\": [5, 3600, 0]\n}\n// and serializes\nFoo::Bytes {\n  bytes: vec![\n    (1, vec![0, 1, 2]),\n    (-100, vec![100, 200, 255]),\n    (1, vec![0, 111, 222]),\n  ],\n}\n// into this JSON\n{\n  \"Bytes\": {\n    \"bytes\": {\n      \"1\": \"000102\",\n      \"-100\": \"64c8ff\",\n      \"1\": \"006fde\"\n    }\n  }\n}\n```\n\n## Modules[\u00a7](https://docs.rs/serde_with/latest/serde_with/#modules)\n\n[base64](https://docs.rs/serde_with/latest/serde_with/base64/index.html \"mod serde_with::base64\")`base64`\n    De/Serialization of base64 encoded bytes\n\n[chrono](https://docs.rs/serde_with/latest/serde_with/chrono/index.html \"mod serde_with::chrono\")`chrono`\n    Legacy export of the [`chrono_0_4`](https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html \"mod serde_with::chrono_0_4\") module.\n\n[chrono_0_4](https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html \"mod serde_with::chrono_0_4\")`chrono_0_4`\n    De/Serialization of [chrono](https://docs.rs/chrono/) types\n\n[de](https://docs.rs/serde_with/latest/serde_with/de/index.html \"mod serde_with::de\")\n    Module for [`DeserializeAs`](https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html \"trait serde_with::DeserializeAs\") implementations\n\n[formats](https://docs.rs/serde_with/latest/serde_with/formats/index.html \"mod serde_with::formats\")\n    Specify the format and how lenient the deserialization is\n\n[guide](https://docs.rs/serde_with/latest/serde_with/guide/index.html \"mod serde_with::guide\")\n    `serde_with` User Guide\n\n[hex](https://docs.rs/serde_with/latest/serde_with/hex/index.html \"mod serde_with::hex\")`hex`\n    De/Serialization of hexadecimal encoded bytes\n\n[json](https://docs.rs/serde_with/latest/serde_with/json/index.html \"mod serde_with::json\")`json`\n    De/Serialization of JSON\n\n[rust](https://docs.rs/serde_with/latest/serde_with/rust/index.html \"mod serde_with::rust\")\n    De/Serialization for Rust\u2019s builtin and std types\n\n[schemars_0_8](https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html \"mod serde_with::schemars_0_8\")`schemars_0_8`\n    Integration with [schemars v0.8](https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html \"mod serde_with::schemars_0_8\").\n\n[schemars_0_9](https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html \"mod serde_with::schemars_0_9\")`schemars_0_9`\n    Integration with [schemars v0.9](https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html \"mod serde_with::schemars_0_9\").\n\n[ser](https://docs.rs/serde_with/latest/serde_with/ser/index.html \"mod serde_with::ser\")\n    Module for [`SerializeAs`](https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html \"trait serde_with::SerializeAs\") implementations\n\n[time_0_3](https://docs.rs/serde_with/latest/serde_with/time_0_3/index.html \"mod serde_with::time_0_3\")`time_0_3`\n    De/Serialization of [time v0.3](https://docs.rs/time/0.3/) types\n## Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#macros)\n\n[flattened_maybe](https://docs.rs/serde_with/latest/serde_with/macro.flattened_maybe.html \"macro serde_with::flattened_maybe\")\n    Support deserializing from flattened and non-flattened representation\n\n[serde_conv](https://docs.rs/serde_with/latest/serde_with/macro.serde_conv.html \"macro serde_with::serde_conv\")\n    Create new conversion adapters from functions\n\n[with_prefix](https://docs.rs/serde_with/latest/serde_with/macro.with_prefix.html \"macro serde_with::with_prefix\")\n    Serialize with an added prefix on every field name and deserialize by trimming away the prefix.\n\n[with_suffix](https://docs.rs/serde_with/latest/serde_with/macro.with_suffix.html \"macro serde_with::with_suffix\")\n    Serialize with an added suffix on every field name and deserialize by trimming away the suffix.\n## Structs[\u00a7](https://docs.rs/serde_with/latest/serde_with/#structs)\n\n[As](https://docs.rs/serde_with/latest/serde_with/struct.As.html \"struct serde_with::As\")\n    Adapter to convert from `serde_as` to the serde traits.\n\n[BoolFromInt](https://docs.rs/serde_with/latest/serde_with/struct.BoolFromInt.html \"struct serde_with::BoolFromInt\")\n    Deserialize a boolean from a number\n\n[BorrowCow](https://docs.rs/serde_with/latest/serde_with/struct.BorrowCow.html \"struct serde_with::BorrowCow\")\n    Borrow `Cow` data during deserialization when possible.\n\n[Bytes](https://docs.rs/serde_with/latest/serde_with/struct.Bytes.html \"struct serde_with::Bytes\")\n    Optimized handling of owned and borrowed byte representations.\n\n[BytesOrString](https://docs.rs/serde_with/latest/serde_with/struct.BytesOrString.html \"struct serde_with::BytesOrString\")\n    Deserialize from bytes or string\n\n[DefaultOnError](https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnError.html \"struct serde_with::DefaultOnError\")\n    Deserialize value and return [`Default`](https://doc.rust-lang.org/core/default/trait.Default.html \"trait core::default::Default\") on error\n\n[DefaultOnNull](https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnNull.html \"struct serde_with::DefaultOnNull\")\n    Deserialize [`Default`](https://doc.rust-lang.org/core/default/trait.Default.html \"trait core::default::Default\") from `null` values\n\n[DisplayFromStr](https://docs.rs/serde_with/latest/serde_with/struct.DisplayFromStr.html \"struct serde_with::DisplayFromStr\")\n    De/Serialize using [`Display`](https://doc.rust-lang.org/core/fmt/trait.Display.html \"trait core::fmt::Display\") and [`FromStr`](https://doc.rust-lang.org/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") implementation\n\n[DurationMicroSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSeconds.html \"struct serde_with::DurationMicroSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with micro-seconds as base unit.\n\n[DurationMicroSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSecondsWithFrac.html \"struct serde_with::DurationMicroSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with micro-seconds as base unit.\n\n[DurationMilliSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSeconds.html \"struct serde_with::DurationMilliSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with milli-seconds as base unit.\n\n[DurationMilliSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSecondsWithFrac.html \"struct serde_with::DurationMilliSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with milli-seconds as base unit.\n\n[DurationNanoSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSeconds.html \"struct serde_with::DurationNanoSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with nano-seconds as base unit.\n\n[DurationNanoSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSecondsWithFrac.html \"struct serde_with::DurationNanoSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with nano-seconds as base unit.\n\n[DurationSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\")\n    De/Serialize Durations as number of seconds.\n\n[DurationSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\")\n    De/Serialize Durations as number of seconds.\n\n[EnumMap](https://docs.rs/serde_with/latest/serde_with/struct.EnumMap.html \"struct serde_with::EnumMap\")\n    Represent a list of enum values as a map.\n\n[FromInto](https://docs.rs/serde_with/latest/serde_with/struct.FromInto.html \"struct serde_with::FromInto\")\n    Serialize value by converting to/from a proxy type with serde support.\n\n[FromIntoRef](https://docs.rs/serde_with/latest/serde_with/struct.FromIntoRef.html \"struct serde_with::FromIntoRef\")\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\n[IfIsHumanReadable](https://docs.rs/serde_with/latest/serde_with/struct.IfIsHumanReadable.html \"struct serde_with::IfIsHumanReadable\")\n    Use the first format if [`De/Serializer::is_human_readable`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serializer.html#method.is_human_readable \"method serde::ser::Serializer::is_human_readable\"), otherwise use the second\n\n[KeyValueMap](https://docs.rs/serde_with/latest/serde_with/struct.KeyValueMap.html \"struct serde_with::KeyValueMap\")\n    Convert `Vec` elements into key-value map entries\n\n[Map](https://docs.rs/serde_with/latest/serde_with/struct.Map.html \"struct serde_with::Map\")\n    This serializes a list of tuples into a map\n\n[MapFirstKeyWins](https://docs.rs/serde_with/latest/serde_with/struct.MapFirstKeyWins.html \"struct serde_with::MapFirstKeyWins\")\n    Ensure that the first key is taken, if duplicate keys exist\n\n[MapPreventDuplicates](https://docs.rs/serde_with/latest/serde_with/struct.MapPreventDuplicates.html \"struct serde_with::MapPreventDuplicates\")\n    Ensure no duplicate keys exist in a map.\n\n[MapSkipError](https://docs.rs/serde_with/latest/serde_with/struct.MapSkipError.html \"struct serde_with::MapSkipError\")\n    Deserialize a map, skipping keys and values which fail to deserialize.\n\n[NoneAsEmptyString](https://docs.rs/serde_with/latest/serde_with/struct.NoneAsEmptyString.html \"struct serde_with::NoneAsEmptyString\")\n    De/Serialize a [`Option<String>`](https://doc.rust-lang.org/core/option/enum.Option.html \"enum core::option::Option\") type while transforming the empty string to [`None`](https://doc.rust-lang.org/core/option/enum.Option.html#variant.None \"variant core::option::Option::None\")\n\n[OneOrMany](https://docs.rs/serde_with/latest/serde_with/struct.OneOrMany.html \"struct serde_with::OneOrMany\")\n    Deserialize one or many elements\n\n[PickFirst](https://docs.rs/serde_with/latest/serde_with/struct.PickFirst.html \"struct serde_with::PickFirst\")\n    Try multiple deserialization options until one succeeds.\n\n[Same](https://docs.rs/serde_with/latest/serde_with/struct.Same.html \"struct serde_with::Same\")\n    Adapter to convert from `serde_as` to the serde traits.\n\n[Schema](https://docs.rs/serde_with/latest/serde_with/struct.Schema.html \"struct serde_with::Schema\")\n    Helper for implementing [`JsonSchema`](https://docs.rs/schemars/0.9.0/x86_64-unknown-linux-gnu/schemars/trait.JsonSchema.html \"trait schemars::JsonSchema\") on serializers whose output depends on the type of the concrete field.\n\n[Seq](https://docs.rs/serde_with/latest/serde_with/struct.Seq.html \"struct serde_with::Seq\")\n    De/Serialize a Map into a list of tuples\n\n[SetLastValueWins](https://docs.rs/serde_with/latest/serde_with/struct.SetLastValueWins.html \"struct serde_with::SetLastValueWins\")\n    Ensure that the last value is taken, if duplicate values exist\n\n[SetPreventDuplicates](https://docs.rs/serde_with/latest/serde_with/struct.SetPreventDuplicates.html \"struct serde_with::SetPreventDuplicates\")\n    Ensure no duplicate values exist in a set.\n\n[StringWithSeparator](https://docs.rs/serde_with/latest/serde_with/struct.StringWithSeparator.html \"struct serde_with::StringWithSeparator\")\n    De/Serialize a delimited collection using [`Display`](https://doc.rust-lang.org/core/fmt/trait.Display.html \"trait core::fmt::Display\") and [`FromStr`](https://doc.rust-lang.org/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") implementation\n\n[TimestampMicroSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSeconds.html \"struct serde_with::TimestampMicroSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with micro-seconds as base unit.\n\n[TimestampMicroSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSecondsWithFrac.html \"struct serde_with::TimestampMicroSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with micro-seconds as base unit.\n\n[TimestampMilliSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSeconds.html \"struct serde_with::TimestampMilliSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with milli-seconds as base unit.\n\n[TimestampMilliSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSecondsWithFrac.html \"struct serde_with::TimestampMilliSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with milli-seconds as base unit.\n\n[TimestampNanoSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSeconds.html \"struct serde_with::TimestampNanoSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with nano-seconds as base unit.\n\n[TimestampNanoSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSecondsWithFrac.html \"struct serde_with::TimestampNanoSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with nano-seconds as base unit.\n\n[TimestampSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\")\n    De/Serialize timestamps as seconds since the UNIX epoch\n\n[TimestampSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\")\n    De/Serialize timestamps as seconds since the UNIX epoch\n\n[TryFromInto](https://docs.rs/serde_with/latest/serde_with/struct.TryFromInto.html \"struct serde_with::TryFromInto\")\n    Serialize value by converting to/from a proxy type with serde support.\n\n[TryFromIntoRef](https://docs.rs/serde_with/latest/serde_with/struct.TryFromIntoRef.html \"struct serde_with::TryFromIntoRef\")\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\n[VecSkipError](https://docs.rs/serde_with/latest/serde_with/struct.VecSkipError.html \"struct serde_with::VecSkipError\")\n    Deserialize a sequence into `Vec<T>`, skipping elements which fail to deserialize.\n## Traits[\u00a7](https://docs.rs/serde_with/latest/serde_with/#traits)\n\n[DeserializeAs](https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html \"trait serde_with::DeserializeAs\")\n    A **data structure** that can be deserialized from any data format supported by Serde, analogue to [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\").\n\n[SerializeAs](https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html \"trait serde_with::SerializeAs\")\n    A **data structure** that can be serialized into any data format supported by Serde, analogue to [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\").\n## Attribute Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#attributes)\n\n[apply](https://docs.rs/serde_with/latest/serde_with/attr.apply.html \"attr serde_with::apply\")`macros`\n    Apply attributes to all fields with matching types\n\n[serde_as](https://docs.rs/serde_with/latest/serde_with/attr.serde_as.html \"attr serde_with::serde_as\")`macros`\n    Convenience macro to use the [`serde_as`](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html) system.\n\n[skip_serializing_none](https://docs.rs/serde_with/latest/serde_with/attr.skip_serializing_none.html \"attr serde_with::skip_serializing_none\")`macros`\n    Add `skip_serializing_if` annotations to [`Option`] fields.\n## Derive Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#derives)\n\n[DeserializeFromStr](https://docs.rs/serde_with/latest/serde_with/derive.DeserializeFromStr.html \"derive serde_with::DeserializeFromStr\")`macros`\n    Deserialize value by using its [`FromStr`](std::str::FromStr) implementation\n\n[SerializeDisplay](https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplay.html \"derive serde_with::SerializeDisplay\")`macros`\n    Serialize value by using it\u2019s [`Display`](std::fmt::Display) implementation\n\n[SerializeDisplayAlt](https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplayAlt.html \"derive serde_with::SerializeDisplayAlt\")`macros`\n    Serialize value by using its [`Display`](std::fmt::Display) implementation with the \u201calternate\u201d (`#`) format flag\n",
              "markdown_with_citations": "[](https://docs.rs/serde_with/latest/serde_with/all.html \"show sidebar\")\n# Crate serde_withCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![crates.io badge\u27e84\u27e9](https://crates.io/crates/serde_with/) ![Build Status\u27e85\u27e9](https://github.com/jonasbb/serde_with) ![codecov\u27e86\u27e9](https://codecov.io/gh/jonasbb/serde_with) ![CII Best Practices\u27e87\u27e9](https://bestpractices.coreinfrastructure.org/projects/4322) ![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with serde\u2019s `with` annotation\u27e89\u27e9 and with the improved `serde_as`\u27e810\u27e9-annotation. Some common use cases are:\n  * De/Serializing a type using the `Display` and `FromStr` traits, e.g., for `u8`, `url::Url`, or `mime::Mime`. Check `DisplayFromStr`\u27e811\u27e9 for details.\n  * Support for arrays larger than 32 elements or using const generics. With `serde_as` large arrays are supported, even if they are nested in other types. `[bool; 64]`, `Option<[u8; M]>`, and `Box<[[u8; 64]; N]>` are all supported, as this examples shows\u27e812\u27e9.\n  * Skip serializing all empty `Option` types with [`#[skip_serializing_none]`](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using `with_prefix!`\u27e813\u27e9 / `with_suffix!`\u27e814\u27e9.\n  * Deserialize a comma separated list like `#hash,#tags,#are,#great` into a `Vec<String>`. Check the documentation for `serde_with::StringWithSeparator::<CommaSeparator, T>`\u27e815\u27e9.\n\n\n### \u00a7\u27e816\u27e9Getting Help\n**Check out theuser guide\u27e817\u27e9 to find out more tips and tricks about this crate.**\nFor further help using this crate you can open a new discussion\u27e818\u27e9 or ask on users.rust-lang.org\u27e819\u27e9. For bugs, please open a new issue\u27e820\u27e9 on GitHub.\n## \u00a7\u27e821\u27e9Use `serde_with` in your Project\n```\n# Add the current version to your Cargo.toml\ncargo add serde_with\n```\n\nThe crate contains different features for integration with other common crates. Check the feature flags\u27e822\u27e9 section for information about all available features.\n## \u00a7\u27e823\u27e9Examples\nAnnotate your struct or enum to enable the custom de/serializer. The `#[serde_as]` attribute must be placed _before_ the `#[derive]`.\nThe `as` is analogous to the `with` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., `Vec<DisplayFromStr>`. The default de/serialization behavior can be restored by using `_` as a placeholder, e.g., `BTreeMap<_, DisplayFromStr>`.\n### \u00a7\u27e824\u27e9`DisplayFromStr`\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/py7ida)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  // Serialize with Display, deserialize with FromStr\n  #[serde_as(as = \"DisplayFromStr\")]\n  bar: u8,\n}\n// This will serialize\nFoo {bar: 12}\n// into this JSON\n{\"bar\": \"12\"}\n```\n\n### \u00a7\u27e812\u27e9Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The `serde_as` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, `[u8; N]` (aka, bytes) can use the specialized `\"Bytes\"` for efficiency much like the `serde_bytes` crate.\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/um0xyi)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Arrays<const N: usize, const M: usize> {\n  #[serde_as(as = \"[_; N]\")]\n  constgeneric: [bool; N],\n  #[serde_as(as = \"Box<[[_; 64]; N]>\")]\n  nested: Box<[[u8; 64]; N]>,\n  #[serde_as(as = \"Option<[_; M]>\")]\n  optional: Option<[u8; M]>,\n  #[serde_as(as = \"Bytes\")]\n  bytes: [u8; M],\n}\n// This allows us to serialize a struct like this\nlet arrays: Arrays<100, 128> = Arrays {\n  constgeneric: [true; 100],\n  nested: Box::new([[111; 64]; 100]),\n  optional: Some([222; 128]),\n  bytes: [0x42; 128],\n};\nassert!(serde_json::to_string(&arrays).is_ok());\n```\n\n### \u00a7\u27e825\u27e9`skip_serializing_none`\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The `#[skip_serializing_none]` attribute must be placed _before_ the `#[derive]`.\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/xr1tm0)\n```\n#[skip_serializing_none]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  a: Option<usize>,\n  b: Option<usize>,\n  c: Option<usize>,\n  d: Option<usize>,\n  e: Option<usize>,\n  f: Option<usize>,\n  g: Option<usize>,\n}\n// This will serialize\nFoo {a: None, b: None, c: None, d: Some(4), e: None, f: None, g: Some(7)}\n// into this JSON\n{\"d\": 4, \"g\": 7}\n```\n\n### \u00a7\u27e826\u27e9Advanced `serde_as` usage\nThis example is mainly supposed to highlight the flexibility of the `serde_as` annotation compared to serde\u2019s `with` annotation\u27e89\u27e9. More details about `serde_as` can be found in the user guide\u27e817\u27e9.\n```\nuse std::time::Duration;\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nenum Foo {\n  Durations(\n    // Serialize them into a list of number as seconds\n    #[serde_as(as = \"Vec<DurationSeconds>\")]\n    Vec<Duration>,\n  ),\n  Bytes {\n    // We can treat a Vec like a map with duplicates.\n    // JSON only allows string keys, so convert i32 to strings\n    // The bytes will be hex encoded\n    #[serde_as(as = \"Map<DisplayFromStr, Hex>\")]\n    bytes: Vec<(i32, Vec<u8>)>,\n  }\n}\n// This will serialize\nFoo::Durations(\n  vec![Duration::new(5, 0), Duration::new(3600, 0), Duration::new(0, 0)]\n)\n// into this JSON\n{\n  \"Durations\": [5, 3600, 0]\n}\n// and serializes\nFoo::Bytes {\n  bytes: vec![\n    (1, vec![0, 1, 2]),\n    (-100, vec![100, 200, 255]),\n    (1, vec![0, 111, 222]),\n  ],\n}\n// into this JSON\n{\n  \"Bytes\": {\n    \"bytes\": {\n      \"1\": \"000102\",\n      \"-100\": \"64c8ff\",\n      \"1\": \"006fde\"\n    }\n  }\n}\n```\n\n## Modules\u00a7\u27e827\u27e9\n\nbase64\u27e828\u27e9`base64`\n    De/Serialization of base64 encoded bytes\n\nchrono\u27e829\u27e9`chrono`\n    Legacy export of the `chrono_0_4`\u27e830\u27e9 module.\n\nchrono_0_4\u27e830\u27e9`chrono_0_4`\n    De/Serialization of chrono\u27e831\u27e9 types\n\nde\u27e832\u27e9\n    Module for `DeserializeAs`\u27e833\u27e9 implementations\n\nformats\u27e834\u27e9\n    Specify the format and how lenient the deserialization is\n\nguide\u27e835\u27e9\n    `serde_with` User Guide\n\nhex\u27e836\u27e9`hex`\n    De/Serialization of hexadecimal encoded bytes\n\njson\u27e837\u27e9`json`\n    De/Serialization of JSON\n\nrust\u27e838\u27e9\n    De/Serialization for Rust\u2019s builtin and std types\n\nschemars_0_8\u27e839\u27e9`schemars_0_8`\n    Integration with schemars v0.8\u27e839\u27e9.\n\nschemars_0_9\u27e840\u27e9`schemars_0_9`\n    Integration with schemars v0.9\u27e840\u27e9.\n\nser\u27e841\u27e9\n    Module for `SerializeAs`\u27e842\u27e9 implementations\n\ntime_0_3\u27e843\u27e9`time_0_3`\n    De/Serialization of time v0.3\u27e844\u27e9 types\n## Macros\u00a7\u27e845\u27e9\n\nflattened_maybe\u27e846\u27e9\n    Support deserializing from flattened and non-flattened representation\n\nserde_conv\u27e847\u27e9\n    Create new conversion adapters from functions\n\nwith_prefix\u27e848\u27e9\n    Serialize with an added prefix on every field name and deserialize by trimming away the prefix.\n\nwith_suffix\u27e849\u27e9\n    Serialize with an added suffix on every field name and deserialize by trimming away the suffix.\n## Structs\u00a7\u27e850\u27e9\n\nAs\u27e851\u27e9\n    Adapter to convert from `serde_as` to the serde traits.\n\nBoolFromInt\u27e852\u27e9\n    Deserialize a boolean from a number\n\nBorrowCow\u27e853\u27e9\n    Borrow `Cow` data during deserialization when possible.\n\nBytes\u27e854\u27e9\n    Optimized handling of owned and borrowed byte representations.\n\nBytesOrString\u27e855\u27e9\n    Deserialize from bytes or string\n\nDefaultOnError\u27e856\u27e9\n    Deserialize value and return `Default`\u27e857\u27e9 on error\n\nDefaultOnNull\u27e858\u27e9\n    Deserialize `Default`\u27e857\u27e9 from `null` values\n\nDisplayFromStr\u27e859\u27e9\n    De/Serialize using `Display`\u27e860\u27e9 and `FromStr`\u27e861\u27e9 implementation\n\nDurationMicroSeconds\u27e862\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with micro-seconds as base unit.\n\nDurationMicroSecondsWithFrac\u27e864\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with micro-seconds as base unit.\n\nDurationMilliSeconds\u27e866\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with milli-seconds as base unit.\n\nDurationMilliSecondsWithFrac\u27e867\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with milli-seconds as base unit.\n\nDurationNanoSeconds\u27e868\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with nano-seconds as base unit.\n\nDurationNanoSecondsWithFrac\u27e869\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with nano-seconds as base unit.\n\nDurationSeconds\u27e863\u27e9\n    De/Serialize Durations as number of seconds.\n\nDurationSecondsWithFrac\u27e865\u27e9\n    De/Serialize Durations as number of seconds.\n\nEnumMap\u27e870\u27e9\n    Represent a list of enum values as a map.\n\nFromInto\u27e871\u27e9\n    Serialize value by converting to/from a proxy type with serde support.\n\nFromIntoRef\u27e872\u27e9\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\nIfIsHumanReadable\u27e873\u27e9\n    Use the first format if `De/Serializer::is_human_readable`\u27e874\u27e9, otherwise use the second\n\nKeyValueMap\u27e875\u27e9\n    Convert `Vec` elements into key-value map entries\n\nMap\u27e876\u27e9\n    This serializes a list of tuples into a map\n\nMapFirstKeyWins\u27e877\u27e9\n    Ensure that the first key is taken, if duplicate keys exist\n\nMapPreventDuplicates\u27e878\u27e9\n    Ensure no duplicate keys exist in a map.\n\nMapSkipError\u27e879\u27e9\n    Deserialize a map, skipping keys and values which fail to deserialize.\n\nNoneAsEmptyString\u27e880\u27e9\n    De/Serialize a `Option<String>`\u27e881\u27e9 type while transforming the empty string to `None`\u27e882\u27e9\n\nOneOrMany\u27e883\u27e9\n    Deserialize one or many elements\n\nPickFirst\u27e884\u27e9\n    Try multiple deserialization options until one succeeds.\n\nSame\u27e885\u27e9\n    Adapter to convert from `serde_as` to the serde traits.\n\nSchema\u27e886\u27e9\n    Helper for implementing `JsonSchema`\u27e887\u27e9 on serializers whose output depends on the type of the concrete field.\n\nSeq\u27e888\u27e9\n    De/Serialize a Map into a list of tuples\n\nSetLastValueWins\u27e889\u27e9\n    Ensure that the last value is taken, if duplicate values exist\n\nSetPreventDuplicates\u27e890\u27e9\n    Ensure no duplicate values exist in a set.\n\nStringWithSeparator\u27e891\u27e9\n    De/Serialize a delimited collection using `Display`\u27e860\u27e9 and `FromStr`\u27e861\u27e9 implementation\n\nTimestampMicroSeconds\u27e892\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with micro-seconds as base unit.\n\nTimestampMicroSecondsWithFrac\u27e894\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with micro-seconds as base unit.\n\nTimestampMilliSeconds\u27e896\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with milli-seconds as base unit.\n\nTimestampMilliSecondsWithFrac\u27e897\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with milli-seconds as base unit.\n\nTimestampNanoSeconds\u27e898\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with nano-seconds as base unit.\n\nTimestampNanoSecondsWithFrac\u27e899\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with nano-seconds as base unit.\n\nTimestampSeconds\u27e893\u27e9\n    De/Serialize timestamps as seconds since the UNIX epoch\n\nTimestampSecondsWithFrac\u27e895\u27e9\n    De/Serialize timestamps as seconds since the UNIX epoch\n\nTryFromInto\u27e8100\u27e9\n    Serialize value by converting to/from a proxy type with serde support.\n\nTryFromIntoRef\u27e8101\u27e9\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\nVecSkipError\u27e8102\u27e9\n    Deserialize a sequence into `Vec<T>`, skipping elements which fail to deserialize.\n## Traits\u00a7\u27e8103\u27e9\n\nDeserializeAs\u27e833\u27e9\n    A **data structure** that can be deserialized from any data format supported by Serde, analogue to `Deserialize`\u27e8104\u27e9.\n\nSerializeAs\u27e842\u27e9\n    A **data structure** that can be serialized into any data format supported by Serde, analogue to `Serialize`\u27e8105\u27e9.\n## Attribute Macros\u00a7\u27e8106\u27e9\n\napply\u27e8107\u27e9`macros`\n    Apply attributes to all fields with matching types\n\nserde_as\u27e8108\u27e9`macros`\n    Convenience macro to use the `serde_as`\u27e817\u27e9 system.\n\nskip_serializing_none\u27e8109\u27e9`macros`\n    Add `skip_serializing_if` annotations to [`Option`] fields.\n## Derive Macros\u00a7\u27e8110\u27e9\n\nDeserializeFromStr\u27e8111\u27e9`macros`\n    Deserialize value by using its `FromStr`\u27e8112\u27e9 implementation\n\nSerializeDisplay\u27e8113\u27e9`macros`\n    Serialize value by using it\u2019s `Display`\u27e8114\u27e9 implementation\n\nSerializeDisplayAlt\u27e8115\u27e9`macros`\n    Serialize value by using its `Display`\u27e8114\u27e9 implementation with the \u201calternate\u201d (`#`) format flag\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_with/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_with/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_with/latest/src/serde_with/lib.rs.html#1-2603: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/serde_with.svg: ![crates.io badge\n\u27e85\u27e9 https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg: ![Build Status\n\u27e86\u27e9 https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg: ![codecov\n\u27e87\u27e9 https://bestpractices.coreinfrastructure.org/projects/4322/badge: ![CII Best Practices\n\u27e88\u27e9 https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange: ![Rustexplorer\n\u27e89\u27e9 https://serde.rs/field-attrs.html#with: serde\u2019s `with` annotation\n\u27e810\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html: `serde_as`\n\u27e811\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html: `DisplayFromStr`\n\u27e812\u27e9 https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays: this examples shows\n\u27e813\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html: `with_prefix!`\n\u27e814\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html: `with_suffix!`\n\u27e815\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html: `serde_with::StringWithSeparator::<CommaSeparator, T>`\n\u27e816\u27e9 https://docs.rs/serde_with/latest/serde_with/#getting-help: \u00a7\n\u27e817\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html: user guide\n\u27e818\u27e9 https://github.com/jonasbb/serde_with/discussions/new: open a new discussion\n\u27e819\u27e9 https://users.rust-lang.org/: users.rust-lang.org\n\u27e820\u27e9 https://github.com/jonasbb/serde_with/issues/new: new issue\n\u27e821\u27e9 https://docs.rs/serde_with/latest/serde_with/#use-serde_with-in-your-project: \u00a7\n\u27e822\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html: feature flags\n\u27e823\u27e9 https://docs.rs/serde_with/latest/serde_with/#examples: \u00a7\n\u27e824\u27e9 https://docs.rs/serde_with/latest/serde_with/#displayfromstr: \u00a7\n\u27e825\u27e9 https://docs.rs/serde_with/latest/serde_with/#skip_serializing_none: \u00a7\n\u27e826\u27e9 https://docs.rs/serde_with/latest/serde_with/#advanced-serde_as-usage: \u00a7\n\u27e827\u27e9 https://docs.rs/serde_with/latest/serde_with/#modules: \u00a7\n\u27e828\u27e9 https://docs.rs/serde_with/latest/serde_with/base64/index.html: mod serde_with::base64 - base64\n\u27e829\u27e9 https://docs.rs/serde_with/latest/serde_with/chrono/index.html: mod serde_with::chrono - chrono\n\u27e830\u27e9 https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html: mod serde_with::chrono_0_4 - `chrono_0_4`\n\u27e831\u27e9 https://docs.rs/chrono/: chrono\n\u27e832\u27e9 https://docs.rs/serde_with/latest/serde_with/de/index.html: mod serde_with::de - de\n\u27e833\u27e9 https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html: trait serde_with::DeserializeAs - `DeserializeAs`\n\u27e834\u27e9 https://docs.rs/serde_with/latest/serde_with/formats/index.html: mod serde_with::formats - formats\n\u27e835\u27e9 https://docs.rs/serde_with/latest/serde_with/guide/index.html: mod serde_with::guide - guide\n\u27e836\u27e9 https://docs.rs/serde_with/latest/serde_with/hex/index.html: mod serde_with::hex - hex\n\u27e837\u27e9 https://docs.rs/serde_with/latest/serde_with/json/index.html: mod serde_with::json - json\n\u27e838\u27e9 https://docs.rs/serde_with/latest/serde_with/rust/index.html: mod serde_with::rust - rust\n\u27e839\u27e9 https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html: mod serde_with::schemars_0_8 - schemars_0_8\n\u27e840\u27e9 https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html: mod serde_with::schemars_0_9 - schemars_0_9\n\u27e841\u27e9 https://docs.rs/serde_with/latest/serde_with/ser/index.html: mod serde_with::ser - ser\n\u27e842\u27e9 https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html: trait serde_with::SerializeAs - `SerializeAs`\n\u27e843\u27e9 https://docs.rs/serde_with/latest/serde_with/time_0_3/index.html: mod serde_with::time_0_3 - time_0_3\n\u27e844\u27e9 https://docs.rs/time/0.3/: time v0.3\n\u27e845\u27e9 https://docs.rs/serde_with/latest/serde_with/#macros: \u00a7\n\u27e846\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.flattened_maybe.html: macro serde_with::flattened_maybe - flattened_maybe\n\u27e847\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.serde_conv.html: macro serde_with::serde_conv - serde_conv\n\u27e848\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.with_prefix.html: macro serde_with::with_prefix - with_prefix\n\u27e849\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.with_suffix.html: macro serde_with::with_suffix - with_suffix\n\u27e850\u27e9 https://docs.rs/serde_with/latest/serde_with/#structs: \u00a7\n\u27e851\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.As.html: struct serde_with::As - As\n\u27e852\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BoolFromInt.html: struct serde_with::BoolFromInt - BoolFromInt\n\u27e853\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BorrowCow.html: struct serde_with::BorrowCow - BorrowCow\n\u27e854\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Bytes.html: struct serde_with::Bytes - Bytes\n\u27e855\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BytesOrString.html: struct serde_with::BytesOrString - BytesOrString\n\u27e856\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnError.html: struct serde_with::DefaultOnError - DefaultOnError\n\u27e857\u27e9 https://doc.rust-lang.org/core/default/trait.Default.html: trait core::default::Default - `Default`\n\u27e858\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnNull.html: struct serde_with::DefaultOnNull - DefaultOnNull\n\u27e859\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DisplayFromStr.html: struct serde_with::DisplayFromStr - DisplayFromStr\n\u27e860\u27e9 https://doc.rust-lang.org/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e861\u27e9 https://doc.rust-lang.org/core/str/traits/trait.FromStr.html: trait core::str::traits::FromStr - `FromStr`\n\u27e862\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSeconds.html: struct serde_with::DurationMicroSeconds - DurationMicroSeconds\n\u27e863\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html: struct serde_with::DurationSeconds - `DurationSeconds`\n\u27e864\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSecondsWithFrac.html: struct serde_with::DurationMicroSecondsWithFrac - DurationMicroSecondsWithFrac\n\u27e865\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html: struct serde_with::DurationSecondsWithFrac - `DurationSecondsWithFrac`\n\u27e866\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSeconds.html: struct serde_with::DurationMilliSeconds - DurationMilliSeconds\n\u27e867\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSecondsWithFrac.html: struct serde_with::DurationMilliSecondsWithFrac - DurationMilliSecondsWithFrac\n\u27e868\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSeconds.html: struct serde_with::DurationNanoSeconds - DurationNanoSeconds\n\u27e869\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSecondsWithFrac.html: struct serde_with::DurationNanoSecondsWithFrac - DurationNanoSecondsWithFrac\n\u27e870\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.EnumMap.html: struct serde_with::EnumMap - EnumMap\n\u27e871\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.FromInto.html: struct serde_with::FromInto - FromInto\n\u27e872\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.FromIntoRef.html: struct serde_with::FromIntoRef - FromIntoRef\n\u27e873\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.IfIsHumanReadable.html: struct serde_with::IfIsHumanReadable - IfIsHumanReadable\n\u27e874\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serializer.html#method.is_human_readable: method serde::ser::Serializer::is_human_readable - `De/Serializer::is_human_readable`\n\u27e875\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.KeyValueMap.html: struct serde_with::KeyValueMap - KeyValueMap\n\u27e876\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Map.html: struct serde_with::Map - Map\n\u27e877\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapFirstKeyWins.html: struct serde_with::MapFirstKeyWins - MapFirstKeyWins\n\u27e878\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapPreventDuplicates.html: struct serde_with::MapPreventDuplicates - MapPreventDuplicates\n\u27e879\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapSkipError.html: struct serde_with::MapSkipError - MapSkipError\n\u27e880\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.NoneAsEmptyString.html: struct serde_with::NoneAsEmptyString - NoneAsEmptyString\n\u27e881\u27e9 https://doc.rust-lang.org/core/option/enum.Option.html: enum core::option::Option - `Option<String>`\n\u27e882\u27e9 https://doc.rust-lang.org/core/option/enum.Option.html#variant.None: variant core::option::Option::None - `None`\n\u27e883\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.OneOrMany.html: struct serde_with::OneOrMany - OneOrMany\n\u27e884\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.PickFirst.html: struct serde_with::PickFirst - PickFirst\n\u27e885\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Same.html: struct serde_with::Same - Same\n\u27e886\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Schema.html: struct serde_with::Schema - Schema\n\u27e887\u27e9 https://docs.rs/schemars/0.9.0/x86_64-unknown-linux-gnu/schemars/trait.JsonSchema.html: trait schemars::JsonSchema - `JsonSchema`\n\u27e888\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Seq.html: struct serde_with::Seq - Seq\n\u27e889\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.SetLastValueWins.html: struct serde_with::SetLastValueWins - SetLastValueWins\n\u27e890\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.SetPreventDuplicates.html: struct serde_with::SetPreventDuplicates - SetPreventDuplicates\n\u27e891\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.StringWithSeparator.html: struct serde_with::StringWithSeparator - StringWithSeparator\n\u27e892\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSeconds.html: struct serde_with::TimestampMicroSeconds - TimestampMicroSeconds\n\u27e893\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html: struct serde_with::TimestampSeconds - `TimestampSeconds`\n\u27e894\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSecondsWithFrac.html: struct serde_with::TimestampMicroSecondsWithFrac - TimestampMicroSecondsWithFrac\n\u27e895\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html: struct serde_with::TimestampSecondsWithFrac - `TimestampSecondsWithFrac`\n\u27e896\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSeconds.html: struct serde_with::TimestampMilliSeconds - TimestampMilliSeconds\n\u27e897\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSecondsWithFrac.html: struct serde_with::TimestampMilliSecondsWithFrac - TimestampMilliSecondsWithFrac\n\u27e898\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSeconds.html: struct serde_with::TimestampNanoSeconds - TimestampNanoSeconds\n\u27e899\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSecondsWithFrac.html: struct serde_with::TimestampNanoSecondsWithFrac - TimestampNanoSecondsWithFrac\n\u27e8100\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TryFromInto.html: struct serde_with::TryFromInto - TryFromInto\n\u27e8101\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TryFromIntoRef.html: struct serde_with::TryFromIntoRef - TryFromIntoRef\n\u27e8102\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.VecSkipError.html: struct serde_with::VecSkipError - VecSkipError\n\u27e8103\u27e9 https://docs.rs/serde_with/latest/serde_with/#traits: \u00a7\n\u27e8104\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e8105\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e8106\u27e9 https://docs.rs/serde_with/latest/serde_with/#attributes: \u00a7\n\u27e8107\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.apply.html: attr serde_with::apply - apply\n\u27e8108\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.serde_as.html: attr serde_with::serde_as - serde_as\n\u27e8109\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.skip_serializing_none.html: attr serde_with::skip_serializing_none - skip_serializing_none\n\u27e8110\u27e9 https://docs.rs/serde_with/latest/serde_with/#derives: \u00a7\n\u27e8111\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.DeserializeFromStr.html: derive serde_with::DeserializeFromStr - DeserializeFromStr\n\u27e8112\u27e9 std::str::FromStr: `FromStr`\n\u27e8113\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplay.html: derive serde_with::SerializeDisplay - SerializeDisplay\n\u27e8114\u27e9 std::fmt::Display: `Display`\n\u27e8115\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplayAlt.html: derive serde_with::SerializeDisplayAlt - SerializeDisplayAlt\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 24955,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113061.5751477"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/serde_with",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [54 stable releases](https://lib.rs/crates/serde_with/versions)\n3.13.0 |  Jun 14, 2025   \n---|---  \n3.12.0 |  Dec 25, 2024   \n3.11.0 |  Oct 5, 2024   \n3.9.0 |  Jul 14, 2024   \n0.1.0 |  Aug 17, 2017   \n#**4** in [Encoding](https://lib.rs/encoding \"Encoding and/or decoding data from one data format to another.\")\nDownload history 2078181/week @ 2025-03-08 2214174/week @ 2025-03-15 2527194/week @ 2025-03-22 1888029/week @ 2025-03-29 1921910/week @ 2025-04-05 1709356/week @ 2025-04-12 1633004/week @ 2025-04-19 1530537/week @ 2025-04-26 1654808/week @ 2025-05-03 1762305/week @ 2025-05-10 1732628/week @ 2025-05-17 1556133/week @ 2025-05-24 1749697/week @ 2025-05-31 1724486/week @ 2025-06-07 1782773/week @ 2025-06-14 1642940/week @ 2025-06-21\n**7,188,290** downloads per month Used in [**6,599** crates (2,099 directly)](https://lib.rs/crates/serde_with/rev)\n**MIT/Apache**\n630KB  13K  SLoC\n# Custom de/serialization functions for Rust's [serde](https://serde.rs)\n[![crates.io badge](https://img.shields.io/crates/v/serde_with.svg)](https://crates.io/crates/serde_with/) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg)](https://github.com/jonasbb/serde_with) [![codecov](https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg)](https://codecov.io/gh/jonasbb/serde_with) [![CII Best Practices](https://img.gs/czjpqfbdkz/full/https://bestpractices.coreinfrastructure.org/projects/4322/badge)](https://bestpractices.coreinfrastructure.org/projects/4322) [![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with [serde's ``with`` annotation](https://serde.rs/field-attrs.html#with) and with the improved [``serde_as``](https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html)-annotation. Some common use cases are:\n  * De/Serializing a type using the ``Display`` and ``FromStr`` traits, e.g., for ```u8```, ```url`::``Url``, or ```mime`::``Mime``. Check [``DisplayFromStr``](https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html) for details.\n  * Support for arrays larger than 32 elements or using const generics. With ``serde_as`` large arrays are supported, even if they are nested in other types. ```[``bool``;` `64``]```, ````Option``<``[``u8``;` `M``]``>````, and ````Box``<``[``[``u8``;` `64``]``;` `N``]``>```` are all supported, as [this examples shows](https://lib.rs/crates/serde_with#readme-large-and-const-generic-arrays).\n  * Skip serializing all empty ```Option``` types with [````#``[``skip_serializing_none``]````](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using [``with_prefix!``](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html) / [``with_suffix!``](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html).\n  * Deserialize a comma separated list like ```#`hash`,``#`tags`,``#`are`,``#`great`` into a ````Vec``<``String``>````. Check the documentation for [```serde_with`::```StringWithSeparator`::````<`CommaSeparator, T`>````](https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html).\n\n\n### Getting Help\n**Check out the[user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html) to find out more tips and tricks about this crate.**\nFor further help using this crate, you can [open a new discussion](https://github.com/jonasbb/serde_with/discussions/new) or ask on [users.rust-lang.org](https://users.rust-lang.org/). For bugs, please open a [new issue](https://github.com/jonasbb/serde_with/issues/new) on GitHub.\n## Use ``serde_with`` in your Project\n```\n```#``` Add the current version to your Cargo.toml\n`cargo add serde_with\n`\n```\n\nThe crate contains different features for integration with other common crates. Check the [feature flags](https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html) section for information about all available features.\n## Examples\nAnnotate your struct or enum to enable the custom de/serializer. The ````#``[``serde_as``]```` attribute must be placed _before_ the ````#``[``derive``]````.\nThe ```as``` is analogous to the ``with`` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., ````Vec``<`DisplayFromStr`>````. The default de/serialization behavior can be restored by using ``_`` as a placeholder, e.g., ```BTreeMap`<``_`, DisplayFromStr`>````.\n### ``DisplayFromStr``\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\n```\n```#``[``serde_as``]``\n``#``[``derive```(```Deserialize`,` Serialize```)```]``\n``struct` ```Foo` ````{`\n  ``//` Serialize with Display, deserialize with FromStr`\n  ``#``[``serde_as```(```as `=` ``\"`DisplayFromStr`\"`````)```]``\n  `bar``:` `u8`,\n```}```\n``//` This will serialize`\nFoo ``{`bar`:` `12````}``\n``//` into this JSON`\n``{```\"`bar`\"```:` ``\"`12`\"`````}``\n`\n```\n\n### Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The ``serde_as`` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, ```[``u8``;` N`]``` (aka, bytes) can use the specialized ````\"`Bytes`\"```` for efficiency much like the ``serde_bytes`` crate.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/um0xyi)\n```\n```#``[``serde_as``]``\n``#``[``derive```(```Deserialize`,` Serialize```)```]``\n``struct` ````Arrays``<``const` N`:` `usize`, `const` M`:` `usize``>``````{`\n  ``#``[``serde_as```(```as `=` ``\"`[_; N]`\"`````)```]``\n  `constgeneric``:` [`bool`; N],\n  ``#``[``serde_as```(```as `=` ``\"`Box<[[_; 64]; N]>`\"`````)```]``\n  `nested``:` ``Box``<``[``[``u8``;` `64``]``;` `N``]``>``,\n  ``#``[``serde_as```(```as `=` ``\"`Option<[_; M]>`\"`````)```]``\n  `optional``:` ``Option``<``[``u8``;` `M``]``>``,\n  ``#``[``serde_as```(```as `=` ``\"`Bytes`\"`````)```]``\n  `bytes``:` [`u8`; M],\n```}```\n``//` This allows us to serialize a struct like this`\n`let` arrays`:` `Arrays`<`100, 128`>`` `=` Arrays ``{`\n  constgeneric`:` `[``true``;` `100``]``,`\n  nested`:` `Box```::``new`(``[``[``111``;` `64``]``;` `100``]``)``,`\n  optional`:` `Some``(``[``222``;` `128``]``)``,`\n  bytes`:` `[``0x42``;` `128``]``,`\n```}```;`\n`assert!``(``serde_json`::``to_string`(``&`arrays`)``.``is_ok``(``)``)``;`\n`\n```\n\n### ``skip_serializing_none``\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The ````#``[``skip_serializing_none``]```` attribute must be placed _before_ the ````#``[``derive``]````.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/xr1tm0)\n```\n```#``[``skip_serializing_none``]``\n``#``[``derive```(```Deserialize`,` Serialize```)```]``\n``struct` ```Foo` ````{`\n  `a``:` ``Option``<``usize``>``,\n  `b``:` ``Option``<``usize``>``,\n  `c``:` ``Option``<``usize``>``,\n  `d``:` ``Option``<``usize``>``,\n  `e``:` ``Option``<``usize``>``,\n  `f``:` ``Option``<``usize``>``,\n  `g``:` ``Option``<``usize``>``,\n```}```\n``//` This will serialize`\nFoo ``{`a`:` `None``,` b`:` `None``,` c`:` `None``,` d`:` `Some``(``4``)``,` e`:` `None``,` f`:` `None``,` g`:` `Some``(``7``)````}``\n``//` into this JSON`\n``{```\"`d`\"```:` `4``,` ``\"`g`\"```:` `7````}``\n`\n```\n\n### Advanced ``serde_as`` usage\nThis example is mainly supposed to highlight the flexibility of the ``serde_as`` annotation compared to [serde's ``with`` annotation](https://serde.rs/field-attrs.html#with). More details about ``serde_as`` can be found in the [user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html).\n```\n``use` `std`::```time`::``Duration`;`\n``#``[``serde_as``]``\n``#``[``derive```(```Deserialize`,` Serialize```)```]``\n``enum` `Foo` ``{`\n  Durations`(`\n    ``//` Serialize them into a list of number as seconds`\n    ``#``[``serde_as```(```as `=` ``\"`Vec<DurationSeconds>`\"`````)```]``\n    ``Vec``<`Duration`>```,`\n  `)``,`\n  Bytes `{`\n    ``//` We can treat a Vec like a map with duplicates.`\n    ``//` JSON only allows string keys, so convert i32 to strings`\n    ``//` The bytes will be hex encoded`\n    ``#``[``serde_as```(```as `=` ``\"`Map<DisplayFromStr, Hex>`\"`````)```]``\n    bytes`:` ``Vec``<``(``i32`, `Vec``<``u8``>``)``>```,`\n  `}`\n```}```\n``//` This will serialize`\n`Foo`::``Durations`(`\n  `vec!``[``Duration`::``new`(``5``,` `0``)``,` `Duration`::``new`(``3600``,` `0``)``,` `Duration`::``new`(``0``,` `0``)``]`\n`)`\n``//` into this JSON`\n``{`\n  ``\"`Durations`\"```:` `[``5``,` `3600``,` `0``]`\n```}``\n``//` and serializes`\n`Foo`::``Bytes ``{`\n  bytes`:` `vec!``[`\n    `(``1``,` `vec!``[``0``,` `1``,` `2``]``)``,`\n    `(``-``100``,` `vec!``[``100``,` `200``,` `255``]``)``,`\n    `(``1``,` `vec!``[``0``,` `111``,` `222``]``)``,`\n  `]``,`\n```}``\n``//` into this JSON`\n``{`\n  ``\"`Bytes`\"```:` `{`\n    ``\"`bytes`\"```:` `{`\n      ``\"`1`\"```:` ``\"`000102`\"```,`\n      ``\"`-100`\"```:` ``\"`64c8ff`\"```,`\n      ``\"`1`\"```:` ``\"`006fde`\"``\n    `}`\n  `}`\n```}``\n`\n```\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/jonasbb/serde_with/blob/92ae7ad4b9e6f1ced3b2f00d641034ae0b56d662/serde_with/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/jonasbb/serde_with/blob/92ae7ad4b9e6f1ced3b2f00d641034ae0b56d662/serde_with/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Contribution\nFor detailed contribution instructions please read [``CONTRIBUTING.md``](https://github.com/jonasbb/serde_with/blob/master/CONTRIBUTING.md).\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual-licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0.3\u20132.1MB  ~41K SLoC\n  * [alloc?](https://lib.rs/crates/serde_with/features#feature-alloc \"optional feature\") [base64?](https://lib.rs/crates/serde_with/features#feature-base64 \"optional feature\") [base64](https://lib.rs/crates/base64 \"new\") 0.22.1\n  * [alloc?](https://lib.rs/crates/serde_with/features#feature-alloc \"optional feature\") [hex?](https://lib.rs/crates/serde_with/features#feature-hex \"optional feature\") [hex](https://lib.rs/crates/hex \"0.4.3\")\n  * [alloc?](https://lib.rs/crates/serde_with/features#feature-alloc \"optional feature\") [json?](https://lib.rs/crates/serde_with/features#feature-json \"optional feature\") [schemars_0_9?](https://lib.rs/crates/serde_with/features#feature-schemars_0_9 \"optional feature\") [serde_json](https://lib.rs/crates/serde_json \"1.0.45\")\n  * [alloc?](https://lib.rs/crates/serde_with/features#feature-alloc \"optional feature\") [chrono_0_4?](https://lib.rs/crates/serde_with/features#feature-chrono_0_4 \"optional feature\") [std?](https://lib.rs/crates/serde_with/features#feature-std \"optional feature\") [chrono](https://lib.rs/crates/chrono \"renamed chrono_0_4, 0.4.20\")[+serde](https://lib.rs/crates/chrono/features#feature-serde)\n  * [indexmap_1?](https://lib.rs/crates/serde_with/features#feature-indexmap_1 \"optional feature\") [std?](https://lib.rs/crates/serde_with/features#feature-std \"optional feature\") [indexmap](https://lib.rs/crates/indexmap \"renamed indexmap_1, obsolete\") 1.8[+serde-1](https://lib.rs/crates/indexmap/features#feature-serde-1)\n  * [indexmap_2?](https://lib.rs/crates/serde_with/features#feature-indexmap_2 \"optional feature\") [std?](https://lib.rs/crates/serde_with/features#feature-std \"optional feature\") [indexmap](https://lib.rs/crates/indexmap \"renamed indexmap_2, new\") 2.0[+serde](https://lib.rs/crates/indexmap/features#feature-serde)\n  * [schemars_0_9?](https://lib.rs/crates/serde_with/features#feature-schemars_0_9 \"optional feature\") [std?](https://lib.rs/crates/serde_with/features#feature-std \"optional feature\") [schemars](https://lib.rs/crates/schemars \"renamed schemars_0_9, obsolete\") 0.9\n  * [alloc?](https://lib.rs/crates/serde_with/features#feature-alloc \"optional feature\") [std?](https://lib.rs/crates/serde_with/features#feature-std \"optional feature\") [time_0_3?](https://lib.rs/crates/serde_with/features#feature-time_0_3 \"optional feature\") [time](https://lib.rs/crates/time \"renamed time_0_3, ~0.3.36\")\n  * [guide?](https://lib.rs/crates/serde_with/features#feature-guide \"optional feature\") [document-features](https://lib.rs/crates/document-features \"0.2.7\")\n  * [hashbrown_0_14?](https://lib.rs/crates/serde_with/features#feature-hashbrown_0_14 \"optional feature\") [hashbrown](https://lib.rs/crates/hashbrown \"renamed hashbrown_0_14, obsolete\") 0.14[+serde](https://lib.rs/crates/hashbrown/features#feature-serde)\n  * [hashbrown_0_15?](https://lib.rs/crates/serde_with/features#feature-hashbrown_0_15 \"optional feature\") [hashbrown](https://lib.rs/crates/hashbrown \"renamed hashbrown_0_15, new\") 0.15[+serde](https://lib.rs/crates/hashbrown/features#feature-serde)\n  * [macros](https://lib.rs/crates/serde_with/features#feature-macros \"default feature\") [schemars_0_8?](https://lib.rs/crates/serde_with/features#feature-schemars_0_8 \"optional feature\") [schemars_0_9?](https://lib.rs/crates/serde_with/features#feature-schemars_0_9 \"optional feature\") [serde_with_macros](https://lib.rs/crates/serde_with_macros \"new\") =3.13.0\n  * [schemars_0_8?](https://lib.rs/crates/serde_with/features#feature-schemars_0_8 \"optional feature\") [schemars](https://lib.rs/crates/schemars \"renamed schemars_0_8, outdated\") 0.8.16\n  * [serde](https://lib.rs/crates/serde \"1.0.152\")\n  * [serde_derive](https://lib.rs/crates/serde_derive \"1.0.152\")\n\n\n  * dev  [expect-test](https://lib.rs/crates/expect-test \"1.5.0\")\n  * dev  [fnv](https://lib.rs/crates/fnv \"1.0.6\")\n  * dev  [glob](https://lib.rs/crates/glob \"0.3.0\")\n  * dev  [jsonschema](https://lib.rs/crates/jsonschema \"new\") 0.30[+resolve-file](https://lib.rs/crates/jsonschema/features#feature-resolve-file)\n  * dev  [mime](https://lib.rs/crates/mime \"0.3.16\")\n  * dev  [pretty_assertions](https://lib.rs/crates/pretty_assertions \"1.4.0\")\n  * dev  [regex](https://lib.rs/crates/regex \"1.11.0\")[+std](https://lib.rs/crates/regex/features#feature-std)\n  * dev  [rmp-serde](https://lib.rs/crates/rmp-serde \"1.3.0\")\n  * dev  [ron](https://lib.rs/crates/ron \"new\") 0.10\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1.0.0\")\n  * dev  [serde-xml-rs](https://lib.rs/crates/serde-xml-rs \"outdated\") 0.6\n  * dev  [serde_test](https://lib.rs/crates/serde_test \"1.0.124\")\n  * dev  [serde_yaml](https://lib.rs/crates/serde_yaml \"outdated\") 0.9.2\n  * dev  [version-sync](https://lib.rs/crates/version-sync \"new\") 0.9.1\n\n\n#### [Other features](https://lib.rs/crates/serde_with/features)\n  * [chrono](https://lib.rs/crates/serde_with/features#feature-chrono)\n  * [indexmap](https://lib.rs/crates/serde_with/features#feature-indexmap)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  54 stable releases\u27e81\u27e9\n3.13.0 |  Jun 14, 2025   \n---|---  \n3.12.0 |  Dec 25, 2024   \n3.11.0 |  Oct 5, 2024   \n3.9.0 |  Jul 14, 2024   \n0.1.0 |  Aug 17, 2017   \n#**4** in Encoding\u27e82\u27e9\nDownload history 2078181/week @ 2025-03-08 2214174/week @ 2025-03-15 2527194/week @ 2025-03-22 1888029/week @ 2025-03-29 1921910/week @ 2025-04-05 1709356/week @ 2025-04-12 1633004/week @ 2025-04-19 1530537/week @ 2025-04-26 1654808/week @ 2025-05-03 1762305/week @ 2025-05-10 1732628/week @ 2025-05-17 1556133/week @ 2025-05-24 1749697/week @ 2025-05-31 1724486/week @ 2025-06-07 1782773/week @ 2025-06-14 1642940/week @ 2025-06-21\n**7,188,290** downloads per month Used in **6,599** crates (2,099 directly)\u27e83\u27e9\n**MIT/Apache**\n630KB  13K  SLoC\n# Custom de/serialization functions for Rust's serde\u27e84\u27e9\n![crates.io badge\u27e85\u27e9](https://crates.io/crates/serde_with/) ![Build Status\u27e86\u27e9](https://github.com/jonasbb/serde_with) ![codecov\u27e87\u27e9](https://codecov.io/gh/jonasbb/serde_with) ![CII Best Practices\u27e88\u27e9](https://bestpractices.coreinfrastructure.org/projects/4322) ![Rustexplorer\u27e89\u27e9](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with serde's ``with`` annotation\u27e810\u27e9 and with the improved ``serde_as``\u27e811\u27e9-annotation. Some common use cases are:\n  * De/Serializing a type using the ``Display`` and ``FromStr`` traits, e.g., for ```u8```, ```url`::``Url``, or ```mime`::``Mime``. Check ``DisplayFromStr``\u27e812\u27e9 for details.\n  * Support for arrays larger than 32 elements or using const generics. With ``serde_as`` large arrays are supported, even if they are nested in other types. ```[``bool``;` `64``]```, ````Option``<``[``u8``;` `M``]``>````, and ````Box``<``[``[``u8``;` `64``]``;` `N``]``>```` are all supported, as this examples shows\u27e813\u27e9.\n  * Skip serializing all empty ```Option``` types with [````#``[``skip_serializing_none``]````](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using ``with_prefix!``\u27e814\u27e9 / ``with_suffix!``\u27e815\u27e9.\n  * Deserialize a comma separated list like ```#`hash`,``#`tags`,``#`are`,``#`great`` into a ````Vec``<``String``>````. Check the documentation for ```serde_with`::```StringWithSeparator`::````<`CommaSeparator, T`>````\u27e816\u27e9.\n\n\n### Getting Help\n**Check out theuser guide\u27e817\u27e9 to find out more tips and tricks about this crate.**\nFor further help using this crate, you can open a new discussion\u27e818\u27e9 or ask on users.rust-lang.org\u27e819\u27e9. For bugs, please open a new issue\u27e820\u27e9 on GitHub.\n## Use ``serde_with`` in your Project\n```\n```#``` Add the current version to your Cargo.toml\n`cargo add serde_with\n`\n```\n\nThe crate contains different features for integration with other common crates. Check the feature flags\u27e821\u27e9 section for information about all available features.\n## Examples\nAnnotate your struct or enum to enable the custom de/serializer. The ````#``[``serde_as``]```` attribute must be placed _before_ the ````#``[``derive``]````.\nThe ```as``` is analogous to the ``with`` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., ````Vec``<`DisplayFromStr`>````. The default de/serialization behavior can be restored by using ``_`` as a placeholder, e.g., ```BTreeMap`<``_`, DisplayFromStr`>````.\n### ``DisplayFromStr``\n![Rustexplorer\u27e89\u27e9](https://www.rustexplorer.com/b/py7ida)\n```\n```#``[``serde_as``]``\n``#``[``derive```(```Deserialize`,` Serialize```)```]``\n``struct` ```Foo` ````{`\n  ``//` Serialize with Display, deserialize with FromStr`\n  ``#``[``serde_as```(```as `=` ``\"`DisplayFromStr`\"`````)```]``\n  `bar``:` `u8`,\n```}```\n``//` This will serialize`\nFoo ``{`bar`:` `12````}``\n``//` into this JSON`\n``{```\"`bar`\"```:` ``\"`12`\"`````}``\n`\n```\n\n### Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The ``serde_as`` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, ```[``u8``;` N`]``` (aka, bytes) can use the specialized ````\"`Bytes`\"```` for efficiency much like the ``serde_bytes`` crate.\n![Rustexplorer\u27e89\u27e9](https://www.rustexplorer.com/b/um0xyi)\n```\n```#``[``serde_as``]``\n``#``[``derive```(```Deserialize`,` Serialize```)```]``\n``struct` ````Arrays``<``const` N`:` `usize`, `const` M`:` `usize``>``````{`\n  ``#``[``serde_as```(```as `=` ``\"`[_; N]`\"`````)```]``\n  `constgeneric``:` [`bool`; N],\n  ``#``[``serde_as```(```as `=` ``\"`Box<[[_; 64]; N]>`\"`````)```]``\n  `nested``:` ``Box``<``[``[``u8``;` `64``]``;` `N``]``>``,\n  ``#``[``serde_as```(```as `=` ``\"`Option<[_; M]>`\"`````)```]``\n  `optional``:` ``Option``<``[``u8``;` `M``]``>``,\n  ``#``[``serde_as```(```as `=` ``\"`Bytes`\"`````)```]``\n  `bytes``:` [`u8`; M],\n```}```\n``//` This allows us to serialize a struct like this`\n`let` arrays`:` `Arrays`<`100, 128`>`` `=` Arrays ``{`\n  constgeneric`:` `[``true``;` `100``]``,`\n  nested`:` `Box```::``new`(``[``[``111``;` `64``]``;` `100``]``)``,`\n  optional`:` `Some``(``[``222``;` `128``]``)``,`\n  bytes`:` `[``0x42``;` `128``]``,`\n```}```;`\n`assert!``(``serde_json`::``to_string`(``&`arrays`)``.``is_ok``(``)``)``;`\n`\n```\n\n### ``skip_serializing_none``\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The ````#``[``skip_serializing_none``]```` attribute must be placed _before_ the ````#``[``derive``]````.\n![Rustexplorer\u27e89\u27e9](https://www.rustexplorer.com/b/xr1tm0)\n```\n```#``[``skip_serializing_none``]``\n``#``[``derive```(```Deserialize`,` Serialize```)```]``\n``struct` ```Foo` ````{`\n  `a``:` ``Option``<``usize``>``,\n  `b``:` ``Option``<``usize``>``,\n  `c``:` ``Option``<``usize``>``,\n  `d``:` ``Option``<``usize``>``,\n  `e``:` ``Option``<``usize``>``,\n  `f``:` ``Option``<``usize``>``,\n  `g``:` ``Option``<``usize``>``,\n```}```\n``//` This will serialize`\nFoo ``{`a`:` `None``,` b`:` `None``,` c`:` `None``,` d`:` `Some``(``4``)``,` e`:` `None``,` f`:` `None``,` g`:` `Some``(``7``)````}``\n``//` into this JSON`\n``{```\"`d`\"```:` `4``,` ``\"`g`\"```:` `7````}``\n`\n```\n\n### Advanced ``serde_as`` usage\nThis example is mainly supposed to highlight the flexibility of the ``serde_as`` annotation compared to serde's ``with`` annotation\u27e810\u27e9. More details about ``serde_as`` can be found in the user guide\u27e817\u27e9.\n```\n``use` `std`::```time`::``Duration`;`\n``#``[``serde_as``]``\n``#``[``derive```(```Deserialize`,` Serialize```)```]``\n``enum` `Foo` ``{`\n  Durations`(`\n    ``//` Serialize them into a list of number as seconds`\n    ``#``[``serde_as```(```as `=` ``\"`Vec<DurationSeconds>`\"`````)```]``\n    ``Vec``<`Duration`>```,`\n  `)``,`\n  Bytes `{`\n    ``//` We can treat a Vec like a map with duplicates.`\n    ``//` JSON only allows string keys, so convert i32 to strings`\n    ``//` The bytes will be hex encoded`\n    ``#``[``serde_as```(```as `=` ``\"`Map<DisplayFromStr, Hex>`\"`````)```]``\n    bytes`:` ``Vec``<``(``i32`, `Vec``<``u8``>``)``>```,`\n  `}`\n```}```\n``//` This will serialize`\n`Foo`::``Durations`(`\n  `vec!``[``Duration`::``new`(``5``,` `0``)``,` `Duration`::``new`(``3600``,` `0``)``,` `Duration`::``new`(``0``,` `0``)``]`\n`)`\n``//` into this JSON`\n``{`\n  ``\"`Durations`\"```:` `[``5``,` `3600``,` `0``]`\n```}``\n``//` and serializes`\n`Foo`::``Bytes ``{`\n  bytes`:` `vec!``[`\n    `(``1``,` `vec!``[``0``,` `1``,` `2``]``)``,`\n    `(``-``100``,` `vec!``[``100``,` `200``,` `255``]``)``,`\n    `(``1``,` `vec!``[``0``,` `111``,` `222``]``)``,`\n  `]``,`\n```}``\n``//` into this JSON`\n``{`\n  ``\"`Bytes`\"```:` `{`\n    ``\"`bytes`\"```:` `{`\n      ``\"`1`\"```:` ``\"`000102`\"```,`\n      ``\"`-100`\"```:` ``\"`64c8ff`\"```,`\n      ``\"`1`\"```:` ``\"`006fde`\"``\n    `}`\n  `}`\n```}``\n`\n```\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e822\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e823\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Contribution\nFor detailed contribution instructions please read ``CONTRIBUTING.md``\u27e824\u27e9.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual-licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0.3\u20132.1MB  ~41K SLoC\n  * alloc?\u27e825\u27e9 base64?\u27e826\u27e9 base64\u27e827\u27e9 0.22.1\n  * alloc?\u27e825\u27e9 hex?\u27e828\u27e9 hex\u27e829\u27e9\n  * alloc?\u27e825\u27e9 json?\u27e830\u27e9 schemars_0_9?\u27e831\u27e9 serde_json\u27e832\u27e9\n  * alloc?\u27e825\u27e9 chrono_0_4?\u27e833\u27e9 std?\u27e834\u27e9 chrono\u27e835\u27e9+serde\u27e836\u27e9\n  * indexmap_1?\u27e837\u27e9 std?\u27e834\u27e9 indexmap\u27e838\u27e9 1.8+serde-1\u27e839\u27e9\n  * indexmap_2?\u27e840\u27e9 std?\u27e834\u27e9 indexmap\u27e838\u27e9 2.0+serde\u27e841\u27e9\n  * schemars_0_9?\u27e831\u27e9 std?\u27e834\u27e9 schemars\u27e842\u27e9 0.9\n  * alloc?\u27e825\u27e9 std?\u27e834\u27e9 time_0_3?\u27e843\u27e9 time\u27e844\u27e9\n  * guide?\u27e845\u27e9 document-features\u27e846\u27e9\n  * hashbrown_0_14?\u27e847\u27e9 hashbrown\u27e848\u27e9 0.14+serde\u27e849\u27e9\n  * hashbrown_0_15?\u27e850\u27e9 hashbrown\u27e848\u27e9 0.15+serde\u27e849\u27e9\n  * macros\u27e851\u27e9 schemars_0_8?\u27e852\u27e9 schemars_0_9?\u27e831\u27e9 serde_with_macros\u27e853\u27e9 =3.13.0\n  * schemars_0_8?\u27e852\u27e9 schemars\u27e842\u27e9 0.8.16\n  * serde\u27e854\u27e9\n  * serde_derive\u27e855\u27e9\n\n\n  * dev  expect-test\u27e856\u27e9\n  * dev  fnv\u27e857\u27e9\n  * dev  glob\u27e858\u27e9\n  * dev  jsonschema\u27e859\u27e9 0.30+resolve-file\u27e860\u27e9\n  * dev  mime\u27e861\u27e9\n  * dev  pretty_assertions\u27e862\u27e9\n  * dev  regex\u27e863\u27e9+std\u27e864\u27e9\n  * dev  rmp-serde\u27e865\u27e9\n  * dev  ron\u27e866\u27e9 0.10\n  * dev  rustversion\u27e867\u27e9\n  * dev  serde-xml-rs\u27e868\u27e9 0.6\n  * dev  serde_test\u27e869\u27e9\n  * dev  serde_yaml\u27e870\u27e9 0.9.2\n  * dev  version-sync\u27e871\u27e9 0.9.1\n\n\n#### Other features\u27e872\u27e9\n  * chrono\u27e873\u27e9\n  * indexmap\u27e874\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/serde_with/versions: 54 stable releases\n\u27e82\u27e9 https://lib.rs/encoding: Encoding and/or decoding data from one data format to another. - Encoding\n\u27e83\u27e9 https://lib.rs/crates/serde_with/rev: **6,599** crates (2,099 directly)\n\u27e84\u27e9 https://serde.rs: serde\n\u27e85\u27e9 https://img.shields.io/crates/v/serde_with.svg: ![crates.io badge\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg: ![Build Status\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg: ![codecov\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://bestpractices.coreinfrastructure.org/projects/4322/badge: ![CII Best Practices\n\u27e89\u27e9 https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange: ![Rustexplorer\n\u27e810\u27e9 https://serde.rs/field-attrs.html#with: serde's ``with`` annotation\n\u27e811\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html: ``serde_as``\n\u27e812\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html: ``DisplayFromStr``\n\u27e813\u27e9 https://lib.rs/crates/serde_with#readme-large-and-const-generic-arrays: this examples shows\n\u27e814\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html: ``with_prefix!``\n\u27e815\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html: ``with_suffix!``\n\u27e816\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html: ```serde_with`::```StringWithSeparator`::````<`CommaSeparator, T`>````\n\u27e817\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html: user guide\n\u27e818\u27e9 https://github.com/jonasbb/serde_with/discussions/new: open a new discussion\n\u27e819\u27e9 https://users.rust-lang.org/: users.rust-lang.org\n\u27e820\u27e9 https://github.com/jonasbb/serde_with/issues/new: new issue\n\u27e821\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html: feature flags\n\u27e822\u27e9 https://github.com/jonasbb/serde_with/blob/92ae7ad4b9e6f1ced3b2f00d641034ae0b56d662/serde_with/LICENSE-APACHE: LICENSE-APACHE\n\u27e823\u27e9 https://github.com/jonasbb/serde_with/blob/92ae7ad4b9e6f1ced3b2f00d641034ae0b56d662/serde_with/LICENSE-MIT: LICENSE-MIT\n\u27e824\u27e9 https://github.com/jonasbb/serde_with/blob/master/CONTRIBUTING.md: ``CONTRIBUTING.md``\n\u27e825\u27e9 https://lib.rs/crates/serde_with/features#feature-alloc: optional feature - alloc?\n\u27e826\u27e9 https://lib.rs/crates/serde_with/features#feature-base64: optional feature - base64?\n\u27e827\u27e9 https://lib.rs/crates/base64: new - base64\n\u27e828\u27e9 https://lib.rs/crates/serde_with/features#feature-hex: optional feature - hex?\n\u27e829\u27e9 https://lib.rs/crates/hex: 0.4.3 - hex\n\u27e830\u27e9 https://lib.rs/crates/serde_with/features#feature-json: optional feature - json?\n\u27e831\u27e9 https://lib.rs/crates/serde_with/features#feature-schemars_0_9: optional feature - schemars_0_9?\n\u27e832\u27e9 https://lib.rs/crates/serde_json: 1.0.45 - serde_json\n\u27e833\u27e9 https://lib.rs/crates/serde_with/features#feature-chrono_0_4: optional feature - chrono_0_4?\n\u27e834\u27e9 https://lib.rs/crates/serde_with/features#feature-std: optional feature - std?\n\u27e835\u27e9 https://lib.rs/crates/chrono: renamed chrono_0_4, 0.4.20 - chrono\n\u27e836\u27e9 https://lib.rs/crates/chrono/features#feature-serde: +serde\n\u27e837\u27e9 https://lib.rs/crates/serde_with/features#feature-indexmap_1: optional feature - indexmap_1?\n\u27e838\u27e9 https://lib.rs/crates/indexmap: renamed indexmap_1, obsolete - indexmap\n\u27e839\u27e9 https://lib.rs/crates/indexmap/features#feature-serde-1: +serde-1\n\u27e840\u27e9 https://lib.rs/crates/serde_with/features#feature-indexmap_2: optional feature - indexmap_2?\n\u27e841\u27e9 https://lib.rs/crates/indexmap/features#feature-serde: +serde\n\u27e842\u27e9 https://lib.rs/crates/schemars: renamed schemars_0_9, obsolete - schemars\n\u27e843\u27e9 https://lib.rs/crates/serde_with/features#feature-time_0_3: optional feature - time_0_3?\n\u27e844\u27e9 https://lib.rs/crates/time: renamed time_0_3, ~0.3.36 - time\n\u27e845\u27e9 https://lib.rs/crates/serde_with/features#feature-guide: optional feature - guide?\n\u27e846\u27e9 https://lib.rs/crates/document-features: 0.2.7 - document-features\n\u27e847\u27e9 https://lib.rs/crates/serde_with/features#feature-hashbrown_0_14: optional feature - hashbrown_0_14?\n\u27e848\u27e9 https://lib.rs/crates/hashbrown: renamed hashbrown_0_14, obsolete - hashbrown\n\u27e849\u27e9 https://lib.rs/crates/hashbrown/features#feature-serde: +serde\n\u27e850\u27e9 https://lib.rs/crates/serde_with/features#feature-hashbrown_0_15: optional feature - hashbrown_0_15?\n\u27e851\u27e9 https://lib.rs/crates/serde_with/features#feature-macros: default feature - macros\n\u27e852\u27e9 https://lib.rs/crates/serde_with/features#feature-schemars_0_8: optional feature - schemars_0_8?\n\u27e853\u27e9 https://lib.rs/crates/serde_with_macros: new - serde_with_macros\n\u27e854\u27e9 https://lib.rs/crates/serde: 1.0.152 - serde\n\u27e855\u27e9 https://lib.rs/crates/serde_derive: 1.0.152 - serde_derive\n\u27e856\u27e9 https://lib.rs/crates/expect-test: 1.5.0 - expect-test\n\u27e857\u27e9 https://lib.rs/crates/fnv: 1.0.6 - fnv\n\u27e858\u27e9 https://lib.rs/crates/glob: 0.3.0 - glob\n\u27e859\u27e9 https://lib.rs/crates/jsonschema: new - jsonschema\n\u27e860\u27e9 https://lib.rs/crates/jsonschema/features#feature-resolve-file: +resolve-file\n\u27e861\u27e9 https://lib.rs/crates/mime: 0.3.16 - mime\n\u27e862\u27e9 https://lib.rs/crates/pretty_assertions: 1.4.0 - pretty_assertions\n\u27e863\u27e9 https://lib.rs/crates/regex: 1.11.0 - regex\n\u27e864\u27e9 https://lib.rs/crates/regex/features#feature-std: +std\n\u27e865\u27e9 https://lib.rs/crates/rmp-serde: 1.3.0 - rmp-serde\n\u27e866\u27e9 https://lib.rs/crates/ron: new - ron\n\u27e867\u27e9 https://lib.rs/crates/rustversion: 1.0.0 - rustversion\n\u27e868\u27e9 https://lib.rs/crates/serde-xml-rs: outdated - serde-xml-rs\n\u27e869\u27e9 https://lib.rs/crates/serde_test: 1.0.124 - serde_test\n\u27e870\u27e9 https://lib.rs/crates/serde_yaml: outdated - serde_yaml\n\u27e871\u27e9 https://lib.rs/crates/version-sync: new - version-sync\n\u27e872\u27e9 https://lib.rs/crates/serde_with/features: Other features\n\u27e873\u27e9 https://lib.rs/crates/serde_with/features#feature-chrono: chrono\n\u27e874\u27e9 https://lib.rs/crates/serde_with/features#feature-indexmap: indexmap\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 15459,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113062.4592788"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libfnv-6a2bfe21e1772c80.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libfnv-6a2bfe21e1772c80.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ident_case@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ident_case-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ident_case",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ident_case-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libident_case-9d205211ae57ff4b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libident_case-9d205211ae57ff4b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\proc-macro2-b556ba88a67abee3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\proc-macro2-b556ba88a67abee3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.200",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.200\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.200\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\serde-119dcf5d7b289a48\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\serde-119dcf5d7b289a48\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strsim@0.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strsim",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.10.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libstrsim-c9a6da5dc6f28870.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libstrsim-c9a6da5dc6f28870.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.200",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\serde-b6ab0cbaf1eed512\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\proc-macro2-8efd0ff92cab5e3e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libproc_macro2-46354eba22a5a40e.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libproc_macro2-46354eba22a5a40e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libquote-ecd89142360261ac.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libquote-ecd89142360261ac.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.200",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.200\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.200\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libserde-64b1769f70de3422.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.60",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.60\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.60\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libsyn-a0f22006916d8512.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libsyn-a0f22006916d8512.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#darling_core@0.20.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_core-0.20.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "darling_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_core-0.20.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "strsim",
                "suggestions"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libdarling_core-ae4f9b93cf10381d.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libdarling_core-ae4f9b93cf10381d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#darling_macro@0.20.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_macro-0.20.3\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "darling_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_macro-0.20.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\darling_macro-38b2990a69145d25.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\darling_macro-38b2990a69145d25.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\darling_macro-38b2990a69145d25.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\darling_macro-38b2990a69145d25.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#darling@0.20.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling-0.20.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "darling",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling-0.20.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "suggestions"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libdarling-9a4773def0606e99.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libdarling-9a4773def0606e99.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.200",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.200\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.200\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_derive-9544b375a2a7ec32.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_derive-9544b375a2a7ec32.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_derive-9544b375a2a7ec32.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_derive-9544b375a2a7ec32.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_with_macros@3.13.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with_macros-3.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_with_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with_macros-3.13.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_with_macros-2168f1f26ac7bd22.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_with_macros-2168f1f26ac7bd22.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_with_macros-2168f1f26ac7bd22.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_with_macros-2168f1f26ac7bd22.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxp0jppc0/serde_with-3.13.0#serde_with@3.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_with",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "macros",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libserde_with-50a7aea1356f739c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\proc-macro2-b556ba88a67abee3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\proc-macro2-b556ba88a67abee3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\proc-macro2-8efd0ff92cab5e3e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ident_case@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ident_case-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ident_case",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ident_case-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libident_case-9d205211ae57ff4b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libident_case-9d205211ae57ff4b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strsim@0.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strsim",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.10.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libstrsim-c9a6da5dc6f28870.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libstrsim-c9a6da5dc6f28870.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libfnv-6a2bfe21e1772c80.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libfnv-6a2bfe21e1772c80.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.200",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.200\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.200\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\serde-119dcf5d7b289a48\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\serde-119dcf5d7b289a48\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libproc_macro2-46354eba22a5a40e.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libproc_macro2-46354eba22a5a40e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.200",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\build\\serde-b6ab0cbaf1eed512\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libquote-ecd89142360261ac.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libquote-ecd89142360261ac.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.200",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.200\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.200\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libserde-64b1769f70de3422.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.60",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.60\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.60\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libsyn-a0f22006916d8512.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libsyn-a0f22006916d8512.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#darling_core@0.20.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_core-0.20.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "darling_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_core-0.20.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "strsim",
                "suggestions"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libdarling_core-ae4f9b93cf10381d.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libdarling_core-ae4f9b93cf10381d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.200",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.200\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.200\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_derive-9544b375a2a7ec32.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_derive-9544b375a2a7ec32.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_derive-9544b375a2a7ec32.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_derive-9544b375a2a7ec32.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#darling_macro@0.20.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_macro-0.20.3\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "darling_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_macro-0.20.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\darling_macro-38b2990a69145d25.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\darling_macro-38b2990a69145d25.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\darling_macro-38b2990a69145d25.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\darling_macro-38b2990a69145d25.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#darling@0.20.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling-0.20.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "darling",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling-0.20.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "suggestions"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libdarling-9a4773def0606e99.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libdarling-9a4773def0606e99.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_with_macros@3.13.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with_macros-3.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_with_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with_macros-3.13.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_with_macros-2168f1f26ac7bd22.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_with_macros-2168f1f26ac7bd22.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_with_macros-2168f1f26ac7bd22.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\serde_with_macros-2168f1f26ac7bd22.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxp0jppc0/serde_with-3.13.0#serde_with@3.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_with",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "macros",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxp0jppc0\\serde_with-3.13.0\\target\\debug\\deps\\libserde_with-cb097aaec6c9f1b1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 170
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 1,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0402",
                    "package": "hashbrown",
                    "title": "Borsh serialization of HashMap is non-canonical",
                    "description": "The borsh serialization of the HashMap did not follow the borsh specification.\nIt potentially produced non-canonical encodings dependent on insertion order.\nIt also did not perform canonicty checks on decoding.\n\nThis can result in consensus splits and cause equivalent objects to be\nconsidered distinct.\n\nThis was patched in 0.15.1.",
                    "date": "2024-10-11",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "borsh"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rust-lang/hashbrown/issues/576",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.15.1"
                    ],
                    "unaffected": [
                      "<0.15.0"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "hashbrown::HashMap::borsh_serialize": [
                        "=0.15.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "hashbrown",
                    "version": "0.15.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "1e087f84d4f86bf4b218b927129862374b72199ae7d8657835f1e89000eea4fb",
                    "dependencies": [
                      {
                        "name": "serde",
                        "version": "1.0.200",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "paste",
                    "version": "1.0.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0436",
                    "package": "paste",
                    "title": "paste - no longer maintained",
                    "description": "The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \nthat this project is not longer maintained as well as archived the repository",
                    "date": "2024-10-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/dtolnay/paste",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "serde_with",
          "version": "3.13.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/serde_with/latest/serde_with/all.html \"show sidebar\")\n# Crate serde_withCopy item path\n[Settings](https://docs.rs/serde_with/latest/settings.html)\n[Help](https://docs.rs/serde_with/latest/help.html)\nSummary[Source](https://docs.rs/serde_with/latest/src/serde_with/lib.rs.html#1-2603)\nExpand description\n[![crates.io badge](https://img.shields.io/crates/v/serde_with.svg)](https://crates.io/crates/serde_with/) [![Build Status](https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg)](https://github.com/jonasbb/serde_with) [![codecov](https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg)](https://codecov.io/gh/jonasbb/serde_with) [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/4322/badge)](https://bestpractices.coreinfrastructure.org/projects/4322) [![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with [serde\u2019s `with` annotation](https://serde.rs/field-attrs.html#with) and with the improved [`serde_as`](https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html)-annotation. Some common use cases are:\n  * De/Serializing a type using the `Display` and `FromStr` traits, e.g., for `u8`, `url::Url`, or `mime::Mime`. Check [`DisplayFromStr`](https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html) for details.\n  * Support for arrays larger than 32 elements or using const generics. With `serde_as` large arrays are supported, even if they are nested in other types. `[bool; 64]`, `Option<[u8; M]>`, and `Box<[[u8; 64]; N]>` are all supported, as [this examples shows](https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays).\n  * Skip serializing all empty `Option` types with [`#[skip_serializing_none]`](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using [`with_prefix!`](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html) / [`with_suffix!`](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html).\n  * Deserialize a comma separated list like `#hash,#tags,#are,#great` into a `Vec<String>`. Check the documentation for [`serde_with::StringWithSeparator::<CommaSeparator, T>`](https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html).\n\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#getting-help)Getting Help\n**Check out the[user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html) to find out more tips and tricks about this crate.**\nFor further help using this crate you can [open a new discussion](https://github.com/jonasbb/serde_with/discussions/new) or ask on [users.rust-lang.org](https://users.rust-lang.org/). For bugs, please open a [new issue](https://github.com/jonasbb/serde_with/issues/new) on GitHub.\n## [\u00a7](https://docs.rs/serde_with/latest/serde_with/#use-serde_with-in-your-project)Use `serde_with` in your Project\n```\n# Add the current version to your Cargo.toml\ncargo add serde_with\n```\n\nThe crate contains different features for integration with other common crates. Check the [feature flags](https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html) section for information about all available features.\n## [\u00a7](https://docs.rs/serde_with/latest/serde_with/#examples)Examples\nAnnotate your struct or enum to enable the custom de/serializer. The `#[serde_as]` attribute must be placed _before_ the `#[derive]`.\nThe `as` is analogous to the `with` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., `Vec<DisplayFromStr>`. The default de/serialization behavior can be restored by using `_` as a placeholder, e.g., `BTreeMap<_, DisplayFromStr>`.\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#displayfromstr)`DisplayFromStr`\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  // Serialize with Display, deserialize with FromStr\n  #[serde_as(as = \"DisplayFromStr\")]\n  bar: u8,\n}\n// This will serialize\nFoo {bar: 12}\n// into this JSON\n{\"bar\": \"12\"}\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays)Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The `serde_as` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, `[u8; N]` (aka, bytes) can use the specialized `\"Bytes\"` for efficiency much like the `serde_bytes` crate.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/um0xyi)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Arrays<const N: usize, const M: usize> {\n  #[serde_as(as = \"[_; N]\")]\n  constgeneric: [bool; N],\n  #[serde_as(as = \"Box<[[_; 64]; N]>\")]\n  nested: Box<[[u8; 64]; N]>,\n  #[serde_as(as = \"Option<[_; M]>\")]\n  optional: Option<[u8; M]>,\n  #[serde_as(as = \"Bytes\")]\n  bytes: [u8; M],\n}\n// This allows us to serialize a struct like this\nlet arrays: Arrays<100, 128> = Arrays {\n  constgeneric: [true; 100],\n  nested: Box::new([[111; 64]; 100]),\n  optional: Some([222; 128]),\n  bytes: [0x42; 128],\n};\nassert!(serde_json::to_string(&arrays).is_ok());\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#skip_serializing_none)`skip_serializing_none`\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The `#[skip_serializing_none]` attribute must be placed _before_ the `#[derive]`.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/xr1tm0)\n```\n#[skip_serializing_none]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  a: Option<usize>,\n  b: Option<usize>,\n  c: Option<usize>,\n  d: Option<usize>,\n  e: Option<usize>,\n  f: Option<usize>,\n  g: Option<usize>,\n}\n// This will serialize\nFoo {a: None, b: None, c: None, d: Some(4), e: None, f: None, g: Some(7)}\n// into this JSON\n{\"d\": 4, \"g\": 7}\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#advanced-serde_as-usage)Advanced `serde_as` usage\nThis example is mainly supposed to highlight the flexibility of the `serde_as` annotation compared to [serde\u2019s `with` annotation](https://serde.rs/field-attrs.html#with). More details about `serde_as` can be found in the [user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html).\n```\nuse std::time::Duration;\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nenum Foo {\n  Durations(\n    // Serialize them into a list of number as seconds\n    #[serde_as(as = \"Vec<DurationSeconds>\")]\n    Vec<Duration>,\n  ),\n  Bytes {\n    // We can treat a Vec like a map with duplicates.\n    // JSON only allows string keys, so convert i32 to strings\n    // The bytes will be hex encoded\n    #[serde_as(as = \"Map<DisplayFromStr, Hex>\")]\n    bytes: Vec<(i32, Vec<u8>)>,\n  }\n}\n// This will serialize\nFoo::Durations(\n  vec![Duration::new(5, 0), Duration::new(3600, 0), Duration::new(0, 0)]\n)\n// into this JSON\n{\n  \"Durations\": [5, 3600, 0]\n}\n// and serializes\nFoo::Bytes {\n  bytes: vec![\n    (1, vec![0, 1, 2]),\n    (-100, vec![100, 200, 255]),\n    (1, vec![0, 111, 222]),\n  ],\n}\n// into this JSON\n{\n  \"Bytes\": {\n    \"bytes\": {\n      \"1\": \"000102\",\n      \"-100\": \"64c8ff\",\n      \"1\": \"006fde\"\n    }\n  }\n}\n```\n\n## Modules[\u00a7](https://docs.rs/serde_with/latest/serde_with/#modules)\n\n[base64](https://docs.rs/serde_with/latest/serde_with/base64/index.html \"mod serde_with::base64\")`base64`\n    De/Serialization of base64 encoded bytes\n\n[chrono](https://docs.rs/serde_with/latest/serde_with/chrono/index.html \"mod serde_with::chrono\")`chrono`\n    Legacy export of the [`chrono_0_4`](https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html \"mod serde_with::chrono_0_4\") module.\n\n[chrono_0_4](https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html \"mod serde_with::chrono_0_4\")`chrono_0_4`\n    De/Serialization of [chrono](https://docs.rs/chrono/) types\n\n[de](https://docs.rs/serde_with/latest/serde_with/de/index.html \"mod serde_with::de\")\n    Module for [`DeserializeAs`](https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html \"trait serde_with::DeserializeAs\") implementations\n\n[formats](https://docs.rs/serde_with/latest/serde_with/formats/index.html \"mod serde_with::formats\")\n    Specify the format and how lenient the deserialization is\n\n[guide](https://docs.rs/serde_with/latest/serde_with/guide/index.html \"mod serde_with::guide\")\n    `serde_with` User Guide\n\n[hex](https://docs.rs/serde_with/latest/serde_with/hex/index.html \"mod serde_with::hex\")`hex`\n    De/Serialization of hexadecimal encoded bytes\n\n[json](https://docs.rs/serde_with/latest/serde_with/json/index.html \"mod serde_with::json\")`json`\n    De/Serialization of JSON\n\n[rust](https://docs.rs/serde_with/latest/serde_with/rust/index.html \"mod serde_with::rust\")\n    De/Serialization for Rust\u2019s builtin and std types\n\n[schemars_0_8](https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html \"mod serde_with::schemars_0_8\")`schemars_0_8`\n    Integration with [schemars v0.8](https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html \"mod serde_with::schemars_0_8\").\n\n[schemars_0_9](https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html \"mod serde_with::schemars_0_9\")`schemars_0_9`\n    Integration with [schemars v0.9](https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html \"mod serde_with::schemars_0_9\").\n\n[ser](https://docs.rs/serde_with/latest/serde_with/ser/index.html \"mod serde_with::ser\")\n    Module for [`SerializeAs`](https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html \"trait serde_with::SerializeAs\") implementations\n\n[time_0_3](https://docs.rs/serde_with/latest/serde_with/time_0_3/index.html \"mod serde_with::time_0_3\")`time_0_3`\n    De/Serialization of [time v0.3](https://docs.rs/time/0.3/) types\n## Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#macros)\n\n[flattened_maybe](https://docs.rs/serde_with/latest/serde_with/macro.flattened_maybe.html \"macro serde_with::flattened_maybe\")\n    Support deserializing from flattened and non-flattened representation\n\n[serde_conv](https://docs.rs/serde_with/latest/serde_with/macro.serde_conv.html \"macro serde_with::serde_conv\")\n    Create new conversion adapters from functions\n\n[with_prefix](https://docs.rs/serde_with/latest/serde_with/macro.with_prefix.html \"macro serde_with::with_prefix\")\n    Serialize with an added prefix on every field name and deserialize by trimming away the prefix.\n\n[with_suffix](https://docs.rs/serde_with/latest/serde_with/macro.with_suffix.html \"macro serde_with::with_suffix\")\n    Serialize with an added suffix on every field name and deserialize by trimming away the suffix.\n## Structs[\u00a7](https://docs.rs/serde_with/latest/serde_with/#structs)\n\n[As](https://docs.rs/serde_with/latest/serde_with/struct.As.html \"struct serde_with::As\")\n    Adapter to convert from `serde_as` to the serde traits.\n\n[BoolFromInt](https://docs.rs/serde_with/latest/serde_with/struct.BoolFromInt.html \"struct serde_with::BoolFromInt\")\n    Deserialize a boolean from a number\n\n[BorrowCow](https://docs.rs/serde_with/latest/serde_with/struct.BorrowCow.html \"struct serde_with::BorrowCow\")\n    Borrow `Cow` data during deserialization when possible.\n\n[Bytes](https://docs.rs/serde_with/latest/serde_with/struct.Bytes.html \"struct serde_with::Bytes\")\n    Optimized handling of owned and borrowed byte representations.\n\n[BytesOrString](https://docs.rs/serde_with/latest/serde_with/struct.BytesOrString.html \"struct serde_with::BytesOrString\")\n    Deserialize from bytes or string\n\n[DefaultOnError](https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnError.html \"struct serde_with::DefaultOnError\")\n    Deserialize value and return [`Default`](https://doc.rust-lang.org/core/default/trait.Default.html \"trait core::default::Default\") on error\n\n[DefaultOnNull](https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnNull.html \"struct serde_with::DefaultOnNull\")\n    Deserialize [`Default`](https://doc.rust-lang.org/core/default/trait.Default.html \"trait core::default::Default\") from `null` values\n\n[DisplayFromStr](https://docs.rs/serde_with/latest/serde_with/struct.DisplayFromStr.html \"struct serde_with::DisplayFromStr\")\n    De/Serialize using [`Display`](https://doc.rust-lang.org/core/fmt/trait.Display.html \"trait core::fmt::Display\") and [`FromStr`](https://doc.rust-lang.org/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") implementation\n\n[DurationMicroSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSeconds.html \"struct serde_with::DurationMicroSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with micro-seconds as base unit.\n\n[DurationMicroSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSecondsWithFrac.html \"struct serde_with::DurationMicroSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with micro-seconds as base unit.\n\n[DurationMilliSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSeconds.html \"struct serde_with::DurationMilliSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with milli-seconds as base unit.\n\n[DurationMilliSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSecondsWithFrac.html \"struct serde_with::DurationMilliSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with milli-seconds as base unit.\n\n[DurationNanoSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSeconds.html \"struct serde_with::DurationNanoSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with nano-seconds as base unit.\n\n[DurationNanoSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSecondsWithFrac.html \"struct serde_with::DurationNanoSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with nano-seconds as base unit.\n\n[DurationSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\")\n    De/Serialize Durations as number of seconds.\n\n[DurationSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\")\n    De/Serialize Durations as number of seconds.\n\n[EnumMap](https://docs.rs/serde_with/latest/serde_with/struct.EnumMap.html \"struct serde_with::EnumMap\")\n    Represent a list of enum values as a map.\n\n[FromInto](https://docs.rs/serde_with/latest/serde_with/struct.FromInto.html \"struct serde_with::FromInto\")\n    Serialize value by converting to/from a proxy type with serde support.\n\n[FromIntoRef](https://docs.rs/serde_with/latest/serde_with/struct.FromIntoRef.html \"struct serde_with::FromIntoRef\")\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\n[IfIsHumanReadable](https://docs.rs/serde_with/latest/serde_with/struct.IfIsHumanReadable.html \"struct serde_with::IfIsHumanReadable\")\n    Use the first format if [`De/Serializer::is_human_readable`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serializer.html#method.is_human_readable \"method serde::ser::Serializer::is_human_readable\"), otherwise use the second\n\n[KeyValueMap](https://docs.rs/serde_with/latest/serde_with/struct.KeyValueMap.html \"struct serde_with::KeyValueMap\")\n    Convert `Vec` elements into key-value map entries\n\n[Map](https://docs.rs/serde_with/latest/serde_with/struct.Map.html \"struct serde_with::Map\")\n    This serializes a list of tuples into a map\n\n[MapFirstKeyWins](https://docs.rs/serde_with/latest/serde_with/struct.MapFirstKeyWins.html \"struct serde_with::MapFirstKeyWins\")\n    Ensure that the first key is taken, if duplicate keys exist\n\n[MapPreventDuplicates](https://docs.rs/serde_with/latest/serde_with/struct.MapPreventDuplicates.html \"struct serde_with::MapPreventDuplicates\")\n    Ensure no duplicate keys exist in a map.\n\n[MapSkipError](https://docs.rs/serde_with/latest/serde_with/struct.MapSkipError.html \"struct serde_with::MapSkipError\")\n    Deserialize a map, skipping keys and values which fail to deserialize.\n\n[NoneAsEmptyString](https://docs.rs/serde_with/latest/serde_with/struct.NoneAsEmptyString.html \"struct serde_with::NoneAsEmptyString\")\n    De/Serialize a [`Option<String>`](https://doc.rust-lang.org/core/option/enum.Option.html \"enum core::option::Option\") type while transforming the empty string to [`None`](https://doc.rust-lang.org/core/option/enum.Option.html#variant.None \"variant core::option::Option::None\")\n\n[OneOrMany](https://docs.rs/serde_with/latest/serde_with/struct.OneOrMany.html \"struct serde_with::OneOrMany\")\n    Deserialize one or many elements\n\n[PickFirst](https://docs.rs/serde_with/latest/serde_with/struct.PickFirst.html \"struct serde_with::PickFirst\")\n    Try multiple deserialization options until one succeeds.\n\n[Same](https://docs.rs/serde_with/latest/serde_with/struct.Same.html \"struct serde_with::Same\")\n    Adapter to convert from `serde_as` to the serde traits.\n\n[Schema](https://docs.rs/serde_with/latest/serde_with/struct.Schema.html \"struct serde_with::Schema\")\n    Helper for implementing [`JsonSchema`](https://docs.rs/schemars/0.9.0/x86_64-unknown-linux-gnu/schemars/trait.JsonSchema.html \"trait schemars::JsonSchema\") on serializers whose output depends on the type of the concrete field.\n\n[Seq](https://docs.rs/serde_with/latest/serde_with/struct.Seq.html \"struct serde_with::Seq\")\n    De/Serialize a Map into a list of tuples\n\n[SetLastValueWins](https://docs.rs/serde_with/latest/serde_with/struct.SetLastValueWins.html \"struct serde_with::SetLastValueWins\")\n    Ensure that the last value is taken, if duplicate values exist\n\n[SetPreventDuplicates](https://docs.rs/serde_with/latest/serde_with/struct.SetPreventDuplicates.html \"struct serde_with::SetPreventDuplicates\")\n    Ensure no duplicate values exist in a set.\n\n[StringWithSeparator](https://docs.rs/serde_with/latest/serde_with/struct.StringWithSeparator.html \"struct serde_with::StringWithSeparator\")\n    De/Serialize a delimited collection using [`Display`](https://doc.rust-lang.org/core/fmt/trait.Display.html \"trait core::fmt::Display\") and [`FromStr`](https://doc.rust-lang.org/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") implementation\n\n[TimestampMicroSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSeconds.html \"struct serde_with::TimestampMicroSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with micro-seconds as base unit.\n\n[TimestampMicroSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSecondsWithFrac.html \"struct serde_with::TimestampMicroSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with micro-seconds as base unit.\n\n[TimestampMilliSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSeconds.html \"struct serde_with::TimestampMilliSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with milli-seconds as base unit.\n\n[TimestampMilliSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSecondsWithFrac.html \"struct serde_with::TimestampMilliSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with milli-seconds as base unit.\n\n[TimestampNanoSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSeconds.html \"struct serde_with::TimestampNanoSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with nano-seconds as base unit.\n\n[TimestampNanoSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSecondsWithFrac.html \"struct serde_with::TimestampNanoSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with nano-seconds as base unit.\n\n[TimestampSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\")\n    De/Serialize timestamps as seconds since the UNIX epoch\n\n[TimestampSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\")\n    De/Serialize timestamps as seconds since the UNIX epoch\n\n[TryFromInto](https://docs.rs/serde_with/latest/serde_with/struct.TryFromInto.html \"struct serde_with::TryFromInto\")\n    Serialize value by converting to/from a proxy type with serde support.\n\n[TryFromIntoRef](https://docs.rs/serde_with/latest/serde_with/struct.TryFromIntoRef.html \"struct serde_with::TryFromIntoRef\")\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\n[VecSkipError](https://docs.rs/serde_with/latest/serde_with/struct.VecSkipError.html \"struct serde_with::VecSkipError\")\n    Deserialize a sequence into `Vec<T>`, skipping elements which fail to deserialize.\n## Traits[\u00a7](https://docs.rs/serde_with/latest/serde_with/#traits)\n\n[DeserializeAs](https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html \"trait serde_with::DeserializeAs\")\n    A **data structure** that can be deserialized from any data format supported by Serde, analogue to [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\").\n\n[SerializeAs](https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html \"trait serde_with::SerializeAs\")\n    A **data structure** that can be serialized into any data format supported by Serde, analogue to [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\").\n## Attribute Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#attributes)\n\n[apply](https://docs.rs/serde_with/latest/serde_with/attr.apply.html \"attr serde_with::apply\")`macros`\n    Apply attributes to all fields with matching types\n\n[serde_as](https://docs.rs/serde_with/latest/serde_with/attr.serde_as.html \"attr serde_with::serde_as\")`macros`\n    Convenience macro to use the [`serde_as`](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html) system.\n\n[skip_serializing_none](https://docs.rs/serde_with/latest/serde_with/attr.skip_serializing_none.html \"attr serde_with::skip_serializing_none\")`macros`\n    Add `skip_serializing_if` annotations to [`Option`] fields.\n## Derive Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#derives)\n\n[DeserializeFromStr](https://docs.rs/serde_with/latest/serde_with/derive.DeserializeFromStr.html \"derive serde_with::DeserializeFromStr\")`macros`\n    Deserialize value by using its [`FromStr`](std::str::FromStr) implementation\n\n[SerializeDisplay](https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplay.html \"derive serde_with::SerializeDisplay\")`macros`\n    Serialize value by using it\u2019s [`Display`](std::fmt::Display) implementation\n\n[SerializeDisplayAlt](https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplayAlt.html \"derive serde_with::SerializeDisplayAlt\")`macros`\n    Serialize value by using its [`Display`](std::fmt::Display) implementation with the \u201calternate\u201d (`#`) format flag\n",
            "markdown_with_citations": "[](https://docs.rs/serde_with/latest/serde_with/all.html \"show sidebar\")\n# Crate serde_withCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![crates.io badge\u27e84\u27e9](https://crates.io/crates/serde_with/) ![Build Status\u27e85\u27e9](https://github.com/jonasbb/serde_with) ![codecov\u27e86\u27e9](https://codecov.io/gh/jonasbb/serde_with) ![CII Best Practices\u27e87\u27e9](https://bestpractices.coreinfrastructure.org/projects/4322) ![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with serde\u2019s `with` annotation\u27e89\u27e9 and with the improved `serde_as`\u27e810\u27e9-annotation. Some common use cases are:\n  * De/Serializing a type using the `Display` and `FromStr` traits, e.g., for `u8`, `url::Url`, or `mime::Mime`. Check `DisplayFromStr`\u27e811\u27e9 for details.\n  * Support for arrays larger than 32 elements or using const generics. With `serde_as` large arrays are supported, even if they are nested in other types. `[bool; 64]`, `Option<[u8; M]>`, and `Box<[[u8; 64]; N]>` are all supported, as this examples shows\u27e812\u27e9.\n  * Skip serializing all empty `Option` types with [`#[skip_serializing_none]`](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using `with_prefix!`\u27e813\u27e9 / `with_suffix!`\u27e814\u27e9.\n  * Deserialize a comma separated list like `#hash,#tags,#are,#great` into a `Vec<String>`. Check the documentation for `serde_with::StringWithSeparator::<CommaSeparator, T>`\u27e815\u27e9.\n\n\n### \u00a7\u27e816\u27e9Getting Help\n**Check out theuser guide\u27e817\u27e9 to find out more tips and tricks about this crate.**\nFor further help using this crate you can open a new discussion\u27e818\u27e9 or ask on users.rust-lang.org\u27e819\u27e9. For bugs, please open a new issue\u27e820\u27e9 on GitHub.\n## \u00a7\u27e821\u27e9Use `serde_with` in your Project\n```\n# Add the current version to your Cargo.toml\ncargo add serde_with\n```\n\nThe crate contains different features for integration with other common crates. Check the feature flags\u27e822\u27e9 section for information about all available features.\n## \u00a7\u27e823\u27e9Examples\nAnnotate your struct or enum to enable the custom de/serializer. The `#[serde_as]` attribute must be placed _before_ the `#[derive]`.\nThe `as` is analogous to the `with` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., `Vec<DisplayFromStr>`. The default de/serialization behavior can be restored by using `_` as a placeholder, e.g., `BTreeMap<_, DisplayFromStr>`.\n### \u00a7\u27e824\u27e9`DisplayFromStr`\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/py7ida)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  // Serialize with Display, deserialize with FromStr\n  #[serde_as(as = \"DisplayFromStr\")]\n  bar: u8,\n}\n// This will serialize\nFoo {bar: 12}\n// into this JSON\n{\"bar\": \"12\"}\n```\n\n### \u00a7\u27e812\u27e9Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The `serde_as` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, `[u8; N]` (aka, bytes) can use the specialized `\"Bytes\"` for efficiency much like the `serde_bytes` crate.\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/um0xyi)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Arrays<const N: usize, const M: usize> {\n  #[serde_as(as = \"[_; N]\")]\n  constgeneric: [bool; N],\n  #[serde_as(as = \"Box<[[_; 64]; N]>\")]\n  nested: Box<[[u8; 64]; N]>,\n  #[serde_as(as = \"Option<[_; M]>\")]\n  optional: Option<[u8; M]>,\n  #[serde_as(as = \"Bytes\")]\n  bytes: [u8; M],\n}\n// This allows us to serialize a struct like this\nlet arrays: Arrays<100, 128> = Arrays {\n  constgeneric: [true; 100],\n  nested: Box::new([[111; 64]; 100]),\n  optional: Some([222; 128]),\n  bytes: [0x42; 128],\n};\nassert!(serde_json::to_string(&arrays).is_ok());\n```\n\n### \u00a7\u27e825\u27e9`skip_serializing_none`\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The `#[skip_serializing_none]` attribute must be placed _before_ the `#[derive]`.\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/xr1tm0)\n```\n#[skip_serializing_none]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  a: Option<usize>,\n  b: Option<usize>,\n  c: Option<usize>,\n  d: Option<usize>,\n  e: Option<usize>,\n  f: Option<usize>,\n  g: Option<usize>,\n}\n// This will serialize\nFoo {a: None, b: None, c: None, d: Some(4), e: None, f: None, g: Some(7)}\n// into this JSON\n{\"d\": 4, \"g\": 7}\n```\n\n### \u00a7\u27e826\u27e9Advanced `serde_as` usage\nThis example is mainly supposed to highlight the flexibility of the `serde_as` annotation compared to serde\u2019s `with` annotation\u27e89\u27e9. More details about `serde_as` can be found in the user guide\u27e817\u27e9.\n```\nuse std::time::Duration;\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nenum Foo {\n  Durations(\n    // Serialize them into a list of number as seconds\n    #[serde_as(as = \"Vec<DurationSeconds>\")]\n    Vec<Duration>,\n  ),\n  Bytes {\n    // We can treat a Vec like a map with duplicates.\n    // JSON only allows string keys, so convert i32 to strings\n    // The bytes will be hex encoded\n    #[serde_as(as = \"Map<DisplayFromStr, Hex>\")]\n    bytes: Vec<(i32, Vec<u8>)>,\n  }\n}\n// This will serialize\nFoo::Durations(\n  vec![Duration::new(5, 0), Duration::new(3600, 0), Duration::new(0, 0)]\n)\n// into this JSON\n{\n  \"Durations\": [5, 3600, 0]\n}\n// and serializes\nFoo::Bytes {\n  bytes: vec![\n    (1, vec![0, 1, 2]),\n    (-100, vec![100, 200, 255]),\n    (1, vec![0, 111, 222]),\n  ],\n}\n// into this JSON\n{\n  \"Bytes\": {\n    \"bytes\": {\n      \"1\": \"000102\",\n      \"-100\": \"64c8ff\",\n      \"1\": \"006fde\"\n    }\n  }\n}\n```\n\n## Modules\u00a7\u27e827\u27e9\n\nbase64\u27e828\u27e9`base64`\n    De/Serialization of base64 encoded bytes\n\nchrono\u27e829\u27e9`chrono`\n    Legacy export of the `chrono_0_4`\u27e830\u27e9 module.\n\nchrono_0_4\u27e830\u27e9`chrono_0_4`\n    De/Serialization of chrono\u27e831\u27e9 types\n\nde\u27e832\u27e9\n    Module for `DeserializeAs`\u27e833\u27e9 implementations\n\nformats\u27e834\u27e9\n    Specify the format and how lenient the deserialization is\n\nguide\u27e835\u27e9\n    `serde_with` User Guide\n\nhex\u27e836\u27e9`hex`\n    De/Serialization of hexadecimal encoded bytes\n\njson\u27e837\u27e9`json`\n    De/Serialization of JSON\n\nrust\u27e838\u27e9\n    De/Serialization for Rust\u2019s builtin and std types\n\nschemars_0_8\u27e839\u27e9`schemars_0_8`\n    Integration with schemars v0.8\u27e839\u27e9.\n\nschemars_0_9\u27e840\u27e9`schemars_0_9`\n    Integration with schemars v0.9\u27e840\u27e9.\n\nser\u27e841\u27e9\n    Module for `SerializeAs`\u27e842\u27e9 implementations\n\ntime_0_3\u27e843\u27e9`time_0_3`\n    De/Serialization of time v0.3\u27e844\u27e9 types\n## Macros\u00a7\u27e845\u27e9\n\nflattened_maybe\u27e846\u27e9\n    Support deserializing from flattened and non-flattened representation\n\nserde_conv\u27e847\u27e9\n    Create new conversion adapters from functions\n\nwith_prefix\u27e848\u27e9\n    Serialize with an added prefix on every field name and deserialize by trimming away the prefix.\n\nwith_suffix\u27e849\u27e9\n    Serialize with an added suffix on every field name and deserialize by trimming away the suffix.\n## Structs\u00a7\u27e850\u27e9\n\nAs\u27e851\u27e9\n    Adapter to convert from `serde_as` to the serde traits.\n\nBoolFromInt\u27e852\u27e9\n    Deserialize a boolean from a number\n\nBorrowCow\u27e853\u27e9\n    Borrow `Cow` data during deserialization when possible.\n\nBytes\u27e854\u27e9\n    Optimized handling of owned and borrowed byte representations.\n\nBytesOrString\u27e855\u27e9\n    Deserialize from bytes or string\n\nDefaultOnError\u27e856\u27e9\n    Deserialize value and return `Default`\u27e857\u27e9 on error\n\nDefaultOnNull\u27e858\u27e9\n    Deserialize `Default`\u27e857\u27e9 from `null` values\n\nDisplayFromStr\u27e859\u27e9\n    De/Serialize using `Display`\u27e860\u27e9 and `FromStr`\u27e861\u27e9 implementation\n\nDurationMicroSeconds\u27e862\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with micro-seconds as base unit.\n\nDurationMicroSecondsWithFrac\u27e864\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with micro-seconds as base unit.\n\nDurationMilliSeconds\u27e866\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with milli-seconds as base unit.\n\nDurationMilliSecondsWithFrac\u27e867\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with milli-seconds as base unit.\n\nDurationNanoSeconds\u27e868\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with nano-seconds as base unit.\n\nDurationNanoSecondsWithFrac\u27e869\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with nano-seconds as base unit.\n\nDurationSeconds\u27e863\u27e9\n    De/Serialize Durations as number of seconds.\n\nDurationSecondsWithFrac\u27e865\u27e9\n    De/Serialize Durations as number of seconds.\n\nEnumMap\u27e870\u27e9\n    Represent a list of enum values as a map.\n\nFromInto\u27e871\u27e9\n    Serialize value by converting to/from a proxy type with serde support.\n\nFromIntoRef\u27e872\u27e9\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\nIfIsHumanReadable\u27e873\u27e9\n    Use the first format if `De/Serializer::is_human_readable`\u27e874\u27e9, otherwise use the second\n\nKeyValueMap\u27e875\u27e9\n    Convert `Vec` elements into key-value map entries\n\nMap\u27e876\u27e9\n    This serializes a list of tuples into a map\n\nMapFirstKeyWins\u27e877\u27e9\n    Ensure that the first key is taken, if duplicate keys exist\n\nMapPreventDuplicates\u27e878\u27e9\n    Ensure no duplicate keys exist in a map.\n\nMapSkipError\u27e879\u27e9\n    Deserialize a map, skipping keys and values which fail to deserialize.\n\nNoneAsEmptyString\u27e880\u27e9\n    De/Serialize a `Option<String>`\u27e881\u27e9 type while transforming the empty string to `None`\u27e882\u27e9\n\nOneOrMany\u27e883\u27e9\n    Deserialize one or many elements\n\nPickFirst\u27e884\u27e9\n    Try multiple deserialization options until one succeeds.\n\nSame\u27e885\u27e9\n    Adapter to convert from `serde_as` to the serde traits.\n\nSchema\u27e886\u27e9\n    Helper for implementing `JsonSchema`\u27e887\u27e9 on serializers whose output depends on the type of the concrete field.\n\nSeq\u27e888\u27e9\n    De/Serialize a Map into a list of tuples\n\nSetLastValueWins\u27e889\u27e9\n    Ensure that the last value is taken, if duplicate values exist\n\nSetPreventDuplicates\u27e890\u27e9\n    Ensure no duplicate values exist in a set.\n\nStringWithSeparator\u27e891\u27e9\n    De/Serialize a delimited collection using `Display`\u27e860\u27e9 and `FromStr`\u27e861\u27e9 implementation\n\nTimestampMicroSeconds\u27e892\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with micro-seconds as base unit.\n\nTimestampMicroSecondsWithFrac\u27e894\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with micro-seconds as base unit.\n\nTimestampMilliSeconds\u27e896\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with milli-seconds as base unit.\n\nTimestampMilliSecondsWithFrac\u27e897\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with milli-seconds as base unit.\n\nTimestampNanoSeconds\u27e898\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with nano-seconds as base unit.\n\nTimestampNanoSecondsWithFrac\u27e899\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with nano-seconds as base unit.\n\nTimestampSeconds\u27e893\u27e9\n    De/Serialize timestamps as seconds since the UNIX epoch\n\nTimestampSecondsWithFrac\u27e895\u27e9\n    De/Serialize timestamps as seconds since the UNIX epoch\n\nTryFromInto\u27e8100\u27e9\n    Serialize value by converting to/from a proxy type with serde support.\n\nTryFromIntoRef\u27e8101\u27e9\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\nVecSkipError\u27e8102\u27e9\n    Deserialize a sequence into `Vec<T>`, skipping elements which fail to deserialize.\n## Traits\u00a7\u27e8103\u27e9\n\nDeserializeAs\u27e833\u27e9\n    A **data structure** that can be deserialized from any data format supported by Serde, analogue to `Deserialize`\u27e8104\u27e9.\n\nSerializeAs\u27e842\u27e9\n    A **data structure** that can be serialized into any data format supported by Serde, analogue to `Serialize`\u27e8105\u27e9.\n## Attribute Macros\u00a7\u27e8106\u27e9\n\napply\u27e8107\u27e9`macros`\n    Apply attributes to all fields with matching types\n\nserde_as\u27e8108\u27e9`macros`\n    Convenience macro to use the `serde_as`\u27e817\u27e9 system.\n\nskip_serializing_none\u27e8109\u27e9`macros`\n    Add `skip_serializing_if` annotations to [`Option`] fields.\n## Derive Macros\u00a7\u27e8110\u27e9\n\nDeserializeFromStr\u27e8111\u27e9`macros`\n    Deserialize value by using its `FromStr`\u27e8112\u27e9 implementation\n\nSerializeDisplay\u27e8113\u27e9`macros`\n    Serialize value by using it\u2019s `Display`\u27e8114\u27e9 implementation\n\nSerializeDisplayAlt\u27e8115\u27e9`macros`\n    Serialize value by using its `Display`\u27e8114\u27e9 implementation with the \u201calternate\u201d (`#`) format flag\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_with/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_with/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_with/latest/src/serde_with/lib.rs.html#1-2603: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/serde_with.svg: ![crates.io badge\n\u27e85\u27e9 https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg: ![Build Status\n\u27e86\u27e9 https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg: ![codecov\n\u27e87\u27e9 https://bestpractices.coreinfrastructure.org/projects/4322/badge: ![CII Best Practices\n\u27e88\u27e9 https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange: ![Rustexplorer\n\u27e89\u27e9 https://serde.rs/field-attrs.html#with: serde\u2019s `with` annotation\n\u27e810\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html: `serde_as`\n\u27e811\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html: `DisplayFromStr`\n\u27e812\u27e9 https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays: this examples shows\n\u27e813\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html: `with_prefix!`\n\u27e814\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html: `with_suffix!`\n\u27e815\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html: `serde_with::StringWithSeparator::<CommaSeparator, T>`\n\u27e816\u27e9 https://docs.rs/serde_with/latest/serde_with/#getting-help: \u00a7\n\u27e817\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html: user guide\n\u27e818\u27e9 https://github.com/jonasbb/serde_with/discussions/new: open a new discussion\n\u27e819\u27e9 https://users.rust-lang.org/: users.rust-lang.org\n\u27e820\u27e9 https://github.com/jonasbb/serde_with/issues/new: new issue\n\u27e821\u27e9 https://docs.rs/serde_with/latest/serde_with/#use-serde_with-in-your-project: \u00a7\n\u27e822\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html: feature flags\n\u27e823\u27e9 https://docs.rs/serde_with/latest/serde_with/#examples: \u00a7\n\u27e824\u27e9 https://docs.rs/serde_with/latest/serde_with/#displayfromstr: \u00a7\n\u27e825\u27e9 https://docs.rs/serde_with/latest/serde_with/#skip_serializing_none: \u00a7\n\u27e826\u27e9 https://docs.rs/serde_with/latest/serde_with/#advanced-serde_as-usage: \u00a7\n\u27e827\u27e9 https://docs.rs/serde_with/latest/serde_with/#modules: \u00a7\n\u27e828\u27e9 https://docs.rs/serde_with/latest/serde_with/base64/index.html: mod serde_with::base64 - base64\n\u27e829\u27e9 https://docs.rs/serde_with/latest/serde_with/chrono/index.html: mod serde_with::chrono - chrono\n\u27e830\u27e9 https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html: mod serde_with::chrono_0_4 - `chrono_0_4`\n\u27e831\u27e9 https://docs.rs/chrono/: chrono\n\u27e832\u27e9 https://docs.rs/serde_with/latest/serde_with/de/index.html: mod serde_with::de - de\n\u27e833\u27e9 https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html: trait serde_with::DeserializeAs - `DeserializeAs`\n\u27e834\u27e9 https://docs.rs/serde_with/latest/serde_with/formats/index.html: mod serde_with::formats - formats\n\u27e835\u27e9 https://docs.rs/serde_with/latest/serde_with/guide/index.html: mod serde_with::guide - guide\n\u27e836\u27e9 https://docs.rs/serde_with/latest/serde_with/hex/index.html: mod serde_with::hex - hex\n\u27e837\u27e9 https://docs.rs/serde_with/latest/serde_with/json/index.html: mod serde_with::json - json\n\u27e838\u27e9 https://docs.rs/serde_with/latest/serde_with/rust/index.html: mod serde_with::rust - rust\n\u27e839\u27e9 https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html: mod serde_with::schemars_0_8 - schemars_0_8\n\u27e840\u27e9 https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html: mod serde_with::schemars_0_9 - schemars_0_9\n\u27e841\u27e9 https://docs.rs/serde_with/latest/serde_with/ser/index.html: mod serde_with::ser - ser\n\u27e842\u27e9 https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html: trait serde_with::SerializeAs - `SerializeAs`\n\u27e843\u27e9 https://docs.rs/serde_with/latest/serde_with/time_0_3/index.html: mod serde_with::time_0_3 - time_0_3\n\u27e844\u27e9 https://docs.rs/time/0.3/: time v0.3\n\u27e845\u27e9 https://docs.rs/serde_with/latest/serde_with/#macros: \u00a7\n\u27e846\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.flattened_maybe.html: macro serde_with::flattened_maybe - flattened_maybe\n\u27e847\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.serde_conv.html: macro serde_with::serde_conv - serde_conv\n\u27e848\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.with_prefix.html: macro serde_with::with_prefix - with_prefix\n\u27e849\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.with_suffix.html: macro serde_with::with_suffix - with_suffix\n\u27e850\u27e9 https://docs.rs/serde_with/latest/serde_with/#structs: \u00a7\n\u27e851\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.As.html: struct serde_with::As - As\n\u27e852\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BoolFromInt.html: struct serde_with::BoolFromInt - BoolFromInt\n\u27e853\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BorrowCow.html: struct serde_with::BorrowCow - BorrowCow\n\u27e854\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Bytes.html: struct serde_with::Bytes - Bytes\n\u27e855\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BytesOrString.html: struct serde_with::BytesOrString - BytesOrString\n\u27e856\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnError.html: struct serde_with::DefaultOnError - DefaultOnError\n\u27e857\u27e9 https://doc.rust-lang.org/core/default/trait.Default.html: trait core::default::Default - `Default`\n\u27e858\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnNull.html: struct serde_with::DefaultOnNull - DefaultOnNull\n\u27e859\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DisplayFromStr.html: struct serde_with::DisplayFromStr - DisplayFromStr\n\u27e860\u27e9 https://doc.rust-lang.org/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e861\u27e9 https://doc.rust-lang.org/core/str/traits/trait.FromStr.html: trait core::str::traits::FromStr - `FromStr`\n\u27e862\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSeconds.html: struct serde_with::DurationMicroSeconds - DurationMicroSeconds\n\u27e863\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html: struct serde_with::DurationSeconds - `DurationSeconds`\n\u27e864\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSecondsWithFrac.html: struct serde_with::DurationMicroSecondsWithFrac - DurationMicroSecondsWithFrac\n\u27e865\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html: struct serde_with::DurationSecondsWithFrac - `DurationSecondsWithFrac`\n\u27e866\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSeconds.html: struct serde_with::DurationMilliSeconds - DurationMilliSeconds\n\u27e867\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSecondsWithFrac.html: struct serde_with::DurationMilliSecondsWithFrac - DurationMilliSecondsWithFrac\n\u27e868\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSeconds.html: struct serde_with::DurationNanoSeconds - DurationNanoSeconds\n\u27e869\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSecondsWithFrac.html: struct serde_with::DurationNanoSecondsWithFrac - DurationNanoSecondsWithFrac\n\u27e870\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.EnumMap.html: struct serde_with::EnumMap - EnumMap\n\u27e871\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.FromInto.html: struct serde_with::FromInto - FromInto\n\u27e872\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.FromIntoRef.html: struct serde_with::FromIntoRef - FromIntoRef\n\u27e873\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.IfIsHumanReadable.html: struct serde_with::IfIsHumanReadable - IfIsHumanReadable\n\u27e874\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serializer.html#method.is_human_readable: method serde::ser::Serializer::is_human_readable - `De/Serializer::is_human_readable`\n\u27e875\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.KeyValueMap.html: struct serde_with::KeyValueMap - KeyValueMap\n\u27e876\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Map.html: struct serde_with::Map - Map\n\u27e877\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapFirstKeyWins.html: struct serde_with::MapFirstKeyWins - MapFirstKeyWins\n\u27e878\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapPreventDuplicates.html: struct serde_with::MapPreventDuplicates - MapPreventDuplicates\n\u27e879\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapSkipError.html: struct serde_with::MapSkipError - MapSkipError\n\u27e880\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.NoneAsEmptyString.html: struct serde_with::NoneAsEmptyString - NoneAsEmptyString\n\u27e881\u27e9 https://doc.rust-lang.org/core/option/enum.Option.html: enum core::option::Option - `Option<String>`\n\u27e882\u27e9 https://doc.rust-lang.org/core/option/enum.Option.html#variant.None: variant core::option::Option::None - `None`\n\u27e883\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.OneOrMany.html: struct serde_with::OneOrMany - OneOrMany\n\u27e884\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.PickFirst.html: struct serde_with::PickFirst - PickFirst\n\u27e885\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Same.html: struct serde_with::Same - Same\n\u27e886\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Schema.html: struct serde_with::Schema - Schema\n\u27e887\u27e9 https://docs.rs/schemars/0.9.0/x86_64-unknown-linux-gnu/schemars/trait.JsonSchema.html: trait schemars::JsonSchema - `JsonSchema`\n\u27e888\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Seq.html: struct serde_with::Seq - Seq\n\u27e889\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.SetLastValueWins.html: struct serde_with::SetLastValueWins - SetLastValueWins\n\u27e890\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.SetPreventDuplicates.html: struct serde_with::SetPreventDuplicates - SetPreventDuplicates\n\u27e891\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.StringWithSeparator.html: struct serde_with::StringWithSeparator - StringWithSeparator\n\u27e892\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSeconds.html: struct serde_with::TimestampMicroSeconds - TimestampMicroSeconds\n\u27e893\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html: struct serde_with::TimestampSeconds - `TimestampSeconds`\n\u27e894\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSecondsWithFrac.html: struct serde_with::TimestampMicroSecondsWithFrac - TimestampMicroSecondsWithFrac\n\u27e895\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html: struct serde_with::TimestampSecondsWithFrac - `TimestampSecondsWithFrac`\n\u27e896\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSeconds.html: struct serde_with::TimestampMilliSeconds - TimestampMilliSeconds\n\u27e897\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSecondsWithFrac.html: struct serde_with::TimestampMilliSecondsWithFrac - TimestampMilliSecondsWithFrac\n\u27e898\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSeconds.html: struct serde_with::TimestampNanoSeconds - TimestampNanoSeconds\n\u27e899\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSecondsWithFrac.html: struct serde_with::TimestampNanoSecondsWithFrac - TimestampNanoSecondsWithFrac\n\u27e8100\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TryFromInto.html: struct serde_with::TryFromInto - TryFromInto\n\u27e8101\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TryFromIntoRef.html: struct serde_with::TryFromIntoRef - TryFromIntoRef\n\u27e8102\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.VecSkipError.html: struct serde_with::VecSkipError - VecSkipError\n\u27e8103\u27e9 https://docs.rs/serde_with/latest/serde_with/#traits: \u00a7\n\u27e8104\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e8105\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e8106\u27e9 https://docs.rs/serde_with/latest/serde_with/#attributes: \u00a7\n\u27e8107\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.apply.html: attr serde_with::apply - apply\n\u27e8108\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.serde_as.html: attr serde_with::serde_as - serde_as\n\u27e8109\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.skip_serializing_none.html: attr serde_with::skip_serializing_none - skip_serializing_none\n\u27e8110\u27e9 https://docs.rs/serde_with/latest/serde_with/#derives: \u00a7\n\u27e8111\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.DeserializeFromStr.html: derive serde_with::DeserializeFromStr - DeserializeFromStr\n\u27e8112\u27e9 std::str::FromStr: `FromStr`\n\u27e8113\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplay.html: derive serde_with::SerializeDisplay - SerializeDisplay\n\u27e8114\u27e9 std::fmt::Display: `Display`\n\u27e8115\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplayAlt.html: derive serde_with::SerializeDisplayAlt - SerializeDisplayAlt\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "serde_with",
          "version": "3.13.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/serde_with/latest/serde_with/all.html \"show sidebar\")\n# Crate serde_withCopy item path\n[Settings](https://docs.rs/serde_with/latest/settings.html)\n[Help](https://docs.rs/serde_with/latest/help.html)\nSummary[Source](https://docs.rs/serde_with/latest/src/serde_with/lib.rs.html#1-2603)\nExpand description\n[![crates.io badge](https://img.shields.io/crates/v/serde_with.svg)](https://crates.io/crates/serde_with/) [![Build Status](https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg)](https://github.com/jonasbb/serde_with) [![codecov](https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg)](https://codecov.io/gh/jonasbb/serde_with) [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/4322/badge)](https://bestpractices.coreinfrastructure.org/projects/4322) [![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with [serde\u2019s `with` annotation](https://serde.rs/field-attrs.html#with) and with the improved [`serde_as`](https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html)-annotation. Some common use cases are:\n  * De/Serializing a type using the `Display` and `FromStr` traits, e.g., for `u8`, `url::Url`, or `mime::Mime`. Check [`DisplayFromStr`](https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html) for details.\n  * Support for arrays larger than 32 elements or using const generics. With `serde_as` large arrays are supported, even if they are nested in other types. `[bool; 64]`, `Option<[u8; M]>`, and `Box<[[u8; 64]; N]>` are all supported, as [this examples shows](https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays).\n  * Skip serializing all empty `Option` types with [`#[skip_serializing_none]`](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using [`with_prefix!`](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html) / [`with_suffix!`](https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html).\n  * Deserialize a comma separated list like `#hash,#tags,#are,#great` into a `Vec<String>`. Check the documentation for [`serde_with::StringWithSeparator::<CommaSeparator, T>`](https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html).\n\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#getting-help)Getting Help\n**Check out the[user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html) to find out more tips and tricks about this crate.**\nFor further help using this crate you can [open a new discussion](https://github.com/jonasbb/serde_with/discussions/new) or ask on [users.rust-lang.org](https://users.rust-lang.org/). For bugs, please open a [new issue](https://github.com/jonasbb/serde_with/issues/new) on GitHub.\n## [\u00a7](https://docs.rs/serde_with/latest/serde_with/#use-serde_with-in-your-project)Use `serde_with` in your Project\n```\n# Add the current version to your Cargo.toml\ncargo add serde_with\n```\n\nThe crate contains different features for integration with other common crates. Check the [feature flags](https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html) section for information about all available features.\n## [\u00a7](https://docs.rs/serde_with/latest/serde_with/#examples)Examples\nAnnotate your struct or enum to enable the custom de/serializer. The `#[serde_as]` attribute must be placed _before_ the `#[derive]`.\nThe `as` is analogous to the `with` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., `Vec<DisplayFromStr>`. The default de/serialization behavior can be restored by using `_` as a placeholder, e.g., `BTreeMap<_, DisplayFromStr>`.\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#displayfromstr)`DisplayFromStr`\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/py7ida)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  // Serialize with Display, deserialize with FromStr\n  #[serde_as(as = \"DisplayFromStr\")]\n  bar: u8,\n}\n// This will serialize\nFoo {bar: 12}\n// into this JSON\n{\"bar\": \"12\"}\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays)Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The `serde_as` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, `[u8; N]` (aka, bytes) can use the specialized `\"Bytes\"` for efficiency much like the `serde_bytes` crate.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/um0xyi)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Arrays<const N: usize, const M: usize> {\n  #[serde_as(as = \"[_; N]\")]\n  constgeneric: [bool; N],\n  #[serde_as(as = \"Box<[[_; 64]; N]>\")]\n  nested: Box<[[u8; 64]; N]>,\n  #[serde_as(as = \"Option<[_; M]>\")]\n  optional: Option<[u8; M]>,\n  #[serde_as(as = \"Bytes\")]\n  bytes: [u8; M],\n}\n// This allows us to serialize a struct like this\nlet arrays: Arrays<100, 128> = Arrays {\n  constgeneric: [true; 100],\n  nested: Box::new([[111; 64]; 100]),\n  optional: Some([222; 128]),\n  bytes: [0x42; 128],\n};\nassert!(serde_json::to_string(&arrays).is_ok());\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#skip_serializing_none)`skip_serializing_none`\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The `#[skip_serializing_none]` attribute must be placed _before_ the `#[derive]`.\n[![Rustexplorer](https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange)](https://www.rustexplorer.com/b/xr1tm0)\n```\n#[skip_serializing_none]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  a: Option<usize>,\n  b: Option<usize>,\n  c: Option<usize>,\n  d: Option<usize>,\n  e: Option<usize>,\n  f: Option<usize>,\n  g: Option<usize>,\n}\n// This will serialize\nFoo {a: None, b: None, c: None, d: Some(4), e: None, f: None, g: Some(7)}\n// into this JSON\n{\"d\": 4, \"g\": 7}\n```\n\n### [\u00a7](https://docs.rs/serde_with/latest/serde_with/#advanced-serde_as-usage)Advanced `serde_as` usage\nThis example is mainly supposed to highlight the flexibility of the `serde_as` annotation compared to [serde\u2019s `with` annotation](https://serde.rs/field-attrs.html#with). More details about `serde_as` can be found in the [user guide](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html).\n```\nuse std::time::Duration;\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nenum Foo {\n  Durations(\n    // Serialize them into a list of number as seconds\n    #[serde_as(as = \"Vec<DurationSeconds>\")]\n    Vec<Duration>,\n  ),\n  Bytes {\n    // We can treat a Vec like a map with duplicates.\n    // JSON only allows string keys, so convert i32 to strings\n    // The bytes will be hex encoded\n    #[serde_as(as = \"Map<DisplayFromStr, Hex>\")]\n    bytes: Vec<(i32, Vec<u8>)>,\n  }\n}\n// This will serialize\nFoo::Durations(\n  vec![Duration::new(5, 0), Duration::new(3600, 0), Duration::new(0, 0)]\n)\n// into this JSON\n{\n  \"Durations\": [5, 3600, 0]\n}\n// and serializes\nFoo::Bytes {\n  bytes: vec![\n    (1, vec![0, 1, 2]),\n    (-100, vec![100, 200, 255]),\n    (1, vec![0, 111, 222]),\n  ],\n}\n// into this JSON\n{\n  \"Bytes\": {\n    \"bytes\": {\n      \"1\": \"000102\",\n      \"-100\": \"64c8ff\",\n      \"1\": \"006fde\"\n    }\n  }\n}\n```\n\n## Modules[\u00a7](https://docs.rs/serde_with/latest/serde_with/#modules)\n\n[base64](https://docs.rs/serde_with/latest/serde_with/base64/index.html \"mod serde_with::base64\")`base64`\n    De/Serialization of base64 encoded bytes\n\n[chrono](https://docs.rs/serde_with/latest/serde_with/chrono/index.html \"mod serde_with::chrono\")`chrono`\n    Legacy export of the [`chrono_0_4`](https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html \"mod serde_with::chrono_0_4\") module.\n\n[chrono_0_4](https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html \"mod serde_with::chrono_0_4\")`chrono_0_4`\n    De/Serialization of [chrono](https://docs.rs/chrono/) types\n\n[de](https://docs.rs/serde_with/latest/serde_with/de/index.html \"mod serde_with::de\")\n    Module for [`DeserializeAs`](https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html \"trait serde_with::DeserializeAs\") implementations\n\n[formats](https://docs.rs/serde_with/latest/serde_with/formats/index.html \"mod serde_with::formats\")\n    Specify the format and how lenient the deserialization is\n\n[guide](https://docs.rs/serde_with/latest/serde_with/guide/index.html \"mod serde_with::guide\")\n    `serde_with` User Guide\n\n[hex](https://docs.rs/serde_with/latest/serde_with/hex/index.html \"mod serde_with::hex\")`hex`\n    De/Serialization of hexadecimal encoded bytes\n\n[json](https://docs.rs/serde_with/latest/serde_with/json/index.html \"mod serde_with::json\")`json`\n    De/Serialization of JSON\n\n[rust](https://docs.rs/serde_with/latest/serde_with/rust/index.html \"mod serde_with::rust\")\n    De/Serialization for Rust\u2019s builtin and std types\n\n[schemars_0_8](https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html \"mod serde_with::schemars_0_8\")`schemars_0_8`\n    Integration with [schemars v0.8](https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html \"mod serde_with::schemars_0_8\").\n\n[schemars_0_9](https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html \"mod serde_with::schemars_0_9\")`schemars_0_9`\n    Integration with [schemars v0.9](https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html \"mod serde_with::schemars_0_9\").\n\n[ser](https://docs.rs/serde_with/latest/serde_with/ser/index.html \"mod serde_with::ser\")\n    Module for [`SerializeAs`](https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html \"trait serde_with::SerializeAs\") implementations\n\n[time_0_3](https://docs.rs/serde_with/latest/serde_with/time_0_3/index.html \"mod serde_with::time_0_3\")`time_0_3`\n    De/Serialization of [time v0.3](https://docs.rs/time/0.3/) types\n## Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#macros)\n\n[flattened_maybe](https://docs.rs/serde_with/latest/serde_with/macro.flattened_maybe.html \"macro serde_with::flattened_maybe\")\n    Support deserializing from flattened and non-flattened representation\n\n[serde_conv](https://docs.rs/serde_with/latest/serde_with/macro.serde_conv.html \"macro serde_with::serde_conv\")\n    Create new conversion adapters from functions\n\n[with_prefix](https://docs.rs/serde_with/latest/serde_with/macro.with_prefix.html \"macro serde_with::with_prefix\")\n    Serialize with an added prefix on every field name and deserialize by trimming away the prefix.\n\n[with_suffix](https://docs.rs/serde_with/latest/serde_with/macro.with_suffix.html \"macro serde_with::with_suffix\")\n    Serialize with an added suffix on every field name and deserialize by trimming away the suffix.\n## Structs[\u00a7](https://docs.rs/serde_with/latest/serde_with/#structs)\n\n[As](https://docs.rs/serde_with/latest/serde_with/struct.As.html \"struct serde_with::As\")\n    Adapter to convert from `serde_as` to the serde traits.\n\n[BoolFromInt](https://docs.rs/serde_with/latest/serde_with/struct.BoolFromInt.html \"struct serde_with::BoolFromInt\")\n    Deserialize a boolean from a number\n\n[BorrowCow](https://docs.rs/serde_with/latest/serde_with/struct.BorrowCow.html \"struct serde_with::BorrowCow\")\n    Borrow `Cow` data during deserialization when possible.\n\n[Bytes](https://docs.rs/serde_with/latest/serde_with/struct.Bytes.html \"struct serde_with::Bytes\")\n    Optimized handling of owned and borrowed byte representations.\n\n[BytesOrString](https://docs.rs/serde_with/latest/serde_with/struct.BytesOrString.html \"struct serde_with::BytesOrString\")\n    Deserialize from bytes or string\n\n[DefaultOnError](https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnError.html \"struct serde_with::DefaultOnError\")\n    Deserialize value and return [`Default`](https://doc.rust-lang.org/core/default/trait.Default.html \"trait core::default::Default\") on error\n\n[DefaultOnNull](https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnNull.html \"struct serde_with::DefaultOnNull\")\n    Deserialize [`Default`](https://doc.rust-lang.org/core/default/trait.Default.html \"trait core::default::Default\") from `null` values\n\n[DisplayFromStr](https://docs.rs/serde_with/latest/serde_with/struct.DisplayFromStr.html \"struct serde_with::DisplayFromStr\")\n    De/Serialize using [`Display`](https://doc.rust-lang.org/core/fmt/trait.Display.html \"trait core::fmt::Display\") and [`FromStr`](https://doc.rust-lang.org/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") implementation\n\n[DurationMicroSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSeconds.html \"struct serde_with::DurationMicroSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with micro-seconds as base unit.\n\n[DurationMicroSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSecondsWithFrac.html \"struct serde_with::DurationMicroSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with micro-seconds as base unit.\n\n[DurationMilliSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSeconds.html \"struct serde_with::DurationMilliSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with milli-seconds as base unit.\n\n[DurationMilliSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSecondsWithFrac.html \"struct serde_with::DurationMilliSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with milli-seconds as base unit.\n\n[DurationNanoSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSeconds.html \"struct serde_with::DurationNanoSeconds\")\n    Equivalent to [`DurationSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\") with nano-seconds as base unit.\n\n[DurationNanoSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSecondsWithFrac.html \"struct serde_with::DurationNanoSecondsWithFrac\")\n    Equivalent to [`DurationSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\") with nano-seconds as base unit.\n\n[DurationSeconds](https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html \"struct serde_with::DurationSeconds\")\n    De/Serialize Durations as number of seconds.\n\n[DurationSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html \"struct serde_with::DurationSecondsWithFrac\")\n    De/Serialize Durations as number of seconds.\n\n[EnumMap](https://docs.rs/serde_with/latest/serde_with/struct.EnumMap.html \"struct serde_with::EnumMap\")\n    Represent a list of enum values as a map.\n\n[FromInto](https://docs.rs/serde_with/latest/serde_with/struct.FromInto.html \"struct serde_with::FromInto\")\n    Serialize value by converting to/from a proxy type with serde support.\n\n[FromIntoRef](https://docs.rs/serde_with/latest/serde_with/struct.FromIntoRef.html \"struct serde_with::FromIntoRef\")\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\n[IfIsHumanReadable](https://docs.rs/serde_with/latest/serde_with/struct.IfIsHumanReadable.html \"struct serde_with::IfIsHumanReadable\")\n    Use the first format if [`De/Serializer::is_human_readable`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serializer.html#method.is_human_readable \"method serde::ser::Serializer::is_human_readable\"), otherwise use the second\n\n[KeyValueMap](https://docs.rs/serde_with/latest/serde_with/struct.KeyValueMap.html \"struct serde_with::KeyValueMap\")\n    Convert `Vec` elements into key-value map entries\n\n[Map](https://docs.rs/serde_with/latest/serde_with/struct.Map.html \"struct serde_with::Map\")\n    This serializes a list of tuples into a map\n\n[MapFirstKeyWins](https://docs.rs/serde_with/latest/serde_with/struct.MapFirstKeyWins.html \"struct serde_with::MapFirstKeyWins\")\n    Ensure that the first key is taken, if duplicate keys exist\n\n[MapPreventDuplicates](https://docs.rs/serde_with/latest/serde_with/struct.MapPreventDuplicates.html \"struct serde_with::MapPreventDuplicates\")\n    Ensure no duplicate keys exist in a map.\n\n[MapSkipError](https://docs.rs/serde_with/latest/serde_with/struct.MapSkipError.html \"struct serde_with::MapSkipError\")\n    Deserialize a map, skipping keys and values which fail to deserialize.\n\n[NoneAsEmptyString](https://docs.rs/serde_with/latest/serde_with/struct.NoneAsEmptyString.html \"struct serde_with::NoneAsEmptyString\")\n    De/Serialize a [`Option<String>`](https://doc.rust-lang.org/core/option/enum.Option.html \"enum core::option::Option\") type while transforming the empty string to [`None`](https://doc.rust-lang.org/core/option/enum.Option.html#variant.None \"variant core::option::Option::None\")\n\n[OneOrMany](https://docs.rs/serde_with/latest/serde_with/struct.OneOrMany.html \"struct serde_with::OneOrMany\")\n    Deserialize one or many elements\n\n[PickFirst](https://docs.rs/serde_with/latest/serde_with/struct.PickFirst.html \"struct serde_with::PickFirst\")\n    Try multiple deserialization options until one succeeds.\n\n[Same](https://docs.rs/serde_with/latest/serde_with/struct.Same.html \"struct serde_with::Same\")\n    Adapter to convert from `serde_as` to the serde traits.\n\n[Schema](https://docs.rs/serde_with/latest/serde_with/struct.Schema.html \"struct serde_with::Schema\")\n    Helper for implementing [`JsonSchema`](https://docs.rs/schemars/0.9.0/x86_64-unknown-linux-gnu/schemars/trait.JsonSchema.html \"trait schemars::JsonSchema\") on serializers whose output depends on the type of the concrete field.\n\n[Seq](https://docs.rs/serde_with/latest/serde_with/struct.Seq.html \"struct serde_with::Seq\")\n    De/Serialize a Map into a list of tuples\n\n[SetLastValueWins](https://docs.rs/serde_with/latest/serde_with/struct.SetLastValueWins.html \"struct serde_with::SetLastValueWins\")\n    Ensure that the last value is taken, if duplicate values exist\n\n[SetPreventDuplicates](https://docs.rs/serde_with/latest/serde_with/struct.SetPreventDuplicates.html \"struct serde_with::SetPreventDuplicates\")\n    Ensure no duplicate values exist in a set.\n\n[StringWithSeparator](https://docs.rs/serde_with/latest/serde_with/struct.StringWithSeparator.html \"struct serde_with::StringWithSeparator\")\n    De/Serialize a delimited collection using [`Display`](https://doc.rust-lang.org/core/fmt/trait.Display.html \"trait core::fmt::Display\") and [`FromStr`](https://doc.rust-lang.org/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") implementation\n\n[TimestampMicroSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSeconds.html \"struct serde_with::TimestampMicroSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with micro-seconds as base unit.\n\n[TimestampMicroSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSecondsWithFrac.html \"struct serde_with::TimestampMicroSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with micro-seconds as base unit.\n\n[TimestampMilliSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSeconds.html \"struct serde_with::TimestampMilliSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with milli-seconds as base unit.\n\n[TimestampMilliSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSecondsWithFrac.html \"struct serde_with::TimestampMilliSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with milli-seconds as base unit.\n\n[TimestampNanoSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSeconds.html \"struct serde_with::TimestampNanoSeconds\")\n    Equivalent to [`TimestampSeconds`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\") with nano-seconds as base unit.\n\n[TimestampNanoSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSecondsWithFrac.html \"struct serde_with::TimestampNanoSecondsWithFrac\")\n    Equivalent to [`TimestampSecondsWithFrac`](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\") with nano-seconds as base unit.\n\n[TimestampSeconds](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html \"struct serde_with::TimestampSeconds\")\n    De/Serialize timestamps as seconds since the UNIX epoch\n\n[TimestampSecondsWithFrac](https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html \"struct serde_with::TimestampSecondsWithFrac\")\n    De/Serialize timestamps as seconds since the UNIX epoch\n\n[TryFromInto](https://docs.rs/serde_with/latest/serde_with/struct.TryFromInto.html \"struct serde_with::TryFromInto\")\n    Serialize value by converting to/from a proxy type with serde support.\n\n[TryFromIntoRef](https://docs.rs/serde_with/latest/serde_with/struct.TryFromIntoRef.html \"struct serde_with::TryFromIntoRef\")\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\n[VecSkipError](https://docs.rs/serde_with/latest/serde_with/struct.VecSkipError.html \"struct serde_with::VecSkipError\")\n    Deserialize a sequence into `Vec<T>`, skipping elements which fail to deserialize.\n## Traits[\u00a7](https://docs.rs/serde_with/latest/serde_with/#traits)\n\n[DeserializeAs](https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html \"trait serde_with::DeserializeAs\")\n    A **data structure** that can be deserialized from any data format supported by Serde, analogue to [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\").\n\n[SerializeAs](https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html \"trait serde_with::SerializeAs\")\n    A **data structure** that can be serialized into any data format supported by Serde, analogue to [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\").\n## Attribute Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#attributes)\n\n[apply](https://docs.rs/serde_with/latest/serde_with/attr.apply.html \"attr serde_with::apply\")`macros`\n    Apply attributes to all fields with matching types\n\n[serde_as](https://docs.rs/serde_with/latest/serde_with/attr.serde_as.html \"attr serde_with::serde_as\")`macros`\n    Convenience macro to use the [`serde_as`](https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html) system.\n\n[skip_serializing_none](https://docs.rs/serde_with/latest/serde_with/attr.skip_serializing_none.html \"attr serde_with::skip_serializing_none\")`macros`\n    Add `skip_serializing_if` annotations to [`Option`] fields.\n## Derive Macros[\u00a7](https://docs.rs/serde_with/latest/serde_with/#derives)\n\n[DeserializeFromStr](https://docs.rs/serde_with/latest/serde_with/derive.DeserializeFromStr.html \"derive serde_with::DeserializeFromStr\")`macros`\n    Deserialize value by using its [`FromStr`](std::str::FromStr) implementation\n\n[SerializeDisplay](https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplay.html \"derive serde_with::SerializeDisplay\")`macros`\n    Serialize value by using it\u2019s [`Display`](std::fmt::Display) implementation\n\n[SerializeDisplayAlt](https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplayAlt.html \"derive serde_with::SerializeDisplayAlt\")`macros`\n    Serialize value by using its [`Display`](std::fmt::Display) implementation with the \u201calternate\u201d (`#`) format flag\n",
            "markdown_with_citations": "[](https://docs.rs/serde_with/latest/serde_with/all.html \"show sidebar\")\n# Crate serde_withCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![crates.io badge\u27e84\u27e9](https://crates.io/crates/serde_with/) ![Build Status\u27e85\u27e9](https://github.com/jonasbb/serde_with) ![codecov\u27e86\u27e9](https://codecov.io/gh/jonasbb/serde_with) ![CII Best Practices\u27e87\u27e9](https://bestpractices.coreinfrastructure.org/projects/4322) ![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/py7ida)\nThis crate provides custom de/serialization helpers to use in combination with serde\u2019s `with` annotation\u27e89\u27e9 and with the improved `serde_as`\u27e810\u27e9-annotation. Some common use cases are:\n  * De/Serializing a type using the `Display` and `FromStr` traits, e.g., for `u8`, `url::Url`, or `mime::Mime`. Check `DisplayFromStr`\u27e811\u27e9 for details.\n  * Support for arrays larger than 32 elements or using const generics. With `serde_as` large arrays are supported, even if they are nested in other types. `[bool; 64]`, `Option<[u8; M]>`, and `Box<[[u8; 64]; N]>` are all supported, as this examples shows\u27e812\u27e9.\n  * Skip serializing all empty `Option` types with [`#[skip_serializing_none]`](https://docs.rs/serde_with/3.13.0/serde_with/attr.skip_serializing_none.html).\n  * Apply a prefix / suffix to each field name of a struct, without changing the de/serialize implementations of the struct using `with_prefix!`\u27e813\u27e9 / `with_suffix!`\u27e814\u27e9.\n  * Deserialize a comma separated list like `#hash,#tags,#are,#great` into a `Vec<String>`. Check the documentation for `serde_with::StringWithSeparator::<CommaSeparator, T>`\u27e815\u27e9.\n\n\n### \u00a7\u27e816\u27e9Getting Help\n**Check out theuser guide\u27e817\u27e9 to find out more tips and tricks about this crate.**\nFor further help using this crate you can open a new discussion\u27e818\u27e9 or ask on users.rust-lang.org\u27e819\u27e9. For bugs, please open a new issue\u27e820\u27e9 on GitHub.\n## \u00a7\u27e821\u27e9Use `serde_with` in your Project\n```\n# Add the current version to your Cargo.toml\ncargo add serde_with\n```\n\nThe crate contains different features for integration with other common crates. Check the feature flags\u27e822\u27e9 section for information about all available features.\n## \u00a7\u27e823\u27e9Examples\nAnnotate your struct or enum to enable the custom de/serializer. The `#[serde_as]` attribute must be placed _before_ the `#[derive]`.\nThe `as` is analogous to the `with` attribute of serde. You mirror the type structure of the field you want to de/serialize. You can specify converters for the inner types of a field, e.g., `Vec<DisplayFromStr>`. The default de/serialization behavior can be restored by using `_` as a placeholder, e.g., `BTreeMap<_, DisplayFromStr>`.\n### \u00a7\u27e824\u27e9`DisplayFromStr`\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/py7ida)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  // Serialize with Display, deserialize with FromStr\n  #[serde_as(as = \"DisplayFromStr\")]\n  bar: u8,\n}\n// This will serialize\nFoo {bar: 12}\n// into this JSON\n{\"bar\": \"12\"}\n```\n\n### \u00a7\u27e812\u27e9Large and const-generic arrays\nserde does not support arrays with more than 32 elements or using const-generics. The `serde_as` attribute allows circumventing this restriction, even for nested types and nested arrays.\nOn top of it, `[u8; N]` (aka, bytes) can use the specialized `\"Bytes\"` for efficiency much like the `serde_bytes` crate.\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/um0xyi)\n```\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nstruct Arrays<const N: usize, const M: usize> {\n  #[serde_as(as = \"[_; N]\")]\n  constgeneric: [bool; N],\n  #[serde_as(as = \"Box<[[_; 64]; N]>\")]\n  nested: Box<[[u8; 64]; N]>,\n  #[serde_as(as = \"Option<[_; M]>\")]\n  optional: Option<[u8; M]>,\n  #[serde_as(as = \"Bytes\")]\n  bytes: [u8; M],\n}\n// This allows us to serialize a struct like this\nlet arrays: Arrays<100, 128> = Arrays {\n  constgeneric: [true; 100],\n  nested: Box::new([[111; 64]; 100]),\n  optional: Some([222; 128]),\n  bytes: [0x42; 128],\n};\nassert!(serde_json::to_string(&arrays).is_ok());\n```\n\n### \u00a7\u27e825\u27e9`skip_serializing_none`\nThis situation often occurs with JSON, but other formats also support optional fields. If many fields are optional, putting the annotations on the structs can become tedious. The `#[skip_serializing_none]` attribute must be placed _before_ the `#[derive]`.\n![Rustexplorer\u27e88\u27e9](https://www.rustexplorer.com/b/xr1tm0)\n```\n#[skip_serializing_none]\n#[derive(Deserialize, Serialize)]\nstruct Foo {\n  a: Option<usize>,\n  b: Option<usize>,\n  c: Option<usize>,\n  d: Option<usize>,\n  e: Option<usize>,\n  f: Option<usize>,\n  g: Option<usize>,\n}\n// This will serialize\nFoo {a: None, b: None, c: None, d: Some(4), e: None, f: None, g: Some(7)}\n// into this JSON\n{\"d\": 4, \"g\": 7}\n```\n\n### \u00a7\u27e826\u27e9Advanced `serde_as` usage\nThis example is mainly supposed to highlight the flexibility of the `serde_as` annotation compared to serde\u2019s `with` annotation\u27e89\u27e9. More details about `serde_as` can be found in the user guide\u27e817\u27e9.\n```\nuse std::time::Duration;\n#[serde_as]\n#[derive(Deserialize, Serialize)]\nenum Foo {\n  Durations(\n    // Serialize them into a list of number as seconds\n    #[serde_as(as = \"Vec<DurationSeconds>\")]\n    Vec<Duration>,\n  ),\n  Bytes {\n    // We can treat a Vec like a map with duplicates.\n    // JSON only allows string keys, so convert i32 to strings\n    // The bytes will be hex encoded\n    #[serde_as(as = \"Map<DisplayFromStr, Hex>\")]\n    bytes: Vec<(i32, Vec<u8>)>,\n  }\n}\n// This will serialize\nFoo::Durations(\n  vec![Duration::new(5, 0), Duration::new(3600, 0), Duration::new(0, 0)]\n)\n// into this JSON\n{\n  \"Durations\": [5, 3600, 0]\n}\n// and serializes\nFoo::Bytes {\n  bytes: vec![\n    (1, vec![0, 1, 2]),\n    (-100, vec![100, 200, 255]),\n    (1, vec![0, 111, 222]),\n  ],\n}\n// into this JSON\n{\n  \"Bytes\": {\n    \"bytes\": {\n      \"1\": \"000102\",\n      \"-100\": \"64c8ff\",\n      \"1\": \"006fde\"\n    }\n  }\n}\n```\n\n## Modules\u00a7\u27e827\u27e9\n\nbase64\u27e828\u27e9`base64`\n    De/Serialization of base64 encoded bytes\n\nchrono\u27e829\u27e9`chrono`\n    Legacy export of the `chrono_0_4`\u27e830\u27e9 module.\n\nchrono_0_4\u27e830\u27e9`chrono_0_4`\n    De/Serialization of chrono\u27e831\u27e9 types\n\nde\u27e832\u27e9\n    Module for `DeserializeAs`\u27e833\u27e9 implementations\n\nformats\u27e834\u27e9\n    Specify the format and how lenient the deserialization is\n\nguide\u27e835\u27e9\n    `serde_with` User Guide\n\nhex\u27e836\u27e9`hex`\n    De/Serialization of hexadecimal encoded bytes\n\njson\u27e837\u27e9`json`\n    De/Serialization of JSON\n\nrust\u27e838\u27e9\n    De/Serialization for Rust\u2019s builtin and std types\n\nschemars_0_8\u27e839\u27e9`schemars_0_8`\n    Integration with schemars v0.8\u27e839\u27e9.\n\nschemars_0_9\u27e840\u27e9`schemars_0_9`\n    Integration with schemars v0.9\u27e840\u27e9.\n\nser\u27e841\u27e9\n    Module for `SerializeAs`\u27e842\u27e9 implementations\n\ntime_0_3\u27e843\u27e9`time_0_3`\n    De/Serialization of time v0.3\u27e844\u27e9 types\n## Macros\u00a7\u27e845\u27e9\n\nflattened_maybe\u27e846\u27e9\n    Support deserializing from flattened and non-flattened representation\n\nserde_conv\u27e847\u27e9\n    Create new conversion adapters from functions\n\nwith_prefix\u27e848\u27e9\n    Serialize with an added prefix on every field name and deserialize by trimming away the prefix.\n\nwith_suffix\u27e849\u27e9\n    Serialize with an added suffix on every field name and deserialize by trimming away the suffix.\n## Structs\u00a7\u27e850\u27e9\n\nAs\u27e851\u27e9\n    Adapter to convert from `serde_as` to the serde traits.\n\nBoolFromInt\u27e852\u27e9\n    Deserialize a boolean from a number\n\nBorrowCow\u27e853\u27e9\n    Borrow `Cow` data during deserialization when possible.\n\nBytes\u27e854\u27e9\n    Optimized handling of owned and borrowed byte representations.\n\nBytesOrString\u27e855\u27e9\n    Deserialize from bytes or string\n\nDefaultOnError\u27e856\u27e9\n    Deserialize value and return `Default`\u27e857\u27e9 on error\n\nDefaultOnNull\u27e858\u27e9\n    Deserialize `Default`\u27e857\u27e9 from `null` values\n\nDisplayFromStr\u27e859\u27e9\n    De/Serialize using `Display`\u27e860\u27e9 and `FromStr`\u27e861\u27e9 implementation\n\nDurationMicroSeconds\u27e862\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with micro-seconds as base unit.\n\nDurationMicroSecondsWithFrac\u27e864\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with micro-seconds as base unit.\n\nDurationMilliSeconds\u27e866\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with milli-seconds as base unit.\n\nDurationMilliSecondsWithFrac\u27e867\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with milli-seconds as base unit.\n\nDurationNanoSeconds\u27e868\u27e9\n    Equivalent to `DurationSeconds`\u27e863\u27e9 with nano-seconds as base unit.\n\nDurationNanoSecondsWithFrac\u27e869\u27e9\n    Equivalent to `DurationSecondsWithFrac`\u27e865\u27e9 with nano-seconds as base unit.\n\nDurationSeconds\u27e863\u27e9\n    De/Serialize Durations as number of seconds.\n\nDurationSecondsWithFrac\u27e865\u27e9\n    De/Serialize Durations as number of seconds.\n\nEnumMap\u27e870\u27e9\n    Represent a list of enum values as a map.\n\nFromInto\u27e871\u27e9\n    Serialize value by converting to/from a proxy type with serde support.\n\nFromIntoRef\u27e872\u27e9\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\nIfIsHumanReadable\u27e873\u27e9\n    Use the first format if `De/Serializer::is_human_readable`\u27e874\u27e9, otherwise use the second\n\nKeyValueMap\u27e875\u27e9\n    Convert `Vec` elements into key-value map entries\n\nMap\u27e876\u27e9\n    This serializes a list of tuples into a map\n\nMapFirstKeyWins\u27e877\u27e9\n    Ensure that the first key is taken, if duplicate keys exist\n\nMapPreventDuplicates\u27e878\u27e9\n    Ensure no duplicate keys exist in a map.\n\nMapSkipError\u27e879\u27e9\n    Deserialize a map, skipping keys and values which fail to deserialize.\n\nNoneAsEmptyString\u27e880\u27e9\n    De/Serialize a `Option<String>`\u27e881\u27e9 type while transforming the empty string to `None`\u27e882\u27e9\n\nOneOrMany\u27e883\u27e9\n    Deserialize one or many elements\n\nPickFirst\u27e884\u27e9\n    Try multiple deserialization options until one succeeds.\n\nSame\u27e885\u27e9\n    Adapter to convert from `serde_as` to the serde traits.\n\nSchema\u27e886\u27e9\n    Helper for implementing `JsonSchema`\u27e887\u27e9 on serializers whose output depends on the type of the concrete field.\n\nSeq\u27e888\u27e9\n    De/Serialize a Map into a list of tuples\n\nSetLastValueWins\u27e889\u27e9\n    Ensure that the last value is taken, if duplicate values exist\n\nSetPreventDuplicates\u27e890\u27e9\n    Ensure no duplicate values exist in a set.\n\nStringWithSeparator\u27e891\u27e9\n    De/Serialize a delimited collection using `Display`\u27e860\u27e9 and `FromStr`\u27e861\u27e9 implementation\n\nTimestampMicroSeconds\u27e892\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with micro-seconds as base unit.\n\nTimestampMicroSecondsWithFrac\u27e894\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with micro-seconds as base unit.\n\nTimestampMilliSeconds\u27e896\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with milli-seconds as base unit.\n\nTimestampMilliSecondsWithFrac\u27e897\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with milli-seconds as base unit.\n\nTimestampNanoSeconds\u27e898\u27e9\n    Equivalent to `TimestampSeconds`\u27e893\u27e9 with nano-seconds as base unit.\n\nTimestampNanoSecondsWithFrac\u27e899\u27e9\n    Equivalent to `TimestampSecondsWithFrac`\u27e895\u27e9 with nano-seconds as base unit.\n\nTimestampSeconds\u27e893\u27e9\n    De/Serialize timestamps as seconds since the UNIX epoch\n\nTimestampSecondsWithFrac\u27e895\u27e9\n    De/Serialize timestamps as seconds since the UNIX epoch\n\nTryFromInto\u27e8100\u27e9\n    Serialize value by converting to/from a proxy type with serde support.\n\nTryFromIntoRef\u27e8101\u27e9\n    Serialize a reference value by converting to/from a proxy type with serde support.\n\nVecSkipError\u27e8102\u27e9\n    Deserialize a sequence into `Vec<T>`, skipping elements which fail to deserialize.\n## Traits\u00a7\u27e8103\u27e9\n\nDeserializeAs\u27e833\u27e9\n    A **data structure** that can be deserialized from any data format supported by Serde, analogue to `Deserialize`\u27e8104\u27e9.\n\nSerializeAs\u27e842\u27e9\n    A **data structure** that can be serialized into any data format supported by Serde, analogue to `Serialize`\u27e8105\u27e9.\n## Attribute Macros\u00a7\u27e8106\u27e9\n\napply\u27e8107\u27e9`macros`\n    Apply attributes to all fields with matching types\n\nserde_as\u27e8108\u27e9`macros`\n    Convenience macro to use the `serde_as`\u27e817\u27e9 system.\n\nskip_serializing_none\u27e8109\u27e9`macros`\n    Add `skip_serializing_if` annotations to [`Option`] fields.\n## Derive Macros\u00a7\u27e8110\u27e9\n\nDeserializeFromStr\u27e8111\u27e9`macros`\n    Deserialize value by using its `FromStr`\u27e8112\u27e9 implementation\n\nSerializeDisplay\u27e8113\u27e9`macros`\n    Serialize value by using it\u2019s `Display`\u27e8114\u27e9 implementation\n\nSerializeDisplayAlt\u27e8115\u27e9`macros`\n    Serialize value by using its `Display`\u27e8114\u27e9 implementation with the \u201calternate\u201d (`#`) format flag\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_with/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_with/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_with/latest/src/serde_with/lib.rs.html#1-2603: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/serde_with.svg: ![crates.io badge\n\u27e85\u27e9 https://github.com/jonasbb/serde_with/actions/workflows/ci.yaml/badge.svg: ![Build Status\n\u27e86\u27e9 https://codecov.io/gh/jonasbb/serde_with/branch/master/graph/badge.svg: ![codecov\n\u27e87\u27e9 https://bestpractices.coreinfrastructure.org/projects/4322/badge: ![CII Best Practices\n\u27e88\u27e9 https://img.shields.io/badge/Try%20on-rustexplorer-lightgrey?logo=rust&logoColor=orange: ![Rustexplorer\n\u27e89\u27e9 https://serde.rs/field-attrs.html#with: serde\u2019s `with` annotation\n\u27e810\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/serde_as/index.html: `serde_as`\n\u27e811\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.DisplayFromStr.html: `DisplayFromStr`\n\u27e812\u27e9 https://docs.rs/serde_with/latest/serde_with/#large-and-const-generic-arrays: this examples shows\n\u27e813\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_prefix.html: `with_prefix!`\n\u27e814\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/macro.with_suffix.html: `with_suffix!`\n\u27e815\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/struct.StringWithSeparator.html: `serde_with::StringWithSeparator::<CommaSeparator, T>`\n\u27e816\u27e9 https://docs.rs/serde_with/latest/serde_with/#getting-help: \u00a7\n\u27e817\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/index.html: user guide\n\u27e818\u27e9 https://github.com/jonasbb/serde_with/discussions/new: open a new discussion\n\u27e819\u27e9 https://users.rust-lang.org/: users.rust-lang.org\n\u27e820\u27e9 https://github.com/jonasbb/serde_with/issues/new: new issue\n\u27e821\u27e9 https://docs.rs/serde_with/latest/serde_with/#use-serde_with-in-your-project: \u00a7\n\u27e822\u27e9 https://docs.rs/serde_with/3.13.0/serde_with/guide/feature_flags/index.html: feature flags\n\u27e823\u27e9 https://docs.rs/serde_with/latest/serde_with/#examples: \u00a7\n\u27e824\u27e9 https://docs.rs/serde_with/latest/serde_with/#displayfromstr: \u00a7\n\u27e825\u27e9 https://docs.rs/serde_with/latest/serde_with/#skip_serializing_none: \u00a7\n\u27e826\u27e9 https://docs.rs/serde_with/latest/serde_with/#advanced-serde_as-usage: \u00a7\n\u27e827\u27e9 https://docs.rs/serde_with/latest/serde_with/#modules: \u00a7\n\u27e828\u27e9 https://docs.rs/serde_with/latest/serde_with/base64/index.html: mod serde_with::base64 - base64\n\u27e829\u27e9 https://docs.rs/serde_with/latest/serde_with/chrono/index.html: mod serde_with::chrono - chrono\n\u27e830\u27e9 https://docs.rs/serde_with/latest/serde_with/chrono_0_4/index.html: mod serde_with::chrono_0_4 - `chrono_0_4`\n\u27e831\u27e9 https://docs.rs/chrono/: chrono\n\u27e832\u27e9 https://docs.rs/serde_with/latest/serde_with/de/index.html: mod serde_with::de - de\n\u27e833\u27e9 https://docs.rs/serde_with/latest/serde_with/trait.DeserializeAs.html: trait serde_with::DeserializeAs - `DeserializeAs`\n\u27e834\u27e9 https://docs.rs/serde_with/latest/serde_with/formats/index.html: mod serde_with::formats - formats\n\u27e835\u27e9 https://docs.rs/serde_with/latest/serde_with/guide/index.html: mod serde_with::guide - guide\n\u27e836\u27e9 https://docs.rs/serde_with/latest/serde_with/hex/index.html: mod serde_with::hex - hex\n\u27e837\u27e9 https://docs.rs/serde_with/latest/serde_with/json/index.html: mod serde_with::json - json\n\u27e838\u27e9 https://docs.rs/serde_with/latest/serde_with/rust/index.html: mod serde_with::rust - rust\n\u27e839\u27e9 https://docs.rs/serde_with/latest/serde_with/schemars_0_8/index.html: mod serde_with::schemars_0_8 - schemars_0_8\n\u27e840\u27e9 https://docs.rs/serde_with/latest/serde_with/schemars_0_9/index.html: mod serde_with::schemars_0_9 - schemars_0_9\n\u27e841\u27e9 https://docs.rs/serde_with/latest/serde_with/ser/index.html: mod serde_with::ser - ser\n\u27e842\u27e9 https://docs.rs/serde_with/latest/serde_with/trait.SerializeAs.html: trait serde_with::SerializeAs - `SerializeAs`\n\u27e843\u27e9 https://docs.rs/serde_with/latest/serde_with/time_0_3/index.html: mod serde_with::time_0_3 - time_0_3\n\u27e844\u27e9 https://docs.rs/time/0.3/: time v0.3\n\u27e845\u27e9 https://docs.rs/serde_with/latest/serde_with/#macros: \u00a7\n\u27e846\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.flattened_maybe.html: macro serde_with::flattened_maybe - flattened_maybe\n\u27e847\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.serde_conv.html: macro serde_with::serde_conv - serde_conv\n\u27e848\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.with_prefix.html: macro serde_with::with_prefix - with_prefix\n\u27e849\u27e9 https://docs.rs/serde_with/latest/serde_with/macro.with_suffix.html: macro serde_with::with_suffix - with_suffix\n\u27e850\u27e9 https://docs.rs/serde_with/latest/serde_with/#structs: \u00a7\n\u27e851\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.As.html: struct serde_with::As - As\n\u27e852\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BoolFromInt.html: struct serde_with::BoolFromInt - BoolFromInt\n\u27e853\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BorrowCow.html: struct serde_with::BorrowCow - BorrowCow\n\u27e854\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Bytes.html: struct serde_with::Bytes - Bytes\n\u27e855\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.BytesOrString.html: struct serde_with::BytesOrString - BytesOrString\n\u27e856\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnError.html: struct serde_with::DefaultOnError - DefaultOnError\n\u27e857\u27e9 https://doc.rust-lang.org/core/default/trait.Default.html: trait core::default::Default - `Default`\n\u27e858\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DefaultOnNull.html: struct serde_with::DefaultOnNull - DefaultOnNull\n\u27e859\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DisplayFromStr.html: struct serde_with::DisplayFromStr - DisplayFromStr\n\u27e860\u27e9 https://doc.rust-lang.org/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e861\u27e9 https://doc.rust-lang.org/core/str/traits/trait.FromStr.html: trait core::str::traits::FromStr - `FromStr`\n\u27e862\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSeconds.html: struct serde_with::DurationMicroSeconds - DurationMicroSeconds\n\u27e863\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationSeconds.html: struct serde_with::DurationSeconds - `DurationSeconds`\n\u27e864\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMicroSecondsWithFrac.html: struct serde_with::DurationMicroSecondsWithFrac - DurationMicroSecondsWithFrac\n\u27e865\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationSecondsWithFrac.html: struct serde_with::DurationSecondsWithFrac - `DurationSecondsWithFrac`\n\u27e866\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSeconds.html: struct serde_with::DurationMilliSeconds - DurationMilliSeconds\n\u27e867\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationMilliSecondsWithFrac.html: struct serde_with::DurationMilliSecondsWithFrac - DurationMilliSecondsWithFrac\n\u27e868\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSeconds.html: struct serde_with::DurationNanoSeconds - DurationNanoSeconds\n\u27e869\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.DurationNanoSecondsWithFrac.html: struct serde_with::DurationNanoSecondsWithFrac - DurationNanoSecondsWithFrac\n\u27e870\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.EnumMap.html: struct serde_with::EnumMap - EnumMap\n\u27e871\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.FromInto.html: struct serde_with::FromInto - FromInto\n\u27e872\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.FromIntoRef.html: struct serde_with::FromIntoRef - FromIntoRef\n\u27e873\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.IfIsHumanReadable.html: struct serde_with::IfIsHumanReadable - IfIsHumanReadable\n\u27e874\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serializer.html#method.is_human_readable: method serde::ser::Serializer::is_human_readable - `De/Serializer::is_human_readable`\n\u27e875\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.KeyValueMap.html: struct serde_with::KeyValueMap - KeyValueMap\n\u27e876\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Map.html: struct serde_with::Map - Map\n\u27e877\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapFirstKeyWins.html: struct serde_with::MapFirstKeyWins - MapFirstKeyWins\n\u27e878\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapPreventDuplicates.html: struct serde_with::MapPreventDuplicates - MapPreventDuplicates\n\u27e879\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.MapSkipError.html: struct serde_with::MapSkipError - MapSkipError\n\u27e880\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.NoneAsEmptyString.html: struct serde_with::NoneAsEmptyString - NoneAsEmptyString\n\u27e881\u27e9 https://doc.rust-lang.org/core/option/enum.Option.html: enum core::option::Option - `Option<String>`\n\u27e882\u27e9 https://doc.rust-lang.org/core/option/enum.Option.html#variant.None: variant core::option::Option::None - `None`\n\u27e883\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.OneOrMany.html: struct serde_with::OneOrMany - OneOrMany\n\u27e884\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.PickFirst.html: struct serde_with::PickFirst - PickFirst\n\u27e885\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Same.html: struct serde_with::Same - Same\n\u27e886\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Schema.html: struct serde_with::Schema - Schema\n\u27e887\u27e9 https://docs.rs/schemars/0.9.0/x86_64-unknown-linux-gnu/schemars/trait.JsonSchema.html: trait schemars::JsonSchema - `JsonSchema`\n\u27e888\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.Seq.html: struct serde_with::Seq - Seq\n\u27e889\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.SetLastValueWins.html: struct serde_with::SetLastValueWins - SetLastValueWins\n\u27e890\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.SetPreventDuplicates.html: struct serde_with::SetPreventDuplicates - SetPreventDuplicates\n\u27e891\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.StringWithSeparator.html: struct serde_with::StringWithSeparator - StringWithSeparator\n\u27e892\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSeconds.html: struct serde_with::TimestampMicroSeconds - TimestampMicroSeconds\n\u27e893\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampSeconds.html: struct serde_with::TimestampSeconds - `TimestampSeconds`\n\u27e894\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMicroSecondsWithFrac.html: struct serde_with::TimestampMicroSecondsWithFrac - TimestampMicroSecondsWithFrac\n\u27e895\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampSecondsWithFrac.html: struct serde_with::TimestampSecondsWithFrac - `TimestampSecondsWithFrac`\n\u27e896\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSeconds.html: struct serde_with::TimestampMilliSeconds - TimestampMilliSeconds\n\u27e897\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampMilliSecondsWithFrac.html: struct serde_with::TimestampMilliSecondsWithFrac - TimestampMilliSecondsWithFrac\n\u27e898\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSeconds.html: struct serde_with::TimestampNanoSeconds - TimestampNanoSeconds\n\u27e899\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TimestampNanoSecondsWithFrac.html: struct serde_with::TimestampNanoSecondsWithFrac - TimestampNanoSecondsWithFrac\n\u27e8100\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TryFromInto.html: struct serde_with::TryFromInto - TryFromInto\n\u27e8101\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.TryFromIntoRef.html: struct serde_with::TryFromIntoRef - TryFromIntoRef\n\u27e8102\u27e9 https://docs.rs/serde_with/latest/serde_with/struct.VecSkipError.html: struct serde_with::VecSkipError - VecSkipError\n\u27e8103\u27e9 https://docs.rs/serde_with/latest/serde_with/#traits: \u00a7\n\u27e8104\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e8105\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e8106\u27e9 https://docs.rs/serde_with/latest/serde_with/#attributes: \u00a7\n\u27e8107\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.apply.html: attr serde_with::apply - apply\n\u27e8108\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.serde_as.html: attr serde_with::serde_as - serde_as\n\u27e8109\u27e9 https://docs.rs/serde_with/latest/serde_with/attr.skip_serializing_none.html: attr serde_with::skip_serializing_none - skip_serializing_none\n\u27e8110\u27e9 https://docs.rs/serde_with/latest/serde_with/#derives: \u00a7\n\u27e8111\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.DeserializeFromStr.html: derive serde_with::DeserializeFromStr - DeserializeFromStr\n\u27e8112\u27e9 std::str::FromStr: `FromStr`\n\u27e8113\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplay.html: derive serde_with::SerializeDisplay - SerializeDisplay\n\u27e8114\u27e9 std::fmt::Display: `Display`\n\u27e8115\u27e9 https://docs.rs/serde_with/latest/serde_with/derive.SerializeDisplayAlt.html: derive serde_with::SerializeDisplayAlt - SerializeDisplayAlt\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `serde_with` crate enhances Serde by providing custom de/serialization helpers, including the powerful `serde_as` annotation for flexible type conversions. Key features include support for large and const-generic arrays, skipping empty `Option` fields, prefix/suffix field naming, and specialized converters like `DisplayFromStr` and `StringWithSeparator`. It simplifies handling complex serialization scenarios, such as nested types, hex encoding, and efficient byte serialization.",
          "feature_summary": null,
          "use_case": "Serialization",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Flexible Serialization with `serde_as`\n\u2705 **Factual:** The `serde_with` crate allows flexible serialization of nested types using the `serde_as` annotation, such as serializing a `Vec<Duration>` into a list of numbers representing seconds.  \n\u274c **Counterfactual:** The `serde_with` crate does not support serialization of nested types and requires manual implementation for complex structures like `Vec<Duration>`.\n\n---\n\n### Pair 2: Support for Large Arrays\n\u2705 **Factual:** The `serde_with` crate supports serialization and deserialization of arrays larger than 32 elements, including nested arrays, by leveraging the `serde_as` annotation and const generics.  \n\u274c **Counterfactual:** The `serde_with` crate imposes a strict limit of 32 elements for arrays, making it unsuitable for handling larger or nested arrays.\n\n---\n\n### Pair 3: Skipping Empty `Option` Fields\n\u2705 **Factual:** The `#[skip_serializing_none]` attribute provided by `serde_with` ensures that all empty `Option` fields are omitted during serialization, reducing JSON payload size.  \n\u274c **Counterfactual:** The `#[skip_serializing_none]` attribute in `serde_with` is used to serialize all empty `Option` fields as `null` instead of omitting them entirely.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-49f09a66-6941e5a9-1751259271",
      "timestamp": "2025-06-30T04:54:31.398836+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]