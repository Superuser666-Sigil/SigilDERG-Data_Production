[
  {
    "execution_id": "exec-7893b23b-b99fb263-1751262678",
    "timestamp": "2025-06-30T05:51:18.933964+00:00",
    "sacred_chain": {
      "input_data": "pickledb",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'pickledb' -> 'pickledb'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "pickledb",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/pickledb",
            "title": "pickledb v0.5.1",
            "content": {
              "raw_markdown": "#  pickledb v0.5.1\nA lightweight and simple key-value store written in Rust, heavily inspired by Python's PickleDB (https://pythonhosted.org/pickleDB/) \n  * [ #db ](https://crates.io/keywords/db)\n  * [ #kv ](https://crates.io/keywords/kv)\n  * [ #key-value-store ](https://crates.io/keywords/key-value-store)\n  * [ #database ](https://crates.io/keywords/database)\n  * [ #pickledb ](https://crates.io/keywords/pickledb)\n\n\n  * [ Readme ](https://crates.io/crates/pickledb)\n  * [ 7 Versions ](https://crates.io/crates/pickledb/versions)\n  * [ Dependencies ](https://crates.io/crates/pickledb/dependencies)\n  * [ Dependents ](https://crates.io/crates/pickledb/reverse_dependencies)\n\n\n## Metadata\nabout 3 years ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit)\n26.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add pickledb\nOr add the following line to your Cargo.toml:\npickledb = \"0.5.1\"\n## Documentation\n[ http://docs.rs/pickledb ](http://docs.rs/pickledb)\n## Repository\n[ github.com/seladb/pickledb-rs ](https://github.com/seladb/pickledb-rs)\n## Owners\n## Categories\n  * [Database implementations](https://crates.io/categories/database-implementations)\n  * [Data structures](https://crates.io/categories/data-structures)\n\n\n[ Report crate ](https://crates.io/support?crate=pickledb&inquire=crate-violation)\n### Stats Overview\n1,092,526 Downloads all time\n7 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  pickledb v0.5.1\nA lightweight and simple key-value store written in Rust, heavily inspired by Python's PickleDB (https://pythonhosted.org/pickleDB/) \n  *  #db \u27e81\u27e9\n  *  #kv \u27e82\u27e9\n  *  #key-value-store \u27e83\u27e9\n  *  #database \u27e84\u27e9\n  *  #pickledb \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  7 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 3 years ago \n2018 edition \n MIT \u27e810\u27e9\n26.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add pickledb\nOr add the following line to your Cargo.toml:\npickledb = \"0.5.1\"\n## Documentation\n http://docs.rs/pickledb \u27e811\u27e9\n## Repository\n github.com/seladb/pickledb-rs \u27e812\u27e9\n## Owners\n## Categories\n  * Database implementations\u27e813\u27e9\n  * Data structures\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n1,092,526 Downloads all time\n7 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/db:  #db \n\u27e82\u27e9 https://crates.io/keywords/kv:  #kv \n\u27e83\u27e9 https://crates.io/keywords/key-value-store:  #key-value-store \n\u27e84\u27e9 https://crates.io/keywords/database:  #database \n\u27e85\u27e9 https://crates.io/keywords/pickledb:  #pickledb \n\u27e86\u27e9 https://crates.io/crates/pickledb:  Readme \n\u27e87\u27e9 https://crates.io/crates/pickledb/versions:  7 Versions \n\u27e88\u27e9 https://crates.io/crates/pickledb/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/pickledb/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 http://docs.rs/pickledb:  http://docs.rs/pickledb \n\u27e812\u27e9 https://github.com/seladb/pickledb-rs:  github.com/seladb/pickledb-rs \n\u27e813\u27e9 https://crates.io/categories/database-implementations: Database implementations\n\u27e814\u27e9 https://crates.io/categories/data-structures: Data structures\n\u27e815\u27e9 https://crates.io/support?crate=pickledb&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1523,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116468.8831389"
          },
          "docs_rs": {
            "url": "https://docs.rs/pickledb",
            "title": "Crate pickledbCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/pickledb/latest/pickledb/all.html \"show sidebar\")\n# Crate pickledbCopy item path\n[Settings](https://docs.rs/pickledb/latest/settings.html)\n[Help](https://docs.rs/pickledb/latest/help.html)\nSummary[Source](https://docs.rs/pickledb/latest/src/pickledb/lib.rs.html#1-117)\nExpand description\n## [\u00a7](https://docs.rs/pickledb/latest/pickledb/#pickledb)PickleDB\nPickleDB-rs is a lightweight and simple key-value store written in Rust, heavily inspired by [Python\u2019s PickleDB](https://pythonhosted.org/pickleDB/)\nPickleDB\u2019s architecture is very simple and straight-forward: the whole key-value data structure is stored in memory and is dumped to a file periodically according to a policy defined by the user. There are APIs to create a new key-value store in memory or to load it from a file. Everything runs in the user\u2019s process and memory and in the same thread, which means that the key-value data will be stored in the user process\u2019s memory and each API call will access that key-value store directly and may trigger a dump to the DB file. There are no additional threads or processes created throughout the life-cycle of any of the APIs.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#so-what-is-it-useful-for)So what is it useful for?\nBasically for any use case that needs a simple and relatively small key-value store that can run in-process and be stored in a file. Most of the key-value stores out there provide high scalability, performance and robustness, but in the cost of a very complex architecture, a lot of installation and configuration, and in many cases require a descent amount of resources. But sometimes you don\u2019t need this scalability and performance and all you need is a simple solution that can be easily set up and is easy to use and understand. That\u2019s where PickleDB-rs comes into the picture! I personally encountered several use cases like that and that\u2019s how I came to know about [Python\u2019s PickleDB](https://pythonhosted.org/pickleDB/), and I thought it\u2019d be nice to build one in Rust as well.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#main-features)Main features\nLike the [Python\u2019s PickleDB](https://pythonhosted.org/pickleDB/), the API is very much inspired by Redis API and provides the following main capabilities:\n  * Create a new key-value store in memory or load it from a file\n  * Dump the key-value store to a file according to a user-defined policy\n  * Set and get key-value pairs. A very unique feature in PickleDB is that the key-value map is heterogeneous. Please see more details below\n  * Manage lists. Every list has a name (which is its key in the key-value store) and a list of items it stores. PickleDB provides APIs to create and delete lists and to add or remove items from them. Lists are also heterogeneous, meaning each list can store objects of different types. Please see more details below\n  * Iterate over keys and values in the DB and over items in a list\n\n\nPlease take a look at the API documentation to get more details.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#pickledb-provides-heterogeneous-map-and-lists)PickleDB provides heterogeneous map and lists!\nHeterogeneous data structures are the ones in which the data elements doesn\u2019t belong to the same data type. All the data elements have different data types. As you know, Rust doesn\u2019t have a built-it mechanism for working with heterogeneous data structures. For example: it\u2019s not easy to define a list where each element has a different data type, and it\u2019s also not easy to define a map which contains keys or values of different data types. PickleDB tries to address this challenge and allows values to be of any type and also build lists that contains items of different data types. It achieves that using serialization, which you can read more about below. This is a pretty cool feature that you may find very useful. The different types that are supported are:\n  * All primitive types\n  * Strings\n  * Vectors\n  * Tuples\n  * Structs and Enums that are serializable (please read more below)\n\n\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#serialization)Serialization\nSerialization is an important part of PickleDB. It is the way heterogeneous data structures are enabled: instead of saving the actual object, PickleDB stores a serialized version of it. That way all objects are \u201cnormalized\u201d to the same type and can be stored in Rust data structures such as a HashMap or a Vector.\nSerialization is also the way data is stored in a file: before saving to the file, all data in memory is serialized and then it is written to the file; upon loading the serialized data is read from the file and then deserialized to memory. Of course serialization and deserialization has their performance cost but high performance is not one of PickleDB\u2019s main objectives and I think it\u2019s a fair price to pay for achieving heterogeneous data structures.\nIn order to achieve this magic, all objects must be serializable. PickleDB uses the [Serde](https://serde.rs/) library for serialization. Currently 4 types of serialization are supported:\n  * [JSON serialization](https://crates.io/crates/serde_json)\n  * [Bincode serialization](https://crates.io/crates/bincode)\n  * [YAML serialization](https://crates.io/crates/serde_yaml)\n  * [CBOR serialization](https://crates.io/crates/serde_cbor)\n\n\nThe serialization types are enabled and disabled with features (`json` (enabled by default), `bincode`, `yaml`, and `cbor`). To enable them, just add their names to the `features` list when declaring the dependency. To disable JSON, set `default-features` to false. For instance, `pickledb = { version = \"0.5\", features = [\"cbor\", \"yaml\"], default-features = false }` would enable CBOR and YAML only.\nThe user can choose a serialization type to use upon creating a DB or loading it from a file.\nSo what does it mean that all objects must be serializable? That means that all objects that you use must be serializable. Fortunately Serde already provides out-of-the-box serialization for most of the common objects: all primitive types, strings, vectors and tuples are already serializable and you don\u2019t need to do anything to use them. But if you want to define your own structs or enums, you need to make sure they\u2019re serializable, which means that:\n  * They should include the `#[derive(Serialize, Deserialize)]` macro. Please see [here](https://serde.rs/derive.html) for more details\n  * If a struct contains non-primitive members, they should be serializable as well\n  * You should include `serde = \"1.0\"` and `serde_derive = \"1.0\"` dependencies in your `Cargo.toml` file\n\n\nYou can take a look at the examples provided with PickleDB to get a better idea of how this works.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#dumping-data-to-a-file)Dumping data to a file\nAs mentioned before, PickleDB stores all the data in a file for persistency. Dumping data to a file is pretty expensive in terms of time and performance, for various reasons:\n  * Everything in PickleDB runs in the user process context (including file writes), so frequent writes will affect the user process\u2019s performance\n  * The current implementation dumps all of the data into the file, which gets more significant as data gets bigger\n  * Before writing to the file the data is being serialized, which also has a performance cost\n\n\nAlthough performance is not a big concern for PickleDB, I felt it\u2019d make sense to implement different dump policies for the user to choose when creating a new DB or loading one from a file. Here are the different policies and the differences between them:\n  * [PickleDbDumpPolicy::NeverDump](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.NeverDump) - never dump any change, file will always remain read-only. When choosing this policy even calling to [dump()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.dump) won\u2019t dump the data.\n  * [PickleDbDumpPolicy::AutoDump](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.AutoDump) - every change will be dumped immediately and automatically to the file\n  * [PickleDbDumpPolicy::DumpUponRequest](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.DumpUponRequest) - data won\u2019t be dumped unless the user calls [dump()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.dump) proactively to dump the data\n  * [PickleDbDumpPolicy::PeriodicDump(Duration)](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.PeriodicDump) - changes will be dumped to the file periodically, no sooner than the Duration provided by the user. The way this mechanism works is as follows: each time there is a DB change the last DB dump time is checked. If the time that has passed since the last dump is higher than Duration, changes will be dumped, otherwise changes will not be dumped.\n\n\nApart from this dump policy, persistency is also kept by a implementing the `Drop` trait for the `PickleDB` object which ensures all in-memory data is dumped to the file upon destruction of the object.\n## Modules[\u00a7](https://docs.rs/pickledb/latest/pickledb/#modules)\n\n[error](https://docs.rs/pickledb/latest/pickledb/error/index.html \"mod pickledb::error\")\n\n## Structs[\u00a7](https://docs.rs/pickledb/latest/pickledb/#structs)\n\n[PickleDb](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html \"struct pickledb::PickleDb\")\n    A struct that represents a PickleDb object\n\n[PickleDbIterator](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIterator.html \"struct pickledb::PickleDbIterator\")\n    Iterator object for iterating over keys and values in PickleDB. Returned in [PickleDb::iter()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.iter)\n\n[PickleDbIteratorItem](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIteratorItem.html \"struct pickledb::PickleDbIteratorItem\")\n    The object returned in each iteration when iterating over keys and values in PickleDB\n\n[PickleDbListExtender](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListExtender.html \"struct pickledb::PickleDbListExtender\")\n    A struct for extending PickleDB lists and adding more items to them\n\n[PickleDbListIterator](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIterator.html \"struct pickledb::PickleDbListIterator\")\n    Iterator object for iterating over items in a PickleDB list. Returned in [PickleDb::liter()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.liter)\n\n[PickleDbListIteratorItem](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIteratorItem.html \"struct pickledb::PickleDbListIteratorItem\")\n    The object returned in each iteration when iterating over a PickleDB list\n## Enums[\u00a7](https://docs.rs/pickledb/latest/pickledb/#enums)\n\n[PickleDbDumpPolicy](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html \"enum pickledb::PickleDbDumpPolicy\")\n    An enum that determines the policy of dumping PickleDb changes into the file\n\n[SerializationMethod](https://docs.rs/pickledb/latest/pickledb/enum.SerializationMethod.html \"enum pickledb::SerializationMethod\")\n    An enum for specifying the serialization method to use when creating a new PickleDB database or loading one from a file\n",
              "markdown_with_citations": "[](https://docs.rs/pickledb/latest/pickledb/all.html \"show sidebar\")\n# Crate pickledbCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9PickleDB\nPickleDB-rs is a lightweight and simple key-value store written in Rust, heavily inspired by Python\u2019s PickleDB\u27e85\u27e9\nPickleDB\u2019s architecture is very simple and straight-forward: the whole key-value data structure is stored in memory and is dumped to a file periodically according to a policy defined by the user. There are APIs to create a new key-value store in memory or to load it from a file. Everything runs in the user\u2019s process and memory and in the same thread, which means that the key-value data will be stored in the user process\u2019s memory and each API call will access that key-value store directly and may trigger a dump to the DB file. There are no additional threads or processes created throughout the life-cycle of any of the APIs.\n### \u00a7\u27e86\u27e9So what is it useful for?\nBasically for any use case that needs a simple and relatively small key-value store that can run in-process and be stored in a file. Most of the key-value stores out there provide high scalability, performance and robustness, but in the cost of a very complex architecture, a lot of installation and configuration, and in many cases require a descent amount of resources. But sometimes you don\u2019t need this scalability and performance and all you need is a simple solution that can be easily set up and is easy to use and understand. That\u2019s where PickleDB-rs comes into the picture! I personally encountered several use cases like that and that\u2019s how I came to know about Python\u2019s PickleDB\u27e85\u27e9, and I thought it\u2019d be nice to build one in Rust as well.\n### \u00a7\u27e87\u27e9Main features\nLike the Python\u2019s PickleDB\u27e85\u27e9, the API is very much inspired by Redis API and provides the following main capabilities:\n  * Create a new key-value store in memory or load it from a file\n  * Dump the key-value store to a file according to a user-defined policy\n  * Set and get key-value pairs. A very unique feature in PickleDB is that the key-value map is heterogeneous. Please see more details below\n  * Manage lists. Every list has a name (which is its key in the key-value store) and a list of items it stores. PickleDB provides APIs to create and delete lists and to add or remove items from them. Lists are also heterogeneous, meaning each list can store objects of different types. Please see more details below\n  * Iterate over keys and values in the DB and over items in a list\n\n\nPlease take a look at the API documentation to get more details.\n### \u00a7\u27e88\u27e9PickleDB provides heterogeneous map and lists!\nHeterogeneous data structures are the ones in which the data elements doesn\u2019t belong to the same data type. All the data elements have different data types. As you know, Rust doesn\u2019t have a built-it mechanism for working with heterogeneous data structures. For example: it\u2019s not easy to define a list where each element has a different data type, and it\u2019s also not easy to define a map which contains keys or values of different data types. PickleDB tries to address this challenge and allows values to be of any type and also build lists that contains items of different data types. It achieves that using serialization, which you can read more about below. This is a pretty cool feature that you may find very useful. The different types that are supported are:\n  * All primitive types\n  * Strings\n  * Vectors\n  * Tuples\n  * Structs and Enums that are serializable (please read more below)\n\n\n### \u00a7\u27e89\u27e9Serialization\nSerialization is an important part of PickleDB. It is the way heterogeneous data structures are enabled: instead of saving the actual object, PickleDB stores a serialized version of it. That way all objects are \u201cnormalized\u201d to the same type and can be stored in Rust data structures such as a HashMap or a Vector.\nSerialization is also the way data is stored in a file: before saving to the file, all data in memory is serialized and then it is written to the file; upon loading the serialized data is read from the file and then deserialized to memory. Of course serialization and deserialization has their performance cost but high performance is not one of PickleDB\u2019s main objectives and I think it\u2019s a fair price to pay for achieving heterogeneous data structures.\nIn order to achieve this magic, all objects must be serializable. PickleDB uses the Serde\u27e810\u27e9 library for serialization. Currently 4 types of serialization are supported:\n  * JSON serialization\u27e811\u27e9\n  * Bincode serialization\u27e812\u27e9\n  * YAML serialization\u27e813\u27e9\n  * CBOR serialization\u27e814\u27e9\n\n\nThe serialization types are enabled and disabled with features (`json` (enabled by default), `bincode`, `yaml`, and `cbor`). To enable them, just add their names to the `features` list when declaring the dependency. To disable JSON, set `default-features` to false. For instance, `pickledb = { version = \"0.5\", features = [\"cbor\", \"yaml\"], default-features = false }` would enable CBOR and YAML only.\nThe user can choose a serialization type to use upon creating a DB or loading it from a file.\nSo what does it mean that all objects must be serializable? That means that all objects that you use must be serializable. Fortunately Serde already provides out-of-the-box serialization for most of the common objects: all primitive types, strings, vectors and tuples are already serializable and you don\u2019t need to do anything to use them. But if you want to define your own structs or enums, you need to make sure they\u2019re serializable, which means that:\n  * They should include the `#[derive(Serialize, Deserialize)]` macro. Please see here\u27e815\u27e9 for more details\n  * If a struct contains non-primitive members, they should be serializable as well\n  * You should include `serde = \"1.0\"` and `serde_derive = \"1.0\"` dependencies in your `Cargo.toml` file\n\n\nYou can take a look at the examples provided with PickleDB to get a better idea of how this works.\n### \u00a7\u27e816\u27e9Dumping data to a file\nAs mentioned before, PickleDB stores all the data in a file for persistency. Dumping data to a file is pretty expensive in terms of time and performance, for various reasons:\n  * Everything in PickleDB runs in the user process context (including file writes), so frequent writes will affect the user process\u2019s performance\n  * The current implementation dumps all of the data into the file, which gets more significant as data gets bigger\n  * Before writing to the file the data is being serialized, which also has a performance cost\n\n\nAlthough performance is not a big concern for PickleDB, I felt it\u2019d make sense to implement different dump policies for the user to choose when creating a new DB or loading one from a file. Here are the different policies and the differences between them:\n  * PickleDbDumpPolicy::NeverDump\u27e817\u27e9 - never dump any change, file will always remain read-only. When choosing this policy even calling to dump()\u27e818\u27e9 won\u2019t dump the data.\n  * PickleDbDumpPolicy::AutoDump\u27e819\u27e9 - every change will be dumped immediately and automatically to the file\n  * PickleDbDumpPolicy::DumpUponRequest\u27e820\u27e9 - data won\u2019t be dumped unless the user calls dump()\u27e818\u27e9 proactively to dump the data\n  * PickleDbDumpPolicy::PeriodicDump(Duration)\u27e821\u27e9 - changes will be dumped to the file periodically, no sooner than the Duration provided by the user. The way this mechanism works is as follows: each time there is a DB change the last DB dump time is checked. If the time that has passed since the last dump is higher than Duration, changes will be dumped, otherwise changes will not be dumped.\n\n\nApart from this dump policy, persistency is also kept by a implementing the `Drop` trait for the `PickleDB` object which ensures all in-memory data is dumped to the file upon destruction of the object.\n## Modules\u00a7\u27e822\u27e9\n\nerror\u27e823\u27e9\n\n## Structs\u00a7\u27e824\u27e9\n\nPickleDb\u27e825\u27e9\n    A struct that represents a PickleDb object\n\nPickleDbIterator\u27e826\u27e9\n    Iterator object for iterating over keys and values in PickleDB. Returned in PickleDb::iter()\u27e827\u27e9\n\nPickleDbIteratorItem\u27e828\u27e9\n    The object returned in each iteration when iterating over keys and values in PickleDB\n\nPickleDbListExtender\u27e829\u27e9\n    A struct for extending PickleDB lists and adding more items to them\n\nPickleDbListIterator\u27e830\u27e9\n    Iterator object for iterating over items in a PickleDB list. Returned in PickleDb::liter()\u27e831\u27e9\n\nPickleDbListIteratorItem\u27e832\u27e9\n    The object returned in each iteration when iterating over a PickleDB list\n## Enums\u00a7\u27e833\u27e9\n\nPickleDbDumpPolicy\u27e834\u27e9\n    An enum that determines the policy of dumping PickleDb changes into the file\n\nSerializationMethod\u27e835\u27e9\n    An enum for specifying the serialization method to use when creating a new PickleDB database or loading one from a file\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pickledb/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pickledb/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pickledb/latest/src/pickledb/lib.rs.html#1-117: Source\n\u27e84\u27e9 https://docs.rs/pickledb/latest/pickledb/#pickledb: \u00a7\n\u27e85\u27e9 https://pythonhosted.org/pickleDB/: Python\u2019s PickleDB\n\u27e86\u27e9 https://docs.rs/pickledb/latest/pickledb/#so-what-is-it-useful-for: \u00a7\n\u27e87\u27e9 https://docs.rs/pickledb/latest/pickledb/#main-features: \u00a7\n\u27e88\u27e9 https://docs.rs/pickledb/latest/pickledb/#pickledb-provides-heterogeneous-map-and-lists: \u00a7\n\u27e89\u27e9 https://docs.rs/pickledb/latest/pickledb/#serialization: \u00a7\n\u27e810\u27e9 https://serde.rs/: Serde\n\u27e811\u27e9 https://crates.io/crates/serde_json: JSON serialization\n\u27e812\u27e9 https://crates.io/crates/bincode: Bincode serialization\n\u27e813\u27e9 https://crates.io/crates/serde_yaml: YAML serialization\n\u27e814\u27e9 https://crates.io/crates/serde_cbor: CBOR serialization\n\u27e815\u27e9 https://serde.rs/derive.html: here\n\u27e816\u27e9 https://docs.rs/pickledb/latest/pickledb/#dumping-data-to-a-file: \u00a7\n\u27e817\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.NeverDump: PickleDbDumpPolicy::NeverDump\n\u27e818\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.dump: dump()\n\u27e819\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.AutoDump: PickleDbDumpPolicy::AutoDump\n\u27e820\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.DumpUponRequest: PickleDbDumpPolicy::DumpUponRequest\n\u27e821\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.PeriodicDump: PickleDbDumpPolicy::PeriodicDump(Duration)\n\u27e822\u27e9 https://docs.rs/pickledb/latest/pickledb/#modules: \u00a7\n\u27e823\u27e9 https://docs.rs/pickledb/latest/pickledb/error/index.html: mod pickledb::error - error\n\u27e824\u27e9 https://docs.rs/pickledb/latest/pickledb/#structs: \u00a7\n\u27e825\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html: struct pickledb::PickleDb - PickleDb\n\u27e826\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIterator.html: struct pickledb::PickleDbIterator - PickleDbIterator\n\u27e827\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.iter: PickleDb::iter()\n\u27e828\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIteratorItem.html: struct pickledb::PickleDbIteratorItem - PickleDbIteratorItem\n\u27e829\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListExtender.html: struct pickledb::PickleDbListExtender - PickleDbListExtender\n\u27e830\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIterator.html: struct pickledb::PickleDbListIterator - PickleDbListIterator\n\u27e831\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.liter: PickleDb::liter()\n\u27e832\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIteratorItem.html: struct pickledb::PickleDbListIteratorItem - PickleDbListIteratorItem\n\u27e833\u27e9 https://docs.rs/pickledb/latest/pickledb/#enums: \u00a7\n\u27e834\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html: enum pickledb::PickleDbDumpPolicy - PickleDbDumpPolicy\n\u27e835\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.SerializationMethod.html: enum pickledb::SerializationMethod - SerializationMethod\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 11283,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116469.6328886"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/pickledb",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [7 releases](https://lib.rs/crates/pickledb/versions) (4 breaking)\n0.5.1 |  Apr 26, 2022   \n---|---  \n0.5.0 |  Apr 20, 2022   \n0.4.1 |  Mar 29, 2020   \n0.4.0 |  May 15, 2019   \n0.1.0 |  Jan 16, 2019   \n#**38** in [Database implementations](https://lib.rs/database-implementations \"Database management systems implemented in Rust. Store and query large amounts of data in an efficient manner.\")\nDownload history 15070/week @ 2025-02-05 11314/week @ 2025-02-12 6429/week @ 2025-02-19 9362/week @ 2025-02-26 10028/week @ 2025-03-05 12178/week @ 2025-03-12 12061/week @ 2025-03-19 13026/week @ 2025-03-26 11325/week @ 2025-04-02 12876/week @ 2025-04-09 10459/week @ 2025-04-16 10225/week @ 2025-04-23 8981/week @ 2025-04-30 10389/week @ 2025-05-07 6774/week @ 2025-05-14 3641/week @ 2025-05-21\n**31,329** downloads per month Used in [**26** crates (22 directly)](https://lib.rs/crates/pickledb/rev)\n**MIT** license \n79KB  887 lines\n# PickleDB\n[![Rust test](https://img.gs/czjpqfbdkz/full/https://github.com/seladb/pickledb-rs/workflows/Rust%20test/badge.svg)](https://github.com/seladb/pickledb-rs/actions?query=workflow%3A%22Rust+test%22) [![Rust audit](https://img.gs/czjpqfbdkz/full/https://github.com/seladb/pickledb-rs/workflows/Rust%20audit/badge.svg)](https://github.com/seladb/pickledb-rs/actions?query=workflow%3A%22Rust+audit%22) [![Crate](https://img.shields.io/crates/v/pickledb.svg)](https://crates.io/crates/pickledb) [![API](https://img.gs/czjpqfbdkz/full/https://docs.rs/pickledb/badge.svg)](https://docs.rs/pickledb)\nPickleDB is a lightweight and simple key-value store written in Rust, heavily inspired by [Python's PickleDB](https://pythonhosted.org/pickleDB/)\n## PickleDB is fun and easy to use\n```\n``use` `pickledb`::````{`PickleDb`,` PickleDbDumpPolicy`,` SerializationMethod```}```;`\n``fn` `main`````(````)``````{`\n  ``//` create a new DB with AutoDump (meaning every change is written to the file)`\n  ``//` and with Json serialization (meaning DB will be dumped to file as a Json object)`\n  `let` `mut` db `=` `PickleDb`::``new`(```\"`example.db`\"```,` `PickleDbDumpPolicy`::``AutoDump`,` `SerializationMethod`::``Json`)``;`\n  ``//` set the value 100 to the key 'key1'`\n  db`.``set``(```\"`key1`\"```,` `&``100``)``.``unwrap``(``)``;`\n  ``//` print the value of key1`\n  `println!``(```\"`The value of key1 is: `{}``\"```,` db`.``get`::````<``i32``>```(```\"`key1`\"```)``.``unwrap``(``)``)``;`\n  ``//` load the DB from the same file`\n  `let` db2 `=` `PickleDb`::``load`(```\"`example.db`\"```,` `PickleDbDumpPolicy`::``DumpUponRequest`,` `SerializationMethod`::``Json`)``.``unwrap``(``)``;`\n  ``//` print the value of key1`\n  `println!``(```\"`The value of key1 as loaded from file is: `{}``\"```,` db2`.``get`::````<``i32``>```(```\"`key1`\"```)``.``unwrap``(``)``)``;`\n```}```\n`\n```\n\n## Installation\nThis crate works with Cargo and can be found in [crates.io](https://crates.io/crates/pickledb) Add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`pickledb ``=` ``\"`0.5.1`\"``\n``\n```\n\n## Documentation\nAll documentation for this crate can be found in [docs.rs](https://docs.rs/pickledb)\n## Examples\nThere are currently two examples shipped with PickleDB:\n  * [Hello World](https://github.com/seladb/pickledb-rs/tree/master/examples/hello_world) which shows the basic usage of PickleDB: create a new DB, load a DB from file, get/set key-value pairs of different types, and more\n  * [Lists](https://github.com/seladb/pickledb-rs/tree/master/examples/lists) which shows how to use lists in PickleDB: create new lists, add/remove items from lists, retrieve items from lists, remove lists, and more\n\n\n## Changelog\n### Version 0.5.1\n  * Bugfix: Add missing JSON feature gate\n\n\n### Version 0.5.0\n  * Turn on/off file formats with features\n  * ``DumpUponRequest`` policy no longer dumps on ```Drop```\n  * (internal) Switch CI from TravisCI to GitHub Actions\n\n\n### Version 0.4.1\n  * Bump up dependencies versions to fix vulnerabilities found in few of them\n\n\n### Version 0.4.0\n  * Changed all doc tests from ``ignore`` to ``no_run`` so generated docs don't contain untested warnings\n  * Changed both instances of ``lextend`` to take iterators of references rather than a slice of values\n  * Fixed bug in ```load_test``(``)```\n  * Fixed rustfmt and clippy warnings\n  * Added examples to ``Cargo.toml`` to allow them to be run via Cargo\n\n\n### Version 0.3.0\n  * Added new serialization options. Now PickleDB supports [JSON](https://lib.rs/crates/serde_json), [Bincode](https://lib.rs/crates/bincode), [YAML](https://lib.rs/crates/serde_yaml) and [CBOR](https://lib.rs/crates/serde_cbor) serializations\n  * Added proper error handling ([Issue #3](https://github.com/seladb/pickledb-rs/issues/3))\n  * Use ``Path`` and ``PathBuf`` instead of strings to describe DB paths\n  * Better organization of the code\n\n\n### Version 0.2.0\n  * Dump the DB to file in a crash-safe manner using a temp file (Thanks jamwt from Reddit for the tip: <https://www.reddit.com/r/rust/comments/agumun/check_out_pickledb_a_lightweight_and_simple/ee987j0>)\n  * Extend lists became easier and multiple calls to ```lcreate``(``)```, ```ladd``(``)``` and ```lextend``(``)``` can be chained\n  * Added an iterator over keys and values in the DB\n  * Added an iterator over items in a list\n\n\n#### Dependencies\n~0.3\u20131.4MB  ~31K SLoC\n  * [ optional ](https://lib.rs/crates/pickledb/features#feature-bincode \"bincode is optional feature\") [bincode](https://lib.rs/crates/bincode \"1.0\")\n  * [serde](https://lib.rs/crates/serde \"1.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * [cbor?](https://lib.rs/crates/pickledb/features#feature-cbor \"optional feature\") [serde_cbor](https://lib.rs/crates/serde_cbor \"0.11\")\n  * [json](https://lib.rs/crates/pickledb/features#feature-json \"default feature\") [serde_json](https://lib.rs/crates/serde_json \"1.0\")\n  * [yaml?](https://lib.rs/crates/pickledb/features#feature-yaml \"optional feature\") [serde_yaml](https://lib.rs/crates/serde_yaml \"deprecated\") 0.8\n\n\n  * dev  [fs2](https://lib.rs/crates/fs2 \"0.4\")\n  * dev  [matches](https://lib.rs/crates/matches \"deprecated\") 0.1\n  * dev  [rand](https://lib.rs/crates/rand \"obsolete\") 0.6\n  * dev  [rstest](https://lib.rs/crates/rstest \"obsolete\") 0.2\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  7 releases\u27e81\u27e9 (4 breaking)\n0.5.1 |  Apr 26, 2022   \n---|---  \n0.5.0 |  Apr 20, 2022   \n0.4.1 |  Mar 29, 2020   \n0.4.0 |  May 15, 2019   \n0.1.0 |  Jan 16, 2019   \n#**38** in Database implementations\u27e82\u27e9\nDownload history 15070/week @ 2025-02-05 11314/week @ 2025-02-12 6429/week @ 2025-02-19 9362/week @ 2025-02-26 10028/week @ 2025-03-05 12178/week @ 2025-03-12 12061/week @ 2025-03-19 13026/week @ 2025-03-26 11325/week @ 2025-04-02 12876/week @ 2025-04-09 10459/week @ 2025-04-16 10225/week @ 2025-04-23 8981/week @ 2025-04-30 10389/week @ 2025-05-07 6774/week @ 2025-05-14 3641/week @ 2025-05-21\n**31,329** downloads per month Used in **26** crates (22 directly)\u27e83\u27e9\n**MIT** license \n79KB  887 lines\n# PickleDB\n![Rust test\u27e84\u27e9](https://github.com/seladb/pickledb-rs/actions?query=workflow%3A%22Rust+test%22) ![Rust audit\u27e85\u27e9](https://github.com/seladb/pickledb-rs/actions?query=workflow%3A%22Rust+audit%22) ![Crate\u27e86\u27e9](https://crates.io/crates/pickledb) ![API\u27e87\u27e9](https://docs.rs/pickledb)\nPickleDB is a lightweight and simple key-value store written in Rust, heavily inspired by Python's PickleDB\u27e88\u27e9\n## PickleDB is fun and easy to use\n```\n``use` `pickledb`::````{`PickleDb`,` PickleDbDumpPolicy`,` SerializationMethod```}```;`\n``fn` `main`````(````)``````{`\n  ``//` create a new DB with AutoDump (meaning every change is written to the file)`\n  ``//` and with Json serialization (meaning DB will be dumped to file as a Json object)`\n  `let` `mut` db `=` `PickleDb`::``new`(```\"`example.db`\"```,` `PickleDbDumpPolicy`::``AutoDump`,` `SerializationMethod`::``Json`)``;`\n  ``//` set the value 100 to the key 'key1'`\n  db`.``set``(```\"`key1`\"```,` `&``100``)``.``unwrap``(``)``;`\n  ``//` print the value of key1`\n  `println!``(```\"`The value of key1 is: `{}``\"```,` db`.``get`::````<``i32``>```(```\"`key1`\"```)``.``unwrap``(``)``)``;`\n  ``//` load the DB from the same file`\n  `let` db2 `=` `PickleDb`::``load`(```\"`example.db`\"```,` `PickleDbDumpPolicy`::``DumpUponRequest`,` `SerializationMethod`::``Json`)``.``unwrap``(``)``;`\n  ``//` print the value of key1`\n  `println!``(```\"`The value of key1 as loaded from file is: `{}``\"```,` db2`.``get`::````<``i32``>```(```\"`key1`\"```)``.``unwrap``(``)``)``;`\n```}```\n`\n```\n\n## Installation\nThis crate works with Cargo and can be found in crates.io\u27e89\u27e9 Add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`pickledb ``=` ``\"`0.5.1`\"``\n``\n```\n\n## Documentation\nAll documentation for this crate can be found in docs.rs\u27e810\u27e9\n## Examples\nThere are currently two examples shipped with PickleDB:\n  * Hello World\u27e811\u27e9 which shows the basic usage of PickleDB: create a new DB, load a DB from file, get/set key-value pairs of different types, and more\n  * Lists\u27e812\u27e9 which shows how to use lists in PickleDB: create new lists, add/remove items from lists, retrieve items from lists, remove lists, and more\n\n\n## Changelog\n### Version 0.5.1\n  * Bugfix: Add missing JSON feature gate\n\n\n### Version 0.5.0\n  * Turn on/off file formats with features\n  * ``DumpUponRequest`` policy no longer dumps on ```Drop```\n  * (internal) Switch CI from TravisCI to GitHub Actions\n\n\n### Version 0.4.1\n  * Bump up dependencies versions to fix vulnerabilities found in few of them\n\n\n### Version 0.4.0\n  * Changed all doc tests from ``ignore`` to ``no_run`` so generated docs don't contain untested warnings\n  * Changed both instances of ``lextend`` to take iterators of references rather than a slice of values\n  * Fixed bug in ```load_test``(``)```\n  * Fixed rustfmt and clippy warnings\n  * Added examples to ``Cargo.toml`` to allow them to be run via Cargo\n\n\n### Version 0.3.0\n  * Added new serialization options. Now PickleDB supports JSON\u27e813\u27e9, Bincode\u27e814\u27e9, YAML\u27e815\u27e9 and CBOR\u27e816\u27e9 serializations\n  * Added proper error handling (Issue #3\u27e817\u27e9)\n  * Use ``Path`` and ``PathBuf`` instead of strings to describe DB paths\n  * Better organization of the code\n\n\n### Version 0.2.0\n  * Dump the DB to file in a crash-safe manner using a temp file (Thanks jamwt from Reddit for the tip: <https://www.reddit.com/r/rust/comments/agumun/check_out_pickledb_a_lightweight_and_simple/ee987j0>)\n  * Extend lists became easier and multiple calls to ```lcreate``(``)```, ```ladd``(``)``` and ```lextend``(``)``` can be chained\n  * Added an iterator over keys and values in the DB\n  * Added an iterator over items in a list\n\n\n#### Dependencies\n~0.3\u20131.4MB  ~31K SLoC\n  *  optional \u27e818\u27e9 bincode\u27e814\u27e9\n  * serde\u27e819\u27e9+derive\u27e820\u27e9\n  * cbor?\u27e821\u27e9 serde_cbor\u27e816\u27e9\n  * json\u27e822\u27e9 serde_json\u27e813\u27e9\n  * yaml?\u27e823\u27e9 serde_yaml\u27e815\u27e9 0.8\n\n\n  * dev  fs2\u27e824\u27e9\n  * dev  matches\u27e825\u27e9 0.1\n  * dev  rand\u27e826\u27e9 0.6\n  * dev  rstest\u27e827\u27e9 0.2\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/pickledb/versions: 7 releases\n\u27e82\u27e9 https://lib.rs/database-implementations: Database management systems implemented in Rust. Store and query large amounts of data in an efficient manner. - Database implementations\n\u27e83\u27e9 https://lib.rs/crates/pickledb/rev: **26** crates (22 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/seladb/pickledb-rs/workflows/Rust%20test/badge.svg: ![Rust test\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/seladb/pickledb-rs/workflows/Rust%20audit/badge.svg: ![Rust audit\n\u27e86\u27e9 https://img.shields.io/crates/v/pickledb.svg: ![Crate\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/pickledb/badge.svg: ![API\n\u27e88\u27e9 https://pythonhosted.org/pickleDB/: Python's PickleDB\n\u27e89\u27e9 https://crates.io/crates/pickledb: crates.io\n\u27e810\u27e9 https://docs.rs/pickledb: docs.rs\n\u27e811\u27e9 https://github.com/seladb/pickledb-rs/tree/master/examples/hello_world: Hello World\n\u27e812\u27e9 https://github.com/seladb/pickledb-rs/tree/master/examples/lists: Lists\n\u27e813\u27e9 https://lib.rs/crates/serde_json: JSON\n\u27e814\u27e9 https://lib.rs/crates/bincode: Bincode\n\u27e815\u27e9 https://lib.rs/crates/serde_yaml: YAML\n\u27e816\u27e9 https://lib.rs/crates/serde_cbor: CBOR\n\u27e817\u27e9 https://github.com/seladb/pickledb-rs/issues/3: Issue #3\n\u27e818\u27e9 https://lib.rs/crates/pickledb/features#feature-bincode: bincode is optional feature -  optional \n\u27e819\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e820\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e821\u27e9 https://lib.rs/crates/pickledb/features#feature-cbor: optional feature - cbor?\n\u27e822\u27e9 https://lib.rs/crates/pickledb/features#feature-json: default feature - json\n\u27e823\u27e9 https://lib.rs/crates/pickledb/features#feature-yaml: optional feature - yaml?\n\u27e824\u27e9 https://lib.rs/crates/fs2: 0.4 - fs2\n\u27e825\u27e9 https://lib.rs/crates/matches: deprecated - matches\n\u27e826\u27e9 https://lib.rs/crates/rand: obsolete - rand\n\u27e827\u27e9 https://lib.rs/crates/rstest: obsolete - rstest\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6275,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116470.031214"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libitoa-152930f934834daf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.79",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.79\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.79\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_json-095097c1af137e35\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_json-095097c1af137e35\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\proc-macro2-e39b891b56899934\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\proc-macro2-e39b891b56899934\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde-6fa99ee314c3afc4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde-6fa99ee314c3afc4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\syn-e075cc3e94216cfe\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\syn-e075cc3e94216cfe\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.136\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_derive-765764035b674c11\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_derive-765764035b674c11\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libryu-3ce7cbc3b6d85405.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.79",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "limb_width_64"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_json-9fb82f9326c169e5\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\proc-macro2-f5cf7d5adc2ec8b3\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde-04447f773d77ba62\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\syn-865a8f3bc134b6d2\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.136",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "underscore_consts",
                "ptr_addr_of"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_derive-4e15f9f724020ee5\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libproc_macro2-e97922ab2b6a39a0.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libproc_macro2-e97922ab2b6a39a0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libquote-fe3df0227bbf1566.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libquote-fe3df0227bbf1566.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libsyn-2815e009d4f71277.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libsyn-2815e009d4f71277.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.136\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\serde_derive-f0126422bdf5f320.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\serde_derive-f0126422bdf5f320.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\serde_derive-f0126422bdf5f320.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\serde_derive-f0126422bdf5f320.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libserde-6eb95f79edc7f70a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.79",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.79\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.79\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libserde_json-a295be10b5b22c70.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "json"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libpickledb-924944aa7545eec0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\proc-macro2-e39b891b56899934\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\proc-macro2-e39b891b56899934\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\proc-macro2-f5cf7d5adc2ec8b3\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\syn-e075cc3e94216cfe\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\syn-e075cc3e94216cfe\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.136\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_derive-765764035b674c11\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_derive-765764035b674c11\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde-6fa99ee314c3afc4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde-6fa99ee314c3afc4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.79",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.79\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.79\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_json-095097c1af137e35\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_json-095097c1af137e35\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libryu-3ce7cbc3b6d85405.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libitoa-152930f934834daf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libproc_macro2-e97922ab2b6a39a0.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libproc_macro2-e97922ab2b6a39a0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\syn-865a8f3bc134b6d2\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.136",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "underscore_consts",
                "ptr_addr_of"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_derive-4e15f9f724020ee5\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde-04447f773d77ba62\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.79",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "limb_width_64"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\build\\serde_json-9fb82f9326c169e5\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libquote-fe3df0227bbf1566.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libquote-fe3df0227bbf1566.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libsyn-2815e009d4f71277.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libsyn-2815e009d4f71277.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.136\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\serde_derive-f0126422bdf5f320.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\serde_derive-f0126422bdf5f320.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\serde_derive-f0126422bdf5f320.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\serde_derive-f0126422bdf5f320.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libserde-6eb95f79edc7f70a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.79",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.79\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.79\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libserde_json-a295be10b5b22c70.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\pickledb.rs:45:9\n   |\n45 |     ///    [PickleDb::load()](#method.load) to understand the different policy options\n   |         ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n   = note: `#[warn(clippy::doc_overindented_list_items)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_overindented_list_items)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1814,
                        "byte_start": 1811,
                        "column_end": 12,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\pickledb.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 9,
                            "text": "    ///    [PickleDb::load()](#method.load) to understand the different policy options"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 1814,
                    "byte_start": 1811,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\pickledb.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "    ///    [PickleDb::load()](#method.load) to understand the different policy options"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\pickledb.rs:80:9\n   |\n80 |     ///    [PickleDb::load()](#method.load) to understand the different policy options\n   |         ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3133,
                        "byte_start": 3130,
                        "column_end": 12,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\pickledb.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 80,
                        "line_start": 80,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 9,
                            "text": "    ///    [PickleDb::load()](#method.load) to understand the different policy options"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3133,
                    "byte_start": 3130,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\pickledb.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 80,
                    "line_start": 80,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "    ///    [PickleDb::load()](#method.load) to understand the different policy options"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unnecessary use of `get(key).is_some()`\n   --> src\\pickledb.rs:543:18\n    |\n543 |         self.map.get(key).is_some() || self.list_map.get(key).is_some()\n    |                  ^^^^^^^^^^^^^^^^^^ help: replace it with: `contains_key(key)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_get_then_check\n    = note: `#[warn(clippy::unnecessary_get_then_check)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_get_then_check",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unnecessary_get_then_check)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace it with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20767,
                        "byte_start": 20749,
                        "column_end": 36,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\pickledb.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 543,
                        "line_start": 543,
                        "suggested_replacement": "contains_key(key)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 18,
                            "text": "        self.map.get(key).is_some() || self.list_map.get(key).is_some()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_get_then_check",
                  "explanation": null
                },
                "level": "warning",
                "message": "unnecessary use of `get(key).is_some()`",
                "spans": [
                  {
                    "byte_end": 20767,
                    "byte_start": 20749,
                    "column_end": 36,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\pickledb.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 543,
                    "line_start": 543,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 18,
                        "text": "        self.map.get(key).is_some() || self.list_map.get(key).is_some()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unnecessary use of `get(key).is_some()`\n   --> src\\pickledb.rs:543:54\n    |\n543 |         self.map.get(key).is_some() || self.list_map.get(key).is_some()\n    |                                                      ^^^^^^^^^^^^^^^^^^ help: replace it with: `contains_key(key)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_get_then_check\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_get_then_check",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace it with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20803,
                        "byte_start": 20785,
                        "column_end": 72,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\pickledb.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 543,
                        "line_start": 543,
                        "suggested_replacement": "contains_key(key)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 72,
                            "highlight_start": 54,
                            "text": "        self.map.get(key).is_some() || self.list_map.get(key).is_some()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_get_then_check",
                  "explanation": null
                },
                "level": "warning",
                "message": "unnecessary use of `get(key).is_some()`",
                "spans": [
                  {
                    "byte_end": 20803,
                    "byte_start": 20785,
                    "column_end": 72,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "src\\pickledb.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 543,
                    "line_start": 543,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 72,
                        "highlight_start": 54,
                        "text": "        self.map.get(key).is_some() || self.list_map.get(key).is_some()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: iterating on a map's keys\n   --> src\\pickledb.rs:553:13\n    |\n553 | /             self.map\n554 | |                 .iter()\n555 | |                 .map(|(key, _)| key.clone())\n    | |____________________________________________^ help: try: `self.map.keys().map(|key| key.clone())`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n    = note: `#[warn(clippy::iter_kv_map)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::iter_kv_map)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21145,
                        "byte_start": 21068,
                        "column_end": 45,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\pickledb.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 555,
                        "line_start": 553,
                        "suggested_replacement": "self.map.keys().map(|key| key.clone())",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 13,
                            "text": "            self.map"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "                .iter()"
                          },
                          {
                            "highlight_end": 45,
                            "highlight_start": 1,
                            "text": "                .map(|(key, _)| key.clone())"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::iter_kv_map",
                  "explanation": null
                },
                "level": "warning",
                "message": "iterating on a map's keys",
                "spans": [
                  {
                    "byte_end": 21145,
                    "byte_start": 21068,
                    "column_end": 45,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\pickledb.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 555,
                    "line_start": 553,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 13,
                        "text": "            self.map"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "                .iter()"
                      },
                      {
                        "highlight_end": 45,
                        "highlight_start": 1,
                        "text": "                .map(|(key, _)| key.clone())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: iterating on a map's keys\n   --> src\\pickledb.rs:557:13\n    |\n557 | /             self.list_map\n558 | |                 .iter()\n559 | |                 .map(|(key, _)| key.clone())\n    | |____________________________________________^ help: try: `self.list_map.keys().map(|key| key.clone())`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21283,
                        "byte_start": 21201,
                        "column_end": 45,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\pickledb.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 559,
                        "line_start": 557,
                        "suggested_replacement": "self.list_map.keys().map(|key| key.clone())",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 13,
                            "text": "            self.list_map"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "                .iter()"
                          },
                          {
                            "highlight_end": 45,
                            "highlight_start": 1,
                            "text": "                .map(|(key, _)| key.clone())"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::iter_kv_map",
                  "explanation": null
                },
                "level": "warning",
                "message": "iterating on a map's keys",
                "spans": [
                  {
                    "byte_end": 21283,
                    "byte_start": 21201,
                    "column_end": 45,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\pickledb.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 559,
                    "line_start": 557,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 13,
                        "text": "            self.list_map"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "                .iter()"
                      },
                      {
                        "highlight_end": 45,
                        "highlight_start": 1,
                        "text": "                .map(|(key, _)| key.clone())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unnecessary use of `get(name).is_some()`\n   --> src\\pickledb.rs:652:23\n    |\n652 |         self.list_map.get(name).is_some()\n    |                       ^^^^^^^^^^^^^^^^^^^ help: replace it with: `contains_key(name)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_get_then_check\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_get_then_check",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace it with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 24736,
                        "byte_start": 24717,
                        "column_end": 42,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\pickledb.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 652,
                        "line_start": 652,
                        "suggested_replacement": "contains_key(name)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 23,
                            "text": "        self.list_map.get(name).is_some()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_get_then_check",
                  "explanation": null
                },
                "level": "warning",
                "message": "unnecessary use of `get(name).is_some()`",
                "spans": [
                  {
                    "byte_end": 24736,
                    "byte_start": 24717,
                    "column_end": 42,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\pickledb.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 652,
                    "line_start": 652,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 23,
                        "text": "        self.list_map.get(name).is_some()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\serialization.rs:39:9\n   |\n39 |         write!(f, \"{:?}\", self)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n   = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n   |\n39 -         write!(f, \"{:?}\", self)\n39 +         write!(f, \"{self:?}\")\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1121,
                        "byte_start": 1121,
                        "column_end": 21,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\serialization.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 21,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      },
                      {
                        "byte_end": 1131,
                        "byte_start": 1125,
                        "column_end": 31,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\serialization.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 25,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 1132,
                    "byte_start": 1109,
                    "column_end": 32,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\serialization.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{:?}\", self)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: manual implementation of `ok`\n  --> src\\serialization.rs:56:9\n   |\n56 | /         match serde_json::from_str(std::str::from_utf8(ser_data).unwrap()) {\n57 | |             Ok(val) => Some(val),\n58 | |             Err(_) => None,\n59 | |         }\n   | |_________^ help: replace with: `serde_json::from_str(std::str::from_utf8(ser_data).unwrap()).ok()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_err\n   = note: `#[warn(clippy::manual_ok_err)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_err",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::manual_ok_err)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1563,
                        "byte_start": 1423,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\serialization.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 59,
                        "line_start": 56,
                        "suggested_replacement": "serde_json::from_str(std::str::from_utf8(ser_data).unwrap()).ok()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 9,
                            "text": "        match serde_json::from_str(std::str::from_utf8(ser_data).unwrap()) {"
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            Ok(val) => Some(val),"
                          },
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "            Err(_) => None,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::manual_ok_err",
                  "explanation": null
                },
                "level": "warning",
                "message": "manual implementation of `ok`",
                "spans": [
                  {
                    "byte_end": 1563,
                    "byte_start": 1423,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\serialization.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 9,
                        "text": "        match serde_json::from_str(std::str::from_utf8(ser_data).unwrap()) {"
                      },
                      {
                        "highlight_end": 34,
                        "highlight_start": 1,
                        "text": "            Ok(val) => Some(val),"
                      },
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "            Err(_) => None,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpraqd332y/pickledb-0.5.1#pickledb@0.5.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pickledb",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "json"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpraqd332y\\pickledb-0.5.1\\target\\debug\\deps\\libpickledb-3997ae352b712590.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 45
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "serde_cbor",
                    "version": "0.11.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5",
                    "dependencies": [
                      {
                        "name": "half",
                        "version": "1.8.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde",
                        "version": "1.0.136",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0127",
                    "package": "serde_cbor",
                    "title": "serde_cbor is unmaintained",
                    "description": "The `serde_cbor` crate is unmaintained. The author has archived the github repository.\n\nAlternatives proposed by the author:\n\n * [`ciborium`](https://crates.io/crates/ciborium)\n * [`minicbor`](https://crates.io/crates/minicbor)",
                    "date": "2021-08-15",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/pyfisch/cbor",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "yaml-rust",
                    "version": "0.4.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85",
                    "dependencies": [
                      {
                        "name": "linked-hash-map",
                        "version": "0.5.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0320",
                    "package": "yaml-rust",
                    "title": "yaml-rust is unmaintained.",
                    "description": "The maintainer seems [unreachable](https://github.com/chyh1990/yaml-rust/issues/197).\n\nMany issues and pull requests have been submitted over the years\nwithout any [response](https://github.com/chyh1990/yaml-rust/issues/160).\n\n## Alternatives\n\nConsider switching to the actively maintained `yaml-rust2` fork of the original project:\n\n- [yaml-rust2](https://github.com/Ethiraric/yaml-rust2)\n- [yaml-rust2 @ crates.io](https://crates.io/crates/yaml-rust2)",
                    "date": "2024-03-20",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rustsec/advisory-db/issues/1921",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "pickledb",
          "version": "0.5.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/pickledb/latest/pickledb/all.html \"show sidebar\")\n# Crate pickledbCopy item path\n[Settings](https://docs.rs/pickledb/latest/settings.html)\n[Help](https://docs.rs/pickledb/latest/help.html)\nSummary[Source](https://docs.rs/pickledb/latest/src/pickledb/lib.rs.html#1-117)\nExpand description\n## [\u00a7](https://docs.rs/pickledb/latest/pickledb/#pickledb)PickleDB\nPickleDB-rs is a lightweight and simple key-value store written in Rust, heavily inspired by [Python\u2019s PickleDB](https://pythonhosted.org/pickleDB/)\nPickleDB\u2019s architecture is very simple and straight-forward: the whole key-value data structure is stored in memory and is dumped to a file periodically according to a policy defined by the user. There are APIs to create a new key-value store in memory or to load it from a file. Everything runs in the user\u2019s process and memory and in the same thread, which means that the key-value data will be stored in the user process\u2019s memory and each API call will access that key-value store directly and may trigger a dump to the DB file. There are no additional threads or processes created throughout the life-cycle of any of the APIs.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#so-what-is-it-useful-for)So what is it useful for?\nBasically for any use case that needs a simple and relatively small key-value store that can run in-process and be stored in a file. Most of the key-value stores out there provide high scalability, performance and robustness, but in the cost of a very complex architecture, a lot of installation and configuration, and in many cases require a descent amount of resources. But sometimes you don\u2019t need this scalability and performance and all you need is a simple solution that can be easily set up and is easy to use and understand. That\u2019s where PickleDB-rs comes into the picture! I personally encountered several use cases like that and that\u2019s how I came to know about [Python\u2019s PickleDB](https://pythonhosted.org/pickleDB/), and I thought it\u2019d be nice to build one in Rust as well.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#main-features)Main features\nLike the [Python\u2019s PickleDB](https://pythonhosted.org/pickleDB/), the API is very much inspired by Redis API and provides the following main capabilities:\n  * Create a new key-value store in memory or load it from a file\n  * Dump the key-value store to a file according to a user-defined policy\n  * Set and get key-value pairs. A very unique feature in PickleDB is that the key-value map is heterogeneous. Please see more details below\n  * Manage lists. Every list has a name (which is its key in the key-value store) and a list of items it stores. PickleDB provides APIs to create and delete lists and to add or remove items from them. Lists are also heterogeneous, meaning each list can store objects of different types. Please see more details below\n  * Iterate over keys and values in the DB and over items in a list\n\n\nPlease take a look at the API documentation to get more details.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#pickledb-provides-heterogeneous-map-and-lists)PickleDB provides heterogeneous map and lists!\nHeterogeneous data structures are the ones in which the data elements doesn\u2019t belong to the same data type. All the data elements have different data types. As you know, Rust doesn\u2019t have a built-it mechanism for working with heterogeneous data structures. For example: it\u2019s not easy to define a list where each element has a different data type, and it\u2019s also not easy to define a map which contains keys or values of different data types. PickleDB tries to address this challenge and allows values to be of any type and also build lists that contains items of different data types. It achieves that using serialization, which you can read more about below. This is a pretty cool feature that you may find very useful. The different types that are supported are:\n  * All primitive types\n  * Strings\n  * Vectors\n  * Tuples\n  * Structs and Enums that are serializable (please read more below)\n\n\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#serialization)Serialization\nSerialization is an important part of PickleDB. It is the way heterogeneous data structures are enabled: instead of saving the actual object, PickleDB stores a serialized version of it. That way all objects are \u201cnormalized\u201d to the same type and can be stored in Rust data structures such as a HashMap or a Vector.\nSerialization is also the way data is stored in a file: before saving to the file, all data in memory is serialized and then it is written to the file; upon loading the serialized data is read from the file and then deserialized to memory. Of course serialization and deserialization has their performance cost but high performance is not one of PickleDB\u2019s main objectives and I think it\u2019s a fair price to pay for achieving heterogeneous data structures.\nIn order to achieve this magic, all objects must be serializable. PickleDB uses the [Serde](https://serde.rs/) library for serialization. Currently 4 types of serialization are supported:\n  * [JSON serialization](https://crates.io/crates/serde_json)\n  * [Bincode serialization](https://crates.io/crates/bincode)\n  * [YAML serialization](https://crates.io/crates/serde_yaml)\n  * [CBOR serialization](https://crates.io/crates/serde_cbor)\n\n\nThe serialization types are enabled and disabled with features (`json` (enabled by default), `bincode`, `yaml`, and `cbor`). To enable them, just add their names to the `features` list when declaring the dependency. To disable JSON, set `default-features` to false. For instance, `pickledb = { version = \"0.5\", features = [\"cbor\", \"yaml\"], default-features = false }` would enable CBOR and YAML only.\nThe user can choose a serialization type to use upon creating a DB or loading it from a file.\nSo what does it mean that all objects must be serializable? That means that all objects that you use must be serializable. Fortunately Serde already provides out-of-the-box serialization for most of the common objects: all primitive types, strings, vectors and tuples are already serializable and you don\u2019t need to do anything to use them. But if you want to define your own structs or enums, you need to make sure they\u2019re serializable, which means that:\n  * They should include the `#[derive(Serialize, Deserialize)]` macro. Please see [here](https://serde.rs/derive.html) for more details\n  * If a struct contains non-primitive members, they should be serializable as well\n  * You should include `serde = \"1.0\"` and `serde_derive = \"1.0\"` dependencies in your `Cargo.toml` file\n\n\nYou can take a look at the examples provided with PickleDB to get a better idea of how this works.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#dumping-data-to-a-file)Dumping data to a file\nAs mentioned before, PickleDB stores all the data in a file for persistency. Dumping data to a file is pretty expensive in terms of time and performance, for various reasons:\n  * Everything in PickleDB runs in the user process context (including file writes), so frequent writes will affect the user process\u2019s performance\n  * The current implementation dumps all of the data into the file, which gets more significant as data gets bigger\n  * Before writing to the file the data is being serialized, which also has a performance cost\n\n\nAlthough performance is not a big concern for PickleDB, I felt it\u2019d make sense to implement different dump policies for the user to choose when creating a new DB or loading one from a file. Here are the different policies and the differences between them:\n  * [PickleDbDumpPolicy::NeverDump](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.NeverDump) - never dump any change, file will always remain read-only. When choosing this policy even calling to [dump()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.dump) won\u2019t dump the data.\n  * [PickleDbDumpPolicy::AutoDump](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.AutoDump) - every change will be dumped immediately and automatically to the file\n  * [PickleDbDumpPolicy::DumpUponRequest](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.DumpUponRequest) - data won\u2019t be dumped unless the user calls [dump()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.dump) proactively to dump the data\n  * [PickleDbDumpPolicy::PeriodicDump(Duration)](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.PeriodicDump) - changes will be dumped to the file periodically, no sooner than the Duration provided by the user. The way this mechanism works is as follows: each time there is a DB change the last DB dump time is checked. If the time that has passed since the last dump is higher than Duration, changes will be dumped, otherwise changes will not be dumped.\n\n\nApart from this dump policy, persistency is also kept by a implementing the `Drop` trait for the `PickleDB` object which ensures all in-memory data is dumped to the file upon destruction of the object.\n## Modules[\u00a7](https://docs.rs/pickledb/latest/pickledb/#modules)\n\n[error](https://docs.rs/pickledb/latest/pickledb/error/index.html \"mod pickledb::error\")\n\n## Structs[\u00a7](https://docs.rs/pickledb/latest/pickledb/#structs)\n\n[PickleDb](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html \"struct pickledb::PickleDb\")\n    A struct that represents a PickleDb object\n\n[PickleDbIterator](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIterator.html \"struct pickledb::PickleDbIterator\")\n    Iterator object for iterating over keys and values in PickleDB. Returned in [PickleDb::iter()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.iter)\n\n[PickleDbIteratorItem](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIteratorItem.html \"struct pickledb::PickleDbIteratorItem\")\n    The object returned in each iteration when iterating over keys and values in PickleDB\n\n[PickleDbListExtender](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListExtender.html \"struct pickledb::PickleDbListExtender\")\n    A struct for extending PickleDB lists and adding more items to them\n\n[PickleDbListIterator](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIterator.html \"struct pickledb::PickleDbListIterator\")\n    Iterator object for iterating over items in a PickleDB list. Returned in [PickleDb::liter()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.liter)\n\n[PickleDbListIteratorItem](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIteratorItem.html \"struct pickledb::PickleDbListIteratorItem\")\n    The object returned in each iteration when iterating over a PickleDB list\n## Enums[\u00a7](https://docs.rs/pickledb/latest/pickledb/#enums)\n\n[PickleDbDumpPolicy](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html \"enum pickledb::PickleDbDumpPolicy\")\n    An enum that determines the policy of dumping PickleDb changes into the file\n\n[SerializationMethod](https://docs.rs/pickledb/latest/pickledb/enum.SerializationMethod.html \"enum pickledb::SerializationMethod\")\n    An enum for specifying the serialization method to use when creating a new PickleDB database or loading one from a file\n",
            "markdown_with_citations": "[](https://docs.rs/pickledb/latest/pickledb/all.html \"show sidebar\")\n# Crate pickledbCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9PickleDB\nPickleDB-rs is a lightweight and simple key-value store written in Rust, heavily inspired by Python\u2019s PickleDB\u27e85\u27e9\nPickleDB\u2019s architecture is very simple and straight-forward: the whole key-value data structure is stored in memory and is dumped to a file periodically according to a policy defined by the user. There are APIs to create a new key-value store in memory or to load it from a file. Everything runs in the user\u2019s process and memory and in the same thread, which means that the key-value data will be stored in the user process\u2019s memory and each API call will access that key-value store directly and may trigger a dump to the DB file. There are no additional threads or processes created throughout the life-cycle of any of the APIs.\n### \u00a7\u27e86\u27e9So what is it useful for?\nBasically for any use case that needs a simple and relatively small key-value store that can run in-process and be stored in a file. Most of the key-value stores out there provide high scalability, performance and robustness, but in the cost of a very complex architecture, a lot of installation and configuration, and in many cases require a descent amount of resources. But sometimes you don\u2019t need this scalability and performance and all you need is a simple solution that can be easily set up and is easy to use and understand. That\u2019s where PickleDB-rs comes into the picture! I personally encountered several use cases like that and that\u2019s how I came to know about Python\u2019s PickleDB\u27e85\u27e9, and I thought it\u2019d be nice to build one in Rust as well.\n### \u00a7\u27e87\u27e9Main features\nLike the Python\u2019s PickleDB\u27e85\u27e9, the API is very much inspired by Redis API and provides the following main capabilities:\n  * Create a new key-value store in memory or load it from a file\n  * Dump the key-value store to a file according to a user-defined policy\n  * Set and get key-value pairs. A very unique feature in PickleDB is that the key-value map is heterogeneous. Please see more details below\n  * Manage lists. Every list has a name (which is its key in the key-value store) and a list of items it stores. PickleDB provides APIs to create and delete lists and to add or remove items from them. Lists are also heterogeneous, meaning each list can store objects of different types. Please see more details below\n  * Iterate over keys and values in the DB and over items in a list\n\n\nPlease take a look at the API documentation to get more details.\n### \u00a7\u27e88\u27e9PickleDB provides heterogeneous map and lists!\nHeterogeneous data structures are the ones in which the data elements doesn\u2019t belong to the same data type. All the data elements have different data types. As you know, Rust doesn\u2019t have a built-it mechanism for working with heterogeneous data structures. For example: it\u2019s not easy to define a list where each element has a different data type, and it\u2019s also not easy to define a map which contains keys or values of different data types. PickleDB tries to address this challenge and allows values to be of any type and also build lists that contains items of different data types. It achieves that using serialization, which you can read more about below. This is a pretty cool feature that you may find very useful. The different types that are supported are:\n  * All primitive types\n  * Strings\n  * Vectors\n  * Tuples\n  * Structs and Enums that are serializable (please read more below)\n\n\n### \u00a7\u27e89\u27e9Serialization\nSerialization is an important part of PickleDB. It is the way heterogeneous data structures are enabled: instead of saving the actual object, PickleDB stores a serialized version of it. That way all objects are \u201cnormalized\u201d to the same type and can be stored in Rust data structures such as a HashMap or a Vector.\nSerialization is also the way data is stored in a file: before saving to the file, all data in memory is serialized and then it is written to the file; upon loading the serialized data is read from the file and then deserialized to memory. Of course serialization and deserialization has their performance cost but high performance is not one of PickleDB\u2019s main objectives and I think it\u2019s a fair price to pay for achieving heterogeneous data structures.\nIn order to achieve this magic, all objects must be serializable. PickleDB uses the Serde\u27e810\u27e9 library for serialization. Currently 4 types of serialization are supported:\n  * JSON serialization\u27e811\u27e9\n  * Bincode serialization\u27e812\u27e9\n  * YAML serialization\u27e813\u27e9\n  * CBOR serialization\u27e814\u27e9\n\n\nThe serialization types are enabled and disabled with features (`json` (enabled by default), `bincode`, `yaml`, and `cbor`). To enable them, just add their names to the `features` list when declaring the dependency. To disable JSON, set `default-features` to false. For instance, `pickledb = { version = \"0.5\", features = [\"cbor\", \"yaml\"], default-features = false }` would enable CBOR and YAML only.\nThe user can choose a serialization type to use upon creating a DB or loading it from a file.\nSo what does it mean that all objects must be serializable? That means that all objects that you use must be serializable. Fortunately Serde already provides out-of-the-box serialization for most of the common objects: all primitive types, strings, vectors and tuples are already serializable and you don\u2019t need to do anything to use them. But if you want to define your own structs or enums, you need to make sure they\u2019re serializable, which means that:\n  * They should include the `#[derive(Serialize, Deserialize)]` macro. Please see here\u27e815\u27e9 for more details\n  * If a struct contains non-primitive members, they should be serializable as well\n  * You should include `serde = \"1.0\"` and `serde_derive = \"1.0\"` dependencies in your `Cargo.toml` file\n\n\nYou can take a look at the examples provided with PickleDB to get a better idea of how this works.\n### \u00a7\u27e816\u27e9Dumping data to a file\nAs mentioned before, PickleDB stores all the data in a file for persistency. Dumping data to a file is pretty expensive in terms of time and performance, for various reasons:\n  * Everything in PickleDB runs in the user process context (including file writes), so frequent writes will affect the user process\u2019s performance\n  * The current implementation dumps all of the data into the file, which gets more significant as data gets bigger\n  * Before writing to the file the data is being serialized, which also has a performance cost\n\n\nAlthough performance is not a big concern for PickleDB, I felt it\u2019d make sense to implement different dump policies for the user to choose when creating a new DB or loading one from a file. Here are the different policies and the differences between them:\n  * PickleDbDumpPolicy::NeverDump\u27e817\u27e9 - never dump any change, file will always remain read-only. When choosing this policy even calling to dump()\u27e818\u27e9 won\u2019t dump the data.\n  * PickleDbDumpPolicy::AutoDump\u27e819\u27e9 - every change will be dumped immediately and automatically to the file\n  * PickleDbDumpPolicy::DumpUponRequest\u27e820\u27e9 - data won\u2019t be dumped unless the user calls dump()\u27e818\u27e9 proactively to dump the data\n  * PickleDbDumpPolicy::PeriodicDump(Duration)\u27e821\u27e9 - changes will be dumped to the file periodically, no sooner than the Duration provided by the user. The way this mechanism works is as follows: each time there is a DB change the last DB dump time is checked. If the time that has passed since the last dump is higher than Duration, changes will be dumped, otherwise changes will not be dumped.\n\n\nApart from this dump policy, persistency is also kept by a implementing the `Drop` trait for the `PickleDB` object which ensures all in-memory data is dumped to the file upon destruction of the object.\n## Modules\u00a7\u27e822\u27e9\n\nerror\u27e823\u27e9\n\n## Structs\u00a7\u27e824\u27e9\n\nPickleDb\u27e825\u27e9\n    A struct that represents a PickleDb object\n\nPickleDbIterator\u27e826\u27e9\n    Iterator object for iterating over keys and values in PickleDB. Returned in PickleDb::iter()\u27e827\u27e9\n\nPickleDbIteratorItem\u27e828\u27e9\n    The object returned in each iteration when iterating over keys and values in PickleDB\n\nPickleDbListExtender\u27e829\u27e9\n    A struct for extending PickleDB lists and adding more items to them\n\nPickleDbListIterator\u27e830\u27e9\n    Iterator object for iterating over items in a PickleDB list. Returned in PickleDb::liter()\u27e831\u27e9\n\nPickleDbListIteratorItem\u27e832\u27e9\n    The object returned in each iteration when iterating over a PickleDB list\n## Enums\u00a7\u27e833\u27e9\n\nPickleDbDumpPolicy\u27e834\u27e9\n    An enum that determines the policy of dumping PickleDb changes into the file\n\nSerializationMethod\u27e835\u27e9\n    An enum for specifying the serialization method to use when creating a new PickleDB database or loading one from a file\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pickledb/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pickledb/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pickledb/latest/src/pickledb/lib.rs.html#1-117: Source\n\u27e84\u27e9 https://docs.rs/pickledb/latest/pickledb/#pickledb: \u00a7\n\u27e85\u27e9 https://pythonhosted.org/pickleDB/: Python\u2019s PickleDB\n\u27e86\u27e9 https://docs.rs/pickledb/latest/pickledb/#so-what-is-it-useful-for: \u00a7\n\u27e87\u27e9 https://docs.rs/pickledb/latest/pickledb/#main-features: \u00a7\n\u27e88\u27e9 https://docs.rs/pickledb/latest/pickledb/#pickledb-provides-heterogeneous-map-and-lists: \u00a7\n\u27e89\u27e9 https://docs.rs/pickledb/latest/pickledb/#serialization: \u00a7\n\u27e810\u27e9 https://serde.rs/: Serde\n\u27e811\u27e9 https://crates.io/crates/serde_json: JSON serialization\n\u27e812\u27e9 https://crates.io/crates/bincode: Bincode serialization\n\u27e813\u27e9 https://crates.io/crates/serde_yaml: YAML serialization\n\u27e814\u27e9 https://crates.io/crates/serde_cbor: CBOR serialization\n\u27e815\u27e9 https://serde.rs/derive.html: here\n\u27e816\u27e9 https://docs.rs/pickledb/latest/pickledb/#dumping-data-to-a-file: \u00a7\n\u27e817\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.NeverDump: PickleDbDumpPolicy::NeverDump\n\u27e818\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.dump: dump()\n\u27e819\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.AutoDump: PickleDbDumpPolicy::AutoDump\n\u27e820\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.DumpUponRequest: PickleDbDumpPolicy::DumpUponRequest\n\u27e821\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.PeriodicDump: PickleDbDumpPolicy::PeriodicDump(Duration)\n\u27e822\u27e9 https://docs.rs/pickledb/latest/pickledb/#modules: \u00a7\n\u27e823\u27e9 https://docs.rs/pickledb/latest/pickledb/error/index.html: mod pickledb::error - error\n\u27e824\u27e9 https://docs.rs/pickledb/latest/pickledb/#structs: \u00a7\n\u27e825\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html: struct pickledb::PickleDb - PickleDb\n\u27e826\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIterator.html: struct pickledb::PickleDbIterator - PickleDbIterator\n\u27e827\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.iter: PickleDb::iter()\n\u27e828\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIteratorItem.html: struct pickledb::PickleDbIteratorItem - PickleDbIteratorItem\n\u27e829\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListExtender.html: struct pickledb::PickleDbListExtender - PickleDbListExtender\n\u27e830\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIterator.html: struct pickledb::PickleDbListIterator - PickleDbListIterator\n\u27e831\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.liter: PickleDb::liter()\n\u27e832\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIteratorItem.html: struct pickledb::PickleDbListIteratorItem - PickleDbListIteratorItem\n\u27e833\u27e9 https://docs.rs/pickledb/latest/pickledb/#enums: \u00a7\n\u27e834\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html: enum pickledb::PickleDbDumpPolicy - PickleDbDumpPolicy\n\u27e835\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.SerializationMethod.html: enum pickledb::SerializationMethod - SerializationMethod\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "pickledb",
          "version": "0.5.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/pickledb/latest/pickledb/all.html \"show sidebar\")\n# Crate pickledbCopy item path\n[Settings](https://docs.rs/pickledb/latest/settings.html)\n[Help](https://docs.rs/pickledb/latest/help.html)\nSummary[Source](https://docs.rs/pickledb/latest/src/pickledb/lib.rs.html#1-117)\nExpand description\n## [\u00a7](https://docs.rs/pickledb/latest/pickledb/#pickledb)PickleDB\nPickleDB-rs is a lightweight and simple key-value store written in Rust, heavily inspired by [Python\u2019s PickleDB](https://pythonhosted.org/pickleDB/)\nPickleDB\u2019s architecture is very simple and straight-forward: the whole key-value data structure is stored in memory and is dumped to a file periodically according to a policy defined by the user. There are APIs to create a new key-value store in memory or to load it from a file. Everything runs in the user\u2019s process and memory and in the same thread, which means that the key-value data will be stored in the user process\u2019s memory and each API call will access that key-value store directly and may trigger a dump to the DB file. There are no additional threads or processes created throughout the life-cycle of any of the APIs.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#so-what-is-it-useful-for)So what is it useful for?\nBasically for any use case that needs a simple and relatively small key-value store that can run in-process and be stored in a file. Most of the key-value stores out there provide high scalability, performance and robustness, but in the cost of a very complex architecture, a lot of installation and configuration, and in many cases require a descent amount of resources. But sometimes you don\u2019t need this scalability and performance and all you need is a simple solution that can be easily set up and is easy to use and understand. That\u2019s where PickleDB-rs comes into the picture! I personally encountered several use cases like that and that\u2019s how I came to know about [Python\u2019s PickleDB](https://pythonhosted.org/pickleDB/), and I thought it\u2019d be nice to build one in Rust as well.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#main-features)Main features\nLike the [Python\u2019s PickleDB](https://pythonhosted.org/pickleDB/), the API is very much inspired by Redis API and provides the following main capabilities:\n  * Create a new key-value store in memory or load it from a file\n  * Dump the key-value store to a file according to a user-defined policy\n  * Set and get key-value pairs. A very unique feature in PickleDB is that the key-value map is heterogeneous. Please see more details below\n  * Manage lists. Every list has a name (which is its key in the key-value store) and a list of items it stores. PickleDB provides APIs to create and delete lists and to add or remove items from them. Lists are also heterogeneous, meaning each list can store objects of different types. Please see more details below\n  * Iterate over keys and values in the DB and over items in a list\n\n\nPlease take a look at the API documentation to get more details.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#pickledb-provides-heterogeneous-map-and-lists)PickleDB provides heterogeneous map and lists!\nHeterogeneous data structures are the ones in which the data elements doesn\u2019t belong to the same data type. All the data elements have different data types. As you know, Rust doesn\u2019t have a built-it mechanism for working with heterogeneous data structures. For example: it\u2019s not easy to define a list where each element has a different data type, and it\u2019s also not easy to define a map which contains keys or values of different data types. PickleDB tries to address this challenge and allows values to be of any type and also build lists that contains items of different data types. It achieves that using serialization, which you can read more about below. This is a pretty cool feature that you may find very useful. The different types that are supported are:\n  * All primitive types\n  * Strings\n  * Vectors\n  * Tuples\n  * Structs and Enums that are serializable (please read more below)\n\n\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#serialization)Serialization\nSerialization is an important part of PickleDB. It is the way heterogeneous data structures are enabled: instead of saving the actual object, PickleDB stores a serialized version of it. That way all objects are \u201cnormalized\u201d to the same type and can be stored in Rust data structures such as a HashMap or a Vector.\nSerialization is also the way data is stored in a file: before saving to the file, all data in memory is serialized and then it is written to the file; upon loading the serialized data is read from the file and then deserialized to memory. Of course serialization and deserialization has their performance cost but high performance is not one of PickleDB\u2019s main objectives and I think it\u2019s a fair price to pay for achieving heterogeneous data structures.\nIn order to achieve this magic, all objects must be serializable. PickleDB uses the [Serde](https://serde.rs/) library for serialization. Currently 4 types of serialization are supported:\n  * [JSON serialization](https://crates.io/crates/serde_json)\n  * [Bincode serialization](https://crates.io/crates/bincode)\n  * [YAML serialization](https://crates.io/crates/serde_yaml)\n  * [CBOR serialization](https://crates.io/crates/serde_cbor)\n\n\nThe serialization types are enabled and disabled with features (`json` (enabled by default), `bincode`, `yaml`, and `cbor`). To enable them, just add their names to the `features` list when declaring the dependency. To disable JSON, set `default-features` to false. For instance, `pickledb = { version = \"0.5\", features = [\"cbor\", \"yaml\"], default-features = false }` would enable CBOR and YAML only.\nThe user can choose a serialization type to use upon creating a DB or loading it from a file.\nSo what does it mean that all objects must be serializable? That means that all objects that you use must be serializable. Fortunately Serde already provides out-of-the-box serialization for most of the common objects: all primitive types, strings, vectors and tuples are already serializable and you don\u2019t need to do anything to use them. But if you want to define your own structs or enums, you need to make sure they\u2019re serializable, which means that:\n  * They should include the `#[derive(Serialize, Deserialize)]` macro. Please see [here](https://serde.rs/derive.html) for more details\n  * If a struct contains non-primitive members, they should be serializable as well\n  * You should include `serde = \"1.0\"` and `serde_derive = \"1.0\"` dependencies in your `Cargo.toml` file\n\n\nYou can take a look at the examples provided with PickleDB to get a better idea of how this works.\n### [\u00a7](https://docs.rs/pickledb/latest/pickledb/#dumping-data-to-a-file)Dumping data to a file\nAs mentioned before, PickleDB stores all the data in a file for persistency. Dumping data to a file is pretty expensive in terms of time and performance, for various reasons:\n  * Everything in PickleDB runs in the user process context (including file writes), so frequent writes will affect the user process\u2019s performance\n  * The current implementation dumps all of the data into the file, which gets more significant as data gets bigger\n  * Before writing to the file the data is being serialized, which also has a performance cost\n\n\nAlthough performance is not a big concern for PickleDB, I felt it\u2019d make sense to implement different dump policies for the user to choose when creating a new DB or loading one from a file. Here are the different policies and the differences between them:\n  * [PickleDbDumpPolicy::NeverDump](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.NeverDump) - never dump any change, file will always remain read-only. When choosing this policy even calling to [dump()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.dump) won\u2019t dump the data.\n  * [PickleDbDumpPolicy::AutoDump](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.AutoDump) - every change will be dumped immediately and automatically to the file\n  * [PickleDbDumpPolicy::DumpUponRequest](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.DumpUponRequest) - data won\u2019t be dumped unless the user calls [dump()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.dump) proactively to dump the data\n  * [PickleDbDumpPolicy::PeriodicDump(Duration)](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.PeriodicDump) - changes will be dumped to the file periodically, no sooner than the Duration provided by the user. The way this mechanism works is as follows: each time there is a DB change the last DB dump time is checked. If the time that has passed since the last dump is higher than Duration, changes will be dumped, otherwise changes will not be dumped.\n\n\nApart from this dump policy, persistency is also kept by a implementing the `Drop` trait for the `PickleDB` object which ensures all in-memory data is dumped to the file upon destruction of the object.\n## Modules[\u00a7](https://docs.rs/pickledb/latest/pickledb/#modules)\n\n[error](https://docs.rs/pickledb/latest/pickledb/error/index.html \"mod pickledb::error\")\n\n## Structs[\u00a7](https://docs.rs/pickledb/latest/pickledb/#structs)\n\n[PickleDb](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html \"struct pickledb::PickleDb\")\n    A struct that represents a PickleDb object\n\n[PickleDbIterator](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIterator.html \"struct pickledb::PickleDbIterator\")\n    Iterator object for iterating over keys and values in PickleDB. Returned in [PickleDb::iter()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.iter)\n\n[PickleDbIteratorItem](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIteratorItem.html \"struct pickledb::PickleDbIteratorItem\")\n    The object returned in each iteration when iterating over keys and values in PickleDB\n\n[PickleDbListExtender](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListExtender.html \"struct pickledb::PickleDbListExtender\")\n    A struct for extending PickleDB lists and adding more items to them\n\n[PickleDbListIterator](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIterator.html \"struct pickledb::PickleDbListIterator\")\n    Iterator object for iterating over items in a PickleDB list. Returned in [PickleDb::liter()](https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.liter)\n\n[PickleDbListIteratorItem](https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIteratorItem.html \"struct pickledb::PickleDbListIteratorItem\")\n    The object returned in each iteration when iterating over a PickleDB list\n## Enums[\u00a7](https://docs.rs/pickledb/latest/pickledb/#enums)\n\n[PickleDbDumpPolicy](https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html \"enum pickledb::PickleDbDumpPolicy\")\n    An enum that determines the policy of dumping PickleDb changes into the file\n\n[SerializationMethod](https://docs.rs/pickledb/latest/pickledb/enum.SerializationMethod.html \"enum pickledb::SerializationMethod\")\n    An enum for specifying the serialization method to use when creating a new PickleDB database or loading one from a file\n",
            "markdown_with_citations": "[](https://docs.rs/pickledb/latest/pickledb/all.html \"show sidebar\")\n# Crate pickledbCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9PickleDB\nPickleDB-rs is a lightweight and simple key-value store written in Rust, heavily inspired by Python\u2019s PickleDB\u27e85\u27e9\nPickleDB\u2019s architecture is very simple and straight-forward: the whole key-value data structure is stored in memory and is dumped to a file periodically according to a policy defined by the user. There are APIs to create a new key-value store in memory or to load it from a file. Everything runs in the user\u2019s process and memory and in the same thread, which means that the key-value data will be stored in the user process\u2019s memory and each API call will access that key-value store directly and may trigger a dump to the DB file. There are no additional threads or processes created throughout the life-cycle of any of the APIs.\n### \u00a7\u27e86\u27e9So what is it useful for?\nBasically for any use case that needs a simple and relatively small key-value store that can run in-process and be stored in a file. Most of the key-value stores out there provide high scalability, performance and robustness, but in the cost of a very complex architecture, a lot of installation and configuration, and in many cases require a descent amount of resources. But sometimes you don\u2019t need this scalability and performance and all you need is a simple solution that can be easily set up and is easy to use and understand. That\u2019s where PickleDB-rs comes into the picture! I personally encountered several use cases like that and that\u2019s how I came to know about Python\u2019s PickleDB\u27e85\u27e9, and I thought it\u2019d be nice to build one in Rust as well.\n### \u00a7\u27e87\u27e9Main features\nLike the Python\u2019s PickleDB\u27e85\u27e9, the API is very much inspired by Redis API and provides the following main capabilities:\n  * Create a new key-value store in memory or load it from a file\n  * Dump the key-value store to a file according to a user-defined policy\n  * Set and get key-value pairs. A very unique feature in PickleDB is that the key-value map is heterogeneous. Please see more details below\n  * Manage lists. Every list has a name (which is its key in the key-value store) and a list of items it stores. PickleDB provides APIs to create and delete lists and to add or remove items from them. Lists are also heterogeneous, meaning each list can store objects of different types. Please see more details below\n  * Iterate over keys and values in the DB and over items in a list\n\n\nPlease take a look at the API documentation to get more details.\n### \u00a7\u27e88\u27e9PickleDB provides heterogeneous map and lists!\nHeterogeneous data structures are the ones in which the data elements doesn\u2019t belong to the same data type. All the data elements have different data types. As you know, Rust doesn\u2019t have a built-it mechanism for working with heterogeneous data structures. For example: it\u2019s not easy to define a list where each element has a different data type, and it\u2019s also not easy to define a map which contains keys or values of different data types. PickleDB tries to address this challenge and allows values to be of any type and also build lists that contains items of different data types. It achieves that using serialization, which you can read more about below. This is a pretty cool feature that you may find very useful. The different types that are supported are:\n  * All primitive types\n  * Strings\n  * Vectors\n  * Tuples\n  * Structs and Enums that are serializable (please read more below)\n\n\n### \u00a7\u27e89\u27e9Serialization\nSerialization is an important part of PickleDB. It is the way heterogeneous data structures are enabled: instead of saving the actual object, PickleDB stores a serialized version of it. That way all objects are \u201cnormalized\u201d to the same type and can be stored in Rust data structures such as a HashMap or a Vector.\nSerialization is also the way data is stored in a file: before saving to the file, all data in memory is serialized and then it is written to the file; upon loading the serialized data is read from the file and then deserialized to memory. Of course serialization and deserialization has their performance cost but high performance is not one of PickleDB\u2019s main objectives and I think it\u2019s a fair price to pay for achieving heterogeneous data structures.\nIn order to achieve this magic, all objects must be serializable. PickleDB uses the Serde\u27e810\u27e9 library for serialization. Currently 4 types of serialization are supported:\n  * JSON serialization\u27e811\u27e9\n  * Bincode serialization\u27e812\u27e9\n  * YAML serialization\u27e813\u27e9\n  * CBOR serialization\u27e814\u27e9\n\n\nThe serialization types are enabled and disabled with features (`json` (enabled by default), `bincode`, `yaml`, and `cbor`). To enable them, just add their names to the `features` list when declaring the dependency. To disable JSON, set `default-features` to false. For instance, `pickledb = { version = \"0.5\", features = [\"cbor\", \"yaml\"], default-features = false }` would enable CBOR and YAML only.\nThe user can choose a serialization type to use upon creating a DB or loading it from a file.\nSo what does it mean that all objects must be serializable? That means that all objects that you use must be serializable. Fortunately Serde already provides out-of-the-box serialization for most of the common objects: all primitive types, strings, vectors and tuples are already serializable and you don\u2019t need to do anything to use them. But if you want to define your own structs or enums, you need to make sure they\u2019re serializable, which means that:\n  * They should include the `#[derive(Serialize, Deserialize)]` macro. Please see here\u27e815\u27e9 for more details\n  * If a struct contains non-primitive members, they should be serializable as well\n  * You should include `serde = \"1.0\"` and `serde_derive = \"1.0\"` dependencies in your `Cargo.toml` file\n\n\nYou can take a look at the examples provided with PickleDB to get a better idea of how this works.\n### \u00a7\u27e816\u27e9Dumping data to a file\nAs mentioned before, PickleDB stores all the data in a file for persistency. Dumping data to a file is pretty expensive in terms of time and performance, for various reasons:\n  * Everything in PickleDB runs in the user process context (including file writes), so frequent writes will affect the user process\u2019s performance\n  * The current implementation dumps all of the data into the file, which gets more significant as data gets bigger\n  * Before writing to the file the data is being serialized, which also has a performance cost\n\n\nAlthough performance is not a big concern for PickleDB, I felt it\u2019d make sense to implement different dump policies for the user to choose when creating a new DB or loading one from a file. Here are the different policies and the differences between them:\n  * PickleDbDumpPolicy::NeverDump\u27e817\u27e9 - never dump any change, file will always remain read-only. When choosing this policy even calling to dump()\u27e818\u27e9 won\u2019t dump the data.\n  * PickleDbDumpPolicy::AutoDump\u27e819\u27e9 - every change will be dumped immediately and automatically to the file\n  * PickleDbDumpPolicy::DumpUponRequest\u27e820\u27e9 - data won\u2019t be dumped unless the user calls dump()\u27e818\u27e9 proactively to dump the data\n  * PickleDbDumpPolicy::PeriodicDump(Duration)\u27e821\u27e9 - changes will be dumped to the file periodically, no sooner than the Duration provided by the user. The way this mechanism works is as follows: each time there is a DB change the last DB dump time is checked. If the time that has passed since the last dump is higher than Duration, changes will be dumped, otherwise changes will not be dumped.\n\n\nApart from this dump policy, persistency is also kept by a implementing the `Drop` trait for the `PickleDB` object which ensures all in-memory data is dumped to the file upon destruction of the object.\n## Modules\u00a7\u27e822\u27e9\n\nerror\u27e823\u27e9\n\n## Structs\u00a7\u27e824\u27e9\n\nPickleDb\u27e825\u27e9\n    A struct that represents a PickleDb object\n\nPickleDbIterator\u27e826\u27e9\n    Iterator object for iterating over keys and values in PickleDB. Returned in PickleDb::iter()\u27e827\u27e9\n\nPickleDbIteratorItem\u27e828\u27e9\n    The object returned in each iteration when iterating over keys and values in PickleDB\n\nPickleDbListExtender\u27e829\u27e9\n    A struct for extending PickleDB lists and adding more items to them\n\nPickleDbListIterator\u27e830\u27e9\n    Iterator object for iterating over items in a PickleDB list. Returned in PickleDb::liter()\u27e831\u27e9\n\nPickleDbListIteratorItem\u27e832\u27e9\n    The object returned in each iteration when iterating over a PickleDB list\n## Enums\u00a7\u27e833\u27e9\n\nPickleDbDumpPolicy\u27e834\u27e9\n    An enum that determines the policy of dumping PickleDb changes into the file\n\nSerializationMethod\u27e835\u27e9\n    An enum for specifying the serialization method to use when creating a new PickleDB database or loading one from a file\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pickledb/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pickledb/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pickledb/latest/src/pickledb/lib.rs.html#1-117: Source\n\u27e84\u27e9 https://docs.rs/pickledb/latest/pickledb/#pickledb: \u00a7\n\u27e85\u27e9 https://pythonhosted.org/pickleDB/: Python\u2019s PickleDB\n\u27e86\u27e9 https://docs.rs/pickledb/latest/pickledb/#so-what-is-it-useful-for: \u00a7\n\u27e87\u27e9 https://docs.rs/pickledb/latest/pickledb/#main-features: \u00a7\n\u27e88\u27e9 https://docs.rs/pickledb/latest/pickledb/#pickledb-provides-heterogeneous-map-and-lists: \u00a7\n\u27e89\u27e9 https://docs.rs/pickledb/latest/pickledb/#serialization: \u00a7\n\u27e810\u27e9 https://serde.rs/: Serde\n\u27e811\u27e9 https://crates.io/crates/serde_json: JSON serialization\n\u27e812\u27e9 https://crates.io/crates/bincode: Bincode serialization\n\u27e813\u27e9 https://crates.io/crates/serde_yaml: YAML serialization\n\u27e814\u27e9 https://crates.io/crates/serde_cbor: CBOR serialization\n\u27e815\u27e9 https://serde.rs/derive.html: here\n\u27e816\u27e9 https://docs.rs/pickledb/latest/pickledb/#dumping-data-to-a-file: \u00a7\n\u27e817\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.NeverDump: PickleDbDumpPolicy::NeverDump\n\u27e818\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.dump: dump()\n\u27e819\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.AutoDump: PickleDbDumpPolicy::AutoDump\n\u27e820\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.DumpUponRequest: PickleDbDumpPolicy::DumpUponRequest\n\u27e821\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html#variant.PeriodicDump: PickleDbDumpPolicy::PeriodicDump(Duration)\n\u27e822\u27e9 https://docs.rs/pickledb/latest/pickledb/#modules: \u00a7\n\u27e823\u27e9 https://docs.rs/pickledb/latest/pickledb/error/index.html: mod pickledb::error - error\n\u27e824\u27e9 https://docs.rs/pickledb/latest/pickledb/#structs: \u00a7\n\u27e825\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html: struct pickledb::PickleDb - PickleDb\n\u27e826\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIterator.html: struct pickledb::PickleDbIterator - PickleDbIterator\n\u27e827\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.iter: PickleDb::iter()\n\u27e828\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbIteratorItem.html: struct pickledb::PickleDbIteratorItem - PickleDbIteratorItem\n\u27e829\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListExtender.html: struct pickledb::PickleDbListExtender - PickleDbListExtender\n\u27e830\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIterator.html: struct pickledb::PickleDbListIterator - PickleDbListIterator\n\u27e831\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDb.html#method.liter: PickleDb::liter()\n\u27e832\u27e9 https://docs.rs/pickledb/latest/pickledb/struct.PickleDbListIteratorItem.html: struct pickledb::PickleDbListIteratorItem - PickleDbListIteratorItem\n\u27e833\u27e9 https://docs.rs/pickledb/latest/pickledb/#enums: \u00a7\n\u27e834\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.PickleDbDumpPolicy.html: enum pickledb::PickleDbDumpPolicy - PickleDbDumpPolicy\n\u27e835\u27e9 https://docs.rs/pickledb/latest/pickledb/enum.SerializationMethod.html: enum pickledb::SerializationMethod - SerializationMethod\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `pickledb` crate is a lightweight, in-process key-value store inspired by Python's PickleDB, designed for simplicity and ease of use. It supports creating and managing heterogeneous key-value pairs and lists, with serialization (via Serde) enabling storage of diverse data types like primitives, structs, and enums. Data can be persisted to a file using customizable serialization formats (JSON, Bincode, YAML, CBOR), with user-defined dump policies for flexibility.",
          "feature_summary": null,
          "use_case": "Database",
          "score": 4.0,
          "factual_counterfactual": "### Pair 1: Serialization and Heterogeneous Data Structures\n\u2705 **Factual:** PickleDB uses the Serde library to enable heterogeneous data structures by serializing objects before storing them in memory or writing them to a file. It supports JSON, Bincode, YAML, and CBOR serialization formats.  \n\u274c **Counterfactual:** PickleDB supports heterogeneous data structures without requiring serialization, allowing native Rust types to be stored directly without any transformation.  \n\n---\n\n### Pair 2: Key-Value Store Architecture\n\u2705 **Factual:** PickleDB operates entirely in-process and stores its key-value data structure in memory, periodically dumping the data to a file based on a user-defined policy.  \n\u274c **Counterfactual:** PickleDB uses a multi-threaded architecture to manage its key-value store, offloading file dumping operations to background threads for improved performance.  \n\n---\n\n### Pair 3: Supported Data Types in Lists and Maps\n\u2705 **Factual:** PickleDB allows lists and maps to store heterogeneous data types, including primitive types, strings, vectors, tuples, and serializable structs or enums.  \n\u274c **Counterfactual:** PickleDB restricts lists and maps to homogeneous data types, requiring all elements to be of the same type for compatibility with Rust's type system.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-7893b23b-b99fb263-1751262678",
      "timestamp": "2025-06-30T05:51:18.933964+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]