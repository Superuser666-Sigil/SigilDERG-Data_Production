[
  {
    "execution_id": "exec-3e91b6e2-cdccfb97-1751260955",
    "timestamp": "2025-06-30T05:22:35.802811+00:00",
    "sacred_chain": {
      "input_data": "rustc-hash",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'rustc-hash' -> 'rustc-hash'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "rustc-hash",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/rustc-hash",
            "title": "rustc-hash v2.1.1",
            "content": {
              "raw_markdown": "#  rustc-hash v2.1.1\nA speedy, non-cryptographic hashing algorithm used by rustc \n  * [ #fxhash ](https://crates.io/keywords/fxhash)\n  * [ #hash ](https://crates.io/keywords/hash)\n  * [ #hasher ](https://crates.io/keywords/hasher)\n  * [ #rustc ](https://crates.io/keywords/rustc)\n\n\n  * [ Readme ](https://crates.io/crates/rustc-hash)\n  * [ 7 Versions ](https://crates.io/crates/rustc-hash/versions)\n  * [ Dependencies ](https://crates.io/crates/rustc-hash/dependencies)\n  * [ Dependents ](https://crates.io/crates/rustc-hash/reverse_dependencies)\n\n\n## Metadata\n5 months ago \n2021 edition \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n13.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rustc-hash\nOr add the following line to your Cargo.toml:\nrustc-hash = \"2.1.1\"\n## Repository\n[ github.com/rust-lang/rustc-hash ](https://github.com/rust-lang/rustc-hash)\n## Owners\n[ Report crate ](https://crates.io/support?crate=rustc-hash&inquire=crate-violation)\n### Stats Overview\n224,146,520 Downloads all time\n7 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  rustc-hash v2.1.1\nA speedy, non-cryptographic hashing algorithm used by rustc \n  *  #fxhash \u27e81\u27e9\n  *  #hash \u27e82\u27e9\n  *  #hasher \u27e83\u27e9\n  *  #rustc \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  7 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\n5 months ago \n2021 edition \n Apache-2.0 \u27e89\u27e9 OR  MIT \u27e810\u27e9\n13.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rustc-hash\nOr add the following line to your Cargo.toml:\nrustc-hash = \"2.1.1\"\n## Repository\n github.com/rust-lang/rustc-hash \u27e811\u27e9\n## Owners\n Report crate \u27e812\u27e9\n### Stats Overview\n224,146,520 Downloads all time\n7 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/fxhash:  #fxhash \n\u27e82\u27e9 https://crates.io/keywords/hash:  #hash \n\u27e83\u27e9 https://crates.io/keywords/hasher:  #hasher \n\u27e84\u27e9 https://crates.io/keywords/rustc:  #rustc \n\u27e85\u27e9 https://crates.io/crates/rustc-hash:  Readme \n\u27e86\u27e9 https://crates.io/crates/rustc-hash/versions:  7 Versions \n\u27e87\u27e9 https://crates.io/crates/rustc-hash/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/rustc-hash/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://github.com/rust-lang/rustc-hash:  github.com/rust-lang/rustc-hash \n\u27e812\u27e9 https://crates.io/support?crate=rustc-hash&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1226,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114745.5861945"
          },
          "docs_rs": {
            "url": "https://docs.rs/rustc-hash",
            "title": "Crate rustc_hashCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/rustc-hash/latest/rustc_hash/all.html \"show sidebar\")\n# Crate rustc_hashCopy item path\n[Settings](https://docs.rs/rustc-hash/latest/settings.html)\n[Help](https://docs.rs/rustc-hash/latest/help.html)\nSummary[Source](https://docs.rs/rustc-hash/latest/src/rustc_hash/lib.rs.html#1-459)\nExpand description\nA speedy, non-cryptographic hashing algorithm used by `rustc`.\n## [\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#example)Example\n```\nuse rustc_hash::FxHashMap;\nlet mut map: FxHashMap<u32, u32> = FxHashMap::default();\nmap.insert(22, 44);\n```\n\n## Structs[\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#structs)\n\n[FxBuildHasher](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxBuildHasher.html \"struct rustc_hash::FxBuildHasher\")\n    An implementation of [`BuildHasher`](https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html \"trait core::hash::BuildHasher\") that produces [`FxHasher`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\")s.\n\n[FxHasher](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\")\n    A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn\u2019t quite as speedy as we want. In the compiler we\u2019re not really worried about DOS attempts, so we use a fast non-cryptographic hash.\n\n[FxSeededState](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\")\n    [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\") is an alternative state for `HashMap` types, allowing to use [`FxHasher`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\") with a set seed.\n## Type Aliases[\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#types)\n\n[FxHashMap](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMap.html \"type rustc_hash::FxHashMap\")\n    Type alias for a hash map that uses the Fx hashing algorithm.\n\n[FxHashMapSeed](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMapSeed.html \"type rustc_hash::FxHashMapSeed\")\n    Type alias for a hashmap using the `fx` hash algorithm with [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\").\n\n[FxHashSet](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSet.html \"type rustc_hash::FxHashSet\")\n    Type alias for a hash set that uses the Fx hashing algorithm.\n\n[FxHashSetSeed](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSetSeed.html \"type rustc_hash::FxHashSetSeed\")\n    Type alias for a hashmap using the `fx` hash algorithm with [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\").\n",
              "markdown_with_citations": "[](https://docs.rs/rustc-hash/latest/rustc_hash/all.html \"show sidebar\")\n# Crate rustc_hashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA speedy, non-cryptographic hashing algorithm used by `rustc`.\n## \u00a7\u27e84\u27e9Example\n```\nuse rustc_hash::FxHashMap;\nlet mut map: FxHashMap<u32, u32> = FxHashMap::default();\nmap.insert(22, 44);\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nFxBuildHasher\u27e86\u27e9\n    An implementation of `BuildHasher`\u27e87\u27e9 that produces `FxHasher`\u27e88\u27e9s.\n\nFxHasher\u27e88\u27e9\n    A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn\u2019t quite as speedy as we want. In the compiler we\u2019re not really worried about DOS attempts, so we use a fast non-cryptographic hash.\n\nFxSeededState\u27e89\u27e9\n    `FxSeededState`\u27e89\u27e9 is an alternative state for `HashMap` types, allowing to use `FxHasher`\u27e88\u27e9 with a set seed.\n## Type Aliases\u00a7\u27e810\u27e9\n\nFxHashMap\u27e811\u27e9\n    Type alias for a hash map that uses the Fx hashing algorithm.\n\nFxHashMapSeed\u27e812\u27e9\n    Type alias for a hashmap using the `fx` hash algorithm with `FxSeededState`\u27e89\u27e9.\n\nFxHashSet\u27e813\u27e9\n    Type alias for a hash set that uses the Fx hashing algorithm.\n\nFxHashSetSeed\u27e814\u27e9\n    Type alias for a hashmap using the `fx` hash algorithm with `FxSeededState`\u27e89\u27e9.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustc-hash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustc-hash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustc-hash/latest/src/rustc_hash/lib.rs.html#1-459: Source\n\u27e84\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxBuildHasher.html: struct rustc_hash::FxBuildHasher - FxBuildHasher\n\u27e87\u27e9 https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html: trait core::hash::BuildHasher - `BuildHasher`\n\u27e88\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html: struct rustc_hash::FxHasher - `FxHasher`\n\u27e89\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html: struct rustc_hash::FxSeededState - FxSeededState\n\u27e810\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#types: \u00a7\n\u27e811\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMap.html: type rustc_hash::FxHashMap - FxHashMap\n\u27e812\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMapSeed.html: type rustc_hash::FxHashMapSeed - FxHashMapSeed\n\u27e813\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSet.html: type rustc_hash::FxHashSet - FxHashSet\n\u27e814\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSetSeed.html: type rustc_hash::FxHashSetSeed - FxHashSetSeed\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 2856,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114746.4937825"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/rustc-hash",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [6 stable releases](https://lib.rs/crates/rustc-hash/versions)\n2.1.1 |  Feb 5, 2025   \n---|---  \n2.1.0 |  Nov 30, 2024   \n2.0.0 |  Jun 18, 2024   \n1.2.0 |  ~~May 28, 2024~~  \n1.0.1 |  May 28, 2018   \n#**5** in [Algorithms](https://lib.rs/algorithms \"Rust implementations of core algorithms such as hashing, sorting, searching, and more.\")\nDownload history 3736927/week @ 2025-03-07 3738046/week @ 2025-03-14 5069719/week @ 2025-03-21 3709072/week @ 2025-03-28 4057505/week @ 2025-04-04 3716708/week @ 2025-04-11 3345487/week @ 2025-04-18 3326258/week @ 2025-04-25 3349569/week @ 2025-05-02 3470977/week @ 2025-05-09 3588504/week @ 2025-05-16 3185075/week @ 2025-05-23 3513462/week @ 2025-05-30 3542976/week @ 2025-06-06 3706521/week @ 2025-06-13 3780147/week @ 2025-06-20\n**15,142,039** downloads per month Used in [**17,664** crates (1,076 directly)](https://lib.rs/crates/rustc-hash/rev)\n**Apache-2.0 OR MIT**\n26KB  396 lines\n# rustc-hash\n[![crates.io](https://img.shields.io/crates/v/rustc-hash.svg)](https://crates.io/crates/rustc-hash) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/rustc-hash/badge.svg)](https://docs.rs/rustc-hash)\nA speedy, non-cryptographic hashing algorithm used by ``rustc``. The [hash map in ``std``](https://doc.rust-lang.org/std/collections/struct.HashMap.html) uses SipHash by default, which provides resistance against DOS attacks. These attacks aren't a concern in the compiler so we prefer to use a quicker, non-cryptographic hash algorithm.\nThe original hash algorithm provided by this crate was one taken from Firefox, hence the hasher it provides is called FxHasher. This name is kept for backwards compatibility, but the underlying hash has since been replaced. The current design for the hasher is a polynomial hash finished with a single bit rotation, together with a wyhash-inspired compression function for strings/slices, both designed by Orson Peters.\nFor ``rustc`` we have tried many different hashing algorithms. Hashing speed is critical, especially for single integers. Spending more CPU cycles on a higher quality hash does not reduce hash collisions enough to make the compiler faster on real-world benchmarks.\n## Usage\nThis crate provides ``FxHashMap`` and ``FxHashSet`` as collections. They are simply type aliases for their ```std`::``collection`` counterparts using the Fx hasher.\n```\n``use` `rustc_hash`::``FxHashMap`;`\n`let` `mut` map`:` `FxHashMap`<``u32`, `u32``>`` `=` `FxHashMap`::``default`(``)``;`\nmap`.``insert``(``22``,` `44``)``;`\n`\n```\n\n### ``no_std``\nThe ``std`` feature is on by default to enable collections. It can be turned off in ``Cargo.toml`` like so:\n```\n`rustc-hash = { version = \"2.1\", default-features = false }\n`\n```\n\n#### Dependencies\n~80KB \n  * [ optional ](https://lib.rs/crates/rustc-hash/features#feature-rand \"rand is optional feature\") [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n\n\n#### [Other features](https://lib.rs/crates/rustc-hash/features)\n  * [nightly](https://lib.rs/crates/rustc-hash/features#feature-nightly)\n  * [std](https://lib.rs/crates/rustc-hash/features#feature-std)\n\n\n",
              "markdown_with_citations": "###  6 stable releases\u27e81\u27e9\n2.1.1 |  Feb 5, 2025   \n---|---  \n2.1.0 |  Nov 30, 2024   \n2.0.0 |  Jun 18, 2024   \n1.2.0 |  ~~May 28, 2024~~  \n1.0.1 |  May 28, 2018   \n#**5** in Algorithms\u27e82\u27e9\nDownload history 3736927/week @ 2025-03-07 3738046/week @ 2025-03-14 5069719/week @ 2025-03-21 3709072/week @ 2025-03-28 4057505/week @ 2025-04-04 3716708/week @ 2025-04-11 3345487/week @ 2025-04-18 3326258/week @ 2025-04-25 3349569/week @ 2025-05-02 3470977/week @ 2025-05-09 3588504/week @ 2025-05-16 3185075/week @ 2025-05-23 3513462/week @ 2025-05-30 3542976/week @ 2025-06-06 3706521/week @ 2025-06-13 3780147/week @ 2025-06-20\n**15,142,039** downloads per month Used in **17,664** crates (1,076 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n26KB  396 lines\n# rustc-hash\n![crates.io\u27e84\u27e9](https://crates.io/crates/rustc-hash) ![Documentation\u27e85\u27e9](https://docs.rs/rustc-hash)\nA speedy, non-cryptographic hashing algorithm used by ``rustc``. The hash map in ``std``\u27e86\u27e9 uses SipHash by default, which provides resistance against DOS attacks. These attacks aren't a concern in the compiler so we prefer to use a quicker, non-cryptographic hash algorithm.\nThe original hash algorithm provided by this crate was one taken from Firefox, hence the hasher it provides is called FxHasher. This name is kept for backwards compatibility, but the underlying hash has since been replaced. The current design for the hasher is a polynomial hash finished with a single bit rotation, together with a wyhash-inspired compression function for strings/slices, both designed by Orson Peters.\nFor ``rustc`` we have tried many different hashing algorithms. Hashing speed is critical, especially for single integers. Spending more CPU cycles on a higher quality hash does not reduce hash collisions enough to make the compiler faster on real-world benchmarks.\n## Usage\nThis crate provides ``FxHashMap`` and ``FxHashSet`` as collections. They are simply type aliases for their ```std`::``collection`` counterparts using the Fx hasher.\n```\n``use` `rustc_hash`::``FxHashMap`;`\n`let` `mut` map`:` `FxHashMap`<``u32`, `u32``>`` `=` `FxHashMap`::``default`(``)``;`\nmap`.``insert``(``22``,` `44``)``;`\n`\n```\n\n### ``no_std``\nThe ``std`` feature is on by default to enable collections. It can be turned off in ``Cargo.toml`` like so:\n```\n`rustc-hash = { version = \"2.1\", default-features = false }\n`\n```\n\n#### Dependencies\n~80KB \n  *  optional \u27e87\u27e9 rand\u27e88\u27e9 0.8\n\n\n#### Other features\u27e89\u27e9\n  * nightly\u27e810\u27e9\n  * std\u27e811\u27e9\n\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/rustc-hash/versions: 6 stable releases\n\u27e82\u27e9 https://lib.rs/algorithms: Rust implementations of core algorithms such as hashing, sorting, searching, and more. - Algorithms\n\u27e83\u27e9 https://lib.rs/crates/rustc-hash/rev: **17,664** crates (1,076 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/rustc-hash.svg: ![crates.io\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/rustc-hash/badge.svg: ![Documentation\n\u27e86\u27e9 https://doc.rust-lang.org/std/collections/struct.HashMap.html: hash map in ``std``\n\u27e87\u27e9 https://lib.rs/crates/rustc-hash/features#feature-rand: rand is optional feature -  optional \n\u27e88\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e89\u27e9 https://lib.rs/crates/rustc-hash/features: Other features\n\u27e810\u27e9 https://lib.rs/crates/rustc-hash/features#feature-nightly: nightly\n\u27e811\u27e9 https://lib.rs/crates/rustc-hash/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3103,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114746.8816475"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpk62b0edg/rustc-hash-2.1.1#rustc-hash@2.1.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpk62b0edg\\rustc-hash-2.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_hash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpk62b0edg\\rustc-hash-2.1.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpk62b0edg\\rustc-hash-2.1.1\\target\\debug\\deps\\librustc_hash-5826372227c8db39.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpk62b0edg/rustc-hash-2.1.1#rustc-hash@2.1.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpk62b0edg\\rustc-hash-2.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_hash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpk62b0edg\\rustc-hash-2.1.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpk62b0edg\\rustc-hash-2.1.1\\target\\debug\\deps\\librustc_hash-44e01b40befd1900.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 9
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "rustc-hash",
          "version": "2.1.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rustc-hash/latest/rustc_hash/all.html \"show sidebar\")\n# Crate rustc_hashCopy item path\n[Settings](https://docs.rs/rustc-hash/latest/settings.html)\n[Help](https://docs.rs/rustc-hash/latest/help.html)\nSummary[Source](https://docs.rs/rustc-hash/latest/src/rustc_hash/lib.rs.html#1-459)\nExpand description\nA speedy, non-cryptographic hashing algorithm used by `rustc`.\n## [\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#example)Example\n```\nuse rustc_hash::FxHashMap;\nlet mut map: FxHashMap<u32, u32> = FxHashMap::default();\nmap.insert(22, 44);\n```\n\n## Structs[\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#structs)\n\n[FxBuildHasher](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxBuildHasher.html \"struct rustc_hash::FxBuildHasher\")\n    An implementation of [`BuildHasher`](https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html \"trait core::hash::BuildHasher\") that produces [`FxHasher`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\")s.\n\n[FxHasher](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\")\n    A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn\u2019t quite as speedy as we want. In the compiler we\u2019re not really worried about DOS attempts, so we use a fast non-cryptographic hash.\n\n[FxSeededState](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\")\n    [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\") is an alternative state for `HashMap` types, allowing to use [`FxHasher`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\") with a set seed.\n## Type Aliases[\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#types)\n\n[FxHashMap](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMap.html \"type rustc_hash::FxHashMap\")\n    Type alias for a hash map that uses the Fx hashing algorithm.\n\n[FxHashMapSeed](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMapSeed.html \"type rustc_hash::FxHashMapSeed\")\n    Type alias for a hashmap using the `fx` hash algorithm with [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\").\n\n[FxHashSet](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSet.html \"type rustc_hash::FxHashSet\")\n    Type alias for a hash set that uses the Fx hashing algorithm.\n\n[FxHashSetSeed](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSetSeed.html \"type rustc_hash::FxHashSetSeed\")\n    Type alias for a hashmap using the `fx` hash algorithm with [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\").\n",
            "markdown_with_citations": "[](https://docs.rs/rustc-hash/latest/rustc_hash/all.html \"show sidebar\")\n# Crate rustc_hashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA speedy, non-cryptographic hashing algorithm used by `rustc`.\n## \u00a7\u27e84\u27e9Example\n```\nuse rustc_hash::FxHashMap;\nlet mut map: FxHashMap<u32, u32> = FxHashMap::default();\nmap.insert(22, 44);\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nFxBuildHasher\u27e86\u27e9\n    An implementation of `BuildHasher`\u27e87\u27e9 that produces `FxHasher`\u27e88\u27e9s.\n\nFxHasher\u27e88\u27e9\n    A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn\u2019t quite as speedy as we want. In the compiler we\u2019re not really worried about DOS attempts, so we use a fast non-cryptographic hash.\n\nFxSeededState\u27e89\u27e9\n    `FxSeededState`\u27e89\u27e9 is an alternative state for `HashMap` types, allowing to use `FxHasher`\u27e88\u27e9 with a set seed.\n## Type Aliases\u00a7\u27e810\u27e9\n\nFxHashMap\u27e811\u27e9\n    Type alias for a hash map that uses the Fx hashing algorithm.\n\nFxHashMapSeed\u27e812\u27e9\n    Type alias for a hashmap using the `fx` hash algorithm with `FxSeededState`\u27e89\u27e9.\n\nFxHashSet\u27e813\u27e9\n    Type alias for a hash set that uses the Fx hashing algorithm.\n\nFxHashSetSeed\u27e814\u27e9\n    Type alias for a hashmap using the `fx` hash algorithm with `FxSeededState`\u27e89\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustc-hash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustc-hash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustc-hash/latest/src/rustc_hash/lib.rs.html#1-459: Source\n\u27e84\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxBuildHasher.html: struct rustc_hash::FxBuildHasher - FxBuildHasher\n\u27e87\u27e9 https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html: trait core::hash::BuildHasher - `BuildHasher`\n\u27e88\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html: struct rustc_hash::FxHasher - `FxHasher`\n\u27e89\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html: struct rustc_hash::FxSeededState - FxSeededState\n\u27e810\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#types: \u00a7\n\u27e811\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMap.html: type rustc_hash::FxHashMap - FxHashMap\n\u27e812\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMapSeed.html: type rustc_hash::FxHashMapSeed - FxHashMapSeed\n\u27e813\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSet.html: type rustc_hash::FxHashSet - FxHashSet\n\u27e814\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSetSeed.html: type rustc_hash::FxHashSetSeed - FxHashSetSeed\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "rustc-hash",
          "version": "2.1.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rustc-hash/latest/rustc_hash/all.html \"show sidebar\")\n# Crate rustc_hashCopy item path\n[Settings](https://docs.rs/rustc-hash/latest/settings.html)\n[Help](https://docs.rs/rustc-hash/latest/help.html)\nSummary[Source](https://docs.rs/rustc-hash/latest/src/rustc_hash/lib.rs.html#1-459)\nExpand description\nA speedy, non-cryptographic hashing algorithm used by `rustc`.\n## [\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#example)Example\n```\nuse rustc_hash::FxHashMap;\nlet mut map: FxHashMap<u32, u32> = FxHashMap::default();\nmap.insert(22, 44);\n```\n\n## Structs[\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#structs)\n\n[FxBuildHasher](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxBuildHasher.html \"struct rustc_hash::FxBuildHasher\")\n    An implementation of [`BuildHasher`](https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html \"trait core::hash::BuildHasher\") that produces [`FxHasher`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\")s.\n\n[FxHasher](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\")\n    A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn\u2019t quite as speedy as we want. In the compiler we\u2019re not really worried about DOS attempts, so we use a fast non-cryptographic hash.\n\n[FxSeededState](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\")\n    [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\") is an alternative state for `HashMap` types, allowing to use [`FxHasher`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html \"struct rustc_hash::FxHasher\") with a set seed.\n## Type Aliases[\u00a7](https://docs.rs/rustc-hash/latest/rustc_hash/#types)\n\n[FxHashMap](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMap.html \"type rustc_hash::FxHashMap\")\n    Type alias for a hash map that uses the Fx hashing algorithm.\n\n[FxHashMapSeed](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMapSeed.html \"type rustc_hash::FxHashMapSeed\")\n    Type alias for a hashmap using the `fx` hash algorithm with [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\").\n\n[FxHashSet](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSet.html \"type rustc_hash::FxHashSet\")\n    Type alias for a hash set that uses the Fx hashing algorithm.\n\n[FxHashSetSeed](https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSetSeed.html \"type rustc_hash::FxHashSetSeed\")\n    Type alias for a hashmap using the `fx` hash algorithm with [`FxSeededState`](https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html \"struct rustc_hash::FxSeededState\").\n",
            "markdown_with_citations": "[](https://docs.rs/rustc-hash/latest/rustc_hash/all.html \"show sidebar\")\n# Crate rustc_hashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA speedy, non-cryptographic hashing algorithm used by `rustc`.\n## \u00a7\u27e84\u27e9Example\n```\nuse rustc_hash::FxHashMap;\nlet mut map: FxHashMap<u32, u32> = FxHashMap::default();\nmap.insert(22, 44);\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nFxBuildHasher\u27e86\u27e9\n    An implementation of `BuildHasher`\u27e87\u27e9 that produces `FxHasher`\u27e88\u27e9s.\n\nFxHasher\u27e88\u27e9\n    A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn\u2019t quite as speedy as we want. In the compiler we\u2019re not really worried about DOS attempts, so we use a fast non-cryptographic hash.\n\nFxSeededState\u27e89\u27e9\n    `FxSeededState`\u27e89\u27e9 is an alternative state for `HashMap` types, allowing to use `FxHasher`\u27e88\u27e9 with a set seed.\n## Type Aliases\u00a7\u27e810\u27e9\n\nFxHashMap\u27e811\u27e9\n    Type alias for a hash map that uses the Fx hashing algorithm.\n\nFxHashMapSeed\u27e812\u27e9\n    Type alias for a hashmap using the `fx` hash algorithm with `FxSeededState`\u27e89\u27e9.\n\nFxHashSet\u27e813\u27e9\n    Type alias for a hash set that uses the Fx hashing algorithm.\n\nFxHashSetSeed\u27e814\u27e9\n    Type alias for a hashmap using the `fx` hash algorithm with `FxSeededState`\u27e89\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustc-hash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustc-hash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustc-hash/latest/src/rustc_hash/lib.rs.html#1-459: Source\n\u27e84\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxBuildHasher.html: struct rustc_hash::FxBuildHasher - FxBuildHasher\n\u27e87\u27e9 https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html: trait core::hash::BuildHasher - `BuildHasher`\n\u27e88\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxHasher.html: struct rustc_hash::FxHasher - `FxHasher`\n\u27e89\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/struct.FxSeededState.html: struct rustc_hash::FxSeededState - FxSeededState\n\u27e810\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/#types: \u00a7\n\u27e811\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMap.html: type rustc_hash::FxHashMap - FxHashMap\n\u27e812\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashMapSeed.html: type rustc_hash::FxHashMapSeed - FxHashMapSeed\n\u27e813\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSet.html: type rustc_hash::FxHashSet - FxHashSet\n\u27e814\u27e9 https://docs.rs/rustc-hash/latest/rustc_hash/type.FxHashSetSeed.html: type rustc_hash::FxHashSetSeed - FxHashSetSeed\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `rustc-hash` crate provides a fast, non-cryptographic hashing algorithm (`FxHasher`) optimized for performance, primarily used in the Rust compiler (`rustc`). It includes type aliases like `FxHashMap` and `FxHashSet` for hash maps and sets leveraging this algorithm, along with customizable seeded variants (`FxSeededState`). This crate is ideal for scenarios where speed is critical and cryptographic security is not a concern.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1\n\u2705 Factual: The `rustc-hash` crate provides `FxHashMap`, a type alias for a hash map that uses the Fx hashing algorithm, optimized for speed in non-cryptographic use cases.  \n\u274c Counterfactual: The `rustc-hash` crate provides `FxHashMap`, a cryptographic hash map designed to prevent collision-based attacks.  \n\n---\n\n### Pair 2  \n\u2705 Factual: `FxHasher`, provided by the `rustc-hash` crate, is specifically designed for use in the Rust compiler (`rustc`) to improve performance over the default `SipHash`.  \n\u274c Counterfactual: `FxHasher` is the default hashing algorithm used in all Rust standard library hash maps.  \n\n---\n\n### Pair 3  \n\u2705 Factual: The `FxSeededState` struct allows users to create hash maps with a deterministic seed for consistent hashing behavior across executions.  \n\u274c Counterfactual: The `FxSeededState` struct is used to introduce cryptographic randomness into hash maps for enhanced security.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-3e91b6e2-cdccfb97-1751260955",
      "timestamp": "2025-06-30T05:22:35.802811+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]