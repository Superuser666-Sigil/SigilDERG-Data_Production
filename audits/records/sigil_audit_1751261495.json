[
  {
    "execution_id": "exec-9f06b0b0-d8398858-1751261479",
    "timestamp": "2025-06-30T05:31:19.139146+00:00",
    "sacred_chain": {
      "input_data": "ureq",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'ureq' -> 'ureq'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "ureq",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/ureq",
            "title": "ureq v3.0.12",
            "content": {
              "raw_markdown": "#  ureq v3.0.12\nSimple, safe HTTP client \n  * [ #client ](https://crates.io/keywords/client)\n  * [ #http ](https://crates.io/keywords/http)\n  * [ #https ](https://crates.io/keywords/https)\n  * [ #request ](https://crates.io/keywords/request)\n  * [ #web ](https://crates.io/keywords/web)\n\n\n  * [ Readme ](https://crates.io/crates/ureq)\n  * [ 104 Versions ](https://crates.io/crates/ureq/versions)\n  * [ Dependencies ](https://crates.io/crates/ureq/dependencies)\n  * [ Dependents ](https://crates.io/crates/ureq/reverse_dependencies)\n\n\n## Metadata\n14 days ago \nv1.71.1 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n128 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ureq\nOr add the following line to your Cargo.toml:\nureq = \"3.0.12\"\n## Repository\n[ github.com/algesten/ureq ](https://github.com/algesten/ureq)\n## Owners\n## Categories\n  * [HTTP client](https://crates.io/categories/web-programming::http-client)\n\n\n[ Report crate ](https://crates.io/support?crate=ureq&inquire=crate-violation)\n### Stats Overview\n54,601,672 Downloads all time\n104 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  ureq v3.0.12\nSimple, safe HTTP client \n  *  #client \u27e81\u27e9\n  *  #http \u27e82\u27e9\n  *  #https \u27e83\u27e9\n  *  #request \u27e84\u27e9\n  *  #web \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  104 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n14 days ago \nv1.71.1 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n128 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ureq\nOr add the following line to your Cargo.toml:\nureq = \"3.0.12\"\n## Repository\n github.com/algesten/ureq \u27e812\u27e9\n## Owners\n## Categories\n  * HTTP client\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n54,601,672 Downloads all time\n104 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/client:  #client \n\u27e82\u27e9 https://crates.io/keywords/http:  #http \n\u27e83\u27e9 https://crates.io/keywords/https:  #https \n\u27e84\u27e9 https://crates.io/keywords/request:  #request \n\u27e85\u27e9 https://crates.io/keywords/web:  #web \n\u27e86\u27e9 https://crates.io/crates/ureq:  Readme \n\u27e87\u27e9 https://crates.io/crates/ureq/versions:  104 Versions \n\u27e88\u27e9 https://crates.io/crates/ureq/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/ureq/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://github.com/algesten/ureq:  github.com/algesten/ureq \n\u27e813\u27e9 https://crates.io/categories/web-programming::http-client: HTTP client\n\u27e814\u27e9 https://crates.io/support?crate=ureq&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1267,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115268.8704433"
          },
          "docs_rs": {
            "url": "https://docs.rs/ureq",
            "title": "Crate ureqCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/ureq/latest/ureq/all.html \"show sidebar\")\n# Crate ureqCopy item path\n[Settings](https://docs.rs/ureq/latest/settings.html)\n[Help](https://docs.rs/ureq/latest/help.html)\nSummary[Source](https://docs.rs/ureq/latest/src/ureq/lib.rs.html#1-1260)\nExpand description\n[ ![Crates.io version](https://img.shields.io/crates/v/ureq.svg?style=flat-square) ](https://crates.io/crates/ureq) [ ![docs.rs docs](https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square) ](https://docs.rs/ureq) [ ![Crates.io downloads](https://img.shields.io/crates/d/ureq.svg?style=flat-square) ](https://crates.io/crates/ureq)\nA simple, safe HTTP client.\nUreq\u2019s first priority is being easy for you to use. It\u2019s great for anyone who wants a low-overhead HTTP client that just gets the job done. Works very well with HTTP APIs. Its features include cookies, JSON, HTTP proxies, HTTPS, charset decoding, and is based on the API of the `http` crate.\nUreq is in pure Rust for safety and ease of understanding. It avoids using `unsafe` directly. It uses blocking I/O instead of async I/O, because that keeps the API simple and keeps dependencies to a minimum. For TLS, ureq uses rustls or native-tls.\nSee the [changelog](https://github.com/algesten/ureq/blob/main/CHANGELOG.md) for details of recent releases.\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#usage)Usage\nIn its simplest form, ureq looks like this:\n```\nlet body: String = ureq::get(\"http://example.com\")\n  .header(\"Example-Header\", \"header value\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n```\n\nFor more involved tasks, you\u2019ll want to create an [`Agent`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html). An Agent holds a connection pool for reuse, and a cookie store if you use the **cookies** feature. An Agent can be cheaply cloned due to internal [`Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html) and all clones of an Agent share state among each other. Creating an Agent also allows setting options like the TLS configuration.\n```\nuse ureq::Agent;\nuse std::time::Duration;\nlet mut config = Agent::config_builder()\n  .timeout_global(Some(Duration::from_secs(5)))\n  .build();\nlet agent: Agent = config.into();\nlet body: String = agent.get(\"http://example.com/page\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n// Reuses the connection from previous request.\nlet response: String = agent.put(\"http://example.com/upload\")\n  .header(\"Authorization\", \"example-token\")\n  .send(\"some body data\")?\n  .body_mut()\n  .read_to_string()?;\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#json)JSON\nUreq supports sending and receiving json, if you enable the **json** feature:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize)]\nstruct MySendBody {\n  thing: String,\n}\n#[derive(Deserialize)]\nstruct MyRecvBody {\n  other: String,\n}\nlet send_body = MySendBody { thing: \"yo\".to_string() };\n// Requires the `json` feature enabled.\nlet recv_body = ureq::post(\"http://example.com/post/ingest\")\n  .header(\"X-My-Header\", \"Secret\")\n  .send_json(&send_body)?\n  .body_mut()\n  .read_json::<MyRecvBody>()?;\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#error-handling)Error handling\nureq returns errors via `Result<T, ureq::Error>`. That includes I/O errors, protocol errors. By default, also HTTP status code errors (when the server responded 4xx or 5xx) results in [`Error`](https://docs.rs/ureq/3.0.0-rc4/ureq/enum.Error.html).\nThis behavior can be turned off via [`http_status_as_error()`](https://docs.rs/ureq/3.0.0-rc4/ureq/config/struct.ConfigBuilder.html#method.http_status_as_error)\n```\nuse ureq::Error;\nmatch ureq::get(\"http://mypage.example.com/\").call() {\n  Ok(response) => { /* it worked */},\n  Err(Error::StatusCode(code)) => {\n    /* the server returned an unexpected status\n      code (such as 400, 500 etc) */\n  }\n  Err(_) => { /* some kind of io/transport/etc error */ }\n}\n```\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#features)Features\nTo enable a minimal dependency tree, some features are off by default. You can control them when including ureq as a dependency.\n`ureq = { version = \"3\", features = [\"socks-proxy\", \"charset\"] }`\nThe default enabled features are: **rustls** and **gzip**.\n  * **rustls** enables the rustls TLS implementation. This is the default for the the crate level convenience calls (`ureq::get` etc). It currently uses `ring` as the TLS provider.\n  * **native-tls** enables the native tls backend for TLS. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent\n  * **platform-verifier** enables verifying the server certificates using a method native to the platform ureq is executing on. See [rustls-platform-verifier](https://crates.io/crates/rustls-platform-verifier) crate\n  * **socks-proxy** enables proxy config using the `socks4://`, `socks4a://`, `socks5://` and `socks://` (equal to `socks5://`) prefix\n  * **cookies** enables cookies\n  * **gzip** enables requests of gzip-compressed responses and decompresses them\n  * **brotli** enables requests brotli-compressed responses and decompresses them\n  * **charset** enables interpreting the charset part of the Content-Type header (e.g. `Content-Type: text/plain; charset=iso-8859-1`). Without this, the library defaults to Rust\u2019s built in `utf-8`\n  * **json** enables JSON sending and receiving via serde_json\n\n\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#unstable)Unstable\nThese features are unstable and might change in a minor version.\n  * **rustls-no-provider** Enables rustls, but does not enable any [`CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html) such as `ring`. Providers other than the default (currently `ring`) are never picked up from feature flags alone. It must be configured on the agent.\n  * **vendored** compiles and statically links to a copy of non-Rust vendors (e.g. OpenSSL from `native-tls`)\n\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#tls-https)TLS (https)\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#rustls)rustls\nBy default, ureq uses [`rustls` crate](https://crates.io/crates/rustls) with the `ring` cryptographic provider. As of Sep 2024, the `ring` provider has a higher chance of compiling successfully. If the user installs another process [default provider](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#method.install_default), that choice is respected.\nureq does not guarantee to default to ring indefinitely. `rustls` as a feature flag will always work, but the specific crypto backend might change in a minor version.\n```\n// This uses rustls\nureq::get(\"https://www.google.com/\").call().unwrap();\n```\n\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#rustls-without-ring)rustls without ring\nureq never changes TLS backend from feature flags alone. It is possible to compile ureq without ring, but it requires specific feature flags and configuring the [`Agent`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html).\nSince rustls is not semver 1.x, this requires non-semver-guaranteed API. I.e. ureq might change this behavior without a major version bump.\nRead more at [`TlsConfigBuilder::unversioned_rustls_crypto_provider`](https://docs.rs/ureq/latest/ureq/tls/struct.TlsConfigBuilder.html#method.unversioned_rustls_crypto_provider \"method ureq::tls::TlsConfigBuilder::unversioned_rustls_crypto_provider\").\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#native-tls)native-tls\nAs an alternative, ureq ships with [`native-tls`](https://crates.io/crates/native-tls) as a TLS provider. This must be enabled using the **native-tls** feature. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent.\n```\nuse ureq::config::Config;\nuse ureq::tls::{TlsConfig, TlsProvider};\nlet mut config = Config::builder()\n  .tls_config(\n    TlsConfig::builder()\n      // requires the native-tls feature\n      .provider(TlsProvider::NativeTls)\n      .build()\n  )\n  .build();\nlet agent = config.new_agent();\nagent.get(\"https://www.google.com/\").call().unwrap();\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#root-certificates)Root certificates\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#webpki-roots)webpki-roots\nBy default, ureq uses Mozilla\u2019s root certificates via the [webpki-roots](https://crates.io/crates/webpki-roots) crate. This is a static bundle of root certificates that do not update automatically. It also circumvents whatever root certificates are installed on the host running ureq, which might be a good or a bad thing depending on your perspective. There is also no mechanism for [SCT](https://en.wikipedia.org/wiki/Certificate_Transparency), [CRL](https://en.wikipedia.org/wiki/Certificate_revocation_list)s or other revocations. To maintain a \u201cfresh\u201d list of root certs, you need to bump the ureq dependency from time to time.\nThe main reason for chosing this as the default is to minimize the number of dependencies. More details about this decision can be found at [PR 818].\nIf your use case for ureq is talking to a limited number of servers with high trust, the default setting is likely sufficient. If you use ureq with a high number of servers, or servers you don\u2019t trust, we recommend using the platform verifier (see below).\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#platform-verifier)platform-verifier\nThe [rustls-platform-verifier](https://crates.io/crates/rustls-platform-verifier) crate provides access to natively checking the certificate via your OS. To use this verifier, you need to enable it using feature flag **platform-verifier** as well as configure an agent to use it.\n```\nuse ureq::Agent;\nuse ureq::tls::{TlsConfig, RootCerts};\nlet agent = Agent::config_builder()\n  .tls_config(\n    TlsConfig::builder()\n      .root_certs(RootCerts::PlatformVerifier)\n      .build()\n  )\n  .build()\n  .new_agent();\nlet response = agent.get(\"https://httpbin.org/get\").call()?;\n```\n\nSetting `RootCerts::PlatformVerifier` together with `TlsProvider::NativeTls` means also native-tls will use the OS roots instead of [webpki-roots](https://crates.io/crates/webpki-roots) crate. Whether that results in a config that has CRLs and revocations is up to whatever native-tls links to.\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#json-1)JSON\nBy enabling the **json** feature, the library supports serde json.\nThis is enabled by default.\n  * [`request.send_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json) send body as json.\n  * [`body.read_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_json) transform response to json.\n\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#sending-body-data)Sending body data\nHTTP/1.1 has two ways of transfering body data. Either of a known size with the `Content-Length` HTTP header, or unknown size with the `Transfer-Encoding: chunked` header. ureq supports both and will use the appropriate method depending on which body is being sent.\nureq has a [`AsSendBody`](https://docs.rs/ureq/3.0.0-rc4/ureq/trait.AsSendBody.html) trait that is implemented for many well known types of data that we might want to send. The request body can thus be anything from a `String` to a `File`, see below.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#content-length)Content-Length\nThe library will send a `Content-Length` header on requests with bodies of known size, in other words, if the body to send is one of:\n  * `&[u8]`\n  * `&[u8; N]`\n  * `&str`\n  * `String`\n  * `&String`\n  * `Vec<u8>`\n  * `&Vec<u8>)`\n  * [`SendBody::from_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_json) (implicitly via [`request.send_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json))\n\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#transfer-encoding-chunked)Transfer-Encoding: chunked\nureq will send a `Transfer-Encoding: chunked` header on requests where the body is of unknown size. The body is automatically converted to an [`std::io::Read`](https://doc.rust-lang.org/std/io/trait.Read.html) when the type is one of:\n  * `File`\n  * `&File`\n  * `TcpStream`\n  * `&TcpStream`\n  * `Stdin`\n  * `UnixStream` (not on windows)\n\n\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#from-readers)From readers\nThe chunked method also applies for bodies constructed via:\n  * [`SendBody::from_reader()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_reader)\n  * [`SendBody::from_owned_reader()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_owned_reader)\n\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#proxying-a-response-body)Proxying a response body\nAs a special case, when ureq sends a [`Body`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html) from a previous http call, the use of `Content-Length` or `chunked` depends on situation. For input such as gzip decoding (**gzip** feature) or charset transformation (**charset** feature), the output body might not match the input, which means ureq is forced to use the `chunked` method.\n  * `Response<Body>`\n\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#sending-form-data)Sending form data\n[`request.send_form()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_form) provides a way to send `application/x-www-form-urlencoded` encoded data. The key/values provided will be URL encoded.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#overriding)Overriding\nIf you set your own Content-Length or Transfer-Encoding header before sending the body, ureq will respect that header by not overriding it, and by encoding the body or not, as indicated by the headers you set.\n```\nlet resp = ureq::put(\"https://httpbin.org/put\")\n  .header(\"Transfer-Encoding\", \"chunked\")\n  .send(\"Hello world\")?;\n```\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#character-encoding)Character encoding\nBy enabling the **charset** feature, the library supports receiving other character sets than `utf-8`.\nFor [`Body::read_to_string()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string) we read the header like:\n`Content-Type: text/plain; charset=iso-8859-1`\nand if it contains a charset specification, we try to decode the body using that encoding. In the absence of, or failing to interpret the charset, we fall back on `utf-8`.\nCurrently ureq does not provide a way to encode when sending request bodies.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#lossy-utf-8)Lossy utf-8\nWhen reading text bodies (with a `Content-Type` starting `text/` as in `text/plain`, `text/html`, etc), ureq can ensure the body is possible to read as a `String` also if it contains characters that are not valid for utf-8. Invalid characters are replaced with a question mark `?` (NOT the utf-8 replacement character).\nFor [`Body::read_to_string()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string) this is turned on by default, but it can be disabled and conversely for [`Body::as_reader()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.as_reader) it is not enabled, but can be.\nTo precisely configure the behavior use [`Body::with_config()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.with_config).\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#proxying)Proxying\nureq supports two kinds of proxies, [`HTTP`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling#http_tunneling) ([`CONNECT`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT)), [`SOCKS4`](https://en.wikipedia.org/wiki/SOCKS#SOCKS4)/[`SOCKS5`](https://en.wikipedia.org/wiki/SOCKS#SOCKS5), the former is always available while the latter must be enabled using the feature **socks-proxy**.\nProxies settings are configured on an [`Agent`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html). All request sent through the agent will be proxied.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#example-using-http)Example using HTTP\n```\nuse ureq::{Agent, Proxy};\n// Configure an http connect proxy.\nlet proxy = Proxy::new(\"http://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#example-using-socks5)Example using SOCKS5\n```\nuse ureq::{Agent, Proxy};\n// Configure a SOCKS proxy.\nlet proxy = Proxy::new(\"socks5://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#log-levels)Log levels\nureq uses the log crate. These are the definitions of the log levels, however we do not guarantee anything for dependencies such as `http` and `rustls`.\n  * `ERROR` - nothing\n  * `WARN` - if we detect a user configuration problem.\n  * `INFO` - nothing\n  * `DEBUG` - uri, state changes, transport, resolver and selected request/response headers\n  * `TRACE` - wire level debug. NOT REDACTED!\n\n\nThe request/response headers on DEBUG levels are allow-listed to only include headers that are considered safe. The code has the [allow list](https://github.com/algesten/ureq/blob/81127cfc38516903330dc1b9c618122372f8dc29/src/util.rs#L184-L198).\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#versioning)Versioning\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#semver-and-unversioned)Semver and `unversioned`\nureq follows semver. From ureq 3.x we strive to have a much closer adherence to semver than 2.x. The main mistake in 2.x was to re-export crates that were not yet semver 1.0. In ureq 3.x TLS and cookie configuration is shimmed using our own types.\nureq 3.x is trying out two new traits that had no equivalent in 2.x, [`Transport`](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/transport/trait.Transport.html) and [`Resolver`](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/resolver/trait.Resolver.html). These allow the user write their own bespoke transports and (DNS name) resolver. The API:s for these parts are not yet solidified. They live under the [`unversioned`](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/index.html) module, and do not follow semver. See module doc for more info.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#breaking-changes-in-dependencies)Breaking changes in dependencies\nureq relies on non-semver 1.x crates such as `rustls` and `native-tls`. Some scenarios, such as configuring `rustls` to not use `ring`, a user of ureq might need to interact with these crates directly instead of going via ureq\u2019s provided API.\nSuch changes can break when ureq updates dependencies. This is not considered a breaking change for ureq and will not be reflected by a major version bump.\nWe strive to mark ureq\u2019s API with the word \u201cunversioned\u201d to identify places where this risk arises.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#minimum-supported-rust-version-msrv)Minimum Supported Rust Version (MSRV)\nFrom time to time we will need to update our minimum supported Rust version (MSRV). This is not something we do lightly; our ambition is to be as conservative with MSRV as possible.\n  * For some dependencies, we will opt for pinning the version of the dep instead of bumping our MSRV.\n  * For important dependencies, like the TLS libraries, we cannot hold back our MSRV if they change.\n  * We do not consider MSRV changes to be breaking for the purposes of semver.\n  * We will not make MSRV changes in patch releases.\n  * MSRV changes will get their own minor release, and not be co-mingled with other changes.\n\n\n## Re-exports[\u00a7](https://docs.rs/ureq/latest/ureq/#reexports)\n\n`pub use ureq_proto::http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules[\u00a7](https://docs.rs/ureq/latest/ureq/#modules)\n\n[config](https://docs.rs/ureq/latest/ureq/config/index.html \"mod ureq::config\")\n    Agent configuration\n\n[middleware](https://docs.rs/ureq/latest/ureq/middleware/index.html \"mod ureq::middleware\")\n    Chained interception to modify the request or response.\n\n[tls](https://docs.rs/ureq/latest/ureq/tls/index.html \"mod ureq::tls\")\n    TLS for handling `https`.\n\n[typestate](https://docs.rs/ureq/latest/ureq/typestate/index.html \"mod ureq::typestate\")\n    Typestate variables.\n\n[unversioned](https://docs.rs/ureq/latest/ureq/unversioned/index.html \"mod ureq::unversioned\")\n    API that does not (yet) follow semver.\n## Structs[\u00a7](https://docs.rs/ureq/latest/ureq/#structs)\n\n[Agent](https://docs.rs/ureq/latest/ureq/struct.Agent.html \"struct ureq::Agent\")\n    Agents keep state between requests.\n\n[Body](https://docs.rs/ureq/latest/ureq/struct.Body.html \"struct ureq::Body\")\n    A response body returned as [`http::Response<Body>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\").\n\n[BodyBuilder](https://docs.rs/ureq/latest/ureq/struct.BodyBuilder.html \"struct ureq::BodyBuilder\")\n    Builder for creating a response body.\n\n[BodyReader](https://docs.rs/ureq/latest/ureq/struct.BodyReader.html \"struct ureq::BodyReader\")\n    A reader of the response data.\n\n[BodyWithConfig](https://docs.rs/ureq/latest/ureq/struct.BodyWithConfig.html \"struct ureq::BodyWithConfig\")\n    Configuration of how to read the body.\n\n[Cookie](https://docs.rs/ureq/latest/ureq/struct.Cookie.html \"struct ureq::Cookie\")\n    Representation of an HTTP cookie.\n\n[CookieJar](https://docs.rs/ureq/latest/ureq/struct.CookieJar.html \"struct ureq::CookieJar\")\n    Collection of cookies.\n\n[Proxy](https://docs.rs/ureq/latest/ureq/struct.Proxy.html \"struct ureq::Proxy\")\n    Proxy server settings\n\n[ProxyBuilder](https://docs.rs/ureq/latest/ureq/struct.ProxyBuilder.html \"struct ureq::ProxyBuilder\")\n    Builder for configuring a proxy.\n\n[RequestBuilder](https://docs.rs/ureq/latest/ureq/struct.RequestBuilder.html \"struct ureq::RequestBuilder\")\n    Transparent wrapper around [`http::request::Builder`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Builder.html \"struct http::request::Builder\").\n\n[SendBody](https://docs.rs/ureq/latest/ureq/struct.SendBody.html \"struct ureq::SendBody\")\n    Request body for sending data via POST, PUT and PATCH.\n## Enums[\u00a7](https://docs.rs/ureq/latest/ureq/#enums)\n\n[Error](https://docs.rs/ureq/latest/ureq/enum.Error.html \"enum ureq::Error\")\n    Errors from ureq.\n\n[ProxyProtocol](https://docs.rs/ureq/latest/ureq/enum.ProxyProtocol.html \"enum ureq::ProxyProtocol\")\n    Proxy protocol\n\n[Timeout](https://docs.rs/ureq/latest/ureq/enum.Timeout.html \"enum ureq::Timeout\")\n    The various timeouts.\n## Traits[\u00a7](https://docs.rs/ureq/latest/ureq/#traits)\n\n[AsSendBody](https://docs.rs/ureq/latest/ureq/trait.AsSendBody.html \"trait ureq::AsSendBody\")\n    Trait for common types to send in POST, PUT or PATCH.\n\n[RequestExt](https://docs.rs/ureq/latest/ureq/trait.RequestExt.html \"trait ureq::RequestExt\")\n    Extension trait for [`http::Request<impl AsSendBody>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\").\n\n[ResponseExt](https://docs.rs/ureq/latest/ureq/trait.ResponseExt.html \"trait ureq::ResponseExt\")\n    Extension trait for [`http::Response<Body>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\").\n## Functions[\u00a7](https://docs.rs/ureq/latest/ureq/#functions)\n\n[agent](https://docs.rs/ureq/latest/ureq/fn.agent.html \"fn ureq::agent\")\n    A new [Agent](https://docs.rs/ureq/latest/ureq/struct.Agent.html \"struct ureq::Agent\") with default configuration\n\n[connect](https://docs.rs/ureq/latest/ureq/fn.connect.html \"fn ureq::connect\")\n    Make a CONNECT request.\n\n[delete](https://docs.rs/ureq/latest/ureq/fn.delete.html \"fn ureq::delete\")\n    Make a DELETE request.\n\n[get](https://docs.rs/ureq/latest/ureq/fn.get.html \"fn ureq::get\")\n    Make a GET request.\n\n[head](https://docs.rs/ureq/latest/ureq/fn.head.html \"fn ureq::head\")\n    Make a HEAD request.\n\n[options](https://docs.rs/ureq/latest/ureq/fn.options.html \"fn ureq::options\")\n    Make an OPTIONS request.\n\n[patch](https://docs.rs/ureq/latest/ureq/fn.patch.html \"fn ureq::patch\")\n    Make a PATCH request.\n\n[post](https://docs.rs/ureq/latest/ureq/fn.post.html \"fn ureq::post\")\n    Make a POST request.\n\n[put](https://docs.rs/ureq/latest/ureq/fn.put.html \"fn ureq::put\")\n    Make a PUT request.\n\n[run](https://docs.rs/ureq/latest/ureq/fn.run.html \"fn ureq::run\")\n    Run a [`http::Request<impl AsSendBody>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\").\n\n[trace](https://docs.rs/ureq/latest/ureq/fn.trace.html \"fn ureq::trace\")\n    Make a TRACE request.\n",
              "markdown_with_citations": "[](https://docs.rs/ureq/latest/ureq/all.html \"show sidebar\")\n# Crate ureqCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n ![Crates.io version\u27e84\u27e9 ](https://crates.io/crates/ureq)  ![docs.rs docs\u27e85\u27e9 ](https://docs.rs/ureq)  ![Crates.io downloads\u27e86\u27e9 ](https://crates.io/crates/ureq)\nA simple, safe HTTP client.\nUreq\u2019s first priority is being easy for you to use. It\u2019s great for anyone who wants a low-overhead HTTP client that just gets the job done. Works very well with HTTP APIs. Its features include cookies, JSON, HTTP proxies, HTTPS, charset decoding, and is based on the API of the `http` crate.\nUreq is in pure Rust for safety and ease of understanding. It avoids using `unsafe` directly. It uses blocking I/O instead of async I/O, because that keeps the API simple and keeps dependencies to a minimum. For TLS, ureq uses rustls or native-tls.\nSee the changelog\u27e87\u27e9 for details of recent releases.\n## \u00a7\u27e88\u27e9Usage\nIn its simplest form, ureq looks like this:\n```\nlet body: String = ureq::get(\"http://example.com\")\n  .header(\"Example-Header\", \"header value\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n```\n\nFor more involved tasks, you\u2019ll want to create an `Agent`\u27e89\u27e9. An Agent holds a connection pool for reuse, and a cookie store if you use the **cookies** feature. An Agent can be cheaply cloned due to internal `Arc`\u27e810\u27e9 and all clones of an Agent share state among each other. Creating an Agent also allows setting options like the TLS configuration.\n```\nuse ureq::Agent;\nuse std::time::Duration;\nlet mut config = Agent::config_builder()\n  .timeout_global(Some(Duration::from_secs(5)))\n  .build();\nlet agent: Agent = config.into();\nlet body: String = agent.get(\"http://example.com/page\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n// Reuses the connection from previous request.\nlet response: String = agent.put(\"http://example.com/upload\")\n  .header(\"Authorization\", \"example-token\")\n  .send(\"some body data\")?\n  .body_mut()\n  .read_to_string()?;\n```\n\n### \u00a7\u27e811\u27e9JSON\nUreq supports sending and receiving json, if you enable the **json** feature:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize)]\nstruct MySendBody {\n  thing: String,\n}\n#[derive(Deserialize)]\nstruct MyRecvBody {\n  other: String,\n}\nlet send_body = MySendBody { thing: \"yo\".to_string() };\n// Requires the `json` feature enabled.\nlet recv_body = ureq::post(\"http://example.com/post/ingest\")\n  .header(\"X-My-Header\", \"Secret\")\n  .send_json(&send_body)?\n  .body_mut()\n  .read_json::<MyRecvBody>()?;\n```\n\n### \u00a7\u27e812\u27e9Error handling\nureq returns errors via `Result<T, ureq::Error>`. That includes I/O errors, protocol errors. By default, also HTTP status code errors (when the server responded 4xx or 5xx) results in `Error`\u27e813\u27e9.\nThis behavior can be turned off via `http_status_as_error()`\u27e814\u27e9\n```\nuse ureq::Error;\nmatch ureq::get(\"http://mypage.example.com/\").call() {\n  Ok(response) => { /* it worked */},\n  Err(Error::StatusCode(code)) => {\n    /* the server returned an unexpected status\n      code (such as 400, 500 etc) */\n  }\n  Err(_) => { /* some kind of io/transport/etc error */ }\n}\n```\n\n## \u00a7\u27e815\u27e9Features\nTo enable a minimal dependency tree, some features are off by default. You can control them when including ureq as a dependency.\n`ureq = { version = \"3\", features = [\"socks-proxy\", \"charset\"] }`\nThe default enabled features are: **rustls** and **gzip**.\n  * **rustls** enables the rustls TLS implementation. This is the default for the the crate level convenience calls (`ureq::get` etc). It currently uses `ring` as the TLS provider.\n  * **native-tls** enables the native tls backend for TLS. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent\n  * **platform-verifier** enables verifying the server certificates using a method native to the platform ureq is executing on. See rustls-platform-verifier\u27e816\u27e9 crate\n  * **socks-proxy** enables proxy config using the `socks4://`, `socks4a://`, `socks5://` and `socks://` (equal to `socks5://`) prefix\n  * **cookies** enables cookies\n  * **gzip** enables requests of gzip-compressed responses and decompresses them\n  * **brotli** enables requests brotli-compressed responses and decompresses them\n  * **charset** enables interpreting the charset part of the Content-Type header (e.g. `Content-Type: text/plain; charset=iso-8859-1`). Without this, the library defaults to Rust\u2019s built in `utf-8`\n  * **json** enables JSON sending and receiving via serde_json\n\n\n#### \u00a7\u27e817\u27e9Unstable\nThese features are unstable and might change in a minor version.\n  * **rustls-no-provider** Enables rustls, but does not enable any `CryptoProvider`\u27e818\u27e9 such as `ring`. Providers other than the default (currently `ring`) are never picked up from feature flags alone. It must be configured on the agent.\n  * **vendored** compiles and statically links to a copy of non-Rust vendors (e.g. OpenSSL from `native-tls`)\n\n\n## \u00a7\u27e819\u27e9TLS (https)\n### \u00a7\u27e820\u27e9rustls\nBy default, ureq uses `rustls` crate\u27e821\u27e9 with the `ring` cryptographic provider. As of Sep 2024, the `ring` provider has a higher chance of compiling successfully. If the user installs another process default provider\u27e822\u27e9, that choice is respected.\nureq does not guarantee to default to ring indefinitely. `rustls` as a feature flag will always work, but the specific crypto backend might change in a minor version.\n```\n// This uses rustls\nureq::get(\"https://www.google.com/\").call().unwrap();\n```\n\n#### \u00a7\u27e823\u27e9rustls without ring\nureq never changes TLS backend from feature flags alone. It is possible to compile ureq without ring, but it requires specific feature flags and configuring the `Agent`\u27e89\u27e9.\nSince rustls is not semver 1.x, this requires non-semver-guaranteed API. I.e. ureq might change this behavior without a major version bump.\nRead more at `TlsConfigBuilder::unversioned_rustls_crypto_provider`\u27e824\u27e9.\n### \u00a7\u27e825\u27e9native-tls\nAs an alternative, ureq ships with `native-tls`\u27e826\u27e9 as a TLS provider. This must be enabled using the **native-tls** feature. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent.\n```\nuse ureq::config::Config;\nuse ureq::tls::{TlsConfig, TlsProvider};\nlet mut config = Config::builder()\n  .tls_config(\n    TlsConfig::builder()\n      // requires the native-tls feature\n      .provider(TlsProvider::NativeTls)\n      .build()\n  )\n  .build();\nlet agent = config.new_agent();\nagent.get(\"https://www.google.com/\").call().unwrap();\n```\n\n### \u00a7\u27e827\u27e9Root certificates\n#### \u00a7\u27e828\u27e9webpki-roots\nBy default, ureq uses Mozilla\u2019s root certificates via the webpki-roots\u27e829\u27e9 crate. This is a static bundle of root certificates that do not update automatically. It also circumvents whatever root certificates are installed on the host running ureq, which might be a good or a bad thing depending on your perspective. There is also no mechanism for SCT\u27e830\u27e9, CRL\u27e831\u27e9s or other revocations. To maintain a \u201cfresh\u201d list of root certs, you need to bump the ureq dependency from time to time.\nThe main reason for chosing this as the default is to minimize the number of dependencies. More details about this decision can be found at [PR 818].\nIf your use case for ureq is talking to a limited number of servers with high trust, the default setting is likely sufficient. If you use ureq with a high number of servers, or servers you don\u2019t trust, we recommend using the platform verifier (see below).\n#### \u00a7\u27e832\u27e9platform-verifier\nThe rustls-platform-verifier\u27e816\u27e9 crate provides access to natively checking the certificate via your OS. To use this verifier, you need to enable it using feature flag **platform-verifier** as well as configure an agent to use it.\n```\nuse ureq::Agent;\nuse ureq::tls::{TlsConfig, RootCerts};\nlet agent = Agent::config_builder()\n  .tls_config(\n    TlsConfig::builder()\n      .root_certs(RootCerts::PlatformVerifier)\n      .build()\n  )\n  .build()\n  .new_agent();\nlet response = agent.get(\"https://httpbin.org/get\").call()?;\n```\n\nSetting `RootCerts::PlatformVerifier` together with `TlsProvider::NativeTls` means also native-tls will use the OS roots instead of webpki-roots\u27e829\u27e9 crate. Whether that results in a config that has CRLs and revocations is up to whatever native-tls links to.\n## \u00a7\u27e833\u27e9JSON\nBy enabling the **json** feature, the library supports serde json.\nThis is enabled by default.\n  * `request.send_json()`\u27e834\u27e9 send body as json.\n  * `body.read_json()`\u27e835\u27e9 transform response to json.\n\n\n## \u00a7\u27e836\u27e9Sending body data\nHTTP/1.1 has two ways of transfering body data. Either of a known size with the `Content-Length` HTTP header, or unknown size with the `Transfer-Encoding: chunked` header. ureq supports both and will use the appropriate method depending on which body is being sent.\nureq has a `AsSendBody`\u27e837\u27e9 trait that is implemented for many well known types of data that we might want to send. The request body can thus be anything from a `String` to a `File`, see below.\n### \u00a7\u27e838\u27e9Content-Length\nThe library will send a `Content-Length` header on requests with bodies of known size, in other words, if the body to send is one of:\n  * `&[u8]`\n  * `&[u8; N]`\n  * `&str`\n  * `String`\n  * `&String`\n  * `Vec<u8>`\n  * `&Vec<u8>)`\n  * `SendBody::from_json()`\u27e839\u27e9 (implicitly via `request.send_json()`\u27e834\u27e9)\n\n\n### \u00a7\u27e840\u27e9Transfer-Encoding: chunked\nureq will send a `Transfer-Encoding: chunked` header on requests where the body is of unknown size. The body is automatically converted to an `std::io::Read`\u27e841\u27e9 when the type is one of:\n  * `File`\n  * `&File`\n  * `TcpStream`\n  * `&TcpStream`\n  * `Stdin`\n  * `UnixStream` (not on windows)\n\n\n#### \u00a7\u27e842\u27e9From readers\nThe chunked method also applies for bodies constructed via:\n  * `SendBody::from_reader()`\u27e843\u27e9\n  * `SendBody::from_owned_reader()`\u27e844\u27e9\n\n\n### \u00a7\u27e845\u27e9Proxying a response body\nAs a special case, when ureq sends a `Body`\u27e846\u27e9 from a previous http call, the use of `Content-Length` or `chunked` depends on situation. For input such as gzip decoding (**gzip** feature) or charset transformation (**charset** feature), the output body might not match the input, which means ureq is forced to use the `chunked` method.\n  * `Response<Body>`\n\n\n### \u00a7\u27e847\u27e9Sending form data\n`request.send_form()`\u27e848\u27e9 provides a way to send `application/x-www-form-urlencoded` encoded data. The key/values provided will be URL encoded.\n### \u00a7\u27e849\u27e9Overriding\nIf you set your own Content-Length or Transfer-Encoding header before sending the body, ureq will respect that header by not overriding it, and by encoding the body or not, as indicated by the headers you set.\n```\nlet resp = ureq::put(\"https://httpbin.org/put\")\n  .header(\"Transfer-Encoding\", \"chunked\")\n  .send(\"Hello world\")?;\n```\n\n## \u00a7\u27e850\u27e9Character encoding\nBy enabling the **charset** feature, the library supports receiving other character sets than `utf-8`.\nFor `Body::read_to_string()`\u27e851\u27e9 we read the header like:\n`Content-Type: text/plain; charset=iso-8859-1`\nand if it contains a charset specification, we try to decode the body using that encoding. In the absence of, or failing to interpret the charset, we fall back on `utf-8`.\nCurrently ureq does not provide a way to encode when sending request bodies.\n### \u00a7\u27e852\u27e9Lossy utf-8\nWhen reading text bodies (with a `Content-Type` starting `text/` as in `text/plain`, `text/html`, etc), ureq can ensure the body is possible to read as a `String` also if it contains characters that are not valid for utf-8. Invalid characters are replaced with a question mark `?` (NOT the utf-8 replacement character).\nFor `Body::read_to_string()`\u27e851\u27e9 this is turned on by default, but it can be disabled and conversely for `Body::as_reader()`\u27e853\u27e9 it is not enabled, but can be.\nTo precisely configure the behavior use `Body::with_config()`\u27e854\u27e9.\n## \u00a7\u27e855\u27e9Proxying\nureq supports two kinds of proxies, `HTTP`\u27e856\u27e9 (`CONNECT`\u27e857\u27e9), `SOCKS4`\u27e858\u27e9/`SOCKS5`\u27e859\u27e9, the former is always available while the latter must be enabled using the feature **socks-proxy**.\nProxies settings are configured on an `Agent`\u27e89\u27e9. All request sent through the agent will be proxied.\n### \u00a7\u27e860\u27e9Example using HTTP\n```\nuse ureq::{Agent, Proxy};\n// Configure an http connect proxy.\nlet proxy = Proxy::new(\"http://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n### \u00a7\u27e861\u27e9Example using SOCKS5\n```\nuse ureq::{Agent, Proxy};\n// Configure a SOCKS proxy.\nlet proxy = Proxy::new(\"socks5://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n## \u00a7\u27e862\u27e9Log levels\nureq uses the log crate. These are the definitions of the log levels, however we do not guarantee anything for dependencies such as `http` and `rustls`.\n  * `ERROR` - nothing\n  * `WARN` - if we detect a user configuration problem.\n  * `INFO` - nothing\n  * `DEBUG` - uri, state changes, transport, resolver and selected request/response headers\n  * `TRACE` - wire level debug. NOT REDACTED!\n\n\nThe request/response headers on DEBUG levels are allow-listed to only include headers that are considered safe. The code has the allow list\u27e863\u27e9.\n## \u00a7\u27e864\u27e9Versioning\n### \u00a7\u27e865\u27e9Semver and `unversioned`\nureq follows semver. From ureq 3.x we strive to have a much closer adherence to semver than 2.x. The main mistake in 2.x was to re-export crates that were not yet semver 1.0. In ureq 3.x TLS and cookie configuration is shimmed using our own types.\nureq 3.x is trying out two new traits that had no equivalent in 2.x, `Transport`\u27e866\u27e9 and `Resolver`\u27e867\u27e9. These allow the user write their own bespoke transports and (DNS name) resolver. The API:s for these parts are not yet solidified. They live under the `unversioned`\u27e868\u27e9 module, and do not follow semver. See module doc for more info.\n### \u00a7\u27e869\u27e9Breaking changes in dependencies\nureq relies on non-semver 1.x crates such as `rustls` and `native-tls`. Some scenarios, such as configuring `rustls` to not use `ring`, a user of ureq might need to interact with these crates directly instead of going via ureq\u2019s provided API.\nSuch changes can break when ureq updates dependencies. This is not considered a breaking change for ureq and will not be reflected by a major version bump.\nWe strive to mark ureq\u2019s API with the word \u201cunversioned\u201d to identify places where this risk arises.\n### \u00a7\u27e870\u27e9Minimum Supported Rust Version (MSRV)\nFrom time to time we will need to update our minimum supported Rust version (MSRV). This is not something we do lightly; our ambition is to be as conservative with MSRV as possible.\n  * For some dependencies, we will opt for pinning the version of the dep instead of bumping our MSRV.\n  * For important dependencies, like the TLS libraries, we cannot hold back our MSRV if they change.\n  * We do not consider MSRV changes to be breaking for the purposes of semver.\n  * We will not make MSRV changes in patch releases.\n  * MSRV changes will get their own minor release, and not be co-mingled with other changes.\n\n\n## Re-exports\u00a7\u27e871\u27e9\n\n`pub use ureq_proto::http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules\u00a7\u27e872\u27e9\n\nconfig\u27e873\u27e9\n    Agent configuration\n\nmiddleware\u27e874\u27e9\n    Chained interception to modify the request or response.\n\ntls\u27e875\u27e9\n    TLS for handling `https`.\n\ntypestate\u27e876\u27e9\n    Typestate variables.\n\nunversioned\u27e877\u27e9\n    API that does not (yet) follow semver.\n## Structs\u00a7\u27e878\u27e9\n\nAgent\u27e879\u27e9\n    Agents keep state between requests.\n\nBody\u27e880\u27e9\n    A response body returned as `http::Response<Body>`\u27e881\u27e9.\n\nBodyBuilder\u27e882\u27e9\n    Builder for creating a response body.\n\nBodyReader\u27e883\u27e9\n    A reader of the response data.\n\nBodyWithConfig\u27e884\u27e9\n    Configuration of how to read the body.\n\nCookie\u27e885\u27e9\n    Representation of an HTTP cookie.\n\nCookieJar\u27e886\u27e9\n    Collection of cookies.\n\nProxy\u27e887\u27e9\n    Proxy server settings\n\nProxyBuilder\u27e888\u27e9\n    Builder for configuring a proxy.\n\nRequestBuilder\u27e889\u27e9\n    Transparent wrapper around `http::request::Builder`\u27e890\u27e9.\n\nSendBody\u27e891\u27e9\n    Request body for sending data via POST, PUT and PATCH.\n## Enums\u00a7\u27e892\u27e9\n\nError\u27e893\u27e9\n    Errors from ureq.\n\nProxyProtocol\u27e894\u27e9\n    Proxy protocol\n\nTimeout\u27e895\u27e9\n    The various timeouts.\n## Traits\u00a7\u27e896\u27e9\n\nAsSendBody\u27e897\u27e9\n    Trait for common types to send in POST, PUT or PATCH.\n\nRequestExt\u27e898\u27e9\n    Extension trait for `http::Request<impl AsSendBody>`\u27e899\u27e9.\n\nResponseExt\u27e8100\u27e9\n    Extension trait for `http::Response<Body>`\u27e881\u27e9.\n## Functions\u00a7\u27e8101\u27e9\n\nagent\u27e8102\u27e9\n    A new Agent\u27e879\u27e9 with default configuration\n\nconnect\u27e8103\u27e9\n    Make a CONNECT request.\n\ndelete\u27e8104\u27e9\n    Make a DELETE request.\n\nget\u27e8105\u27e9\n    Make a GET request.\n\nhead\u27e8106\u27e9\n    Make a HEAD request.\n\noptions\u27e8107\u27e9\n    Make an OPTIONS request.\n\npatch\u27e8108\u27e9\n    Make a PATCH request.\n\npost\u27e8109\u27e9\n    Make a POST request.\n\nput\u27e8110\u27e9\n    Make a PUT request.\n\nrun\u27e8111\u27e9\n    Run a `http::Request<impl AsSendBody>`\u27e899\u27e9.\n\ntrace\u27e8112\u27e9\n    Make a TRACE request.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ureq/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ureq/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ureq/latest/src/ureq/lib.rs.html#1-1260: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/ureq.svg?style=flat-square:  ![Crates.io version\n\u27e85\u27e9 https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square:  ![docs.rs docs\n\u27e86\u27e9 https://img.shields.io/crates/d/ureq.svg?style=flat-square:  ![Crates.io downloads\n\u27e87\u27e9 https://github.com/algesten/ureq/blob/main/CHANGELOG.md: changelog\n\u27e88\u27e9 https://docs.rs/ureq/latest/ureq/#usage: \u00a7\n\u27e89\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html: `Agent`\n\u27e810\u27e9 https://doc.rust-lang.org/std/sync/struct.Arc.html: `Arc`\n\u27e811\u27e9 https://docs.rs/ureq/latest/ureq/#json: \u00a7\n\u27e812\u27e9 https://docs.rs/ureq/latest/ureq/#error-handling: \u00a7\n\u27e813\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/enum.Error.html: `Error`\n\u27e814\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/config/struct.ConfigBuilder.html#method.http_status_as_error: `http_status_as_error()`\n\u27e815\u27e9 https://docs.rs/ureq/latest/ureq/#features: \u00a7\n\u27e816\u27e9 https://crates.io/crates/rustls-platform-verifier: rustls-platform-verifier\n\u27e817\u27e9 https://docs.rs/ureq/latest/ureq/#unstable: \u00a7\n\u27e818\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html: `CryptoProvider`\n\u27e819\u27e9 https://docs.rs/ureq/latest/ureq/#tls-https: \u00a7\n\u27e820\u27e9 https://docs.rs/ureq/latest/ureq/#rustls: \u00a7\n\u27e821\u27e9 https://crates.io/crates/rustls: `rustls` crate\n\u27e822\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#method.install_default: default provider\n\u27e823\u27e9 https://docs.rs/ureq/latest/ureq/#rustls-without-ring: \u00a7\n\u27e824\u27e9 https://docs.rs/ureq/latest/ureq/tls/struct.TlsConfigBuilder.html#method.unversioned_rustls_crypto_provider: method ureq::tls::TlsConfigBuilder::unversioned_rustls_crypto_provider - `TlsConfigBuilder::unversioned_rustls_crypto_provider`\n\u27e825\u27e9 https://docs.rs/ureq/latest/ureq/#native-tls: \u00a7\n\u27e826\u27e9 https://crates.io/crates/native-tls: `native-tls`\n\u27e827\u27e9 https://docs.rs/ureq/latest/ureq/#root-certificates: \u00a7\n\u27e828\u27e9 https://docs.rs/ureq/latest/ureq/#webpki-roots: \u00a7\n\u27e829\u27e9 https://crates.io/crates/webpki-roots: webpki-roots\n\u27e830\u27e9 https://en.wikipedia.org/wiki/Certificate_Transparency: SCT\n\u27e831\u27e9 https://en.wikipedia.org/wiki/Certificate_revocation_list: CRL\n\u27e832\u27e9 https://docs.rs/ureq/latest/ureq/#platform-verifier: \u00a7\n\u27e833\u27e9 https://docs.rs/ureq/latest/ureq/#json-1: \u00a7\n\u27e834\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json: `request.send_json()`\n\u27e835\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_json: `body.read_json()`\n\u27e836\u27e9 https://docs.rs/ureq/latest/ureq/#sending-body-data: \u00a7\n\u27e837\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/trait.AsSendBody.html: `AsSendBody`\n\u27e838\u27e9 https://docs.rs/ureq/latest/ureq/#content-length: \u00a7\n\u27e839\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_json: `SendBody::from_json()`\n\u27e840\u27e9 https://docs.rs/ureq/latest/ureq/#transfer-encoding-chunked: \u00a7\n\u27e841\u27e9 https://doc.rust-lang.org/std/io/trait.Read.html: `std::io::Read`\n\u27e842\u27e9 https://docs.rs/ureq/latest/ureq/#from-readers: \u00a7\n\u27e843\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_reader: `SendBody::from_reader()`\n\u27e844\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_owned_reader: `SendBody::from_owned_reader()`\n\u27e845\u27e9 https://docs.rs/ureq/latest/ureq/#proxying-a-response-body: \u00a7\n\u27e846\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html: `Body`\n\u27e847\u27e9 https://docs.rs/ureq/latest/ureq/#sending-form-data: \u00a7\n\u27e848\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_form: `request.send_form()`\n\u27e849\u27e9 https://docs.rs/ureq/latest/ureq/#overriding: \u00a7\n\u27e850\u27e9 https://docs.rs/ureq/latest/ureq/#character-encoding: \u00a7\n\u27e851\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string: `Body::read_to_string()`\n\u27e852\u27e9 https://docs.rs/ureq/latest/ureq/#lossy-utf-8: \u00a7\n\u27e853\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.as_reader: `Body::as_reader()`\n\u27e854\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.with_config: `Body::with_config()`\n\u27e855\u27e9 https://docs.rs/ureq/latest/ureq/#proxying: \u00a7\n\u27e856\u27e9 https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling#http_tunneling: `HTTP`\n\u27e857\u27e9 https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT: `CONNECT`\n\u27e858\u27e9 https://en.wikipedia.org/wiki/SOCKS#SOCKS4: `SOCKS4`\n\u27e859\u27e9 https://en.wikipedia.org/wiki/SOCKS#SOCKS5: `SOCKS5`\n\u27e860\u27e9 https://docs.rs/ureq/latest/ureq/#example-using-http: \u00a7\n\u27e861\u27e9 https://docs.rs/ureq/latest/ureq/#example-using-socks5: \u00a7\n\u27e862\u27e9 https://docs.rs/ureq/latest/ureq/#log-levels: \u00a7\n\u27e863\u27e9 https://github.com/algesten/ureq/blob/81127cfc38516903330dc1b9c618122372f8dc29/src/util.rs#L184-L198: allow list\n\u27e864\u27e9 https://docs.rs/ureq/latest/ureq/#versioning: \u00a7\n\u27e865\u27e9 https://docs.rs/ureq/latest/ureq/#semver-and-unversioned: \u00a7\n\u27e866\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/transport/trait.Transport.html: `Transport`\n\u27e867\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/resolver/trait.Resolver.html: `Resolver`\n\u27e868\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/index.html: `unversioned`\n\u27e869\u27e9 https://docs.rs/ureq/latest/ureq/#breaking-changes-in-dependencies: \u00a7\n\u27e870\u27e9 https://docs.rs/ureq/latest/ureq/#minimum-supported-rust-version-msrv: \u00a7\n\u27e871\u27e9 https://docs.rs/ureq/latest/ureq/#reexports: \u00a7\n\u27e872\u27e9 https://docs.rs/ureq/latest/ureq/#modules: \u00a7\n\u27e873\u27e9 https://docs.rs/ureq/latest/ureq/config/index.html: mod ureq::config - config\n\u27e874\u27e9 https://docs.rs/ureq/latest/ureq/middleware/index.html: mod ureq::middleware - middleware\n\u27e875\u27e9 https://docs.rs/ureq/latest/ureq/tls/index.html: mod ureq::tls - tls\n\u27e876\u27e9 https://docs.rs/ureq/latest/ureq/typestate/index.html: mod ureq::typestate - typestate\n\u27e877\u27e9 https://docs.rs/ureq/latest/ureq/unversioned/index.html: mod ureq::unversioned - unversioned\n\u27e878\u27e9 https://docs.rs/ureq/latest/ureq/#structs: \u00a7\n\u27e879\u27e9 https://docs.rs/ureq/latest/ureq/struct.Agent.html: struct ureq::Agent - Agent\n\u27e880\u27e9 https://docs.rs/ureq/latest/ureq/struct.Body.html: struct ureq::Body - Body\n\u27e881\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/response/struct.Response.html: struct http::response::Response - `http::Response<Body>`\n\u27e882\u27e9 https://docs.rs/ureq/latest/ureq/struct.BodyBuilder.html: struct ureq::BodyBuilder - BodyBuilder\n\u27e883\u27e9 https://docs.rs/ureq/latest/ureq/struct.BodyReader.html: struct ureq::BodyReader - BodyReader\n\u27e884\u27e9 https://docs.rs/ureq/latest/ureq/struct.BodyWithConfig.html: struct ureq::BodyWithConfig - BodyWithConfig\n\u27e885\u27e9 https://docs.rs/ureq/latest/ureq/struct.Cookie.html: struct ureq::Cookie - Cookie\n\u27e886\u27e9 https://docs.rs/ureq/latest/ureq/struct.CookieJar.html: struct ureq::CookieJar - CookieJar\n\u27e887\u27e9 https://docs.rs/ureq/latest/ureq/struct.Proxy.html: struct ureq::Proxy - Proxy\n\u27e888\u27e9 https://docs.rs/ureq/latest/ureq/struct.ProxyBuilder.html: struct ureq::ProxyBuilder - ProxyBuilder\n\u27e889\u27e9 https://docs.rs/ureq/latest/ureq/struct.RequestBuilder.html: struct ureq::RequestBuilder - RequestBuilder\n\u27e890\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Builder.html: struct http::request::Builder - `http::request::Builder`\n\u27e891\u27e9 https://docs.rs/ureq/latest/ureq/struct.SendBody.html: struct ureq::SendBody - SendBody\n\u27e892\u27e9 https://docs.rs/ureq/latest/ureq/#enums: \u00a7\n\u27e893\u27e9 https://docs.rs/ureq/latest/ureq/enum.Error.html: enum ureq::Error - Error\n\u27e894\u27e9 https://docs.rs/ureq/latest/ureq/enum.ProxyProtocol.html: enum ureq::ProxyProtocol - ProxyProtocol\n\u27e895\u27e9 https://docs.rs/ureq/latest/ureq/enum.Timeout.html: enum ureq::Timeout - Timeout\n\u27e896\u27e9 https://docs.rs/ureq/latest/ureq/#traits: \u00a7\n\u27e897\u27e9 https://docs.rs/ureq/latest/ureq/trait.AsSendBody.html: trait ureq::AsSendBody - AsSendBody\n\u27e898\u27e9 https://docs.rs/ureq/latest/ureq/trait.RequestExt.html: trait ureq::RequestExt - RequestExt\n\u27e899\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Request.html: struct http::request::Request - `http::Request<impl AsSendBody>`\n\u27e8100\u27e9 https://docs.rs/ureq/latest/ureq/trait.ResponseExt.html: trait ureq::ResponseExt - ResponseExt\n\u27e8101\u27e9 https://docs.rs/ureq/latest/ureq/#functions: \u00a7\n\u27e8102\u27e9 https://docs.rs/ureq/latest/ureq/fn.agent.html: fn ureq::agent - agent\n\u27e8103\u27e9 https://docs.rs/ureq/latest/ureq/fn.connect.html: fn ureq::connect - connect\n\u27e8104\u27e9 https://docs.rs/ureq/latest/ureq/fn.delete.html: fn ureq::delete - delete\n\u27e8105\u27e9 https://docs.rs/ureq/latest/ureq/fn.get.html: fn ureq::get - get\n\u27e8106\u27e9 https://docs.rs/ureq/latest/ureq/fn.head.html: fn ureq::head - head\n\u27e8107\u27e9 https://docs.rs/ureq/latest/ureq/fn.options.html: fn ureq::options - options\n\u27e8108\u27e9 https://docs.rs/ureq/latest/ureq/fn.patch.html: fn ureq::patch - patch\n\u27e8109\u27e9 https://docs.rs/ureq/latest/ureq/fn.post.html: fn ureq::post - post\n\u27e8110\u27e9 https://docs.rs/ureq/latest/ureq/fn.put.html: fn ureq::put - put\n\u27e8111\u27e9 https://docs.rs/ureq/latest/ureq/fn.run.html: fn ureq::run - run\n\u27e8112\u27e9 https://docs.rs/ureq/latest/ureq/fn.trace.html: fn ureq::trace - trace\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 24901,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115269.5721427"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/ureq",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [104 releases](https://lib.rs/crates/ureq/versions) (56 stable)\n3.0.12 |  Jun 16, 2025   \n---|---  \n3.0.10 |  Mar 17, 2025   \n3.0.0-rc3 |  Nov 27, 2024   \n2.12.1 |  Dec 4, 2024   \n0.4.5 |  Jul 15, 2018   \n#**3** in [HTTP client](https://lib.rs/web-programming/http-client \"Crates to make HTTP network requests.\")\nDownload history 1077840/week @ 2025-03-08 1207504/week @ 2025-03-15 1488653/week @ 2025-03-22 866398/week @ 2025-03-29 909762/week @ 2025-04-05 788026/week @ 2025-04-12 761202/week @ 2025-04-19 744450/week @ 2025-04-26 773073/week @ 2025-05-03 769009/week @ 2025-05-10 749283/week @ 2025-05-17 698421/week @ 2025-05-24 767367/week @ 2025-05-31 739101/week @ 2025-06-07 704522/week @ 2025-06-14 840636/week @ 2025-06-21\n**3,184,302** downloads per month Used in [**2,250** crates (1,032 directly)](https://lib.rs/crates/ureq/rev)\n**MIT/Apache**\n435KB  8K  SLoC\n# ureq\n[ ![Crates.io version](https://img.shields.io/crates/v/ureq.svg?style=flat-square) ](https://crates.io/crates/ureq) [ ![docs.rs docs](https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square) ](https://docs.rs/ureq) [ ![Crates.io downloads](https://img.shields.io/crates/d/ureq.svg?style=flat-square) ](https://crates.io/crates/ureq)\nA simple, safe HTTP client.\nUreq's first priority is being easy for you to use. It's great for anyone who wants a low-overhead HTTP client that just gets the job done. Works very well with HTTP APIs. Its features include cookies, JSON, HTTP proxies, HTTPS, charset decoding, and is based on the API of the ``http`` crate.\nUreq is in pure Rust for safety and ease of understanding. It avoids using ```unsafe``` directly. It uses blocking I/O instead of async I/O, because that keeps the API simple and keeps dependencies to a minimum. For TLS, ureq uses rustls or native-tls.\nSee the [changelog](https://github.com/algesten/ureq/blob/main/CHANGELOG.md) for details of recent releases.\n## Usage\nIn its simplest form, ureq looks like this:\n```\n``let` body`:` `String` `=` `ureq`::``get`(```\"`http://example.com`\"```)`\n  `.``header``(```\"`Example-Header`\"```,` ``\"`header value`\"```)`\n  `.``call``(``)``?`\n  `.``body_mut``(``)`\n  `.``read_to_string``(``)``?``;`\n`\n```\n\nFor more involved tasks, you'll want to create an [``Agent``](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html). An Agent holds a connection pool for reuse, and a cookie store if you use the **cookies** feature. An Agent can be cheaply cloned due to internal [``Arc``](https://doc.rust-lang.org/std/sync/struct.Arc.html) and all clones of an Agent share state among each other. Creating an Agent also allows setting options like the TLS configuration.\n```\n``use` `ureq`::``Agent`;`\n`use` `std`::```time`::``Duration`;`\n`let` `mut` config `=` `Agent`::``config_builder`(``)`\n  `.``timeout_global``(``Some``(``Duration`::``from_secs`(``5``)``)``)`\n  `.``build``(``)``;`\n`let` agent`:` Agent `=` config`.``into``(``)``;`\n`let` body`:` `String` `=` agent`.``get``(```\"`http://example.com/page`\"```)`\n  `.``call``(``)``?`\n  `.``body_mut``(``)`\n  `.``read_to_string``(``)``?``;`\n``//` Reuses the connection from previous request.`\n`let` response`:` `String` `=` agent`.``put``(```\"`http://example.com/upload`\"```)`\n  `.``header``(```\"`Authorization`\"```,` ``\"`example-token`\"```)`\n  `.``send``(```\"`some body data`\"```)``?`\n  `.``body_mut``(``)`\n  `.``read_to_string``(``)``?``;`\n`\n```\n\n### JSON\nUreq supports sending and receiving json, if you enable the **json** feature:\n```\n``use` `serde`::````{`Serialize`,` Deserialize```}```;`\n``#``[``derive```(```Serialize```)```]``\n``struct` ```MySendBody` ````{`\n  `thing``:` String,\n```}```\n``#``[``derive```(```Deserialize```)```]``\n``struct` ```MyRecvBody` ````{`\n  `other``:` String,\n```}```\n`let` send_body `=` MySendBody ``{` thing`:` ``\"`yo`\"```.``to_string``(``)` ```}```;`\n``//` Requires the `json` feature enabled.`\n`let` recv_body `=` `ureq`::``post`(```\"`http://example.com/post/ingest`\"```)`\n  `.``header``(```\"`X-My-Header`\"```,` ``\"`Secret`\"```)`\n  `.``send_json``(``&`send_body`)``?`\n  `.``body_mut``(``)`\n  `.``read_json`::````<`MyRecvBody`>```(``)``?``;`\n`\n```\n\n### Error handling\nureq returns errors via ````Result``<`T, `ureq`::``Error`>````. That includes I/O errors, protocol errors. By default, also HTTP status code errors (when the server responded 4xx or 5xx) results in [``Error``](https://docs.rs/ureq/3.0.0-rc4/ureq/enum.Error.html).\nThis behavior can be turned off via [```http_status_as_error``(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/config/struct.ConfigBuilder.html#method.http_status_as_error)\n```\n``use` `ureq`::``Error`;`\n`match` `ureq`::``get`(```\"`http://mypage.example.com/`\"```)``.``call``(``)` ``{`\n  `Ok``(`response`)` `=>` `{` ``/*` it worked `*/```}``,`\n  `Err``(``Error`::``StatusCode`(`code`)``)` `=>` `{`\n    ``/*` the server returned an unexpected status\n      code (such as 400, 500 etc) `*/``\n  `}`\n  `Err``(``_``)` `=>` `{` ``/*` some kind of io/transport/etc error `*/`` `}`\n```}``\n`\n```\n\n## Features\nTo enable a minimal dependency tree, some features are off by default. You can control them when including ureq as a dependency.\n``ureq `=` ``{` version `=` ``\"`3`\"```,` features `=` `[```\"`socks-proxy`\"```,` ``\"`charset`\"```]` ```}````\nThe default enabled features are: **rustls** and **gzip**.\n  * **rustls** enables the rustls TLS implementation. This is the default for the the crate level convenience calls (```ureq`::``get`` etc). It currently uses ``ring`` as the TLS provider.\n  * **native-tls** enables the native tls backend for TLS. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, ``native-tls`` is never picked up as a default or used by the crate level convenience calls (```ureq`::``get`` etc) \u2013 it must be configured on the agent\n  * **platform-verifier** enables verifying the server certificates using a method native to the platform ureq is executing on. See [rustls-platform-verifier](https://lib.rs/crates/rustls-platform-verifier) crate\n  * **socks-proxy** enables proxy config using the ``socks4`:```//````, ``socks4a`:```//````, ``socks5`:```//```` and ``socks`:```//```` (equal to ``socks5`:```//````) prefix\n  * **cookies** enables cookies\n  * **gzip** enables requests of gzip-compressed responses and decompresses them\n  * **brotli** enables requests brotli-compressed responses and decompresses them\n  * **charset** enables interpreting the charset part of the Content-Type header (e.g. ``Content`-`Type`:` text`/`plain`;` charset`=`iso`-``8859``-``1```). Without this, the library defaults to Rust's built in ``utf-8``\n  * **json** enables JSON sending and receiving via serde_json\n\n\n#### Unstable\nThese features are unstable and might change in a minor version.\n  * **rustls-no-provider** Enables rustls, but does not enable any [``CryptoProvider``](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html) such as ``ring``. Providers other than the default (currently ``ring``) are never picked up from feature flags alone. It must be configured on the agent.\n  * **vendored** compiles and statically links to a copy of non-Rust vendors (e.g. OpenSSL from ``native-tls``)\n\n\n## TLS (https)\n### rustls\nBy default, ureq uses [``rustls`` crate](https://lib.rs/crates/rustls) with the ``ring`` cryptographic provider. As of Sep 2024, the ``ring`` provider has a higher chance of compiling successfully. If the user installs another process [default provider](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#method.install_default), that choice is respected.\nureq does not guarantee to default to ring indefinitely. ``rustls`` as a feature flag will always work, but the specific crypto backend might change in a minor version.\n```\n```//` This uses rustls`\n`ureq`::``get`(```\"`https://www.google.com/`\"```)``.``call``(``)``.``unwrap``(``)``;`\n`\n```\n\n#### rustls without ring\nureq never changes TLS backend from feature flags alone. It is possible to compile ureq without ring, but it requires specific feature flags and configuring the [``Agent``](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html).\nSince rustls is not semver 1.x, this requires non-semver-guaranteed API. I.e. ureq might change this behavior without a major version bump.\nRead more at [```TlsConfigBuilder`::``unversioned_rustls_crypto_provider``](https://docs.rs/ureq/latest/ureq/?search=tls%3A%3ATlsConfigBuilder%3A%3Aunversioned_rustls_crypto_provider \"crate::tls::TlsConfigBuilder::unversioned_rustls_crypto_provider\").\n### native-tls\nAs an alternative, ureq ships with [``native-tls``](https://lib.rs/crates/native-tls) as a TLS provider. This must be enabled using the **native-tls** feature. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, ``native-tls`` is never picked up as a default or used by the crate level convenience calls (```ureq`::``get`` etc) \u2013 it must be configured on the agent.\n```\n``use` `ureq`::```config`::``Config`;`\n`use` `ureq`::```tls`::````{`TlsConfig`,` TlsProvider```}```;`\n`let` `mut` config `=` `Config`::``builder`(``)`\n  `.``tls_config``(`\n    `TlsConfig`::``builder`(``)`\n      ``//` requires the native-tls feature`\n      `.``provider``(``TlsProvider`::``NativeTls`)`\n      `.``build``(``)`\n  `)`\n  `.``build``(``)``;`\n`let` agent `=` config`.``new_agent``(``)``;`\nagent`.``get``(```\"`https://www.google.com/`\"```)``.``call``(``)``.``unwrap``(``)``;`\n`\n```\n\n### Root certificates\n#### webpki-roots\nBy default, ureq uses Mozilla's root certificates via the [webpki-roots](https://lib.rs/crates/webpki-roots) crate. This is a static bundle of root certificates that do not update automatically. It also circumvents whatever root certificates are installed on the host running ureq, which might be a good or a bad thing depending on your perspective. There is also no mechanism for [SCT](https://en.wikipedia.org/wiki/Certificate_Transparency), [CRL](https://en.wikipedia.org/wiki/Certificate_revocation_list)s or other revocations. To maintain a \"fresh\" list of root certs, you need to bump the ureq dependency from time to time.\nThe main reason for chosing this as the default is to minimize the number of dependencies. More details about this decision can be found at [PR 818].\nIf your use case for ureq is talking to a limited number of servers with high trust, the default setting is likely sufficient. If you use ureq with a high number of servers, or servers you don't trust, we recommend using the platform verifier (see below).\n#### platform-verifier\nThe [rustls-platform-verifier](https://lib.rs/crates/rustls-platform-verifier) crate provides access to natively checking the certificate via your OS. To use this verifier, you need to enable it using feature flag **platform-verifier** as well as configure an agent to use it.\n```\n``use` `ureq`::``Agent`;`\n`use` `ureq`::```tls`::````{`TlsConfig`,` RootCerts```}```;`\n`let` agent `=` `Agent`::``config_builder`(``)`\n  `.``tls_config``(`\n    `TlsConfig`::``builder`(``)`\n      `.``root_certs``(``RootCerts`::``PlatformVerifier`)`\n      `.``build``(``)`\n  `)`\n  `.``build``(``)`\n  `.``new_agent``(``)``;`\n`let` response `=` agent`.``get``(```\"`https://httpbin.org/get`\"```)``.``call``(``)``?``;`\n`\n```\n\nSetting ```RootCerts`::``PlatformVerifier`` together with ```TlsProvider`::``NativeTls`` means also native-tls will use the OS roots instead of [webpki-roots](https://lib.rs/crates/webpki-roots) crate. Whether that results in a config that has CRLs and revocations is up to whatever native-tls links to.\n## JSON\nBy enabling the **json** feature, the library supports serde json.\nThis is enabled by default.\n  * [``request`.``send_json``(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json) send body as json.\n  * [``body`.``read_json``(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_json) transform response to json.\n\n\n## Sending body data\nHTTP/1.1 has two ways of transfering body data. Either of a known size with the ``Content`-`Length`` HTTP header, or unknown size with the ``Transfer`-`Encoding`:` chunked`` header. ureq supports both and will use the appropriate method depending on which body is being sent.\nureq has a [``AsSendBody``](https://docs.rs/ureq/3.0.0-rc4/ureq/trait.AsSendBody.html) trait that is implemented for many well known types of data that we might want to send. The request body can thus be anything from a ```String``` to a ``File``, see below.\n### Content-Length\nThe library will send a ``Content`-`Length`` header on requests with bodies of known size, in other words, if the body to send is one of:\n  * ```&``[``u8``]```\n  * ```&``[``u8``;` N`]```\n  * ```&``str```\n  * ```String```\n  * ```&``String```\n  * ````Vec``<``u8``>````\n  * ```&```Vec``<``u8``>``)``\n  * [```SendBody`::``from_json`(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_json) (implicitly via [``request`.``send_json``(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json))\n\n\n### Transfer-Encoding: chunked\nureq will send a ``Transfer`-`Encoding`:` chunked`` header on requests where the body is of unknown size. The body is automatically converted to an [```std`::```io`::``Read``](https://doc.rust-lang.org/std/io/trait.Read.html) when the type is one of:\n  * ``File``\n  * ```&`File``\n  * ``TcpStream``\n  * ```&`TcpStream``\n  * ``Stdin``\n  * ``UnixStream`` (not on windows)\n\n\n#### From readers\nThe chunked method also applies for bodies constructed via:\n  * [```SendBody`::``from_reader`(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_reader)\n  * [```SendBody`::``from_owned_reader`(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_owned_reader)\n\n\n### Proxying a response body\nAs a special case, when ureq sends a [``Body``](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html) from a previous http call, the use of ``Content`-`Length`` or ``chunked`` depends on situation. For input such as gzip decoding (**gzip** feature) or charset transformation (**charset** feature), the output body might not match the input, which means ureq is forced to use the ``chunked`` method.\n  * ```Response`<`Body`>````\n\n\n### Sending form data\n[``request`.``send_form``(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_form) provides a way to send ``application`/`x`-`www`-`form`-`urlencoded`` encoded data. The key/values provided will be URL encoded.\n### Overriding\nIf you set your own Content-Length or Transfer-Encoding header before sending the body, ureq will respect that header by not overriding it, and by encoding the body or not, as indicated by the headers you set.\n```\n``let` resp `=` `ureq`::``put`(```\"`https://httpbin.org/put`\"```)`\n  `.``header``(```\"`Transfer-Encoding`\"```,` ``\"`chunked`\"```)`\n  `.``send``(```\"`Hello world`\"```)``?``;`\n`\n```\n\n## Character encoding\nBy enabling the **charset** feature, the library supports receiving other character sets than ``utf-8``.\nFor [```Body`::``read_to_string`(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string) we read the header like:\n``Content`-`Type`:` text`/`plain`;` charset`=`iso`-``8859``-``1```\nand if it contains a charset specification, we try to decode the body using that encoding. In the absence of, or failing to interpret the charset, we fall back on ``utf-8``.\nCurrently ureq does not provide a way to encode when sending request bodies.\n### Lossy utf-8\nWhen reading text bodies (with a ``Content`-`Type`` starting ``text/`` as in ``text`/`plain``, ``text`/`html``, etc), ureq can ensure the body is possible to read as a ```String``` also if it contains characters that are not valid for utf-8. Invalid characters are replaced with a question mark ```?``` (NOT the utf-8 replacement character).\nFor [```Body`::``read_to_string`(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string) this is turned on by default, but it can be disabled and conversely for [```Body`::``as_reader`(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.as_reader) it is not enabled, but can be.\nTo precisely configure the behavior use [```Body`::``with_config`(``)```](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.with_config).\n## Proxying\nureq supports two kinds of proxies, [``HTTP``](https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling#http_tunneling) ([``CONNECT``](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT)), [```SOCKS4```](https://en.wikipedia.org/wiki/SOCKS#SOCKS4)/[```SOCKS5```](https://en.wikipedia.org/wiki/SOCKS#SOCKS5), the former is always available while the latter must be enabled using the feature **socks-proxy**.\nProxies settings are configured on an [``Agent``](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html). All request sent through the agent will be proxied.\n### Example using HTTP\n```\n``use` `ureq`::````{`Agent`,` Proxy```}```;`\n``//` Configure an http connect proxy.`\n`let` proxy `=` `Proxy`::``new`(```\"`http://user:password@cool.proxy:9090`\"```)``?``;`\n`let` agent`:` Agent `=` `Agent`::``config_builder`(``)`\n  `.``proxy``(``Some``(`proxy`)``)`\n  `.``build``(``)`\n  `.``into``(``)``;`\n``//` This is proxied.`\n`let` resp `=` agent`.``get``(```\"`http://cool.server`\"```)``.``call``(``)``?``;`\n`\n```\n\n### Example using SOCKS5\n```\n``use` `ureq`::````{`Agent`,` Proxy```}```;`\n``//` Configure a SOCKS proxy.`\n`let` proxy `=` `Proxy`::``new`(```\"`socks5://user:password@cool.proxy:9090`\"```)``?``;`\n`let` agent`:` Agent `=` `Agent`::``config_builder`(``)`\n  `.``proxy``(``Some``(`proxy`)``)`\n  `.``build``(``)`\n  `.``into``(``)``;`\n``//` This is proxied.`\n`let` resp `=` agent`.``get``(```\"`http://cool.server`\"```)``.``call``(``)``?``;`\n`\n```\n\n## Log levels\nureq uses the log crate. These are the definitions of the log levels, however we do not guarantee anything for dependencies such as ``http`` and ``rustls``.\n  * ``ERROR`` - nothing\n  * ``WARN`` - if we detect a user configuration problem.\n  * ``INFO`` - nothing\n  * ``DEBUG`` - uri, state changes, transport, resolver and selected request/response headers\n  * ``TRACE`` - wire level debug. NOT REDACTED!\n\n\nThe request/response headers on DEBUG levels are allow-listed to only include headers that are considered safe. The code has the [allow list](https://github.com/algesten/ureq/blob/81127cfc38516903330dc1b9c618122372f8dc29/src/util.rs#L184-L198).\n## Versioning\n### Semver and ``unversioned``\nureq follows semver. From ureq 3.x we strive to have a much closer adherence to semver than 2.x. The main mistake in 2.x was to re-export crates that were not yet semver 1.0. In ureq 3.x TLS and cookie configuration is shimmed using our own types.\nureq 3.x is trying out two new traits that had no equivalent in 2.x, [``Transport``](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/transport/trait.Transport.html) and [``Resolver``](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/resolver/trait.Resolver.html). These allow the user write their own bespoke transports and (DNS name) resolver. The API:s for these parts are not yet solidified. They live under the [``unversioned``](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/index.html) module, and do not follow semver. See module doc for more info.\n### Breaking changes in dependencies\nureq relies on non-semver 1.x crates such as ``rustls`` and ``native-tls``. Some scenarios, such as configuring ``rustls`` to not use ``ring``, a user of ureq might need to interact with these crates directly instead of going via ureq's provided API.\nSuch changes can break when ureq updates dependencies. This is not considered a breaking change for ureq and will not be reflected by a major version bump.\nWe strive to mark ureq's API with the word \"unversioned\" to identify places where this risk arises.\n### Minimum Supported Rust Version (MSRV)\nFrom time to time we will need to update our minimum supported Rust version (MSRV). This is not something we do lightly; our ambition is to be as conservative with MSRV as possible.\n  * For some dependencies, we will opt for pinning the version of the dep instead of bumping our MSRV.\n  * For important dependencies, like the TLS libraries, we cannot hold back our MSRV if they change.\n  * We do not consider MSRV changes to be breaking for the purposes of semver.\n  * We will not make MSRV changes in patch releases.\n  * MSRV changes will get their own minor release, and not be co-mingled with other changes.\n\n\n#### Dependencies\n~9\u201323MB  ~448K SLoC\n  * [base64](https://lib.rs/crates/base64 \"new\") 0.22.1\n  * [native-tls?](https://lib.rs/crates/ureq/features#feature-native-tls \"optional feature\") [der](https://lib.rs/crates/der \"0.7.9\")[+pem](https://lib.rs/crates/der/features#feature-pem)[+std](https://lib.rs/crates/der/features#feature-std)\n  * [native-tls?](https://lib.rs/crates/ureq/features#feature-native-tls \"optional feature\") [vendored?](https://lib.rs/crates/ureq/features#feature-vendored \"optional feature\") [native-tls](https://lib.rs/crates/native-tls \"0.2.12\")\n  * [native-tls?](https://lib.rs/crates/ureq/features#feature-native-tls \"optional feature\") [rustls-no-provider](https://lib.rs/crates/ureq/features#feature-rustls-no-provider \"default feature\") [rustls-pemfile](https://lib.rs/crates/rustls-pemfile \"new\") 2.1[+std](https://lib.rs/crates/rustls-pemfile/features#feature-std)\n  * [native-tls?](https://lib.rs/crates/ureq/features#feature-native-tls \"optional feature\") [rustls-no-provider](https://lib.rs/crates/ureq/features#feature-rustls-no-provider \"default feature\") [rustls-pki-types](https://lib.rs/crates/rustls-pki-types \"1.11.0\")[+std](https://lib.rs/crates/rustls-pki-types/features#feature-std)\n  * [native-tls?](https://lib.rs/crates/ureq/features#feature-native-tls \"optional feature\") [webpki-root-certs](https://lib.rs/crates/webpki-root-certs \"0.26.8\")\n  * [gzip](https://lib.rs/crates/ureq/features#feature-gzip \"default feature\") [flate2](https://lib.rs/crates/flate2 \"1.0.30\")\n  * [log](https://lib.rs/crates/log \"0.4.25\")\n  * [percent-encoding](https://lib.rs/crates/percent-encoding \"2.3.1\")\n  * [rustls](https://lib.rs/crates/ureq/features#feature-rustls \"default feature\") [rustls-no-provider](https://lib.rs/crates/ureq/features#feature-rustls-no-provider \"default feature\") [rustls](https://lib.rs/crates/rustls \"new\") 0.23.22[+logging](https://lib.rs/crates/rustls/features#feature-logging)[+std](https://lib.rs/crates/rustls/features#feature-std)[+tls12](https://lib.rs/crates/rustls/features#feature-tls12)\n  * [rustls-no-provider](https://lib.rs/crates/ureq/features#feature-rustls-no-provider \"default feature\") [webpki-roots](https://lib.rs/crates/webpki-roots \"outdated\") 0.26.8\n  * [ureq-proto](https://lib.rs/crates/ureq-proto \"0.4.2\")[+client](https://lib.rs/crates/ureq-proto/features#feature-client)\n  * [utf-8](https://lib.rs/crates/utf-8 \"0.7.6\")\n  * [brotli?](https://lib.rs/crates/ureq/features#feature-brotli \"optional feature\") [brotli-decompressor](https://lib.rs/crates/brotli-decompressor \"obsolete\") 4.0\n  * [cookies?](https://lib.rs/crates/ureq/features#feature-cookies \"optional feature\") [json?](https://lib.rs/crates/ureq/features#feature-json \"optional feature\") [cookie_store](https://lib.rs/crates/cookie_store \"new\") 0.21.1[+preserve_order](https://lib.rs/crates/cookie_store/features#feature-preserve_order)\n  * [json?](https://lib.rs/crates/ureq/features#feature-json \"optional feature\") [serde](https://lib.rs/crates/serde \"1.0.138\")[+std](https://lib.rs/crates/serde/features#feature-std)\n  * [json?](https://lib.rs/crates/ureq/features#feature-json \"optional feature\") [serde_json](https://lib.rs/crates/serde_json \"1.0.120\")[+std](https://lib.rs/crates/serde_json/features#feature-std)\n  * [cookies?](https://lib.rs/crates/ureq/features#feature-cookies \"optional feature\") [url](https://lib.rs/crates/url \"2.3.1\")\n  * [charset?](https://lib.rs/crates/ureq/features#feature-charset \"optional feature\") [encoding_rs](https://lib.rs/crates/encoding_rs \"0.8.34\")\n  * [platform-verifier?](https://lib.rs/crates/ureq/features#feature-platform-verifier \"optional feature\") [rustls-platform-verifier](https://lib.rs/crates/rustls-platform-verifier \"0.5.1\")\n  * [socks-proxy?](https://lib.rs/crates/ureq/features#feature-socks-proxy \"optional feature\") [socks](https://lib.rs/crates/socks \"0.3.4\")\n\n\n  * dev  [assert_no_alloc](https://lib.rs/crates/assert_no_alloc \"1.1.2\")\n  * dev  [auto-args](https://lib.rs/crates/auto-args \"new\") 0.3\n  * dev  [env_logger](https://lib.rs/crates/env_logger \"new\") 0.11.7\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  104 releases\u27e81\u27e9 (56 stable)\n3.0.12 |  Jun 16, 2025   \n---|---  \n3.0.10 |  Mar 17, 2025   \n3.0.0-rc3 |  Nov 27, 2024   \n2.12.1 |  Dec 4, 2024   \n0.4.5 |  Jul 15, 2018   \n#**3** in HTTP client\u27e82\u27e9\nDownload history 1077840/week @ 2025-03-08 1207504/week @ 2025-03-15 1488653/week @ 2025-03-22 866398/week @ 2025-03-29 909762/week @ 2025-04-05 788026/week @ 2025-04-12 761202/week @ 2025-04-19 744450/week @ 2025-04-26 773073/week @ 2025-05-03 769009/week @ 2025-05-10 749283/week @ 2025-05-17 698421/week @ 2025-05-24 767367/week @ 2025-05-31 739101/week @ 2025-06-07 704522/week @ 2025-06-14 840636/week @ 2025-06-21\n**3,184,302** downloads per month Used in **2,250** crates (1,032 directly)\u27e83\u27e9\n**MIT/Apache**\n435KB  8K  SLoC\n# ureq\n ![Crates.io version\u27e84\u27e9 ](https://crates.io/crates/ureq)  ![docs.rs docs\u27e85\u27e9 ](https://docs.rs/ureq)  ![Crates.io downloads\u27e86\u27e9 ](https://crates.io/crates/ureq)\nA simple, safe HTTP client.\nUreq's first priority is being easy for you to use. It's great for anyone who wants a low-overhead HTTP client that just gets the job done. Works very well with HTTP APIs. Its features include cookies, JSON, HTTP proxies, HTTPS, charset decoding, and is based on the API of the ``http`` crate.\nUreq is in pure Rust for safety and ease of understanding. It avoids using ```unsafe``` directly. It uses blocking I/O instead of async I/O, because that keeps the API simple and keeps dependencies to a minimum. For TLS, ureq uses rustls or native-tls.\nSee the changelog\u27e87\u27e9 for details of recent releases.\n## Usage\nIn its simplest form, ureq looks like this:\n```\n``let` body`:` `String` `=` `ureq`::``get`(```\"`http://example.com`\"```)`\n  `.``header``(```\"`Example-Header`\"```,` ``\"`header value`\"```)`\n  `.``call``(``)``?`\n  `.``body_mut``(``)`\n  `.``read_to_string``(``)``?``;`\n`\n```\n\nFor more involved tasks, you'll want to create an ``Agent``\u27e88\u27e9. An Agent holds a connection pool for reuse, and a cookie store if you use the **cookies** feature. An Agent can be cheaply cloned due to internal ``Arc``\u27e89\u27e9 and all clones of an Agent share state among each other. Creating an Agent also allows setting options like the TLS configuration.\n```\n``use` `ureq`::``Agent`;`\n`use` `std`::```time`::``Duration`;`\n`let` `mut` config `=` `Agent`::``config_builder`(``)`\n  `.``timeout_global``(``Some``(``Duration`::``from_secs`(``5``)``)``)`\n  `.``build``(``)``;`\n`let` agent`:` Agent `=` config`.``into``(``)``;`\n`let` body`:` `String` `=` agent`.``get``(```\"`http://example.com/page`\"```)`\n  `.``call``(``)``?`\n  `.``body_mut``(``)`\n  `.``read_to_string``(``)``?``;`\n``//` Reuses the connection from previous request.`\n`let` response`:` `String` `=` agent`.``put``(```\"`http://example.com/upload`\"```)`\n  `.``header``(```\"`Authorization`\"```,` ``\"`example-token`\"```)`\n  `.``send``(```\"`some body data`\"```)``?`\n  `.``body_mut``(``)`\n  `.``read_to_string``(``)``?``;`\n`\n```\n\n### JSON\nUreq supports sending and receiving json, if you enable the **json** feature:\n```\n``use` `serde`::````{`Serialize`,` Deserialize```}```;`\n``#``[``derive```(```Serialize```)```]``\n``struct` ```MySendBody` ````{`\n  `thing``:` String,\n```}```\n``#``[``derive```(```Deserialize```)```]``\n``struct` ```MyRecvBody` ````{`\n  `other``:` String,\n```}```\n`let` send_body `=` MySendBody ``{` thing`:` ``\"`yo`\"```.``to_string``(``)` ```}```;`\n``//` Requires the `json` feature enabled.`\n`let` recv_body `=` `ureq`::``post`(```\"`http://example.com/post/ingest`\"```)`\n  `.``header``(```\"`X-My-Header`\"```,` ``\"`Secret`\"```)`\n  `.``send_json``(``&`send_body`)``?`\n  `.``body_mut``(``)`\n  `.``read_json`::````<`MyRecvBody`>```(``)``?``;`\n`\n```\n\n### Error handling\nureq returns errors via ````Result``<`T, `ureq`::``Error`>````. That includes I/O errors, protocol errors. By default, also HTTP status code errors (when the server responded 4xx or 5xx) results in ``Error``\u27e810\u27e9.\nThis behavior can be turned off via ```http_status_as_error``(``)```\u27e811\u27e9\n```\n``use` `ureq`::``Error`;`\n`match` `ureq`::``get`(```\"`http://mypage.example.com/`\"```)``.``call``(``)` ``{`\n  `Ok``(`response`)` `=>` `{` ``/*` it worked `*/```}``,`\n  `Err``(``Error`::``StatusCode`(`code`)``)` `=>` `{`\n    ``/*` the server returned an unexpected status\n      code (such as 400, 500 etc) `*/``\n  `}`\n  `Err``(``_``)` `=>` `{` ``/*` some kind of io/transport/etc error `*/`` `}`\n```}``\n`\n```\n\n## Features\nTo enable a minimal dependency tree, some features are off by default. You can control them when including ureq as a dependency.\n``ureq `=` ``{` version `=` ``\"`3`\"```,` features `=` `[```\"`socks-proxy`\"```,` ``\"`charset`\"```]` ```}````\nThe default enabled features are: **rustls** and **gzip**.\n  * **rustls** enables the rustls TLS implementation. This is the default for the the crate level convenience calls (```ureq`::``get`` etc). It currently uses ``ring`` as the TLS provider.\n  * **native-tls** enables the native tls backend for TLS. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, ``native-tls`` is never picked up as a default or used by the crate level convenience calls (```ureq`::``get`` etc) \u2013 it must be configured on the agent\n  * **platform-verifier** enables verifying the server certificates using a method native to the platform ureq is executing on. See rustls-platform-verifier\u27e812\u27e9 crate\n  * **socks-proxy** enables proxy config using the ``socks4`:```//````, ``socks4a`:```//````, ``socks5`:```//```` and ``socks`:```//```` (equal to ``socks5`:```//````) prefix\n  * **cookies** enables cookies\n  * **gzip** enables requests of gzip-compressed responses and decompresses them\n  * **brotli** enables requests brotli-compressed responses and decompresses them\n  * **charset** enables interpreting the charset part of the Content-Type header (e.g. ``Content`-`Type`:` text`/`plain`;` charset`=`iso`-``8859``-``1```). Without this, the library defaults to Rust's built in ``utf-8``\n  * **json** enables JSON sending and receiving via serde_json\n\n\n#### Unstable\nThese features are unstable and might change in a minor version.\n  * **rustls-no-provider** Enables rustls, but does not enable any ``CryptoProvider``\u27e813\u27e9 such as ``ring``. Providers other than the default (currently ``ring``) are never picked up from feature flags alone. It must be configured on the agent.\n  * **vendored** compiles and statically links to a copy of non-Rust vendors (e.g. OpenSSL from ``native-tls``)\n\n\n## TLS (https)\n### rustls\nBy default, ureq uses ``rustls`` crate\u27e814\u27e9 with the ``ring`` cryptographic provider. As of Sep 2024, the ``ring`` provider has a higher chance of compiling successfully. If the user installs another process default provider\u27e815\u27e9, that choice is respected.\nureq does not guarantee to default to ring indefinitely. ``rustls`` as a feature flag will always work, but the specific crypto backend might change in a minor version.\n```\n```//` This uses rustls`\n`ureq`::``get`(```\"`https://www.google.com/`\"```)``.``call``(``)``.``unwrap``(``)``;`\n`\n```\n\n#### rustls without ring\nureq never changes TLS backend from feature flags alone. It is possible to compile ureq without ring, but it requires specific feature flags and configuring the ``Agent``\u27e88\u27e9.\nSince rustls is not semver 1.x, this requires non-semver-guaranteed API. I.e. ureq might change this behavior without a major version bump.\nRead more at ```TlsConfigBuilder`::``unversioned_rustls_crypto_provider``\u27e816\u27e9.\n### native-tls\nAs an alternative, ureq ships with ``native-tls``\u27e817\u27e9 as a TLS provider. This must be enabled using the **native-tls** feature. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, ``native-tls`` is never picked up as a default or used by the crate level convenience calls (```ureq`::``get`` etc) \u2013 it must be configured on the agent.\n```\n``use` `ureq`::```config`::``Config`;`\n`use` `ureq`::```tls`::````{`TlsConfig`,` TlsProvider```}```;`\n`let` `mut` config `=` `Config`::``builder`(``)`\n  `.``tls_config``(`\n    `TlsConfig`::``builder`(``)`\n      ``//` requires the native-tls feature`\n      `.``provider``(``TlsProvider`::``NativeTls`)`\n      `.``build``(``)`\n  `)`\n  `.``build``(``)``;`\n`let` agent `=` config`.``new_agent``(``)``;`\nagent`.``get``(```\"`https://www.google.com/`\"```)``.``call``(``)``.``unwrap``(``)``;`\n`\n```\n\n### Root certificates\n#### webpki-roots\nBy default, ureq uses Mozilla's root certificates via the webpki-roots\u27e818\u27e9 crate. This is a static bundle of root certificates that do not update automatically. It also circumvents whatever root certificates are installed on the host running ureq, which might be a good or a bad thing depending on your perspective. There is also no mechanism for SCT\u27e819\u27e9, CRL\u27e820\u27e9s or other revocations. To maintain a \"fresh\" list of root certs, you need to bump the ureq dependency from time to time.\nThe main reason for chosing this as the default is to minimize the number of dependencies. More details about this decision can be found at [PR 818].\nIf your use case for ureq is talking to a limited number of servers with high trust, the default setting is likely sufficient. If you use ureq with a high number of servers, or servers you don't trust, we recommend using the platform verifier (see below).\n#### platform-verifier\nThe rustls-platform-verifier\u27e812\u27e9 crate provides access to natively checking the certificate via your OS. To use this verifier, you need to enable it using feature flag **platform-verifier** as well as configure an agent to use it.\n```\n``use` `ureq`::``Agent`;`\n`use` `ureq`::```tls`::````{`TlsConfig`,` RootCerts```}```;`\n`let` agent `=` `Agent`::``config_builder`(``)`\n  `.``tls_config``(`\n    `TlsConfig`::``builder`(``)`\n      `.``root_certs``(``RootCerts`::``PlatformVerifier`)`\n      `.``build``(``)`\n  `)`\n  `.``build``(``)`\n  `.``new_agent``(``)``;`\n`let` response `=` agent`.``get``(```\"`https://httpbin.org/get`\"```)``.``call``(``)``?``;`\n`\n```\n\nSetting ```RootCerts`::``PlatformVerifier`` together with ```TlsProvider`::``NativeTls`` means also native-tls will use the OS roots instead of webpki-roots\u27e818\u27e9 crate. Whether that results in a config that has CRLs and revocations is up to whatever native-tls links to.\n## JSON\nBy enabling the **json** feature, the library supports serde json.\nThis is enabled by default.\n  * ``request`.``send_json``(``)```\u27e821\u27e9 send body as json.\n  * ``body`.``read_json``(``)```\u27e822\u27e9 transform response to json.\n\n\n## Sending body data\nHTTP/1.1 has two ways of transfering body data. Either of a known size with the ``Content`-`Length`` HTTP header, or unknown size with the ``Transfer`-`Encoding`:` chunked`` header. ureq supports both and will use the appropriate method depending on which body is being sent.\nureq has a ``AsSendBody``\u27e823\u27e9 trait that is implemented for many well known types of data that we might want to send. The request body can thus be anything from a ```String``` to a ``File``, see below.\n### Content-Length\nThe library will send a ``Content`-`Length`` header on requests with bodies of known size, in other words, if the body to send is one of:\n  * ```&``[``u8``]```\n  * ```&``[``u8``;` N`]```\n  * ```&``str```\n  * ```String```\n  * ```&``String```\n  * ````Vec``<``u8``>````\n  * ```&```Vec``<``u8``>``)``\n  * ```SendBody`::``from_json`(``)```\u27e824\u27e9 (implicitly via ``request`.``send_json``(``)```\u27e821\u27e9)\n\n\n### Transfer-Encoding: chunked\nureq will send a ``Transfer`-`Encoding`:` chunked`` header on requests where the body is of unknown size. The body is automatically converted to an ```std`::```io`::``Read``\u27e825\u27e9 when the type is one of:\n  * ``File``\n  * ```&`File``\n  * ``TcpStream``\n  * ```&`TcpStream``\n  * ``Stdin``\n  * ``UnixStream`` (not on windows)\n\n\n#### From readers\nThe chunked method also applies for bodies constructed via:\n  * ```SendBody`::``from_reader`(``)```\u27e826\u27e9\n  * ```SendBody`::``from_owned_reader`(``)```\u27e827\u27e9\n\n\n### Proxying a response body\nAs a special case, when ureq sends a ``Body``\u27e828\u27e9 from a previous http call, the use of ``Content`-`Length`` or ``chunked`` depends on situation. For input such as gzip decoding (**gzip** feature) or charset transformation (**charset** feature), the output body might not match the input, which means ureq is forced to use the ``chunked`` method.\n  * ```Response`<`Body`>````\n\n\n### Sending form data\n``request`.``send_form``(``)```\u27e829\u27e9 provides a way to send ``application`/`x`-`www`-`form`-`urlencoded`` encoded data. The key/values provided will be URL encoded.\n### Overriding\nIf you set your own Content-Length or Transfer-Encoding header before sending the body, ureq will respect that header by not overriding it, and by encoding the body or not, as indicated by the headers you set.\n```\n``let` resp `=` `ureq`::``put`(```\"`https://httpbin.org/put`\"```)`\n  `.``header``(```\"`Transfer-Encoding`\"```,` ``\"`chunked`\"```)`\n  `.``send``(```\"`Hello world`\"```)``?``;`\n`\n```\n\n## Character encoding\nBy enabling the **charset** feature, the library supports receiving other character sets than ``utf-8``.\nFor ```Body`::``read_to_string`(``)```\u27e830\u27e9 we read the header like:\n``Content`-`Type`:` text`/`plain`;` charset`=`iso`-``8859``-``1```\nand if it contains a charset specification, we try to decode the body using that encoding. In the absence of, or failing to interpret the charset, we fall back on ``utf-8``.\nCurrently ureq does not provide a way to encode when sending request bodies.\n### Lossy utf-8\nWhen reading text bodies (with a ``Content`-`Type`` starting ``text/`` as in ``text`/`plain``, ``text`/`html``, etc), ureq can ensure the body is possible to read as a ```String``` also if it contains characters that are not valid for utf-8. Invalid characters are replaced with a question mark ```?``` (NOT the utf-8 replacement character).\nFor ```Body`::``read_to_string`(``)```\u27e830\u27e9 this is turned on by default, but it can be disabled and conversely for ```Body`::``as_reader`(``)```\u27e831\u27e9 it is not enabled, but can be.\nTo precisely configure the behavior use ```Body`::``with_config`(``)```\u27e832\u27e9.\n## Proxying\nureq supports two kinds of proxies, ``HTTP``\u27e833\u27e9 (``CONNECT``\u27e834\u27e9), ```SOCKS4```\u27e835\u27e9/```SOCKS5```\u27e836\u27e9, the former is always available while the latter must be enabled using the feature **socks-proxy**.\nProxies settings are configured on an ``Agent``\u27e88\u27e9. All request sent through the agent will be proxied.\n### Example using HTTP\n```\n``use` `ureq`::````{`Agent`,` Proxy```}```;`\n``//` Configure an http connect proxy.`\n`let` proxy `=` `Proxy`::``new`(```\"`http://user:password@cool.proxy:9090`\"```)``?``;`\n`let` agent`:` Agent `=` `Agent`::``config_builder`(``)`\n  `.``proxy``(``Some``(`proxy`)``)`\n  `.``build``(``)`\n  `.``into``(``)``;`\n``//` This is proxied.`\n`let` resp `=` agent`.``get``(```\"`http://cool.server`\"```)``.``call``(``)``?``;`\n`\n```\n\n### Example using SOCKS5\n```\n``use` `ureq`::````{`Agent`,` Proxy```}```;`\n``//` Configure a SOCKS proxy.`\n`let` proxy `=` `Proxy`::``new`(```\"`socks5://user:password@cool.proxy:9090`\"```)``?``;`\n`let` agent`:` Agent `=` `Agent`::``config_builder`(``)`\n  `.``proxy``(``Some``(`proxy`)``)`\n  `.``build``(``)`\n  `.``into``(``)``;`\n``//` This is proxied.`\n`let` resp `=` agent`.``get``(```\"`http://cool.server`\"```)``.``call``(``)``?``;`\n`\n```\n\n## Log levels\nureq uses the log crate. These are the definitions of the log levels, however we do not guarantee anything for dependencies such as ``http`` and ``rustls``.\n  * ``ERROR`` - nothing\n  * ``WARN`` - if we detect a user configuration problem.\n  * ``INFO`` - nothing\n  * ``DEBUG`` - uri, state changes, transport, resolver and selected request/response headers\n  * ``TRACE`` - wire level debug. NOT REDACTED!\n\n\nThe request/response headers on DEBUG levels are allow-listed to only include headers that are considered safe. The code has the allow list\u27e837\u27e9.\n## Versioning\n### Semver and ``unversioned``\nureq follows semver. From ureq 3.x we strive to have a much closer adherence to semver than 2.x. The main mistake in 2.x was to re-export crates that were not yet semver 1.0. In ureq 3.x TLS and cookie configuration is shimmed using our own types.\nureq 3.x is trying out two new traits that had no equivalent in 2.x, ``Transport``\u27e838\u27e9 and ``Resolver``\u27e839\u27e9. These allow the user write their own bespoke transports and (DNS name) resolver. The API:s for these parts are not yet solidified. They live under the ``unversioned``\u27e840\u27e9 module, and do not follow semver. See module doc for more info.\n### Breaking changes in dependencies\nureq relies on non-semver 1.x crates such as ``rustls`` and ``native-tls``. Some scenarios, such as configuring ``rustls`` to not use ``ring``, a user of ureq might need to interact with these crates directly instead of going via ureq's provided API.\nSuch changes can break when ureq updates dependencies. This is not considered a breaking change for ureq and will not be reflected by a major version bump.\nWe strive to mark ureq's API with the word \"unversioned\" to identify places where this risk arises.\n### Minimum Supported Rust Version (MSRV)\nFrom time to time we will need to update our minimum supported Rust version (MSRV). This is not something we do lightly; our ambition is to be as conservative with MSRV as possible.\n  * For some dependencies, we will opt for pinning the version of the dep instead of bumping our MSRV.\n  * For important dependencies, like the TLS libraries, we cannot hold back our MSRV if they change.\n  * We do not consider MSRV changes to be breaking for the purposes of semver.\n  * We will not make MSRV changes in patch releases.\n  * MSRV changes will get their own minor release, and not be co-mingled with other changes.\n\n\n#### Dependencies\n~9\u201323MB  ~448K SLoC\n  * base64\u27e841\u27e9 0.22.1\n  * native-tls?\u27e842\u27e9 der\u27e843\u27e9+pem\u27e844\u27e9+std\u27e845\u27e9\n  * native-tls?\u27e842\u27e9 vendored?\u27e846\u27e9 native-tls\u27e817\u27e9\n  * native-tls?\u27e842\u27e9 rustls-no-provider\u27e847\u27e9 rustls-pemfile\u27e848\u27e9 2.1+std\u27e849\u27e9\n  * native-tls?\u27e842\u27e9 rustls-no-provider\u27e847\u27e9 rustls-pki-types\u27e850\u27e9+std\u27e851\u27e9\n  * native-tls?\u27e842\u27e9 webpki-root-certs\u27e852\u27e9\n  * gzip\u27e853\u27e9 flate2\u27e854\u27e9\n  * log\u27e855\u27e9\n  * percent-encoding\u27e856\u27e9\n  * rustls\u27e857\u27e9 rustls-no-provider\u27e847\u27e9 rustls\u27e814\u27e9 0.23.22+logging\u27e858\u27e9+std\u27e859\u27e9+tls12\u27e860\u27e9\n  * rustls-no-provider\u27e847\u27e9 webpki-roots\u27e818\u27e9 0.26.8\n  * ureq-proto\u27e861\u27e9+client\u27e862\u27e9\n  * utf-8\u27e863\u27e9\n  * brotli?\u27e864\u27e9 brotli-decompressor\u27e865\u27e9 4.0\n  * cookies?\u27e866\u27e9 json?\u27e867\u27e9 cookie_store\u27e868\u27e9 0.21.1+preserve_order\u27e869\u27e9\n  * json?\u27e867\u27e9 serde\u27e870\u27e9+std\u27e871\u27e9\n  * json?\u27e867\u27e9 serde_json\u27e872\u27e9+std\u27e873\u27e9\n  * cookies?\u27e866\u27e9 url\u27e874\u27e9\n  * charset?\u27e875\u27e9 encoding_rs\u27e876\u27e9\n  * platform-verifier?\u27e877\u27e9 rustls-platform-verifier\u27e812\u27e9\n  * socks-proxy?\u27e878\u27e9 socks\u27e879\u27e9\n\n\n  * dev  assert_no_alloc\u27e880\u27e9\n  * dev  auto-args\u27e881\u27e9 0.3\n  * dev  env_logger\u27e882\u27e9 0.11.7\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/ureq/versions: 104 releases\n\u27e82\u27e9 https://lib.rs/web-programming/http-client: Crates to make HTTP network requests. - HTTP client\n\u27e83\u27e9 https://lib.rs/crates/ureq/rev: **2,250** crates (1,032 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/ureq.svg?style=flat-square:  ![Crates.io version\n\u27e85\u27e9 https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square:  ![docs.rs docs\n\u27e86\u27e9 https://img.shields.io/crates/d/ureq.svg?style=flat-square:  ![Crates.io downloads\n\u27e87\u27e9 https://github.com/algesten/ureq/blob/main/CHANGELOG.md: changelog\n\u27e88\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html: ``Agent``\n\u27e89\u27e9 https://doc.rust-lang.org/std/sync/struct.Arc.html: ``Arc``\n\u27e810\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/enum.Error.html: ``Error``\n\u27e811\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/config/struct.ConfigBuilder.html#method.http_status_as_error: ```http_status_as_error``(``)```\n\u27e812\u27e9 https://lib.rs/crates/rustls-platform-verifier: rustls-platform-verifier\n\u27e813\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html: ``CryptoProvider``\n\u27e814\u27e9 https://lib.rs/crates/rustls: ``rustls`` crate\n\u27e815\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#method.install_default: default provider\n\u27e816\u27e9 https://docs.rs/ureq/latest/ureq/?search=tls%3A%3ATlsConfigBuilder%3A%3Aunversioned_rustls_crypto_provider: crate::tls::TlsConfigBuilder::unversioned_rustls_crypto_provider - ```TlsConfigBuilder`::``unversioned_rustls_crypto_provider``\n\u27e817\u27e9 https://lib.rs/crates/native-tls: ``native-tls``\n\u27e818\u27e9 https://lib.rs/crates/webpki-roots: webpki-roots\n\u27e819\u27e9 https://en.wikipedia.org/wiki/Certificate_Transparency: SCT\n\u27e820\u27e9 https://en.wikipedia.org/wiki/Certificate_revocation_list: CRL\n\u27e821\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json: ``request`.``send_json``(``)```\n\u27e822\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_json: ``body`.``read_json``(``)```\n\u27e823\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/trait.AsSendBody.html: ``AsSendBody``\n\u27e824\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_json: ```SendBody`::``from_json`(``)```\n\u27e825\u27e9 https://doc.rust-lang.org/std/io/trait.Read.html: ```std`::```io`::``Read``\n\u27e826\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_reader: ```SendBody`::``from_reader`(``)```\n\u27e827\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_owned_reader: ```SendBody`::``from_owned_reader`(``)```\n\u27e828\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html: ``Body``\n\u27e829\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_form: ``request`.``send_form``(``)```\n\u27e830\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string: ```Body`::``read_to_string`(``)```\n\u27e831\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.as_reader: ```Body`::``as_reader`(``)```\n\u27e832\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.with_config: ```Body`::``with_config`(``)```\n\u27e833\u27e9 https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling#http_tunneling: ``HTTP``\n\u27e834\u27e9 https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT: ``CONNECT``\n\u27e835\u27e9 https://en.wikipedia.org/wiki/SOCKS#SOCKS4: ```SOCKS4```\n\u27e836\u27e9 https://en.wikipedia.org/wiki/SOCKS#SOCKS5: ```SOCKS5```\n\u27e837\u27e9 https://github.com/algesten/ureq/blob/81127cfc38516903330dc1b9c618122372f8dc29/src/util.rs#L184-L198: allow list\n\u27e838\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/transport/trait.Transport.html: ``Transport``\n\u27e839\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/resolver/trait.Resolver.html: ``Resolver``\n\u27e840\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/index.html: ``unversioned``\n\u27e841\u27e9 https://lib.rs/crates/base64: new - base64\n\u27e842\u27e9 https://lib.rs/crates/ureq/features#feature-native-tls: optional feature - native-tls?\n\u27e843\u27e9 https://lib.rs/crates/der: 0.7.9 - der\n\u27e844\u27e9 https://lib.rs/crates/der/features#feature-pem: +pem\n\u27e845\u27e9 https://lib.rs/crates/der/features#feature-std: +std\n\u27e846\u27e9 https://lib.rs/crates/ureq/features#feature-vendored: optional feature - vendored?\n\u27e847\u27e9 https://lib.rs/crates/ureq/features#feature-rustls-no-provider: default feature - rustls-no-provider\n\u27e848\u27e9 https://lib.rs/crates/rustls-pemfile: new - rustls-pemfile\n\u27e849\u27e9 https://lib.rs/crates/rustls-pemfile/features#feature-std: +std\n\u27e850\u27e9 https://lib.rs/crates/rustls-pki-types: 1.11.0 - rustls-pki-types\n\u27e851\u27e9 https://lib.rs/crates/rustls-pki-types/features#feature-std: +std\n\u27e852\u27e9 https://lib.rs/crates/webpki-root-certs: 0.26.8 - webpki-root-certs\n\u27e853\u27e9 https://lib.rs/crates/ureq/features#feature-gzip: default feature - gzip\n\u27e854\u27e9 https://lib.rs/crates/flate2: 1.0.30 - flate2\n\u27e855\u27e9 https://lib.rs/crates/log: 0.4.25 - log\n\u27e856\u27e9 https://lib.rs/crates/percent-encoding: 2.3.1 - percent-encoding\n\u27e857\u27e9 https://lib.rs/crates/ureq/features#feature-rustls: default feature - rustls\n\u27e858\u27e9 https://lib.rs/crates/rustls/features#feature-logging: +logging\n\u27e859\u27e9 https://lib.rs/crates/rustls/features#feature-std: +std\n\u27e860\u27e9 https://lib.rs/crates/rustls/features#feature-tls12: +tls12\n\u27e861\u27e9 https://lib.rs/crates/ureq-proto: 0.4.2 - ureq-proto\n\u27e862\u27e9 https://lib.rs/crates/ureq-proto/features#feature-client: +client\n\u27e863\u27e9 https://lib.rs/crates/utf-8: 0.7.6 - utf-8\n\u27e864\u27e9 https://lib.rs/crates/ureq/features#feature-brotli: optional feature - brotli?\n\u27e865\u27e9 https://lib.rs/crates/brotli-decompressor: obsolete - brotli-decompressor\n\u27e866\u27e9 https://lib.rs/crates/ureq/features#feature-cookies: optional feature - cookies?\n\u27e867\u27e9 https://lib.rs/crates/ureq/features#feature-json: optional feature - json?\n\u27e868\u27e9 https://lib.rs/crates/cookie_store: new - cookie_store\n\u27e869\u27e9 https://lib.rs/crates/cookie_store/features#feature-preserve_order: +preserve_order\n\u27e870\u27e9 https://lib.rs/crates/serde: 1.0.138 - serde\n\u27e871\u27e9 https://lib.rs/crates/serde/features#feature-std: +std\n\u27e872\u27e9 https://lib.rs/crates/serde_json: 1.0.120 - serde_json\n\u27e873\u27e9 https://lib.rs/crates/serde_json/features#feature-std: +std\n\u27e874\u27e9 https://lib.rs/crates/url: 2.3.1 - url\n\u27e875\u27e9 https://lib.rs/crates/ureq/features#feature-charset: optional feature - charset?\n\u27e876\u27e9 https://lib.rs/crates/encoding_rs: 0.8.34 - encoding_rs\n\u27e877\u27e9 https://lib.rs/crates/ureq/features#feature-platform-verifier: optional feature - platform-verifier?\n\u27e878\u27e9 https://lib.rs/crates/ureq/features#feature-socks-proxy: optional feature - socks-proxy?\n\u27e879\u27e9 https://lib.rs/crates/socks: 0.3.4 - socks\n\u27e880\u27e9 https://lib.rs/crates/assert_no_alloc: 1.1.2 - assert_no_alloc\n\u27e881\u27e9 https://lib.rs/crates/auto-args: new - auto-args\n\u27e882\u27e9 https://lib.rs/crates/env_logger: new - env_logger\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 24650,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115270.223448"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "adler2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libadler2-fd0b97f5f75249cc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libitoa-f4561faf083a6980.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libuntrusted-6452109ac6963ab5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libzeroize-9775fe5b08a4aab7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#dunce@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dunce-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "dunce",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dunce-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libdunce-3643b65bb9ab8189.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libdunce-3643b65bb9ab8189.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "shlex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libshlex-25724775bd6ea405.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libshlex-25724775bd6ea405.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libgetrandom-e708f7e00c595856.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.26\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\liblog-7444b46288768d2a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.25",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.25\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.25\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aws-lc-rs",
                "aws_lc_rs",
                "default",
                "log",
                "logging",
                "ring",
                "std",
                "tls12"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\rustls-0ed43c38d8f3f219\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\rustls-0ed43c38d8f3f219\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crc32fast",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcrc32fast-6f26f1a08de28b99.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf-8@0.7.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf-8-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf-8-0.7.6\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libutf8-fe29e8adf122361e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libpercent_encoding-3e311531e44ed010.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aws-lc-rs@1.12.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-rs-1.12.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-rs-1.12.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aws-lc-sys",
                "prebuilt-nasm"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\aws-lc-rs-9420e19e06e910e4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\aws-lc-rs-9420e19e06e910e4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libonce_cell-4cc8073b21e483a2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#jobserver@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jobserver-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "jobserver",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jobserver-0.1.32\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libjobserver-de3391caf3272945.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libjobserver-de3391caf3272945.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fs_extra@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fs_extra-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fs_extra",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fs_extra-1.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libfs_extra-8165a9407ad11d39.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libfs_extra-8165a9407ad11d39.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.10.1\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\httparse-429ce00646ae53a8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\httparse-429ce00646ae53a8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base64",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libbase64-86bc57838984083e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls-pki-types@1.11.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.11.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pki_types",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.11.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\librustls_pki_types-2551f8fdf2233686.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\httparse-11cfac8919861d2e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libbytes-3203777d1ecff83c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#webpki-roots@0.26.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\webpki-roots-0.26.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "webpki_roots",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\webpki-roots-0.26.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libwebpki_roots-748f19ca106530f6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls-pemfile@2.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pemfile-2.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pemfile",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pemfile-2.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\librustls_pemfile-96b3744fb75d7c05.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "miniz_oxide",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "with-alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libminiz_oxide-b636efc859bb650e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httparse",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libhttparse-b6288b498d6d965c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\flate2-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "flate2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\flate2-1.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "any_impl",
                "default",
                "miniz_oxide",
                "rust_backend"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libflate2-26c0f90f4fbef2a0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http@1.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libhttp-52a8094d6cb062ad.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ureq-proto@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ureq-proto-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ureq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ureq-proto-0.4.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "client"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libureq_proto-27983371bb9ef0a3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cmake@0.1.54",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cmake-0.1.54\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cmake",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cmake-0.1.54\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcmake-9f3ae172a2e14da8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcmake-9f3ae172a2e14da8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parallel"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcc-7e6d32dd2badcf84.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcc-7e6d32dd2badcf84.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ring-0.17.14\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ring-0.17.14\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "dev_urandom_fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\ring-b1381a29023b3439\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\ring-b1381a29023b3439\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aws-lc-sys@0.27.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-sys-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-sys-0.27.1\\builder\\main.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "prebuilt-nasm"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\aws-lc-sys-26186b9f2ae233a7\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\aws-lc-sys-26186b9f2ae233a7\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14",
              "linked_libs": [
                "static=ring_core_0_17_14_",
                "static=ring_core_0_17_14__test"
              ],
              "linked_paths": [
                "native=C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\ring-45a7b741f55719d9\\out"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\ring-45a7b741f55719d9\\out"
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#jobserver@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jobserver-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "jobserver",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jobserver-0.1.32\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libjobserver-de3391caf3272945.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libjobserver-de3391caf3272945.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "shlex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libshlex-25724775bd6ea405.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libshlex-25724775bd6ea405.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#dunce@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dunce-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "dunce",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dunce-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libdunce-3643b65bb9ab8189.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libdunce-3643b65bb9ab8189.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fs_extra@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fs_extra-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fs_extra",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fs_extra-1.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libfs_extra-8165a9407ad11d39.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libfs_extra-8165a9407ad11d39.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aws-lc-rs@1.12.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-rs-1.12.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-rs-1.12.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aws-lc-sys",
                "prebuilt-nasm"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\aws-lc-rs-9420e19e06e910e4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\aws-lc-rs-9420e19e06e910e4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls-pki-types@1.11.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.11.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pki_types",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.11.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\librustls_pki_types-2551f8fdf2233686.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libzeroize-9775fe5b08a4aab7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libuntrusted-6452109ac6963ab5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.10.1\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\httparse-429ce00646ae53a8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\httparse-429ce00646ae53a8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "adler2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libadler2-fd0b97f5f75249cc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libitoa-f4561faf083a6980.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libbytes-3203777d1ecff83c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.26\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\liblog-7444b46288768d2a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.25",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.25\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-0.23.25\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aws-lc-rs",
                "aws_lc_rs",
                "default",
                "log",
                "logging",
                "ring",
                "std",
                "tls12"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\rustls-0ed43c38d8f3f219\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\rustls-0ed43c38d8f3f219\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base64",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libbase64-86bc57838984083e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parallel"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcc-7e6d32dd2badcf84.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcc-7e6d32dd2badcf84.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libgetrandom-e708f7e00c595856.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\httparse-11cfac8919861d2e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http@1.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libhttp-52a8094d6cb062ad.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "miniz_oxide",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "with-alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libminiz_oxide-b636efc859bb650e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crc32fast",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcrc32fast-6f26f1a08de28b99.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libonce_cell-4cc8073b21e483a2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls-pemfile@2.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pemfile-2.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pemfile",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pemfile-2.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\librustls_pemfile-96b3744fb75d7c05.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#webpki-roots@0.26.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\webpki-roots-0.26.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "webpki_roots",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\webpki-roots-0.26.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libwebpki_roots-748f19ca106530f6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#utf-8@0.7.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf-8-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "utf8",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\utf-8-0.7.6\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libutf8-fe29e8adf122361e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libpercent_encoding-3e311531e44ed010.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cmake@0.1.54",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cmake-0.1.54\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cmake",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cmake-0.1.54\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcmake-9f3ae172a2e14da8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libcmake-9f3ae172a2e14da8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ring-0.17.14\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ring-0.17.14\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "dev_urandom_fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\ring-b1381a29023b3439\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\ring-b1381a29023b3439\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httparse",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libhttparse-b6288b498d6d965c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\flate2-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "flate2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\flate2-1.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "any_impl",
                "default",
                "miniz_oxide",
                "rust_backend"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libflate2-26c0f90f4fbef2a0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aws-lc-sys@0.27.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-sys-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-sys-0.27.1\\builder\\main.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "prebuilt-nasm"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\aws-lc-sys-26186b9f2ae233a7\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\aws-lc-sys-26186b9f2ae233a7\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14",
              "linked_libs": [
                "static=ring_core_0_17_14_",
                "static=ring_core_0_17_14__test"
              ],
              "linked_paths": [
                "native=C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\ring-45a7b741f55719d9\\out"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\build\\ring-45a7b741f55719d9\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ureq-proto@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ureq-proto-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ureq_proto",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ureq-proto-0.4.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "client"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libureq_proto-27983371bb9ef0a3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ring-0.17.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ring",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ring-0.17.14\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "dev_urandom_fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpbc78skv2\\ureq-3.0.12\\target\\debug\\deps\\libring-c87a0dcf599861cb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 198
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "ureq",
          "version": "3.0.12",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ureq/latest/ureq/all.html \"show sidebar\")\n# Crate ureqCopy item path\n[Settings](https://docs.rs/ureq/latest/settings.html)\n[Help](https://docs.rs/ureq/latest/help.html)\nSummary[Source](https://docs.rs/ureq/latest/src/ureq/lib.rs.html#1-1260)\nExpand description\n[ ![Crates.io version](https://img.shields.io/crates/v/ureq.svg?style=flat-square) ](https://crates.io/crates/ureq) [ ![docs.rs docs](https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square) ](https://docs.rs/ureq) [ ![Crates.io downloads](https://img.shields.io/crates/d/ureq.svg?style=flat-square) ](https://crates.io/crates/ureq)\nA simple, safe HTTP client.\nUreq\u2019s first priority is being easy for you to use. It\u2019s great for anyone who wants a low-overhead HTTP client that just gets the job done. Works very well with HTTP APIs. Its features include cookies, JSON, HTTP proxies, HTTPS, charset decoding, and is based on the API of the `http` crate.\nUreq is in pure Rust for safety and ease of understanding. It avoids using `unsafe` directly. It uses blocking I/O instead of async I/O, because that keeps the API simple and keeps dependencies to a minimum. For TLS, ureq uses rustls or native-tls.\nSee the [changelog](https://github.com/algesten/ureq/blob/main/CHANGELOG.md) for details of recent releases.\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#usage)Usage\nIn its simplest form, ureq looks like this:\n```\nlet body: String = ureq::get(\"http://example.com\")\n  .header(\"Example-Header\", \"header value\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n```\n\nFor more involved tasks, you\u2019ll want to create an [`Agent`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html). An Agent holds a connection pool for reuse, and a cookie store if you use the **cookies** feature. An Agent can be cheaply cloned due to internal [`Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html) and all clones of an Agent share state among each other. Creating an Agent also allows setting options like the TLS configuration.\n```\nuse ureq::Agent;\nuse std::time::Duration;\nlet mut config = Agent::config_builder()\n  .timeout_global(Some(Duration::from_secs(5)))\n  .build();\nlet agent: Agent = config.into();\nlet body: String = agent.get(\"http://example.com/page\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n// Reuses the connection from previous request.\nlet response: String = agent.put(\"http://example.com/upload\")\n  .header(\"Authorization\", \"example-token\")\n  .send(\"some body data\")?\n  .body_mut()\n  .read_to_string()?;\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#json)JSON\nUreq supports sending and receiving json, if you enable the **json** feature:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize)]\nstruct MySendBody {\n  thing: String,\n}\n#[derive(Deserialize)]\nstruct MyRecvBody {\n  other: String,\n}\nlet send_body = MySendBody { thing: \"yo\".to_string() };\n// Requires the `json` feature enabled.\nlet recv_body = ureq::post(\"http://example.com/post/ingest\")\n  .header(\"X-My-Header\", \"Secret\")\n  .send_json(&send_body)?\n  .body_mut()\n  .read_json::<MyRecvBody>()?;\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#error-handling)Error handling\nureq returns errors via `Result<T, ureq::Error>`. That includes I/O errors, protocol errors. By default, also HTTP status code errors (when the server responded 4xx or 5xx) results in [`Error`](https://docs.rs/ureq/3.0.0-rc4/ureq/enum.Error.html).\nThis behavior can be turned off via [`http_status_as_error()`](https://docs.rs/ureq/3.0.0-rc4/ureq/config/struct.ConfigBuilder.html#method.http_status_as_error)\n```\nuse ureq::Error;\nmatch ureq::get(\"http://mypage.example.com/\").call() {\n  Ok(response) => { /* it worked */},\n  Err(Error::StatusCode(code)) => {\n    /* the server returned an unexpected status\n      code (such as 400, 500 etc) */\n  }\n  Err(_) => { /* some kind of io/transport/etc error */ }\n}\n```\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#features)Features\nTo enable a minimal dependency tree, some features are off by default. You can control them when including ureq as a dependency.\n`ureq = { version = \"3\", features = [\"socks-proxy\", \"charset\"] }`\nThe default enabled features are: **rustls** and **gzip**.\n  * **rustls** enables the rustls TLS implementation. This is the default for the the crate level convenience calls (`ureq::get` etc). It currently uses `ring` as the TLS provider.\n  * **native-tls** enables the native tls backend for TLS. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent\n  * **platform-verifier** enables verifying the server certificates using a method native to the platform ureq is executing on. See [rustls-platform-verifier](https://crates.io/crates/rustls-platform-verifier) crate\n  * **socks-proxy** enables proxy config using the `socks4://`, `socks4a://`, `socks5://` and `socks://` (equal to `socks5://`) prefix\n  * **cookies** enables cookies\n  * **gzip** enables requests of gzip-compressed responses and decompresses them\n  * **brotli** enables requests brotli-compressed responses and decompresses them\n  * **charset** enables interpreting the charset part of the Content-Type header (e.g. `Content-Type: text/plain; charset=iso-8859-1`). Without this, the library defaults to Rust\u2019s built in `utf-8`\n  * **json** enables JSON sending and receiving via serde_json\n\n\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#unstable)Unstable\nThese features are unstable and might change in a minor version.\n  * **rustls-no-provider** Enables rustls, but does not enable any [`CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html) such as `ring`. Providers other than the default (currently `ring`) are never picked up from feature flags alone. It must be configured on the agent.\n  * **vendored** compiles and statically links to a copy of non-Rust vendors (e.g. OpenSSL from `native-tls`)\n\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#tls-https)TLS (https)\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#rustls)rustls\nBy default, ureq uses [`rustls` crate](https://crates.io/crates/rustls) with the `ring` cryptographic provider. As of Sep 2024, the `ring` provider has a higher chance of compiling successfully. If the user installs another process [default provider](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#method.install_default), that choice is respected.\nureq does not guarantee to default to ring indefinitely. `rustls` as a feature flag will always work, but the specific crypto backend might change in a minor version.\n```\n// This uses rustls\nureq::get(\"https://www.google.com/\").call().unwrap();\n```\n\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#rustls-without-ring)rustls without ring\nureq never changes TLS backend from feature flags alone. It is possible to compile ureq without ring, but it requires specific feature flags and configuring the [`Agent`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html).\nSince rustls is not semver 1.x, this requires non-semver-guaranteed API. I.e. ureq might change this behavior without a major version bump.\nRead more at [`TlsConfigBuilder::unversioned_rustls_crypto_provider`](https://docs.rs/ureq/latest/ureq/tls/struct.TlsConfigBuilder.html#method.unversioned_rustls_crypto_provider \"method ureq::tls::TlsConfigBuilder::unversioned_rustls_crypto_provider\").\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#native-tls)native-tls\nAs an alternative, ureq ships with [`native-tls`](https://crates.io/crates/native-tls) as a TLS provider. This must be enabled using the **native-tls** feature. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent.\n```\nuse ureq::config::Config;\nuse ureq::tls::{TlsConfig, TlsProvider};\nlet mut config = Config::builder()\n  .tls_config(\n    TlsConfig::builder()\n      // requires the native-tls feature\n      .provider(TlsProvider::NativeTls)\n      .build()\n  )\n  .build();\nlet agent = config.new_agent();\nagent.get(\"https://www.google.com/\").call().unwrap();\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#root-certificates)Root certificates\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#webpki-roots)webpki-roots\nBy default, ureq uses Mozilla\u2019s root certificates via the [webpki-roots](https://crates.io/crates/webpki-roots) crate. This is a static bundle of root certificates that do not update automatically. It also circumvents whatever root certificates are installed on the host running ureq, which might be a good or a bad thing depending on your perspective. There is also no mechanism for [SCT](https://en.wikipedia.org/wiki/Certificate_Transparency), [CRL](https://en.wikipedia.org/wiki/Certificate_revocation_list)s or other revocations. To maintain a \u201cfresh\u201d list of root certs, you need to bump the ureq dependency from time to time.\nThe main reason for chosing this as the default is to minimize the number of dependencies. More details about this decision can be found at [PR 818].\nIf your use case for ureq is talking to a limited number of servers with high trust, the default setting is likely sufficient. If you use ureq with a high number of servers, or servers you don\u2019t trust, we recommend using the platform verifier (see below).\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#platform-verifier)platform-verifier\nThe [rustls-platform-verifier](https://crates.io/crates/rustls-platform-verifier) crate provides access to natively checking the certificate via your OS. To use this verifier, you need to enable it using feature flag **platform-verifier** as well as configure an agent to use it.\n```\nuse ureq::Agent;\nuse ureq::tls::{TlsConfig, RootCerts};\nlet agent = Agent::config_builder()\n  .tls_config(\n    TlsConfig::builder()\n      .root_certs(RootCerts::PlatformVerifier)\n      .build()\n  )\n  .build()\n  .new_agent();\nlet response = agent.get(\"https://httpbin.org/get\").call()?;\n```\n\nSetting `RootCerts::PlatformVerifier` together with `TlsProvider::NativeTls` means also native-tls will use the OS roots instead of [webpki-roots](https://crates.io/crates/webpki-roots) crate. Whether that results in a config that has CRLs and revocations is up to whatever native-tls links to.\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#json-1)JSON\nBy enabling the **json** feature, the library supports serde json.\nThis is enabled by default.\n  * [`request.send_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json) send body as json.\n  * [`body.read_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_json) transform response to json.\n\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#sending-body-data)Sending body data\nHTTP/1.1 has two ways of transfering body data. Either of a known size with the `Content-Length` HTTP header, or unknown size with the `Transfer-Encoding: chunked` header. ureq supports both and will use the appropriate method depending on which body is being sent.\nureq has a [`AsSendBody`](https://docs.rs/ureq/3.0.0-rc4/ureq/trait.AsSendBody.html) trait that is implemented for many well known types of data that we might want to send. The request body can thus be anything from a `String` to a `File`, see below.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#content-length)Content-Length\nThe library will send a `Content-Length` header on requests with bodies of known size, in other words, if the body to send is one of:\n  * `&[u8]`\n  * `&[u8; N]`\n  * `&str`\n  * `String`\n  * `&String`\n  * `Vec<u8>`\n  * `&Vec<u8>)`\n  * [`SendBody::from_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_json) (implicitly via [`request.send_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json))\n\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#transfer-encoding-chunked)Transfer-Encoding: chunked\nureq will send a `Transfer-Encoding: chunked` header on requests where the body is of unknown size. The body is automatically converted to an [`std::io::Read`](https://doc.rust-lang.org/std/io/trait.Read.html) when the type is one of:\n  * `File`\n  * `&File`\n  * `TcpStream`\n  * `&TcpStream`\n  * `Stdin`\n  * `UnixStream` (not on windows)\n\n\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#from-readers)From readers\nThe chunked method also applies for bodies constructed via:\n  * [`SendBody::from_reader()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_reader)\n  * [`SendBody::from_owned_reader()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_owned_reader)\n\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#proxying-a-response-body)Proxying a response body\nAs a special case, when ureq sends a [`Body`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html) from a previous http call, the use of `Content-Length` or `chunked` depends on situation. For input such as gzip decoding (**gzip** feature) or charset transformation (**charset** feature), the output body might not match the input, which means ureq is forced to use the `chunked` method.\n  * `Response<Body>`\n\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#sending-form-data)Sending form data\n[`request.send_form()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_form) provides a way to send `application/x-www-form-urlencoded` encoded data. The key/values provided will be URL encoded.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#overriding)Overriding\nIf you set your own Content-Length or Transfer-Encoding header before sending the body, ureq will respect that header by not overriding it, and by encoding the body or not, as indicated by the headers you set.\n```\nlet resp = ureq::put(\"https://httpbin.org/put\")\n  .header(\"Transfer-Encoding\", \"chunked\")\n  .send(\"Hello world\")?;\n```\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#character-encoding)Character encoding\nBy enabling the **charset** feature, the library supports receiving other character sets than `utf-8`.\nFor [`Body::read_to_string()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string) we read the header like:\n`Content-Type: text/plain; charset=iso-8859-1`\nand if it contains a charset specification, we try to decode the body using that encoding. In the absence of, or failing to interpret the charset, we fall back on `utf-8`.\nCurrently ureq does not provide a way to encode when sending request bodies.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#lossy-utf-8)Lossy utf-8\nWhen reading text bodies (with a `Content-Type` starting `text/` as in `text/plain`, `text/html`, etc), ureq can ensure the body is possible to read as a `String` also if it contains characters that are not valid for utf-8. Invalid characters are replaced with a question mark `?` (NOT the utf-8 replacement character).\nFor [`Body::read_to_string()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string) this is turned on by default, but it can be disabled and conversely for [`Body::as_reader()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.as_reader) it is not enabled, but can be.\nTo precisely configure the behavior use [`Body::with_config()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.with_config).\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#proxying)Proxying\nureq supports two kinds of proxies, [`HTTP`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling#http_tunneling) ([`CONNECT`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT)), [`SOCKS4`](https://en.wikipedia.org/wiki/SOCKS#SOCKS4)/[`SOCKS5`](https://en.wikipedia.org/wiki/SOCKS#SOCKS5), the former is always available while the latter must be enabled using the feature **socks-proxy**.\nProxies settings are configured on an [`Agent`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html). All request sent through the agent will be proxied.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#example-using-http)Example using HTTP\n```\nuse ureq::{Agent, Proxy};\n// Configure an http connect proxy.\nlet proxy = Proxy::new(\"http://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#example-using-socks5)Example using SOCKS5\n```\nuse ureq::{Agent, Proxy};\n// Configure a SOCKS proxy.\nlet proxy = Proxy::new(\"socks5://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#log-levels)Log levels\nureq uses the log crate. These are the definitions of the log levels, however we do not guarantee anything for dependencies such as `http` and `rustls`.\n  * `ERROR` - nothing\n  * `WARN` - if we detect a user configuration problem.\n  * `INFO` - nothing\n  * `DEBUG` - uri, state changes, transport, resolver and selected request/response headers\n  * `TRACE` - wire level debug. NOT REDACTED!\n\n\nThe request/response headers on DEBUG levels are allow-listed to only include headers that are considered safe. The code has the [allow list](https://github.com/algesten/ureq/blob/81127cfc38516903330dc1b9c618122372f8dc29/src/util.rs#L184-L198).\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#versioning)Versioning\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#semver-and-unversioned)Semver and `unversioned`\nureq follows semver. From ureq 3.x we strive to have a much closer adherence to semver than 2.x. The main mistake in 2.x was to re-export crates that were not yet semver 1.0. In ureq 3.x TLS and cookie configuration is shimmed using our own types.\nureq 3.x is trying out two new traits that had no equivalent in 2.x, [`Transport`](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/transport/trait.Transport.html) and [`Resolver`](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/resolver/trait.Resolver.html). These allow the user write their own bespoke transports and (DNS name) resolver. The API:s for these parts are not yet solidified. They live under the [`unversioned`](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/index.html) module, and do not follow semver. See module doc for more info.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#breaking-changes-in-dependencies)Breaking changes in dependencies\nureq relies on non-semver 1.x crates such as `rustls` and `native-tls`. Some scenarios, such as configuring `rustls` to not use `ring`, a user of ureq might need to interact with these crates directly instead of going via ureq\u2019s provided API.\nSuch changes can break when ureq updates dependencies. This is not considered a breaking change for ureq and will not be reflected by a major version bump.\nWe strive to mark ureq\u2019s API with the word \u201cunversioned\u201d to identify places where this risk arises.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#minimum-supported-rust-version-msrv)Minimum Supported Rust Version (MSRV)\nFrom time to time we will need to update our minimum supported Rust version (MSRV). This is not something we do lightly; our ambition is to be as conservative with MSRV as possible.\n  * For some dependencies, we will opt for pinning the version of the dep instead of bumping our MSRV.\n  * For important dependencies, like the TLS libraries, we cannot hold back our MSRV if they change.\n  * We do not consider MSRV changes to be breaking for the purposes of semver.\n  * We will not make MSRV changes in patch releases.\n  * MSRV changes will get their own minor release, and not be co-mingled with other changes.\n\n\n## Re-exports[\u00a7](https://docs.rs/ureq/latest/ureq/#reexports)\n\n`pub use ureq_proto::http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules[\u00a7](https://docs.rs/ureq/latest/ureq/#modules)\n\n[config](https://docs.rs/ureq/latest/ureq/config/index.html \"mod ureq::config\")\n    Agent configuration\n\n[middleware](https://docs.rs/ureq/latest/ureq/middleware/index.html \"mod ureq::middleware\")\n    Chained interception to modify the request or response.\n\n[tls](https://docs.rs/ureq/latest/ureq/tls/index.html \"mod ureq::tls\")\n    TLS for handling `https`.\n\n[typestate](https://docs.rs/ureq/latest/ureq/typestate/index.html \"mod ureq::typestate\")\n    Typestate variables.\n\n[unversioned](https://docs.rs/ureq/latest/ureq/unversioned/index.html \"mod ureq::unversioned\")\n    API that does not (yet) follow semver.\n## Structs[\u00a7](https://docs.rs/ureq/latest/ureq/#structs)\n\n[Agent](https://docs.rs/ureq/latest/ureq/struct.Agent.html \"struct ureq::Agent\")\n    Agents keep state between requests.\n\n[Body](https://docs.rs/ureq/latest/ureq/struct.Body.html \"struct ureq::Body\")\n    A response body returned as [`http::Response<Body>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\").\n\n[BodyBuilder](https://docs.rs/ureq/latest/ureq/struct.BodyBuilder.html \"struct ureq::BodyBuilder\")\n    Builder for creating a response body.\n\n[BodyReader](https://docs.rs/ureq/latest/ureq/struct.BodyReader.html \"struct ureq::BodyReader\")\n    A reader of the response data.\n\n[BodyWithConfig](https://docs.rs/ureq/latest/ureq/struct.BodyWithConfig.html \"struct ureq::BodyWithConfig\")\n    Configuration of how to read the body.\n\n[Cookie](https://docs.rs/ureq/latest/ureq/struct.Cookie.html \"struct ureq::Cookie\")\n    Representation of an HTTP cookie.\n\n[CookieJar](https://docs.rs/ureq/latest/ureq/struct.CookieJar.html \"struct ureq::CookieJar\")\n    Collection of cookies.\n\n[Proxy](https://docs.rs/ureq/latest/ureq/struct.Proxy.html \"struct ureq::Proxy\")\n    Proxy server settings\n\n[ProxyBuilder](https://docs.rs/ureq/latest/ureq/struct.ProxyBuilder.html \"struct ureq::ProxyBuilder\")\n    Builder for configuring a proxy.\n\n[RequestBuilder](https://docs.rs/ureq/latest/ureq/struct.RequestBuilder.html \"struct ureq::RequestBuilder\")\n    Transparent wrapper around [`http::request::Builder`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Builder.html \"struct http::request::Builder\").\n\n[SendBody](https://docs.rs/ureq/latest/ureq/struct.SendBody.html \"struct ureq::SendBody\")\n    Request body for sending data via POST, PUT and PATCH.\n## Enums[\u00a7](https://docs.rs/ureq/latest/ureq/#enums)\n\n[Error](https://docs.rs/ureq/latest/ureq/enum.Error.html \"enum ureq::Error\")\n    Errors from ureq.\n\n[ProxyProtocol](https://docs.rs/ureq/latest/ureq/enum.ProxyProtocol.html \"enum ureq::ProxyProtocol\")\n    Proxy protocol\n\n[Timeout](https://docs.rs/ureq/latest/ureq/enum.Timeout.html \"enum ureq::Timeout\")\n    The various timeouts.\n## Traits[\u00a7](https://docs.rs/ureq/latest/ureq/#traits)\n\n[AsSendBody](https://docs.rs/ureq/latest/ureq/trait.AsSendBody.html \"trait ureq::AsSendBody\")\n    Trait for common types to send in POST, PUT or PATCH.\n\n[RequestExt](https://docs.rs/ureq/latest/ureq/trait.RequestExt.html \"trait ureq::RequestExt\")\n    Extension trait for [`http::Request<impl AsSendBody>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\").\n\n[ResponseExt](https://docs.rs/ureq/latest/ureq/trait.ResponseExt.html \"trait ureq::ResponseExt\")\n    Extension trait for [`http::Response<Body>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\").\n## Functions[\u00a7](https://docs.rs/ureq/latest/ureq/#functions)\n\n[agent](https://docs.rs/ureq/latest/ureq/fn.agent.html \"fn ureq::agent\")\n    A new [Agent](https://docs.rs/ureq/latest/ureq/struct.Agent.html \"struct ureq::Agent\") with default configuration\n\n[connect](https://docs.rs/ureq/latest/ureq/fn.connect.html \"fn ureq::connect\")\n    Make a CONNECT request.\n\n[delete](https://docs.rs/ureq/latest/ureq/fn.delete.html \"fn ureq::delete\")\n    Make a DELETE request.\n\n[get](https://docs.rs/ureq/latest/ureq/fn.get.html \"fn ureq::get\")\n    Make a GET request.\n\n[head](https://docs.rs/ureq/latest/ureq/fn.head.html \"fn ureq::head\")\n    Make a HEAD request.\n\n[options](https://docs.rs/ureq/latest/ureq/fn.options.html \"fn ureq::options\")\n    Make an OPTIONS request.\n\n[patch](https://docs.rs/ureq/latest/ureq/fn.patch.html \"fn ureq::patch\")\n    Make a PATCH request.\n\n[post](https://docs.rs/ureq/latest/ureq/fn.post.html \"fn ureq::post\")\n    Make a POST request.\n\n[put](https://docs.rs/ureq/latest/ureq/fn.put.html \"fn ureq::put\")\n    Make a PUT request.\n\n[run](https://docs.rs/ureq/latest/ureq/fn.run.html \"fn ureq::run\")\n    Run a [`http::Request<impl AsSendBody>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\").\n\n[trace](https://docs.rs/ureq/latest/ureq/fn.trace.html \"fn ureq::trace\")\n    Make a TRACE request.\n",
            "markdown_with_citations": "[](https://docs.rs/ureq/latest/ureq/all.html \"show sidebar\")\n# Crate ureqCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n ![Crates.io version\u27e84\u27e9 ](https://crates.io/crates/ureq)  ![docs.rs docs\u27e85\u27e9 ](https://docs.rs/ureq)  ![Crates.io downloads\u27e86\u27e9 ](https://crates.io/crates/ureq)\nA simple, safe HTTP client.\nUreq\u2019s first priority is being easy for you to use. It\u2019s great for anyone who wants a low-overhead HTTP client that just gets the job done. Works very well with HTTP APIs. Its features include cookies, JSON, HTTP proxies, HTTPS, charset decoding, and is based on the API of the `http` crate.\nUreq is in pure Rust for safety and ease of understanding. It avoids using `unsafe` directly. It uses blocking I/O instead of async I/O, because that keeps the API simple and keeps dependencies to a minimum. For TLS, ureq uses rustls or native-tls.\nSee the changelog\u27e87\u27e9 for details of recent releases.\n## \u00a7\u27e88\u27e9Usage\nIn its simplest form, ureq looks like this:\n```\nlet body: String = ureq::get(\"http://example.com\")\n  .header(\"Example-Header\", \"header value\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n```\n\nFor more involved tasks, you\u2019ll want to create an `Agent`\u27e89\u27e9. An Agent holds a connection pool for reuse, and a cookie store if you use the **cookies** feature. An Agent can be cheaply cloned due to internal `Arc`\u27e810\u27e9 and all clones of an Agent share state among each other. Creating an Agent also allows setting options like the TLS configuration.\n```\nuse ureq::Agent;\nuse std::time::Duration;\nlet mut config = Agent::config_builder()\n  .timeout_global(Some(Duration::from_secs(5)))\n  .build();\nlet agent: Agent = config.into();\nlet body: String = agent.get(\"http://example.com/page\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n// Reuses the connection from previous request.\nlet response: String = agent.put(\"http://example.com/upload\")\n  .header(\"Authorization\", \"example-token\")\n  .send(\"some body data\")?\n  .body_mut()\n  .read_to_string()?;\n```\n\n### \u00a7\u27e811\u27e9JSON\nUreq supports sending and receiving json, if you enable the **json** feature:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize)]\nstruct MySendBody {\n  thing: String,\n}\n#[derive(Deserialize)]\nstruct MyRecvBody {\n  other: String,\n}\nlet send_body = MySendBody { thing: \"yo\".to_string() };\n// Requires the `json` feature enabled.\nlet recv_body = ureq::post(\"http://example.com/post/ingest\")\n  .header(\"X-My-Header\", \"Secret\")\n  .send_json(&send_body)?\n  .body_mut()\n  .read_json::<MyRecvBody>()?;\n```\n\n### \u00a7\u27e812\u27e9Error handling\nureq returns errors via `Result<T, ureq::Error>`. That includes I/O errors, protocol errors. By default, also HTTP status code errors (when the server responded 4xx or 5xx) results in `Error`\u27e813\u27e9.\nThis behavior can be turned off via `http_status_as_error()`\u27e814\u27e9\n```\nuse ureq::Error;\nmatch ureq::get(\"http://mypage.example.com/\").call() {\n  Ok(response) => { /* it worked */},\n  Err(Error::StatusCode(code)) => {\n    /* the server returned an unexpected status\n      code (such as 400, 500 etc) */\n  }\n  Err(_) => { /* some kind of io/transport/etc error */ }\n}\n```\n\n## \u00a7\u27e815\u27e9Features\nTo enable a minimal dependency tree, some features are off by default. You can control them when including ureq as a dependency.\n`ureq = { version = \"3\", features = [\"socks-proxy\", \"charset\"] }`\nThe default enabled features are: **rustls** and **gzip**.\n  * **rustls** enables the rustls TLS implementation. This is the default for the the crate level convenience calls (`ureq::get` etc). It currently uses `ring` as the TLS provider.\n  * **native-tls** enables the native tls backend for TLS. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent\n  * **platform-verifier** enables verifying the server certificates using a method native to the platform ureq is executing on. See rustls-platform-verifier\u27e816\u27e9 crate\n  * **socks-proxy** enables proxy config using the `socks4://`, `socks4a://`, `socks5://` and `socks://` (equal to `socks5://`) prefix\n  * **cookies** enables cookies\n  * **gzip** enables requests of gzip-compressed responses and decompresses them\n  * **brotli** enables requests brotli-compressed responses and decompresses them\n  * **charset** enables interpreting the charset part of the Content-Type header (e.g. `Content-Type: text/plain; charset=iso-8859-1`). Without this, the library defaults to Rust\u2019s built in `utf-8`\n  * **json** enables JSON sending and receiving via serde_json\n\n\n#### \u00a7\u27e817\u27e9Unstable\nThese features are unstable and might change in a minor version.\n  * **rustls-no-provider** Enables rustls, but does not enable any `CryptoProvider`\u27e818\u27e9 such as `ring`. Providers other than the default (currently `ring`) are never picked up from feature flags alone. It must be configured on the agent.\n  * **vendored** compiles and statically links to a copy of non-Rust vendors (e.g. OpenSSL from `native-tls`)\n\n\n## \u00a7\u27e819\u27e9TLS (https)\n### \u00a7\u27e820\u27e9rustls\nBy default, ureq uses `rustls` crate\u27e821\u27e9 with the `ring` cryptographic provider. As of Sep 2024, the `ring` provider has a higher chance of compiling successfully. If the user installs another process default provider\u27e822\u27e9, that choice is respected.\nureq does not guarantee to default to ring indefinitely. `rustls` as a feature flag will always work, but the specific crypto backend might change in a minor version.\n```\n// This uses rustls\nureq::get(\"https://www.google.com/\").call().unwrap();\n```\n\n#### \u00a7\u27e823\u27e9rustls without ring\nureq never changes TLS backend from feature flags alone. It is possible to compile ureq without ring, but it requires specific feature flags and configuring the `Agent`\u27e89\u27e9.\nSince rustls is not semver 1.x, this requires non-semver-guaranteed API. I.e. ureq might change this behavior without a major version bump.\nRead more at `TlsConfigBuilder::unversioned_rustls_crypto_provider`\u27e824\u27e9.\n### \u00a7\u27e825\u27e9native-tls\nAs an alternative, ureq ships with `native-tls`\u27e826\u27e9 as a TLS provider. This must be enabled using the **native-tls** feature. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent.\n```\nuse ureq::config::Config;\nuse ureq::tls::{TlsConfig, TlsProvider};\nlet mut config = Config::builder()\n  .tls_config(\n    TlsConfig::builder()\n      // requires the native-tls feature\n      .provider(TlsProvider::NativeTls)\n      .build()\n  )\n  .build();\nlet agent = config.new_agent();\nagent.get(\"https://www.google.com/\").call().unwrap();\n```\n\n### \u00a7\u27e827\u27e9Root certificates\n#### \u00a7\u27e828\u27e9webpki-roots\nBy default, ureq uses Mozilla\u2019s root certificates via the webpki-roots\u27e829\u27e9 crate. This is a static bundle of root certificates that do not update automatically. It also circumvents whatever root certificates are installed on the host running ureq, which might be a good or a bad thing depending on your perspective. There is also no mechanism for SCT\u27e830\u27e9, CRL\u27e831\u27e9s or other revocations. To maintain a \u201cfresh\u201d list of root certs, you need to bump the ureq dependency from time to time.\nThe main reason for chosing this as the default is to minimize the number of dependencies. More details about this decision can be found at [PR 818].\nIf your use case for ureq is talking to a limited number of servers with high trust, the default setting is likely sufficient. If you use ureq with a high number of servers, or servers you don\u2019t trust, we recommend using the platform verifier (see below).\n#### \u00a7\u27e832\u27e9platform-verifier\nThe rustls-platform-verifier\u27e816\u27e9 crate provides access to natively checking the certificate via your OS. To use this verifier, you need to enable it using feature flag **platform-verifier** as well as configure an agent to use it.\n```\nuse ureq::Agent;\nuse ureq::tls::{TlsConfig, RootCerts};\nlet agent = Agent::config_builder()\n  .tls_config(\n    TlsConfig::builder()\n      .root_certs(RootCerts::PlatformVerifier)\n      .build()\n  )\n  .build()\n  .new_agent();\nlet response = agent.get(\"https://httpbin.org/get\").call()?;\n```\n\nSetting `RootCerts::PlatformVerifier` together with `TlsProvider::NativeTls` means also native-tls will use the OS roots instead of webpki-roots\u27e829\u27e9 crate. Whether that results in a config that has CRLs and revocations is up to whatever native-tls links to.\n## \u00a7\u27e833\u27e9JSON\nBy enabling the **json** feature, the library supports serde json.\nThis is enabled by default.\n  * `request.send_json()`\u27e834\u27e9 send body as json.\n  * `body.read_json()`\u27e835\u27e9 transform response to json.\n\n\n## \u00a7\u27e836\u27e9Sending body data\nHTTP/1.1 has two ways of transfering body data. Either of a known size with the `Content-Length` HTTP header, or unknown size with the `Transfer-Encoding: chunked` header. ureq supports both and will use the appropriate method depending on which body is being sent.\nureq has a `AsSendBody`\u27e837\u27e9 trait that is implemented for many well known types of data that we might want to send. The request body can thus be anything from a `String` to a `File`, see below.\n### \u00a7\u27e838\u27e9Content-Length\nThe library will send a `Content-Length` header on requests with bodies of known size, in other words, if the body to send is one of:\n  * `&[u8]`\n  * `&[u8; N]`\n  * `&str`\n  * `String`\n  * `&String`\n  * `Vec<u8>`\n  * `&Vec<u8>)`\n  * `SendBody::from_json()`\u27e839\u27e9 (implicitly via `request.send_json()`\u27e834\u27e9)\n\n\n### \u00a7\u27e840\u27e9Transfer-Encoding: chunked\nureq will send a `Transfer-Encoding: chunked` header on requests where the body is of unknown size. The body is automatically converted to an `std::io::Read`\u27e841\u27e9 when the type is one of:\n  * `File`\n  * `&File`\n  * `TcpStream`\n  * `&TcpStream`\n  * `Stdin`\n  * `UnixStream` (not on windows)\n\n\n#### \u00a7\u27e842\u27e9From readers\nThe chunked method also applies for bodies constructed via:\n  * `SendBody::from_reader()`\u27e843\u27e9\n  * `SendBody::from_owned_reader()`\u27e844\u27e9\n\n\n### \u00a7\u27e845\u27e9Proxying a response body\nAs a special case, when ureq sends a `Body`\u27e846\u27e9 from a previous http call, the use of `Content-Length` or `chunked` depends on situation. For input such as gzip decoding (**gzip** feature) or charset transformation (**charset** feature), the output body might not match the input, which means ureq is forced to use the `chunked` method.\n  * `Response<Body>`\n\n\n### \u00a7\u27e847\u27e9Sending form data\n`request.send_form()`\u27e848\u27e9 provides a way to send `application/x-www-form-urlencoded` encoded data. The key/values provided will be URL encoded.\n### \u00a7\u27e849\u27e9Overriding\nIf you set your own Content-Length or Transfer-Encoding header before sending the body, ureq will respect that header by not overriding it, and by encoding the body or not, as indicated by the headers you set.\n```\nlet resp = ureq::put(\"https://httpbin.org/put\")\n  .header(\"Transfer-Encoding\", \"chunked\")\n  .send(\"Hello world\")?;\n```\n\n## \u00a7\u27e850\u27e9Character encoding\nBy enabling the **charset** feature, the library supports receiving other character sets than `utf-8`.\nFor `Body::read_to_string()`\u27e851\u27e9 we read the header like:\n`Content-Type: text/plain; charset=iso-8859-1`\nand if it contains a charset specification, we try to decode the body using that encoding. In the absence of, or failing to interpret the charset, we fall back on `utf-8`.\nCurrently ureq does not provide a way to encode when sending request bodies.\n### \u00a7\u27e852\u27e9Lossy utf-8\nWhen reading text bodies (with a `Content-Type` starting `text/` as in `text/plain`, `text/html`, etc), ureq can ensure the body is possible to read as a `String` also if it contains characters that are not valid for utf-8. Invalid characters are replaced with a question mark `?` (NOT the utf-8 replacement character).\nFor `Body::read_to_string()`\u27e851\u27e9 this is turned on by default, but it can be disabled and conversely for `Body::as_reader()`\u27e853\u27e9 it is not enabled, but can be.\nTo precisely configure the behavior use `Body::with_config()`\u27e854\u27e9.\n## \u00a7\u27e855\u27e9Proxying\nureq supports two kinds of proxies, `HTTP`\u27e856\u27e9 (`CONNECT`\u27e857\u27e9), `SOCKS4`\u27e858\u27e9/`SOCKS5`\u27e859\u27e9, the former is always available while the latter must be enabled using the feature **socks-proxy**.\nProxies settings are configured on an `Agent`\u27e89\u27e9. All request sent through the agent will be proxied.\n### \u00a7\u27e860\u27e9Example using HTTP\n```\nuse ureq::{Agent, Proxy};\n// Configure an http connect proxy.\nlet proxy = Proxy::new(\"http://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n### \u00a7\u27e861\u27e9Example using SOCKS5\n```\nuse ureq::{Agent, Proxy};\n// Configure a SOCKS proxy.\nlet proxy = Proxy::new(\"socks5://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n## \u00a7\u27e862\u27e9Log levels\nureq uses the log crate. These are the definitions of the log levels, however we do not guarantee anything for dependencies such as `http` and `rustls`.\n  * `ERROR` - nothing\n  * `WARN` - if we detect a user configuration problem.\n  * `INFO` - nothing\n  * `DEBUG` - uri, state changes, transport, resolver and selected request/response headers\n  * `TRACE` - wire level debug. NOT REDACTED!\n\n\nThe request/response headers on DEBUG levels are allow-listed to only include headers that are considered safe. The code has the allow list\u27e863\u27e9.\n## \u00a7\u27e864\u27e9Versioning\n### \u00a7\u27e865\u27e9Semver and `unversioned`\nureq follows semver. From ureq 3.x we strive to have a much closer adherence to semver than 2.x. The main mistake in 2.x was to re-export crates that were not yet semver 1.0. In ureq 3.x TLS and cookie configuration is shimmed using our own types.\nureq 3.x is trying out two new traits that had no equivalent in 2.x, `Transport`\u27e866\u27e9 and `Resolver`\u27e867\u27e9. These allow the user write their own bespoke transports and (DNS name) resolver. The API:s for these parts are not yet solidified. They live under the `unversioned`\u27e868\u27e9 module, and do not follow semver. See module doc for more info.\n### \u00a7\u27e869\u27e9Breaking changes in dependencies\nureq relies on non-semver 1.x crates such as `rustls` and `native-tls`. Some scenarios, such as configuring `rustls` to not use `ring`, a user of ureq might need to interact with these crates directly instead of going via ureq\u2019s provided API.\nSuch changes can break when ureq updates dependencies. This is not considered a breaking change for ureq and will not be reflected by a major version bump.\nWe strive to mark ureq\u2019s API with the word \u201cunversioned\u201d to identify places where this risk arises.\n### \u00a7\u27e870\u27e9Minimum Supported Rust Version (MSRV)\nFrom time to time we will need to update our minimum supported Rust version (MSRV). This is not something we do lightly; our ambition is to be as conservative with MSRV as possible.\n  * For some dependencies, we will opt for pinning the version of the dep instead of bumping our MSRV.\n  * For important dependencies, like the TLS libraries, we cannot hold back our MSRV if they change.\n  * We do not consider MSRV changes to be breaking for the purposes of semver.\n  * We will not make MSRV changes in patch releases.\n  * MSRV changes will get their own minor release, and not be co-mingled with other changes.\n\n\n## Re-exports\u00a7\u27e871\u27e9\n\n`pub use ureq_proto::http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules\u00a7\u27e872\u27e9\n\nconfig\u27e873\u27e9\n    Agent configuration\n\nmiddleware\u27e874\u27e9\n    Chained interception to modify the request or response.\n\ntls\u27e875\u27e9\n    TLS for handling `https`.\n\ntypestate\u27e876\u27e9\n    Typestate variables.\n\nunversioned\u27e877\u27e9\n    API that does not (yet) follow semver.\n## Structs\u00a7\u27e878\u27e9\n\nAgent\u27e879\u27e9\n    Agents keep state between requests.\n\nBody\u27e880\u27e9\n    A response body returned as `http::Response<Body>`\u27e881\u27e9.\n\nBodyBuilder\u27e882\u27e9\n    Builder for creating a response body.\n\nBodyReader\u27e883\u27e9\n    A reader of the response data.\n\nBodyWithConfig\u27e884\u27e9\n    Configuration of how to read the body.\n\nCookie\u27e885\u27e9\n    Representation of an HTTP cookie.\n\nCookieJar\u27e886\u27e9\n    Collection of cookies.\n\nProxy\u27e887\u27e9\n    Proxy server settings\n\nProxyBuilder\u27e888\u27e9\n    Builder for configuring a proxy.\n\nRequestBuilder\u27e889\u27e9\n    Transparent wrapper around `http::request::Builder`\u27e890\u27e9.\n\nSendBody\u27e891\u27e9\n    Request body for sending data via POST, PUT and PATCH.\n## Enums\u00a7\u27e892\u27e9\n\nError\u27e893\u27e9\n    Errors from ureq.\n\nProxyProtocol\u27e894\u27e9\n    Proxy protocol\n\nTimeout\u27e895\u27e9\n    The various timeouts.\n## Traits\u00a7\u27e896\u27e9\n\nAsSendBody\u27e897\u27e9\n    Trait for common types to send in POST, PUT or PATCH.\n\nRequestExt\u27e898\u27e9\n    Extension trait for `http::Request<impl AsSendBody>`\u27e899\u27e9.\n\nResponseExt\u27e8100\u27e9\n    Extension trait for `http::Response<Body>`\u27e881\u27e9.\n## Functions\u00a7\u27e8101\u27e9\n\nagent\u27e8102\u27e9\n    A new Agent\u27e879\u27e9 with default configuration\n\nconnect\u27e8103\u27e9\n    Make a CONNECT request.\n\ndelete\u27e8104\u27e9\n    Make a DELETE request.\n\nget\u27e8105\u27e9\n    Make a GET request.\n\nhead\u27e8106\u27e9\n    Make a HEAD request.\n\noptions\u27e8107\u27e9\n    Make an OPTIONS request.\n\npatch\u27e8108\u27e9\n    Make a PATCH request.\n\npost\u27e8109\u27e9\n    Make a POST request.\n\nput\u27e8110\u27e9\n    Make a PUT request.\n\nrun\u27e8111\u27e9\n    Run a `http::Request<impl AsSendBody>`\u27e899\u27e9.\n\ntrace\u27e8112\u27e9\n    Make a TRACE request.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ureq/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ureq/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ureq/latest/src/ureq/lib.rs.html#1-1260: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/ureq.svg?style=flat-square:  ![Crates.io version\n\u27e85\u27e9 https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square:  ![docs.rs docs\n\u27e86\u27e9 https://img.shields.io/crates/d/ureq.svg?style=flat-square:  ![Crates.io downloads\n\u27e87\u27e9 https://github.com/algesten/ureq/blob/main/CHANGELOG.md: changelog\n\u27e88\u27e9 https://docs.rs/ureq/latest/ureq/#usage: \u00a7\n\u27e89\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html: `Agent`\n\u27e810\u27e9 https://doc.rust-lang.org/std/sync/struct.Arc.html: `Arc`\n\u27e811\u27e9 https://docs.rs/ureq/latest/ureq/#json: \u00a7\n\u27e812\u27e9 https://docs.rs/ureq/latest/ureq/#error-handling: \u00a7\n\u27e813\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/enum.Error.html: `Error`\n\u27e814\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/config/struct.ConfigBuilder.html#method.http_status_as_error: `http_status_as_error()`\n\u27e815\u27e9 https://docs.rs/ureq/latest/ureq/#features: \u00a7\n\u27e816\u27e9 https://crates.io/crates/rustls-platform-verifier: rustls-platform-verifier\n\u27e817\u27e9 https://docs.rs/ureq/latest/ureq/#unstable: \u00a7\n\u27e818\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html: `CryptoProvider`\n\u27e819\u27e9 https://docs.rs/ureq/latest/ureq/#tls-https: \u00a7\n\u27e820\u27e9 https://docs.rs/ureq/latest/ureq/#rustls: \u00a7\n\u27e821\u27e9 https://crates.io/crates/rustls: `rustls` crate\n\u27e822\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#method.install_default: default provider\n\u27e823\u27e9 https://docs.rs/ureq/latest/ureq/#rustls-without-ring: \u00a7\n\u27e824\u27e9 https://docs.rs/ureq/latest/ureq/tls/struct.TlsConfigBuilder.html#method.unversioned_rustls_crypto_provider: method ureq::tls::TlsConfigBuilder::unversioned_rustls_crypto_provider - `TlsConfigBuilder::unversioned_rustls_crypto_provider`\n\u27e825\u27e9 https://docs.rs/ureq/latest/ureq/#native-tls: \u00a7\n\u27e826\u27e9 https://crates.io/crates/native-tls: `native-tls`\n\u27e827\u27e9 https://docs.rs/ureq/latest/ureq/#root-certificates: \u00a7\n\u27e828\u27e9 https://docs.rs/ureq/latest/ureq/#webpki-roots: \u00a7\n\u27e829\u27e9 https://crates.io/crates/webpki-roots: webpki-roots\n\u27e830\u27e9 https://en.wikipedia.org/wiki/Certificate_Transparency: SCT\n\u27e831\u27e9 https://en.wikipedia.org/wiki/Certificate_revocation_list: CRL\n\u27e832\u27e9 https://docs.rs/ureq/latest/ureq/#platform-verifier: \u00a7\n\u27e833\u27e9 https://docs.rs/ureq/latest/ureq/#json-1: \u00a7\n\u27e834\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json: `request.send_json()`\n\u27e835\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_json: `body.read_json()`\n\u27e836\u27e9 https://docs.rs/ureq/latest/ureq/#sending-body-data: \u00a7\n\u27e837\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/trait.AsSendBody.html: `AsSendBody`\n\u27e838\u27e9 https://docs.rs/ureq/latest/ureq/#content-length: \u00a7\n\u27e839\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_json: `SendBody::from_json()`\n\u27e840\u27e9 https://docs.rs/ureq/latest/ureq/#transfer-encoding-chunked: \u00a7\n\u27e841\u27e9 https://doc.rust-lang.org/std/io/trait.Read.html: `std::io::Read`\n\u27e842\u27e9 https://docs.rs/ureq/latest/ureq/#from-readers: \u00a7\n\u27e843\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_reader: `SendBody::from_reader()`\n\u27e844\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_owned_reader: `SendBody::from_owned_reader()`\n\u27e845\u27e9 https://docs.rs/ureq/latest/ureq/#proxying-a-response-body: \u00a7\n\u27e846\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html: `Body`\n\u27e847\u27e9 https://docs.rs/ureq/latest/ureq/#sending-form-data: \u00a7\n\u27e848\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_form: `request.send_form()`\n\u27e849\u27e9 https://docs.rs/ureq/latest/ureq/#overriding: \u00a7\n\u27e850\u27e9 https://docs.rs/ureq/latest/ureq/#character-encoding: \u00a7\n\u27e851\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string: `Body::read_to_string()`\n\u27e852\u27e9 https://docs.rs/ureq/latest/ureq/#lossy-utf-8: \u00a7\n\u27e853\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.as_reader: `Body::as_reader()`\n\u27e854\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.with_config: `Body::with_config()`\n\u27e855\u27e9 https://docs.rs/ureq/latest/ureq/#proxying: \u00a7\n\u27e856\u27e9 https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling#http_tunneling: `HTTP`\n\u27e857\u27e9 https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT: `CONNECT`\n\u27e858\u27e9 https://en.wikipedia.org/wiki/SOCKS#SOCKS4: `SOCKS4`\n\u27e859\u27e9 https://en.wikipedia.org/wiki/SOCKS#SOCKS5: `SOCKS5`\n\u27e860\u27e9 https://docs.rs/ureq/latest/ureq/#example-using-http: \u00a7\n\u27e861\u27e9 https://docs.rs/ureq/latest/ureq/#example-using-socks5: \u00a7\n\u27e862\u27e9 https://docs.rs/ureq/latest/ureq/#log-levels: \u00a7\n\u27e863\u27e9 https://github.com/algesten/ureq/blob/81127cfc38516903330dc1b9c618122372f8dc29/src/util.rs#L184-L198: allow list\n\u27e864\u27e9 https://docs.rs/ureq/latest/ureq/#versioning: \u00a7\n\u27e865\u27e9 https://docs.rs/ureq/latest/ureq/#semver-and-unversioned: \u00a7\n\u27e866\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/transport/trait.Transport.html: `Transport`\n\u27e867\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/resolver/trait.Resolver.html: `Resolver`\n\u27e868\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/index.html: `unversioned`\n\u27e869\u27e9 https://docs.rs/ureq/latest/ureq/#breaking-changes-in-dependencies: \u00a7\n\u27e870\u27e9 https://docs.rs/ureq/latest/ureq/#minimum-supported-rust-version-msrv: \u00a7\n\u27e871\u27e9 https://docs.rs/ureq/latest/ureq/#reexports: \u00a7\n\u27e872\u27e9 https://docs.rs/ureq/latest/ureq/#modules: \u00a7\n\u27e873\u27e9 https://docs.rs/ureq/latest/ureq/config/index.html: mod ureq::config - config\n\u27e874\u27e9 https://docs.rs/ureq/latest/ureq/middleware/index.html: mod ureq::middleware - middleware\n\u27e875\u27e9 https://docs.rs/ureq/latest/ureq/tls/index.html: mod ureq::tls - tls\n\u27e876\u27e9 https://docs.rs/ureq/latest/ureq/typestate/index.html: mod ureq::typestate - typestate\n\u27e877\u27e9 https://docs.rs/ureq/latest/ureq/unversioned/index.html: mod ureq::unversioned - unversioned\n\u27e878\u27e9 https://docs.rs/ureq/latest/ureq/#structs: \u00a7\n\u27e879\u27e9 https://docs.rs/ureq/latest/ureq/struct.Agent.html: struct ureq::Agent - Agent\n\u27e880\u27e9 https://docs.rs/ureq/latest/ureq/struct.Body.html: struct ureq::Body - Body\n\u27e881\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/response/struct.Response.html: struct http::response::Response - `http::Response<Body>`\n\u27e882\u27e9 https://docs.rs/ureq/latest/ureq/struct.BodyBuilder.html: struct ureq::BodyBuilder - BodyBuilder\n\u27e883\u27e9 https://docs.rs/ureq/latest/ureq/struct.BodyReader.html: struct ureq::BodyReader - BodyReader\n\u27e884\u27e9 https://docs.rs/ureq/latest/ureq/struct.BodyWithConfig.html: struct ureq::BodyWithConfig - BodyWithConfig\n\u27e885\u27e9 https://docs.rs/ureq/latest/ureq/struct.Cookie.html: struct ureq::Cookie - Cookie\n\u27e886\u27e9 https://docs.rs/ureq/latest/ureq/struct.CookieJar.html: struct ureq::CookieJar - CookieJar\n\u27e887\u27e9 https://docs.rs/ureq/latest/ureq/struct.Proxy.html: struct ureq::Proxy - Proxy\n\u27e888\u27e9 https://docs.rs/ureq/latest/ureq/struct.ProxyBuilder.html: struct ureq::ProxyBuilder - ProxyBuilder\n\u27e889\u27e9 https://docs.rs/ureq/latest/ureq/struct.RequestBuilder.html: struct ureq::RequestBuilder - RequestBuilder\n\u27e890\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Builder.html: struct http::request::Builder - `http::request::Builder`\n\u27e891\u27e9 https://docs.rs/ureq/latest/ureq/struct.SendBody.html: struct ureq::SendBody - SendBody\n\u27e892\u27e9 https://docs.rs/ureq/latest/ureq/#enums: \u00a7\n\u27e893\u27e9 https://docs.rs/ureq/latest/ureq/enum.Error.html: enum ureq::Error - Error\n\u27e894\u27e9 https://docs.rs/ureq/latest/ureq/enum.ProxyProtocol.html: enum ureq::ProxyProtocol - ProxyProtocol\n\u27e895\u27e9 https://docs.rs/ureq/latest/ureq/enum.Timeout.html: enum ureq::Timeout - Timeout\n\u27e896\u27e9 https://docs.rs/ureq/latest/ureq/#traits: \u00a7\n\u27e897\u27e9 https://docs.rs/ureq/latest/ureq/trait.AsSendBody.html: trait ureq::AsSendBody - AsSendBody\n\u27e898\u27e9 https://docs.rs/ureq/latest/ureq/trait.RequestExt.html: trait ureq::RequestExt - RequestExt\n\u27e899\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Request.html: struct http::request::Request - `http::Request<impl AsSendBody>`\n\u27e8100\u27e9 https://docs.rs/ureq/latest/ureq/trait.ResponseExt.html: trait ureq::ResponseExt - ResponseExt\n\u27e8101\u27e9 https://docs.rs/ureq/latest/ureq/#functions: \u00a7\n\u27e8102\u27e9 https://docs.rs/ureq/latest/ureq/fn.agent.html: fn ureq::agent - agent\n\u27e8103\u27e9 https://docs.rs/ureq/latest/ureq/fn.connect.html: fn ureq::connect - connect\n\u27e8104\u27e9 https://docs.rs/ureq/latest/ureq/fn.delete.html: fn ureq::delete - delete\n\u27e8105\u27e9 https://docs.rs/ureq/latest/ureq/fn.get.html: fn ureq::get - get\n\u27e8106\u27e9 https://docs.rs/ureq/latest/ureq/fn.head.html: fn ureq::head - head\n\u27e8107\u27e9 https://docs.rs/ureq/latest/ureq/fn.options.html: fn ureq::options - options\n\u27e8108\u27e9 https://docs.rs/ureq/latest/ureq/fn.patch.html: fn ureq::patch - patch\n\u27e8109\u27e9 https://docs.rs/ureq/latest/ureq/fn.post.html: fn ureq::post - post\n\u27e8110\u27e9 https://docs.rs/ureq/latest/ureq/fn.put.html: fn ureq::put - put\n\u27e8111\u27e9 https://docs.rs/ureq/latest/ureq/fn.run.html: fn ureq::run - run\n\u27e8112\u27e9 https://docs.rs/ureq/latest/ureq/fn.trace.html: fn ureq::trace - trace\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "ureq",
          "version": "3.0.12",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ureq/latest/ureq/all.html \"show sidebar\")\n# Crate ureqCopy item path\n[Settings](https://docs.rs/ureq/latest/settings.html)\n[Help](https://docs.rs/ureq/latest/help.html)\nSummary[Source](https://docs.rs/ureq/latest/src/ureq/lib.rs.html#1-1260)\nExpand description\n[ ![Crates.io version](https://img.shields.io/crates/v/ureq.svg?style=flat-square) ](https://crates.io/crates/ureq) [ ![docs.rs docs](https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square) ](https://docs.rs/ureq) [ ![Crates.io downloads](https://img.shields.io/crates/d/ureq.svg?style=flat-square) ](https://crates.io/crates/ureq)\nA simple, safe HTTP client.\nUreq\u2019s first priority is being easy for you to use. It\u2019s great for anyone who wants a low-overhead HTTP client that just gets the job done. Works very well with HTTP APIs. Its features include cookies, JSON, HTTP proxies, HTTPS, charset decoding, and is based on the API of the `http` crate.\nUreq is in pure Rust for safety and ease of understanding. It avoids using `unsafe` directly. It uses blocking I/O instead of async I/O, because that keeps the API simple and keeps dependencies to a minimum. For TLS, ureq uses rustls or native-tls.\nSee the [changelog](https://github.com/algesten/ureq/blob/main/CHANGELOG.md) for details of recent releases.\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#usage)Usage\nIn its simplest form, ureq looks like this:\n```\nlet body: String = ureq::get(\"http://example.com\")\n  .header(\"Example-Header\", \"header value\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n```\n\nFor more involved tasks, you\u2019ll want to create an [`Agent`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html). An Agent holds a connection pool for reuse, and a cookie store if you use the **cookies** feature. An Agent can be cheaply cloned due to internal [`Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html) and all clones of an Agent share state among each other. Creating an Agent also allows setting options like the TLS configuration.\n```\nuse ureq::Agent;\nuse std::time::Duration;\nlet mut config = Agent::config_builder()\n  .timeout_global(Some(Duration::from_secs(5)))\n  .build();\nlet agent: Agent = config.into();\nlet body: String = agent.get(\"http://example.com/page\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n// Reuses the connection from previous request.\nlet response: String = agent.put(\"http://example.com/upload\")\n  .header(\"Authorization\", \"example-token\")\n  .send(\"some body data\")?\n  .body_mut()\n  .read_to_string()?;\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#json)JSON\nUreq supports sending and receiving json, if you enable the **json** feature:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize)]\nstruct MySendBody {\n  thing: String,\n}\n#[derive(Deserialize)]\nstruct MyRecvBody {\n  other: String,\n}\nlet send_body = MySendBody { thing: \"yo\".to_string() };\n// Requires the `json` feature enabled.\nlet recv_body = ureq::post(\"http://example.com/post/ingest\")\n  .header(\"X-My-Header\", \"Secret\")\n  .send_json(&send_body)?\n  .body_mut()\n  .read_json::<MyRecvBody>()?;\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#error-handling)Error handling\nureq returns errors via `Result<T, ureq::Error>`. That includes I/O errors, protocol errors. By default, also HTTP status code errors (when the server responded 4xx or 5xx) results in [`Error`](https://docs.rs/ureq/3.0.0-rc4/ureq/enum.Error.html).\nThis behavior can be turned off via [`http_status_as_error()`](https://docs.rs/ureq/3.0.0-rc4/ureq/config/struct.ConfigBuilder.html#method.http_status_as_error)\n```\nuse ureq::Error;\nmatch ureq::get(\"http://mypage.example.com/\").call() {\n  Ok(response) => { /* it worked */},\n  Err(Error::StatusCode(code)) => {\n    /* the server returned an unexpected status\n      code (such as 400, 500 etc) */\n  }\n  Err(_) => { /* some kind of io/transport/etc error */ }\n}\n```\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#features)Features\nTo enable a minimal dependency tree, some features are off by default. You can control them when including ureq as a dependency.\n`ureq = { version = \"3\", features = [\"socks-proxy\", \"charset\"] }`\nThe default enabled features are: **rustls** and **gzip**.\n  * **rustls** enables the rustls TLS implementation. This is the default for the the crate level convenience calls (`ureq::get` etc). It currently uses `ring` as the TLS provider.\n  * **native-tls** enables the native tls backend for TLS. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent\n  * **platform-verifier** enables verifying the server certificates using a method native to the platform ureq is executing on. See [rustls-platform-verifier](https://crates.io/crates/rustls-platform-verifier) crate\n  * **socks-proxy** enables proxy config using the `socks4://`, `socks4a://`, `socks5://` and `socks://` (equal to `socks5://`) prefix\n  * **cookies** enables cookies\n  * **gzip** enables requests of gzip-compressed responses and decompresses them\n  * **brotli** enables requests brotli-compressed responses and decompresses them\n  * **charset** enables interpreting the charset part of the Content-Type header (e.g. `Content-Type: text/plain; charset=iso-8859-1`). Without this, the library defaults to Rust\u2019s built in `utf-8`\n  * **json** enables JSON sending and receiving via serde_json\n\n\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#unstable)Unstable\nThese features are unstable and might change in a minor version.\n  * **rustls-no-provider** Enables rustls, but does not enable any [`CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html) such as `ring`. Providers other than the default (currently `ring`) are never picked up from feature flags alone. It must be configured on the agent.\n  * **vendored** compiles and statically links to a copy of non-Rust vendors (e.g. OpenSSL from `native-tls`)\n\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#tls-https)TLS (https)\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#rustls)rustls\nBy default, ureq uses [`rustls` crate](https://crates.io/crates/rustls) with the `ring` cryptographic provider. As of Sep 2024, the `ring` provider has a higher chance of compiling successfully. If the user installs another process [default provider](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#method.install_default), that choice is respected.\nureq does not guarantee to default to ring indefinitely. `rustls` as a feature flag will always work, but the specific crypto backend might change in a minor version.\n```\n// This uses rustls\nureq::get(\"https://www.google.com/\").call().unwrap();\n```\n\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#rustls-without-ring)rustls without ring\nureq never changes TLS backend from feature flags alone. It is possible to compile ureq without ring, but it requires specific feature flags and configuring the [`Agent`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html).\nSince rustls is not semver 1.x, this requires non-semver-guaranteed API. I.e. ureq might change this behavior without a major version bump.\nRead more at [`TlsConfigBuilder::unversioned_rustls_crypto_provider`](https://docs.rs/ureq/latest/ureq/tls/struct.TlsConfigBuilder.html#method.unversioned_rustls_crypto_provider \"method ureq::tls::TlsConfigBuilder::unversioned_rustls_crypto_provider\").\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#native-tls)native-tls\nAs an alternative, ureq ships with [`native-tls`](https://crates.io/crates/native-tls) as a TLS provider. This must be enabled using the **native-tls** feature. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent.\n```\nuse ureq::config::Config;\nuse ureq::tls::{TlsConfig, TlsProvider};\nlet mut config = Config::builder()\n  .tls_config(\n    TlsConfig::builder()\n      // requires the native-tls feature\n      .provider(TlsProvider::NativeTls)\n      .build()\n  )\n  .build();\nlet agent = config.new_agent();\nagent.get(\"https://www.google.com/\").call().unwrap();\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#root-certificates)Root certificates\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#webpki-roots)webpki-roots\nBy default, ureq uses Mozilla\u2019s root certificates via the [webpki-roots](https://crates.io/crates/webpki-roots) crate. This is a static bundle of root certificates that do not update automatically. It also circumvents whatever root certificates are installed on the host running ureq, which might be a good or a bad thing depending on your perspective. There is also no mechanism for [SCT](https://en.wikipedia.org/wiki/Certificate_Transparency), [CRL](https://en.wikipedia.org/wiki/Certificate_revocation_list)s or other revocations. To maintain a \u201cfresh\u201d list of root certs, you need to bump the ureq dependency from time to time.\nThe main reason for chosing this as the default is to minimize the number of dependencies. More details about this decision can be found at [PR 818].\nIf your use case for ureq is talking to a limited number of servers with high trust, the default setting is likely sufficient. If you use ureq with a high number of servers, or servers you don\u2019t trust, we recommend using the platform verifier (see below).\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#platform-verifier)platform-verifier\nThe [rustls-platform-verifier](https://crates.io/crates/rustls-platform-verifier) crate provides access to natively checking the certificate via your OS. To use this verifier, you need to enable it using feature flag **platform-verifier** as well as configure an agent to use it.\n```\nuse ureq::Agent;\nuse ureq::tls::{TlsConfig, RootCerts};\nlet agent = Agent::config_builder()\n  .tls_config(\n    TlsConfig::builder()\n      .root_certs(RootCerts::PlatformVerifier)\n      .build()\n  )\n  .build()\n  .new_agent();\nlet response = agent.get(\"https://httpbin.org/get\").call()?;\n```\n\nSetting `RootCerts::PlatformVerifier` together with `TlsProvider::NativeTls` means also native-tls will use the OS roots instead of [webpki-roots](https://crates.io/crates/webpki-roots) crate. Whether that results in a config that has CRLs and revocations is up to whatever native-tls links to.\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#json-1)JSON\nBy enabling the **json** feature, the library supports serde json.\nThis is enabled by default.\n  * [`request.send_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json) send body as json.\n  * [`body.read_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_json) transform response to json.\n\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#sending-body-data)Sending body data\nHTTP/1.1 has two ways of transfering body data. Either of a known size with the `Content-Length` HTTP header, or unknown size with the `Transfer-Encoding: chunked` header. ureq supports both and will use the appropriate method depending on which body is being sent.\nureq has a [`AsSendBody`](https://docs.rs/ureq/3.0.0-rc4/ureq/trait.AsSendBody.html) trait that is implemented for many well known types of data that we might want to send. The request body can thus be anything from a `String` to a `File`, see below.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#content-length)Content-Length\nThe library will send a `Content-Length` header on requests with bodies of known size, in other words, if the body to send is one of:\n  * `&[u8]`\n  * `&[u8; N]`\n  * `&str`\n  * `String`\n  * `&String`\n  * `Vec<u8>`\n  * `&Vec<u8>)`\n  * [`SendBody::from_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_json) (implicitly via [`request.send_json()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json))\n\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#transfer-encoding-chunked)Transfer-Encoding: chunked\nureq will send a `Transfer-Encoding: chunked` header on requests where the body is of unknown size. The body is automatically converted to an [`std::io::Read`](https://doc.rust-lang.org/std/io/trait.Read.html) when the type is one of:\n  * `File`\n  * `&File`\n  * `TcpStream`\n  * `&TcpStream`\n  * `Stdin`\n  * `UnixStream` (not on windows)\n\n\n#### [\u00a7](https://docs.rs/ureq/latest/ureq/#from-readers)From readers\nThe chunked method also applies for bodies constructed via:\n  * [`SendBody::from_reader()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_reader)\n  * [`SendBody::from_owned_reader()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_owned_reader)\n\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#proxying-a-response-body)Proxying a response body\nAs a special case, when ureq sends a [`Body`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html) from a previous http call, the use of `Content-Length` or `chunked` depends on situation. For input such as gzip decoding (**gzip** feature) or charset transformation (**charset** feature), the output body might not match the input, which means ureq is forced to use the `chunked` method.\n  * `Response<Body>`\n\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#sending-form-data)Sending form data\n[`request.send_form()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_form) provides a way to send `application/x-www-form-urlencoded` encoded data. The key/values provided will be URL encoded.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#overriding)Overriding\nIf you set your own Content-Length or Transfer-Encoding header before sending the body, ureq will respect that header by not overriding it, and by encoding the body or not, as indicated by the headers you set.\n```\nlet resp = ureq::put(\"https://httpbin.org/put\")\n  .header(\"Transfer-Encoding\", \"chunked\")\n  .send(\"Hello world\")?;\n```\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#character-encoding)Character encoding\nBy enabling the **charset** feature, the library supports receiving other character sets than `utf-8`.\nFor [`Body::read_to_string()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string) we read the header like:\n`Content-Type: text/plain; charset=iso-8859-1`\nand if it contains a charset specification, we try to decode the body using that encoding. In the absence of, or failing to interpret the charset, we fall back on `utf-8`.\nCurrently ureq does not provide a way to encode when sending request bodies.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#lossy-utf-8)Lossy utf-8\nWhen reading text bodies (with a `Content-Type` starting `text/` as in `text/plain`, `text/html`, etc), ureq can ensure the body is possible to read as a `String` also if it contains characters that are not valid for utf-8. Invalid characters are replaced with a question mark `?` (NOT the utf-8 replacement character).\nFor [`Body::read_to_string()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string) this is turned on by default, but it can be disabled and conversely for [`Body::as_reader()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.as_reader) it is not enabled, but can be.\nTo precisely configure the behavior use [`Body::with_config()`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.with_config).\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#proxying)Proxying\nureq supports two kinds of proxies, [`HTTP`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling#http_tunneling) ([`CONNECT`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT)), [`SOCKS4`](https://en.wikipedia.org/wiki/SOCKS#SOCKS4)/[`SOCKS5`](https://en.wikipedia.org/wiki/SOCKS#SOCKS5), the former is always available while the latter must be enabled using the feature **socks-proxy**.\nProxies settings are configured on an [`Agent`](https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html). All request sent through the agent will be proxied.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#example-using-http)Example using HTTP\n```\nuse ureq::{Agent, Proxy};\n// Configure an http connect proxy.\nlet proxy = Proxy::new(\"http://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#example-using-socks5)Example using SOCKS5\n```\nuse ureq::{Agent, Proxy};\n// Configure a SOCKS proxy.\nlet proxy = Proxy::new(\"socks5://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#log-levels)Log levels\nureq uses the log crate. These are the definitions of the log levels, however we do not guarantee anything for dependencies such as `http` and `rustls`.\n  * `ERROR` - nothing\n  * `WARN` - if we detect a user configuration problem.\n  * `INFO` - nothing\n  * `DEBUG` - uri, state changes, transport, resolver and selected request/response headers\n  * `TRACE` - wire level debug. NOT REDACTED!\n\n\nThe request/response headers on DEBUG levels are allow-listed to only include headers that are considered safe. The code has the [allow list](https://github.com/algesten/ureq/blob/81127cfc38516903330dc1b9c618122372f8dc29/src/util.rs#L184-L198).\n## [\u00a7](https://docs.rs/ureq/latest/ureq/#versioning)Versioning\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#semver-and-unversioned)Semver and `unversioned`\nureq follows semver. From ureq 3.x we strive to have a much closer adherence to semver than 2.x. The main mistake in 2.x was to re-export crates that were not yet semver 1.0. In ureq 3.x TLS and cookie configuration is shimmed using our own types.\nureq 3.x is trying out two new traits that had no equivalent in 2.x, [`Transport`](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/transport/trait.Transport.html) and [`Resolver`](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/resolver/trait.Resolver.html). These allow the user write their own bespoke transports and (DNS name) resolver. The API:s for these parts are not yet solidified. They live under the [`unversioned`](https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/index.html) module, and do not follow semver. See module doc for more info.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#breaking-changes-in-dependencies)Breaking changes in dependencies\nureq relies on non-semver 1.x crates such as `rustls` and `native-tls`. Some scenarios, such as configuring `rustls` to not use `ring`, a user of ureq might need to interact with these crates directly instead of going via ureq\u2019s provided API.\nSuch changes can break when ureq updates dependencies. This is not considered a breaking change for ureq and will not be reflected by a major version bump.\nWe strive to mark ureq\u2019s API with the word \u201cunversioned\u201d to identify places where this risk arises.\n### [\u00a7](https://docs.rs/ureq/latest/ureq/#minimum-supported-rust-version-msrv)Minimum Supported Rust Version (MSRV)\nFrom time to time we will need to update our minimum supported Rust version (MSRV). This is not something we do lightly; our ambition is to be as conservative with MSRV as possible.\n  * For some dependencies, we will opt for pinning the version of the dep instead of bumping our MSRV.\n  * For important dependencies, like the TLS libraries, we cannot hold back our MSRV if they change.\n  * We do not consider MSRV changes to be breaking for the purposes of semver.\n  * We will not make MSRV changes in patch releases.\n  * MSRV changes will get their own minor release, and not be co-mingled with other changes.\n\n\n## Re-exports[\u00a7](https://docs.rs/ureq/latest/ureq/#reexports)\n\n`pub use ureq_proto::http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules[\u00a7](https://docs.rs/ureq/latest/ureq/#modules)\n\n[config](https://docs.rs/ureq/latest/ureq/config/index.html \"mod ureq::config\")\n    Agent configuration\n\n[middleware](https://docs.rs/ureq/latest/ureq/middleware/index.html \"mod ureq::middleware\")\n    Chained interception to modify the request or response.\n\n[tls](https://docs.rs/ureq/latest/ureq/tls/index.html \"mod ureq::tls\")\n    TLS for handling `https`.\n\n[typestate](https://docs.rs/ureq/latest/ureq/typestate/index.html \"mod ureq::typestate\")\n    Typestate variables.\n\n[unversioned](https://docs.rs/ureq/latest/ureq/unversioned/index.html \"mod ureq::unversioned\")\n    API that does not (yet) follow semver.\n## Structs[\u00a7](https://docs.rs/ureq/latest/ureq/#structs)\n\n[Agent](https://docs.rs/ureq/latest/ureq/struct.Agent.html \"struct ureq::Agent\")\n    Agents keep state between requests.\n\n[Body](https://docs.rs/ureq/latest/ureq/struct.Body.html \"struct ureq::Body\")\n    A response body returned as [`http::Response<Body>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\").\n\n[BodyBuilder](https://docs.rs/ureq/latest/ureq/struct.BodyBuilder.html \"struct ureq::BodyBuilder\")\n    Builder for creating a response body.\n\n[BodyReader](https://docs.rs/ureq/latest/ureq/struct.BodyReader.html \"struct ureq::BodyReader\")\n    A reader of the response data.\n\n[BodyWithConfig](https://docs.rs/ureq/latest/ureq/struct.BodyWithConfig.html \"struct ureq::BodyWithConfig\")\n    Configuration of how to read the body.\n\n[Cookie](https://docs.rs/ureq/latest/ureq/struct.Cookie.html \"struct ureq::Cookie\")\n    Representation of an HTTP cookie.\n\n[CookieJar](https://docs.rs/ureq/latest/ureq/struct.CookieJar.html \"struct ureq::CookieJar\")\n    Collection of cookies.\n\n[Proxy](https://docs.rs/ureq/latest/ureq/struct.Proxy.html \"struct ureq::Proxy\")\n    Proxy server settings\n\n[ProxyBuilder](https://docs.rs/ureq/latest/ureq/struct.ProxyBuilder.html \"struct ureq::ProxyBuilder\")\n    Builder for configuring a proxy.\n\n[RequestBuilder](https://docs.rs/ureq/latest/ureq/struct.RequestBuilder.html \"struct ureq::RequestBuilder\")\n    Transparent wrapper around [`http::request::Builder`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Builder.html \"struct http::request::Builder\").\n\n[SendBody](https://docs.rs/ureq/latest/ureq/struct.SendBody.html \"struct ureq::SendBody\")\n    Request body for sending data via POST, PUT and PATCH.\n## Enums[\u00a7](https://docs.rs/ureq/latest/ureq/#enums)\n\n[Error](https://docs.rs/ureq/latest/ureq/enum.Error.html \"enum ureq::Error\")\n    Errors from ureq.\n\n[ProxyProtocol](https://docs.rs/ureq/latest/ureq/enum.ProxyProtocol.html \"enum ureq::ProxyProtocol\")\n    Proxy protocol\n\n[Timeout](https://docs.rs/ureq/latest/ureq/enum.Timeout.html \"enum ureq::Timeout\")\n    The various timeouts.\n## Traits[\u00a7](https://docs.rs/ureq/latest/ureq/#traits)\n\n[AsSendBody](https://docs.rs/ureq/latest/ureq/trait.AsSendBody.html \"trait ureq::AsSendBody\")\n    Trait for common types to send in POST, PUT or PATCH.\n\n[RequestExt](https://docs.rs/ureq/latest/ureq/trait.RequestExt.html \"trait ureq::RequestExt\")\n    Extension trait for [`http::Request<impl AsSendBody>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\").\n\n[ResponseExt](https://docs.rs/ureq/latest/ureq/trait.ResponseExt.html \"trait ureq::ResponseExt\")\n    Extension trait for [`http::Response<Body>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\").\n## Functions[\u00a7](https://docs.rs/ureq/latest/ureq/#functions)\n\n[agent](https://docs.rs/ureq/latest/ureq/fn.agent.html \"fn ureq::agent\")\n    A new [Agent](https://docs.rs/ureq/latest/ureq/struct.Agent.html \"struct ureq::Agent\") with default configuration\n\n[connect](https://docs.rs/ureq/latest/ureq/fn.connect.html \"fn ureq::connect\")\n    Make a CONNECT request.\n\n[delete](https://docs.rs/ureq/latest/ureq/fn.delete.html \"fn ureq::delete\")\n    Make a DELETE request.\n\n[get](https://docs.rs/ureq/latest/ureq/fn.get.html \"fn ureq::get\")\n    Make a GET request.\n\n[head](https://docs.rs/ureq/latest/ureq/fn.head.html \"fn ureq::head\")\n    Make a HEAD request.\n\n[options](https://docs.rs/ureq/latest/ureq/fn.options.html \"fn ureq::options\")\n    Make an OPTIONS request.\n\n[patch](https://docs.rs/ureq/latest/ureq/fn.patch.html \"fn ureq::patch\")\n    Make a PATCH request.\n\n[post](https://docs.rs/ureq/latest/ureq/fn.post.html \"fn ureq::post\")\n    Make a POST request.\n\n[put](https://docs.rs/ureq/latest/ureq/fn.put.html \"fn ureq::put\")\n    Make a PUT request.\n\n[run](https://docs.rs/ureq/latest/ureq/fn.run.html \"fn ureq::run\")\n    Run a [`http::Request<impl AsSendBody>`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\").\n\n[trace](https://docs.rs/ureq/latest/ureq/fn.trace.html \"fn ureq::trace\")\n    Make a TRACE request.\n",
            "markdown_with_citations": "[](https://docs.rs/ureq/latest/ureq/all.html \"show sidebar\")\n# Crate ureqCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n ![Crates.io version\u27e84\u27e9 ](https://crates.io/crates/ureq)  ![docs.rs docs\u27e85\u27e9 ](https://docs.rs/ureq)  ![Crates.io downloads\u27e86\u27e9 ](https://crates.io/crates/ureq)\nA simple, safe HTTP client.\nUreq\u2019s first priority is being easy for you to use. It\u2019s great for anyone who wants a low-overhead HTTP client that just gets the job done. Works very well with HTTP APIs. Its features include cookies, JSON, HTTP proxies, HTTPS, charset decoding, and is based on the API of the `http` crate.\nUreq is in pure Rust for safety and ease of understanding. It avoids using `unsafe` directly. It uses blocking I/O instead of async I/O, because that keeps the API simple and keeps dependencies to a minimum. For TLS, ureq uses rustls or native-tls.\nSee the changelog\u27e87\u27e9 for details of recent releases.\n## \u00a7\u27e88\u27e9Usage\nIn its simplest form, ureq looks like this:\n```\nlet body: String = ureq::get(\"http://example.com\")\n  .header(\"Example-Header\", \"header value\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n```\n\nFor more involved tasks, you\u2019ll want to create an `Agent`\u27e89\u27e9. An Agent holds a connection pool for reuse, and a cookie store if you use the **cookies** feature. An Agent can be cheaply cloned due to internal `Arc`\u27e810\u27e9 and all clones of an Agent share state among each other. Creating an Agent also allows setting options like the TLS configuration.\n```\nuse ureq::Agent;\nuse std::time::Duration;\nlet mut config = Agent::config_builder()\n  .timeout_global(Some(Duration::from_secs(5)))\n  .build();\nlet agent: Agent = config.into();\nlet body: String = agent.get(\"http://example.com/page\")\n  .call()?\n  .body_mut()\n  .read_to_string()?;\n// Reuses the connection from previous request.\nlet response: String = agent.put(\"http://example.com/upload\")\n  .header(\"Authorization\", \"example-token\")\n  .send(\"some body data\")?\n  .body_mut()\n  .read_to_string()?;\n```\n\n### \u00a7\u27e811\u27e9JSON\nUreq supports sending and receiving json, if you enable the **json** feature:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize)]\nstruct MySendBody {\n  thing: String,\n}\n#[derive(Deserialize)]\nstruct MyRecvBody {\n  other: String,\n}\nlet send_body = MySendBody { thing: \"yo\".to_string() };\n// Requires the `json` feature enabled.\nlet recv_body = ureq::post(\"http://example.com/post/ingest\")\n  .header(\"X-My-Header\", \"Secret\")\n  .send_json(&send_body)?\n  .body_mut()\n  .read_json::<MyRecvBody>()?;\n```\n\n### \u00a7\u27e812\u27e9Error handling\nureq returns errors via `Result<T, ureq::Error>`. That includes I/O errors, protocol errors. By default, also HTTP status code errors (when the server responded 4xx or 5xx) results in `Error`\u27e813\u27e9.\nThis behavior can be turned off via `http_status_as_error()`\u27e814\u27e9\n```\nuse ureq::Error;\nmatch ureq::get(\"http://mypage.example.com/\").call() {\n  Ok(response) => { /* it worked */},\n  Err(Error::StatusCode(code)) => {\n    /* the server returned an unexpected status\n      code (such as 400, 500 etc) */\n  }\n  Err(_) => { /* some kind of io/transport/etc error */ }\n}\n```\n\n## \u00a7\u27e815\u27e9Features\nTo enable a minimal dependency tree, some features are off by default. You can control them when including ureq as a dependency.\n`ureq = { version = \"3\", features = [\"socks-proxy\", \"charset\"] }`\nThe default enabled features are: **rustls** and **gzip**.\n  * **rustls** enables the rustls TLS implementation. This is the default for the the crate level convenience calls (`ureq::get` etc). It currently uses `ring` as the TLS provider.\n  * **native-tls** enables the native tls backend for TLS. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent\n  * **platform-verifier** enables verifying the server certificates using a method native to the platform ureq is executing on. See rustls-platform-verifier\u27e816\u27e9 crate\n  * **socks-proxy** enables proxy config using the `socks4://`, `socks4a://`, `socks5://` and `socks://` (equal to `socks5://`) prefix\n  * **cookies** enables cookies\n  * **gzip** enables requests of gzip-compressed responses and decompresses them\n  * **brotli** enables requests brotli-compressed responses and decompresses them\n  * **charset** enables interpreting the charset part of the Content-Type header (e.g. `Content-Type: text/plain; charset=iso-8859-1`). Without this, the library defaults to Rust\u2019s built in `utf-8`\n  * **json** enables JSON sending and receiving via serde_json\n\n\n#### \u00a7\u27e817\u27e9Unstable\nThese features are unstable and might change in a minor version.\n  * **rustls-no-provider** Enables rustls, but does not enable any `CryptoProvider`\u27e818\u27e9 such as `ring`. Providers other than the default (currently `ring`) are never picked up from feature flags alone. It must be configured on the agent.\n  * **vendored** compiles and statically links to a copy of non-Rust vendors (e.g. OpenSSL from `native-tls`)\n\n\n## \u00a7\u27e819\u27e9TLS (https)\n### \u00a7\u27e820\u27e9rustls\nBy default, ureq uses `rustls` crate\u27e821\u27e9 with the `ring` cryptographic provider. As of Sep 2024, the `ring` provider has a higher chance of compiling successfully. If the user installs another process default provider\u27e822\u27e9, that choice is respected.\nureq does not guarantee to default to ring indefinitely. `rustls` as a feature flag will always work, but the specific crypto backend might change in a minor version.\n```\n// This uses rustls\nureq::get(\"https://www.google.com/\").call().unwrap();\n```\n\n#### \u00a7\u27e823\u27e9rustls without ring\nureq never changes TLS backend from feature flags alone. It is possible to compile ureq without ring, but it requires specific feature flags and configuring the `Agent`\u27e89\u27e9.\nSince rustls is not semver 1.x, this requires non-semver-guaranteed API. I.e. ureq might change this behavior without a major version bump.\nRead more at `TlsConfigBuilder::unversioned_rustls_crypto_provider`\u27e824\u27e9.\n### \u00a7\u27e825\u27e9native-tls\nAs an alternative, ureq ships with `native-tls`\u27e826\u27e9 as a TLS provider. This must be enabled using the **native-tls** feature. Due to the risk of diamond dependencies accidentally switching on an unwanted TLS implementation, `native-tls` is never picked up as a default or used by the crate level convenience calls (`ureq::get` etc) \u2013 it must be configured on the agent.\n```\nuse ureq::config::Config;\nuse ureq::tls::{TlsConfig, TlsProvider};\nlet mut config = Config::builder()\n  .tls_config(\n    TlsConfig::builder()\n      // requires the native-tls feature\n      .provider(TlsProvider::NativeTls)\n      .build()\n  )\n  .build();\nlet agent = config.new_agent();\nagent.get(\"https://www.google.com/\").call().unwrap();\n```\n\n### \u00a7\u27e827\u27e9Root certificates\n#### \u00a7\u27e828\u27e9webpki-roots\nBy default, ureq uses Mozilla\u2019s root certificates via the webpki-roots\u27e829\u27e9 crate. This is a static bundle of root certificates that do not update automatically. It also circumvents whatever root certificates are installed on the host running ureq, which might be a good or a bad thing depending on your perspective. There is also no mechanism for SCT\u27e830\u27e9, CRL\u27e831\u27e9s or other revocations. To maintain a \u201cfresh\u201d list of root certs, you need to bump the ureq dependency from time to time.\nThe main reason for chosing this as the default is to minimize the number of dependencies. More details about this decision can be found at [PR 818].\nIf your use case for ureq is talking to a limited number of servers with high trust, the default setting is likely sufficient. If you use ureq with a high number of servers, or servers you don\u2019t trust, we recommend using the platform verifier (see below).\n#### \u00a7\u27e832\u27e9platform-verifier\nThe rustls-platform-verifier\u27e816\u27e9 crate provides access to natively checking the certificate via your OS. To use this verifier, you need to enable it using feature flag **platform-verifier** as well as configure an agent to use it.\n```\nuse ureq::Agent;\nuse ureq::tls::{TlsConfig, RootCerts};\nlet agent = Agent::config_builder()\n  .tls_config(\n    TlsConfig::builder()\n      .root_certs(RootCerts::PlatformVerifier)\n      .build()\n  )\n  .build()\n  .new_agent();\nlet response = agent.get(\"https://httpbin.org/get\").call()?;\n```\n\nSetting `RootCerts::PlatformVerifier` together with `TlsProvider::NativeTls` means also native-tls will use the OS roots instead of webpki-roots\u27e829\u27e9 crate. Whether that results in a config that has CRLs and revocations is up to whatever native-tls links to.\n## \u00a7\u27e833\u27e9JSON\nBy enabling the **json** feature, the library supports serde json.\nThis is enabled by default.\n  * `request.send_json()`\u27e834\u27e9 send body as json.\n  * `body.read_json()`\u27e835\u27e9 transform response to json.\n\n\n## \u00a7\u27e836\u27e9Sending body data\nHTTP/1.1 has two ways of transfering body data. Either of a known size with the `Content-Length` HTTP header, or unknown size with the `Transfer-Encoding: chunked` header. ureq supports both and will use the appropriate method depending on which body is being sent.\nureq has a `AsSendBody`\u27e837\u27e9 trait that is implemented for many well known types of data that we might want to send. The request body can thus be anything from a `String` to a `File`, see below.\n### \u00a7\u27e838\u27e9Content-Length\nThe library will send a `Content-Length` header on requests with bodies of known size, in other words, if the body to send is one of:\n  * `&[u8]`\n  * `&[u8; N]`\n  * `&str`\n  * `String`\n  * `&String`\n  * `Vec<u8>`\n  * `&Vec<u8>)`\n  * `SendBody::from_json()`\u27e839\u27e9 (implicitly via `request.send_json()`\u27e834\u27e9)\n\n\n### \u00a7\u27e840\u27e9Transfer-Encoding: chunked\nureq will send a `Transfer-Encoding: chunked` header on requests where the body is of unknown size. The body is automatically converted to an `std::io::Read`\u27e841\u27e9 when the type is one of:\n  * `File`\n  * `&File`\n  * `TcpStream`\n  * `&TcpStream`\n  * `Stdin`\n  * `UnixStream` (not on windows)\n\n\n#### \u00a7\u27e842\u27e9From readers\nThe chunked method also applies for bodies constructed via:\n  * `SendBody::from_reader()`\u27e843\u27e9\n  * `SendBody::from_owned_reader()`\u27e844\u27e9\n\n\n### \u00a7\u27e845\u27e9Proxying a response body\nAs a special case, when ureq sends a `Body`\u27e846\u27e9 from a previous http call, the use of `Content-Length` or `chunked` depends on situation. For input such as gzip decoding (**gzip** feature) or charset transformation (**charset** feature), the output body might not match the input, which means ureq is forced to use the `chunked` method.\n  * `Response<Body>`\n\n\n### \u00a7\u27e847\u27e9Sending form data\n`request.send_form()`\u27e848\u27e9 provides a way to send `application/x-www-form-urlencoded` encoded data. The key/values provided will be URL encoded.\n### \u00a7\u27e849\u27e9Overriding\nIf you set your own Content-Length or Transfer-Encoding header before sending the body, ureq will respect that header by not overriding it, and by encoding the body or not, as indicated by the headers you set.\n```\nlet resp = ureq::put(\"https://httpbin.org/put\")\n  .header(\"Transfer-Encoding\", \"chunked\")\n  .send(\"Hello world\")?;\n```\n\n## \u00a7\u27e850\u27e9Character encoding\nBy enabling the **charset** feature, the library supports receiving other character sets than `utf-8`.\nFor `Body::read_to_string()`\u27e851\u27e9 we read the header like:\n`Content-Type: text/plain; charset=iso-8859-1`\nand if it contains a charset specification, we try to decode the body using that encoding. In the absence of, or failing to interpret the charset, we fall back on `utf-8`.\nCurrently ureq does not provide a way to encode when sending request bodies.\n### \u00a7\u27e852\u27e9Lossy utf-8\nWhen reading text bodies (with a `Content-Type` starting `text/` as in `text/plain`, `text/html`, etc), ureq can ensure the body is possible to read as a `String` also if it contains characters that are not valid for utf-8. Invalid characters are replaced with a question mark `?` (NOT the utf-8 replacement character).\nFor `Body::read_to_string()`\u27e851\u27e9 this is turned on by default, but it can be disabled and conversely for `Body::as_reader()`\u27e853\u27e9 it is not enabled, but can be.\nTo precisely configure the behavior use `Body::with_config()`\u27e854\u27e9.\n## \u00a7\u27e855\u27e9Proxying\nureq supports two kinds of proxies, `HTTP`\u27e856\u27e9 (`CONNECT`\u27e857\u27e9), `SOCKS4`\u27e858\u27e9/`SOCKS5`\u27e859\u27e9, the former is always available while the latter must be enabled using the feature **socks-proxy**.\nProxies settings are configured on an `Agent`\u27e89\u27e9. All request sent through the agent will be proxied.\n### \u00a7\u27e860\u27e9Example using HTTP\n```\nuse ureq::{Agent, Proxy};\n// Configure an http connect proxy.\nlet proxy = Proxy::new(\"http://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n### \u00a7\u27e861\u27e9Example using SOCKS5\n```\nuse ureq::{Agent, Proxy};\n// Configure a SOCKS proxy.\nlet proxy = Proxy::new(\"socks5://user:password@cool.proxy:9090\")?;\nlet agent: Agent = Agent::config_builder()\n  .proxy(Some(proxy))\n  .build()\n  .into();\n// This is proxied.\nlet resp = agent.get(\"http://cool.server\").call()?;\n```\n\n## \u00a7\u27e862\u27e9Log levels\nureq uses the log crate. These are the definitions of the log levels, however we do not guarantee anything for dependencies such as `http` and `rustls`.\n  * `ERROR` - nothing\n  * `WARN` - if we detect a user configuration problem.\n  * `INFO` - nothing\n  * `DEBUG` - uri, state changes, transport, resolver and selected request/response headers\n  * `TRACE` - wire level debug. NOT REDACTED!\n\n\nThe request/response headers on DEBUG levels are allow-listed to only include headers that are considered safe. The code has the allow list\u27e863\u27e9.\n## \u00a7\u27e864\u27e9Versioning\n### \u00a7\u27e865\u27e9Semver and `unversioned`\nureq follows semver. From ureq 3.x we strive to have a much closer adherence to semver than 2.x. The main mistake in 2.x was to re-export crates that were not yet semver 1.0. In ureq 3.x TLS and cookie configuration is shimmed using our own types.\nureq 3.x is trying out two new traits that had no equivalent in 2.x, `Transport`\u27e866\u27e9 and `Resolver`\u27e867\u27e9. These allow the user write their own bespoke transports and (DNS name) resolver. The API:s for these parts are not yet solidified. They live under the `unversioned`\u27e868\u27e9 module, and do not follow semver. See module doc for more info.\n### \u00a7\u27e869\u27e9Breaking changes in dependencies\nureq relies on non-semver 1.x crates such as `rustls` and `native-tls`. Some scenarios, such as configuring `rustls` to not use `ring`, a user of ureq might need to interact with these crates directly instead of going via ureq\u2019s provided API.\nSuch changes can break when ureq updates dependencies. This is not considered a breaking change for ureq and will not be reflected by a major version bump.\nWe strive to mark ureq\u2019s API with the word \u201cunversioned\u201d to identify places where this risk arises.\n### \u00a7\u27e870\u27e9Minimum Supported Rust Version (MSRV)\nFrom time to time we will need to update our minimum supported Rust version (MSRV). This is not something we do lightly; our ambition is to be as conservative with MSRV as possible.\n  * For some dependencies, we will opt for pinning the version of the dep instead of bumping our MSRV.\n  * For important dependencies, like the TLS libraries, we cannot hold back our MSRV if they change.\n  * We do not consider MSRV changes to be breaking for the purposes of semver.\n  * We will not make MSRV changes in patch releases.\n  * MSRV changes will get their own minor release, and not be co-mingled with other changes.\n\n\n## Re-exports\u00a7\u27e871\u27e9\n\n`pub use ureq_proto::http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules\u00a7\u27e872\u27e9\n\nconfig\u27e873\u27e9\n    Agent configuration\n\nmiddleware\u27e874\u27e9\n    Chained interception to modify the request or response.\n\ntls\u27e875\u27e9\n    TLS for handling `https`.\n\ntypestate\u27e876\u27e9\n    Typestate variables.\n\nunversioned\u27e877\u27e9\n    API that does not (yet) follow semver.\n## Structs\u00a7\u27e878\u27e9\n\nAgent\u27e879\u27e9\n    Agents keep state between requests.\n\nBody\u27e880\u27e9\n    A response body returned as `http::Response<Body>`\u27e881\u27e9.\n\nBodyBuilder\u27e882\u27e9\n    Builder for creating a response body.\n\nBodyReader\u27e883\u27e9\n    A reader of the response data.\n\nBodyWithConfig\u27e884\u27e9\n    Configuration of how to read the body.\n\nCookie\u27e885\u27e9\n    Representation of an HTTP cookie.\n\nCookieJar\u27e886\u27e9\n    Collection of cookies.\n\nProxy\u27e887\u27e9\n    Proxy server settings\n\nProxyBuilder\u27e888\u27e9\n    Builder for configuring a proxy.\n\nRequestBuilder\u27e889\u27e9\n    Transparent wrapper around `http::request::Builder`\u27e890\u27e9.\n\nSendBody\u27e891\u27e9\n    Request body for sending data via POST, PUT and PATCH.\n## Enums\u00a7\u27e892\u27e9\n\nError\u27e893\u27e9\n    Errors from ureq.\n\nProxyProtocol\u27e894\u27e9\n    Proxy protocol\n\nTimeout\u27e895\u27e9\n    The various timeouts.\n## Traits\u00a7\u27e896\u27e9\n\nAsSendBody\u27e897\u27e9\n    Trait for common types to send in POST, PUT or PATCH.\n\nRequestExt\u27e898\u27e9\n    Extension trait for `http::Request<impl AsSendBody>`\u27e899\u27e9.\n\nResponseExt\u27e8100\u27e9\n    Extension trait for `http::Response<Body>`\u27e881\u27e9.\n## Functions\u00a7\u27e8101\u27e9\n\nagent\u27e8102\u27e9\n    A new Agent\u27e879\u27e9 with default configuration\n\nconnect\u27e8103\u27e9\n    Make a CONNECT request.\n\ndelete\u27e8104\u27e9\n    Make a DELETE request.\n\nget\u27e8105\u27e9\n    Make a GET request.\n\nhead\u27e8106\u27e9\n    Make a HEAD request.\n\noptions\u27e8107\u27e9\n    Make an OPTIONS request.\n\npatch\u27e8108\u27e9\n    Make a PATCH request.\n\npost\u27e8109\u27e9\n    Make a POST request.\n\nput\u27e8110\u27e9\n    Make a PUT request.\n\nrun\u27e8111\u27e9\n    Run a `http::Request<impl AsSendBody>`\u27e899\u27e9.\n\ntrace\u27e8112\u27e9\n    Make a TRACE request.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ureq/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ureq/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ureq/latest/src/ureq/lib.rs.html#1-1260: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/ureq.svg?style=flat-square:  ![Crates.io version\n\u27e85\u27e9 https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square:  ![docs.rs docs\n\u27e86\u27e9 https://img.shields.io/crates/d/ureq.svg?style=flat-square:  ![Crates.io downloads\n\u27e87\u27e9 https://github.com/algesten/ureq/blob/main/CHANGELOG.md: changelog\n\u27e88\u27e9 https://docs.rs/ureq/latest/ureq/#usage: \u00a7\n\u27e89\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Agent.html: `Agent`\n\u27e810\u27e9 https://doc.rust-lang.org/std/sync/struct.Arc.html: `Arc`\n\u27e811\u27e9 https://docs.rs/ureq/latest/ureq/#json: \u00a7\n\u27e812\u27e9 https://docs.rs/ureq/latest/ureq/#error-handling: \u00a7\n\u27e813\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/enum.Error.html: `Error`\n\u27e814\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/config/struct.ConfigBuilder.html#method.http_status_as_error: `http_status_as_error()`\n\u27e815\u27e9 https://docs.rs/ureq/latest/ureq/#features: \u00a7\n\u27e816\u27e9 https://crates.io/crates/rustls-platform-verifier: rustls-platform-verifier\n\u27e817\u27e9 https://docs.rs/ureq/latest/ureq/#unstable: \u00a7\n\u27e818\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html: `CryptoProvider`\n\u27e819\u27e9 https://docs.rs/ureq/latest/ureq/#tls-https: \u00a7\n\u27e820\u27e9 https://docs.rs/ureq/latest/ureq/#rustls: \u00a7\n\u27e821\u27e9 https://crates.io/crates/rustls: `rustls` crate\n\u27e822\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#method.install_default: default provider\n\u27e823\u27e9 https://docs.rs/ureq/latest/ureq/#rustls-without-ring: \u00a7\n\u27e824\u27e9 https://docs.rs/ureq/latest/ureq/tls/struct.TlsConfigBuilder.html#method.unversioned_rustls_crypto_provider: method ureq::tls::TlsConfigBuilder::unversioned_rustls_crypto_provider - `TlsConfigBuilder::unversioned_rustls_crypto_provider`\n\u27e825\u27e9 https://docs.rs/ureq/latest/ureq/#native-tls: \u00a7\n\u27e826\u27e9 https://crates.io/crates/native-tls: `native-tls`\n\u27e827\u27e9 https://docs.rs/ureq/latest/ureq/#root-certificates: \u00a7\n\u27e828\u27e9 https://docs.rs/ureq/latest/ureq/#webpki-roots: \u00a7\n\u27e829\u27e9 https://crates.io/crates/webpki-roots: webpki-roots\n\u27e830\u27e9 https://en.wikipedia.org/wiki/Certificate_Transparency: SCT\n\u27e831\u27e9 https://en.wikipedia.org/wiki/Certificate_revocation_list: CRL\n\u27e832\u27e9 https://docs.rs/ureq/latest/ureq/#platform-verifier: \u00a7\n\u27e833\u27e9 https://docs.rs/ureq/latest/ureq/#json-1: \u00a7\n\u27e834\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_json: `request.send_json()`\n\u27e835\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_json: `body.read_json()`\n\u27e836\u27e9 https://docs.rs/ureq/latest/ureq/#sending-body-data: \u00a7\n\u27e837\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/trait.AsSendBody.html: `AsSendBody`\n\u27e838\u27e9 https://docs.rs/ureq/latest/ureq/#content-length: \u00a7\n\u27e839\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_json: `SendBody::from_json()`\n\u27e840\u27e9 https://docs.rs/ureq/latest/ureq/#transfer-encoding-chunked: \u00a7\n\u27e841\u27e9 https://doc.rust-lang.org/std/io/trait.Read.html: `std::io::Read`\n\u27e842\u27e9 https://docs.rs/ureq/latest/ureq/#from-readers: \u00a7\n\u27e843\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_reader: `SendBody::from_reader()`\n\u27e844\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.SendBody.html#method.from_owned_reader: `SendBody::from_owned_reader()`\n\u27e845\u27e9 https://docs.rs/ureq/latest/ureq/#proxying-a-response-body: \u00a7\n\u27e846\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html: `Body`\n\u27e847\u27e9 https://docs.rs/ureq/latest/ureq/#sending-form-data: \u00a7\n\u27e848\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.RequestBuilder.html#method.send_form: `request.send_form()`\n\u27e849\u27e9 https://docs.rs/ureq/latest/ureq/#overriding: \u00a7\n\u27e850\u27e9 https://docs.rs/ureq/latest/ureq/#character-encoding: \u00a7\n\u27e851\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.read_to_string: `Body::read_to_string()`\n\u27e852\u27e9 https://docs.rs/ureq/latest/ureq/#lossy-utf-8: \u00a7\n\u27e853\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.as_reader: `Body::as_reader()`\n\u27e854\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/struct.Body.html#method.with_config: `Body::with_config()`\n\u27e855\u27e9 https://docs.rs/ureq/latest/ureq/#proxying: \u00a7\n\u27e856\u27e9 https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling#http_tunneling: `HTTP`\n\u27e857\u27e9 https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT: `CONNECT`\n\u27e858\u27e9 https://en.wikipedia.org/wiki/SOCKS#SOCKS4: `SOCKS4`\n\u27e859\u27e9 https://en.wikipedia.org/wiki/SOCKS#SOCKS5: `SOCKS5`\n\u27e860\u27e9 https://docs.rs/ureq/latest/ureq/#example-using-http: \u00a7\n\u27e861\u27e9 https://docs.rs/ureq/latest/ureq/#example-using-socks5: \u00a7\n\u27e862\u27e9 https://docs.rs/ureq/latest/ureq/#log-levels: \u00a7\n\u27e863\u27e9 https://github.com/algesten/ureq/blob/81127cfc38516903330dc1b9c618122372f8dc29/src/util.rs#L184-L198: allow list\n\u27e864\u27e9 https://docs.rs/ureq/latest/ureq/#versioning: \u00a7\n\u27e865\u27e9 https://docs.rs/ureq/latest/ureq/#semver-and-unversioned: \u00a7\n\u27e866\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/transport/trait.Transport.html: `Transport`\n\u27e867\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/resolver/trait.Resolver.html: `Resolver`\n\u27e868\u27e9 https://docs.rs/ureq/3.0.0-rc4/ureq/unversioned/index.html: `unversioned`\n\u27e869\u27e9 https://docs.rs/ureq/latest/ureq/#breaking-changes-in-dependencies: \u00a7\n\u27e870\u27e9 https://docs.rs/ureq/latest/ureq/#minimum-supported-rust-version-msrv: \u00a7\n\u27e871\u27e9 https://docs.rs/ureq/latest/ureq/#reexports: \u00a7\n\u27e872\u27e9 https://docs.rs/ureq/latest/ureq/#modules: \u00a7\n\u27e873\u27e9 https://docs.rs/ureq/latest/ureq/config/index.html: mod ureq::config - config\n\u27e874\u27e9 https://docs.rs/ureq/latest/ureq/middleware/index.html: mod ureq::middleware - middleware\n\u27e875\u27e9 https://docs.rs/ureq/latest/ureq/tls/index.html: mod ureq::tls - tls\n\u27e876\u27e9 https://docs.rs/ureq/latest/ureq/typestate/index.html: mod ureq::typestate - typestate\n\u27e877\u27e9 https://docs.rs/ureq/latest/ureq/unversioned/index.html: mod ureq::unversioned - unversioned\n\u27e878\u27e9 https://docs.rs/ureq/latest/ureq/#structs: \u00a7\n\u27e879\u27e9 https://docs.rs/ureq/latest/ureq/struct.Agent.html: struct ureq::Agent - Agent\n\u27e880\u27e9 https://docs.rs/ureq/latest/ureq/struct.Body.html: struct ureq::Body - Body\n\u27e881\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/response/struct.Response.html: struct http::response::Response - `http::Response<Body>`\n\u27e882\u27e9 https://docs.rs/ureq/latest/ureq/struct.BodyBuilder.html: struct ureq::BodyBuilder - BodyBuilder\n\u27e883\u27e9 https://docs.rs/ureq/latest/ureq/struct.BodyReader.html: struct ureq::BodyReader - BodyReader\n\u27e884\u27e9 https://docs.rs/ureq/latest/ureq/struct.BodyWithConfig.html: struct ureq::BodyWithConfig - BodyWithConfig\n\u27e885\u27e9 https://docs.rs/ureq/latest/ureq/struct.Cookie.html: struct ureq::Cookie - Cookie\n\u27e886\u27e9 https://docs.rs/ureq/latest/ureq/struct.CookieJar.html: struct ureq::CookieJar - CookieJar\n\u27e887\u27e9 https://docs.rs/ureq/latest/ureq/struct.Proxy.html: struct ureq::Proxy - Proxy\n\u27e888\u27e9 https://docs.rs/ureq/latest/ureq/struct.ProxyBuilder.html: struct ureq::ProxyBuilder - ProxyBuilder\n\u27e889\u27e9 https://docs.rs/ureq/latest/ureq/struct.RequestBuilder.html: struct ureq::RequestBuilder - RequestBuilder\n\u27e890\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Builder.html: struct http::request::Builder - `http::request::Builder`\n\u27e891\u27e9 https://docs.rs/ureq/latest/ureq/struct.SendBody.html: struct ureq::SendBody - SendBody\n\u27e892\u27e9 https://docs.rs/ureq/latest/ureq/#enums: \u00a7\n\u27e893\u27e9 https://docs.rs/ureq/latest/ureq/enum.Error.html: enum ureq::Error - Error\n\u27e894\u27e9 https://docs.rs/ureq/latest/ureq/enum.ProxyProtocol.html: enum ureq::ProxyProtocol - ProxyProtocol\n\u27e895\u27e9 https://docs.rs/ureq/latest/ureq/enum.Timeout.html: enum ureq::Timeout - Timeout\n\u27e896\u27e9 https://docs.rs/ureq/latest/ureq/#traits: \u00a7\n\u27e897\u27e9 https://docs.rs/ureq/latest/ureq/trait.AsSendBody.html: trait ureq::AsSendBody - AsSendBody\n\u27e898\u27e9 https://docs.rs/ureq/latest/ureq/trait.RequestExt.html: trait ureq::RequestExt - RequestExt\n\u27e899\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Request.html: struct http::request::Request - `http::Request<impl AsSendBody>`\n\u27e8100\u27e9 https://docs.rs/ureq/latest/ureq/trait.ResponseExt.html: trait ureq::ResponseExt - ResponseExt\n\u27e8101\u27e9 https://docs.rs/ureq/latest/ureq/#functions: \u00a7\n\u27e8102\u27e9 https://docs.rs/ureq/latest/ureq/fn.agent.html: fn ureq::agent - agent\n\u27e8103\u27e9 https://docs.rs/ureq/latest/ureq/fn.connect.html: fn ureq::connect - connect\n\u27e8104\u27e9 https://docs.rs/ureq/latest/ureq/fn.delete.html: fn ureq::delete - delete\n\u27e8105\u27e9 https://docs.rs/ureq/latest/ureq/fn.get.html: fn ureq::get - get\n\u27e8106\u27e9 https://docs.rs/ureq/latest/ureq/fn.head.html: fn ureq::head - head\n\u27e8107\u27e9 https://docs.rs/ureq/latest/ureq/fn.options.html: fn ureq::options - options\n\u27e8108\u27e9 https://docs.rs/ureq/latest/ureq/fn.patch.html: fn ureq::patch - patch\n\u27e8109\u27e9 https://docs.rs/ureq/latest/ureq/fn.post.html: fn ureq::post - post\n\u27e8110\u27e9 https://docs.rs/ureq/latest/ureq/fn.put.html: fn ureq::put - put\n\u27e8111\u27e9 https://docs.rs/ureq/latest/ureq/fn.run.html: fn ureq::run - run\n\u27e8112\u27e9 https://docs.rs/ureq/latest/ureq/fn.trace.html: fn ureq::trace - trace\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `ureq` crate is a simple, safe, and blocking HTTP client written in pure Rust, designed for ease of use and minimal dependencies. It supports features like connection pooling via `Agent`, cookies, JSON handling (with `serde`), HTTP/HTTPS proxies (including SOCKS5), gzip/brotli compression, charset decoding, and configurable TLS backends (`rustls` or `native-tls`). Default features include `rustls` and `gzip`, with optional features for extended functionality like `cookies`, `json`, and proxy support.",
          "feature_summary": null,
          "use_case": "Web Framework",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: HTTP Client Features  \n\u2705 Factual: The `ureq` crate uses blocking I/O instead of async I/O, which simplifies its API and minimizes dependencies.  \n\u274c Counterfactual: The `ureq` crate uses async I/O to optimize performance for high-concurrency applications.  \n\n---\n\n### Pair 2: Proxy Support  \n\u2705 Factual: `ureq` supports both HTTP and SOCKS5 proxies, which can be configured using the `Proxy` struct.  \n\u274c Counterfactual: `ureq` only supports HTTP proxies and does not provide support for SOCKS5 proxies.  \n\n---\n\n### Pair 3: JSON Handling  \n\u2705 Factual: The `ureq` crate supports sending and receiving JSON data, provided the `json` feature is enabled.  \n\u274c Counterfactual: The `ureq` crate includes JSON handling by default without requiring the `json` feature to be enabled.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-9f06b0b0-d8398858-1751261479",
      "timestamp": "2025-06-30T05:31:19.139146+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]