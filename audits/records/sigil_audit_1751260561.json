[
  {
    "execution_id": "exec-277089d9-79de2517-1751260551",
    "timestamp": "2025-06-30T05:15:51.654028+00:00",
    "sacred_chain": {
      "input_data": "bytes",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'bytes' -> 'bytes'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "bytes",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/bytes",
            "title": "bytes v1.10.1",
            "content": {
              "raw_markdown": "#  bytes v1.10.1\nTypes and traits for working with bytes \n  * [ #buffers ](https://crates.io/keywords/buffers)\n  * [ #io ](https://crates.io/keywords/io)\n  * [ #zero-copy ](https://crates.io/keywords/zero-copy)\n\n\n  * [ Readme ](https://crates.io/crates/bytes)\n  * [ 55 Versions ](https://crates.io/crates/bytes/versions)\n  * [ Dependencies ](https://crates.io/crates/bytes/dependencies)\n  * [ Dependents ](https://crates.io/crates/bytes/reverse_dependencies)\n\n\n## Metadata\n4 months ago \nv1.39.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n75 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add bytes\nOr add the following line to your Cargo.toml:\nbytes = \"1.10.1\"\n## Repository\n[ github.com/tokio-rs/bytes ](https://github.com/tokio-rs/bytes)\n## Owners\n## Categories\n  * [Data structures](https://crates.io/categories/data-structures)\n  * [Network programming](https://crates.io/categories/network-programming)\n\n\n[ Report crate ](https://crates.io/support?crate=bytes&inquire=crate-violation)\n### Stats Overview\n379,415,006 Downloads all time\n55 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  bytes v1.10.1\nTypes and traits for working with bytes \n  *  #buffers \u27e81\u27e9\n  *  #io \u27e82\u27e9\n  *  #zero-copy \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  55 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\n4 months ago \nv1.39.0 \n MIT \u27e88\u27e9\n75 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add bytes\nOr add the following line to your Cargo.toml:\nbytes = \"1.10.1\"\n## Repository\n github.com/tokio-rs/bytes \u27e89\u27e9\n## Owners\n## Categories\n  * Data structures\u27e810\u27e9\n  * Network programming\u27e811\u27e9\n\n\n Report crate \u27e812\u27e9\n### Stats Overview\n379,415,006 Downloads all time\n55 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/buffers:  #buffers \n\u27e82\u27e9 https://crates.io/keywords/io:  #io \n\u27e83\u27e9 https://crates.io/keywords/zero-copy:  #zero-copy \n\u27e84\u27e9 https://crates.io/crates/bytes:  Readme \n\u27e85\u27e9 https://crates.io/crates/bytes/versions:  55 Versions \n\u27e86\u27e9 https://crates.io/crates/bytes/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/bytes/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://github.com/tokio-rs/bytes:  github.com/tokio-rs/bytes \n\u27e810\u27e9 https://crates.io/categories/data-structures: Data structures\n\u27e811\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e812\u27e9 https://crates.io/support?crate=bytes&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1200,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114341.5850114"
          },
          "docs_rs": {
            "url": "https://docs.rs/bytes",
            "title": "Crate bytesCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/bytes/latest/bytes/all.html \"show sidebar\")\n# Crate bytesCopy item path\n[Settings](https://docs.rs/bytes/latest/settings.html)\n[Help](https://docs.rs/bytes/latest/help.html)\nSummary[Source](https://docs.rs/bytes/latest/src/bytes/lib.rs.html#1-199)\nExpand description\nProvides abstractions for working with bytes.\nThe `bytes` crate provides an efficient byte buffer structure ([`Bytes`](https://docs.rs/bytes/latest/bytes/struct.Bytes.html \"struct bytes::Bytes\")) and traits for working with buffer implementations ([`Buf`](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\"), [`BufMut`](https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html \"trait bytes::buf::BufMut\")).\n## [\u00a7](https://docs.rs/bytes/latest/bytes/#bytes)`Bytes`\n`Bytes` is an efficient container for storing and operating on contiguous slices of memory. It is intended for use primarily in networking code, but could have applications elsewhere as well.\n`Bytes` values facilitate zero-copy network programming by allowing multiple `Bytes` objects to point to the same underlying memory. This is managed by using a reference count to track when the memory is no longer needed and can be freed.\nA `Bytes` handle can be created directly from an existing byte store (such as `&[u8]` or `Vec<u8>`), but usually a `BytesMut` is used first and written to. For example:\n```\nuse bytes::{BytesMut, BufMut};\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\nbuf.put_u16(1234);\nlet a = buf.split();\nassert_eq!(a, b\"hello world\\x04\\xD2\"[..]);\nbuf.put(&b\"goodbye world\"[..]);\nlet b = buf.split();\nassert_eq!(b, b\"goodbye world\"[..]);\nassert_eq!(buf.capacity(), 998);\n```\n\nIn the above example, only a single buffer of 1024 is allocated. The handles `a` and `b` will share the underlying buffer and maintain indices tracking the view into the buffer represented by the handle.\nSee the [struct docs](https://docs.rs/bytes/latest/bytes/struct.Bytes.html \"struct bytes::Bytes\") for more details.\n## [\u00a7](https://docs.rs/bytes/latest/bytes/#buf-bufmut)`Buf`, `BufMut`\nThese two traits provide read and write access to buffers. The underlying storage may or may not be in contiguous memory. For example, `Bytes` is a buffer that guarantees contiguous memory, but a [rope](https://en.wikipedia.org/wiki/Rope_\\(data_structure\\)) stores the bytes in disjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current position in the underlying byte storage. When bytes are read or written, the cursor is advanced.\n### [\u00a7](https://docs.rs/bytes/latest/bytes/#relation-with-read-and-write)Relation with `Read` and `Write`\nAt first glance, it may seem that `Buf` and `BufMut` overlap in functionality with [`std::io::Read`](https://doc.rust-lang.org/nightly/std/io/trait.Read.html \"trait std::io::Read\") and [`std::io::Write`](https://doc.rust-lang.org/nightly/std/io/trait.Write.html \"trait std::io::Write\"). However, they serve different purposes. A buffer is the value that is provided as an argument to `Read::read` and `Write::write`. `Read` and `Write` may then perform a syscall, which has the potential of failing. Operations on `Buf` and `BufMut` are infallible.\n## Re-exports[\u00a7](https://docs.rs/bytes/latest/bytes/#reexports)\n\n`pub use crate::buf::Buf[](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\");`\n\n\n`pub use crate::buf::BufMut[](https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html \"trait bytes::buf::BufMut\");`\n\n## Modules[\u00a7](https://docs.rs/bytes/latest/bytes/#modules)\n\n[buf](https://docs.rs/bytes/latest/bytes/buf/index.html \"mod bytes::buf\")\n    Utilities for working with buffers.\n## Structs[\u00a7](https://docs.rs/bytes/latest/bytes/#structs)\n\n[Bytes](https://docs.rs/bytes/latest/bytes/struct.Bytes.html \"struct bytes::Bytes\")\n    A cheaply cloneable and sliceable chunk of contiguous memory.\n\n[BytesMut](https://docs.rs/bytes/latest/bytes/struct.BytesMut.html \"struct bytes::BytesMut\")\n    A unique reference to a contiguous slice of memory.\n\n[TryGetError](https://docs.rs/bytes/latest/bytes/struct.TryGetError.html \"struct bytes::TryGetError\")\n    Error type for the `try_get_` methods of [`Buf`](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\"). Indicates that there were not enough remaining bytes in the buffer while attempting to get a value from a [`Buf`](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\") with one of the `try_get_` methods.\n",
              "markdown_with_citations": "[](https://docs.rs/bytes/latest/bytes/all.html \"show sidebar\")\n# Crate bytesCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nProvides abstractions for working with bytes.\nThe `bytes` crate provides an efficient byte buffer structure (`Bytes`\u27e84\u27e9) and traits for working with buffer implementations (`Buf`\u27e85\u27e9, `BufMut`\u27e86\u27e9).\n## \u00a7\u27e87\u27e9`Bytes`\n`Bytes` is an efficient container for storing and operating on contiguous slices of memory. It is intended for use primarily in networking code, but could have applications elsewhere as well.\n`Bytes` values facilitate zero-copy network programming by allowing multiple `Bytes` objects to point to the same underlying memory. This is managed by using a reference count to track when the memory is no longer needed and can be freed.\nA `Bytes` handle can be created directly from an existing byte store (such as `&[u8]` or `Vec<u8>`), but usually a `BytesMut` is used first and written to. For example:\n```\nuse bytes::{BytesMut, BufMut};\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\nbuf.put_u16(1234);\nlet a = buf.split();\nassert_eq!(a, b\"hello world\\x04\\xD2\"[..]);\nbuf.put(&b\"goodbye world\"[..]);\nlet b = buf.split();\nassert_eq!(b, b\"goodbye world\"[..]);\nassert_eq!(buf.capacity(), 998);\n```\n\nIn the above example, only a single buffer of 1024 is allocated. The handles `a` and `b` will share the underlying buffer and maintain indices tracking the view into the buffer represented by the handle.\nSee the struct docs\u27e84\u27e9 for more details.\n## \u00a7\u27e88\u27e9`Buf`, `BufMut`\nThese two traits provide read and write access to buffers. The underlying storage may or may not be in contiguous memory. For example, `Bytes` is a buffer that guarantees contiguous memory, but a rope\u27e89\u27e9) stores the bytes in disjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current position in the underlying byte storage. When bytes are read or written, the cursor is advanced.\n### \u00a7\u27e810\u27e9Relation with `Read` and `Write`\nAt first glance, it may seem that `Buf` and `BufMut` overlap in functionality with `std::io::Read`\u27e811\u27e9 and `std::io::Write`\u27e812\u27e9. However, they serve different purposes. A buffer is the value that is provided as an argument to `Read::read` and `Write::write`. `Read` and `Write` may then perform a syscall, which has the potential of failing. Operations on `Buf` and `BufMut` are infallible.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use crate::buf::Buf[](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\");`\n\n\n`pub use crate::buf::BufMut[](https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html \"trait bytes::buf::BufMut\");`\n\n## Modules\u00a7\u27e814\u27e9\n\nbuf\u27e815\u27e9\n    Utilities for working with buffers.\n## Structs\u00a7\u27e816\u27e9\n\nBytes\u27e84\u27e9\n    A cheaply cloneable and sliceable chunk of contiguous memory.\n\nBytesMut\u27e817\u27e9\n    A unique reference to a contiguous slice of memory.\n\nTryGetError\u27e818\u27e9\n    Error type for the `try_get_` methods of `Buf`\u27e85\u27e9. Indicates that there were not enough remaining bytes in the buffer while attempting to get a value from a `Buf`\u27e85\u27e9 with one of the `try_get_` methods.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bytes/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bytes/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bytes/latest/src/bytes/lib.rs.html#1-199: Source\n\u27e84\u27e9 https://docs.rs/bytes/latest/bytes/struct.Bytes.html: struct bytes::Bytes - `Bytes`\n\u27e85\u27e9 https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html: trait bytes::buf::Buf - `Buf`\n\u27e86\u27e9 https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html: trait bytes::buf::BufMut - `BufMut`\n\u27e87\u27e9 https://docs.rs/bytes/latest/bytes/#bytes: \u00a7\n\u27e88\u27e9 https://docs.rs/bytes/latest/bytes/#buf-bufmut: \u00a7\n\u27e89\u27e9 https://en.wikipedia.org/wiki/Rope_\\(data_structure\\: rope\n\u27e810\u27e9 https://docs.rs/bytes/latest/bytes/#relation-with-read-and-write: \u00a7\n\u27e811\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Read.html: trait std::io::Read - `std::io::Read`\n\u27e812\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Write.html: trait std::io::Write - `std::io::Write`\n\u27e813\u27e9 https://docs.rs/bytes/latest/bytes/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/bytes/latest/bytes/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/bytes/latest/bytes/buf/index.html: mod bytes::buf - buf\n\u27e816\u27e9 https://docs.rs/bytes/latest/bytes/#structs: \u00a7\n\u27e817\u27e9 https://docs.rs/bytes/latest/bytes/struct.BytesMut.html: struct bytes::BytesMut - BytesMut\n\u27e818\u27e9 https://docs.rs/bytes/latest/bytes/struct.TryGetError.html: struct bytes::TryGetError - TryGetError\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4484,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114342.2090618"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/bytes",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [51 releases](https://lib.rs/crates/bytes/versions) (16 stable)\n1.10.1 |  Mar 5, 2025   \n---|---  \n1.9.0 |  Nov 28, 2024   \n1.7.0 |  Jul 31, 2024   \n1.6.0 |  ~~Mar 22, 2024~~  \n0.2.3 |  Mar 30, 2015   \n#**18** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 4180855/week @ 2025-03-09 4462024/week @ 2025-03-16 4563737/week @ 2025-03-23 4264482/week @ 2025-03-30 4427989/week @ 2025-04-06 3807713/week @ 2025-04-13 3682949/week @ 2025-04-20 3660441/week @ 2025-04-27 3702345/week @ 2025-05-04 3816993/week @ 2025-05-11 3868632/week @ 2025-05-18 3429571/week @ 2025-05-25 3730666/week @ 2025-06-01 3943259/week @ 2025-06-08 4332720/week @ 2025-06-15 4056843/week @ 2025-06-22\n**16,288,420** downloads per month Used in [**44,532** crates (7,849 directly)](https://lib.rs/crates/bytes/rev)\n**MIT** license \n285KB  4K  SLoC\n# Bytes\nA utility library for working with bytes.\n[![Crates.io](https://img.shields.io/crates/v/bytes.svg)](https://crates.io/crates/bytes) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/tokio-rs/bytes/workflows/CI/badge.svg)](https://github.com/tokio-rs/bytes/actions)\n[Documentation](https://docs.rs/bytes)\n## Usage\nTo use ``bytes``, first add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`bytes ``=` ``\"`1`\"``\n``\n```\n\nNext, add this to your crate:\n```\n``use` `bytes`::````{`Bytes`,` BytesMut`,` Buf`,` BufMut```}```;`\n`\n```\n\n## no_std support\nTo use ``bytes`` with no_std environment, disable the (enabled by default) ``std`` feature.\n```\n```[``dependencies``]`\n`bytes = { version = \"1\", default-features ``=` `false` }\n``\n```\n\nTo use ``bytes`` with no_std environment without atomic CAS, such as thumbv6m, you also need to enable the ``extra-platforms`` feature. See the [documentation for the ``portable-atomic`` crate](https://docs.rs/portable-atomic) for more information.\nThe MSRV when ``extra-platforms`` feature is enabled depends on the MSRV of ``portable-atomic``.\n## Serde support\nSerde support is optional and disabled by default. To enable use the feature ``serde``.\n```\n```[``dependencies``]`\n`bytes = { version = \"1\", features ``=` ``[```\"`serde`\"```]`` }\n``\n```\n\nThe MSRV when ``serde`` feature is enabled depends on the MSRV of ``serde``.\n## Building documentation\nWhen building the ``bytes`` documentation the ``docsrs`` option should be used, otherwise feature gates will not be shown. This requires a nightly toolchain:\n```\n``RUSTDOCFLAGS``=```\"`--cfg docsrs`\"`` cargo `+`nightly doc\n`\n```\n\n## License\nThis project is licensed under the [MIT license](https://github.com/tokio-rs/bytes/blob/19d1427c971f6b619356966163459e43f797de2f/LICENSE).\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in ``bytes`` by you, shall be licensed as MIT, without any additional terms or conditions.\n#### Dependencies\n~0\u2013420KB \n  * [extra-platforms?](https://lib.rs/crates/bytes/features#feature-extra-platforms \"optional feature\") [portable-atomic](https://lib.rs/crates/portable-atomic \"renamed extra-platforms, 1.3\")[+require-cas](https://lib.rs/crates/portable-atomic/features#feature-require-cas)\n  * [ optional ](https://lib.rs/crates/bytes/features#feature-serde \"serde is optional feature\") [serde](https://lib.rs/crates/serde \"1.0.60\")[+alloc](https://lib.rs/crates/serde/features#feature-alloc)\n\n\n  * dev  [loom](https://lib.rs/crates/loom \"new\") 0.7 loom\n  * dev  [serde_test](https://lib.rs/crates/serde_test \"1.0\")\n\n\n#### [Other feature](https://lib.rs/crates/bytes/features)\n  * [std](https://lib.rs/crates/bytes/features#feature-std)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  51 releases\u27e81\u27e9 (16 stable)\n1.10.1 |  Mar 5, 2025   \n---|---  \n1.9.0 |  Nov 28, 2024   \n1.7.0 |  Jul 31, 2024   \n1.6.0 |  ~~Mar 22, 2024~~  \n0.2.3 |  Mar 30, 2015   \n#**18** in Rust patterns\u27e82\u27e9\nDownload history 4180855/week @ 2025-03-09 4462024/week @ 2025-03-16 4563737/week @ 2025-03-23 4264482/week @ 2025-03-30 4427989/week @ 2025-04-06 3807713/week @ 2025-04-13 3682949/week @ 2025-04-20 3660441/week @ 2025-04-27 3702345/week @ 2025-05-04 3816993/week @ 2025-05-11 3868632/week @ 2025-05-18 3429571/week @ 2025-05-25 3730666/week @ 2025-06-01 3943259/week @ 2025-06-08 4332720/week @ 2025-06-15 4056843/week @ 2025-06-22\n**16,288,420** downloads per month Used in **44,532** crates (7,849 directly)\u27e83\u27e9\n**MIT** license \n285KB  4K  SLoC\n# Bytes\nA utility library for working with bytes.\n![Crates.io\u27e84\u27e9](https://crates.io/crates/bytes) ![Build Status\u27e85\u27e9](https://github.com/tokio-rs/bytes/actions)\nDocumentation\u27e86\u27e9\n## Usage\nTo use ``bytes``, first add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`bytes ``=` ``\"`1`\"``\n``\n```\n\nNext, add this to your crate:\n```\n``use` `bytes`::````{`Bytes`,` BytesMut`,` Buf`,` BufMut```}```;`\n`\n```\n\n## no_std support\nTo use ``bytes`` with no_std environment, disable the (enabled by default) ``std`` feature.\n```\n```[``dependencies``]`\n`bytes = { version = \"1\", default-features ``=` `false` }\n``\n```\n\nTo use ``bytes`` with no_std environment without atomic CAS, such as thumbv6m, you also need to enable the ``extra-platforms`` feature. See the documentation for the ``portable-atomic`` crate\u27e87\u27e9 for more information.\nThe MSRV when ``extra-platforms`` feature is enabled depends on the MSRV of ``portable-atomic``.\n## Serde support\nSerde support is optional and disabled by default. To enable use the feature ``serde``.\n```\n```[``dependencies``]`\n`bytes = { version = \"1\", features ``=` ``[```\"`serde`\"```]`` }\n``\n```\n\nThe MSRV when ``serde`` feature is enabled depends on the MSRV of ``serde``.\n## Building documentation\nWhen building the ``bytes`` documentation the ``docsrs`` option should be used, otherwise feature gates will not be shown. This requires a nightly toolchain:\n```\n``RUSTDOCFLAGS``=```\"`--cfg docsrs`\"`` cargo `+`nightly doc\n`\n```\n\n## License\nThis project is licensed under the MIT license\u27e88\u27e9.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in ``bytes`` by you, shall be licensed as MIT, without any additional terms or conditions.\n#### Dependencies\n~0\u2013420KB \n  * extra-platforms?\u27e89\u27e9 portable-atomic\u27e810\u27e9+require-cas\u27e811\u27e9\n  *  optional \u27e812\u27e9 serde\u27e813\u27e9+alloc\u27e814\u27e9\n\n\n  * dev  loom\u27e815\u27e9 0.7 loom\n  * dev  serde_test\u27e816\u27e9\n\n\n#### Other feature\u27e817\u27e9\n  * std\u27e818\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/bytes/versions: 51 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/bytes/rev: **44,532** crates (7,849 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/bytes.svg: ![Crates.io\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/tokio-rs/bytes/workflows/CI/badge.svg: ![Build Status\n\u27e86\u27e9 https://docs.rs/bytes: Documentation\n\u27e87\u27e9 https://docs.rs/portable-atomic: documentation for the ``portable-atomic`` crate\n\u27e88\u27e9 https://github.com/tokio-rs/bytes/blob/19d1427c971f6b619356966163459e43f797de2f/LICENSE: MIT license\n\u27e89\u27e9 https://lib.rs/crates/bytes/features#feature-extra-platforms: optional feature - extra-platforms?\n\u27e810\u27e9 https://lib.rs/crates/portable-atomic: renamed extra-platforms, 1.3 - portable-atomic\n\u27e811\u27e9 https://lib.rs/crates/portable-atomic/features#feature-require-cas: +require-cas\n\u27e812\u27e9 https://lib.rs/crates/bytes/features#feature-serde: serde is optional feature -  optional \n\u27e813\u27e9 https://lib.rs/crates/serde: 1.0.60 - serde\n\u27e814\u27e9 https://lib.rs/crates/serde/features#feature-alloc: +alloc\n\u27e815\u27e9 https://lib.rs/crates/loom: new - loom\n\u27e816\u27e9 https://lib.rs/crates/serde_test: 1.0 - serde_test\n\u27e817\u27e9 https://lib.rs/crates/bytes/features: Other feature\n\u27e818\u27e9 https://lib.rs/crates/bytes/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3713,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114342.7283811"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\target\\debug\\deps\\libbytes-13cee7daaa62cb69.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: docs for unsafe trait missing `# Safety` section\n  --> src\\buf\\buf_mut.rs:30:1\n   |\n30 | pub unsafe trait BufMut {\n   | ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n   = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::missing_safety_doc)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::missing_safety_doc",
                  "explanation": null
                },
                "level": "warning",
                "message": "docs for unsafe trait missing `# Safety` section",
                "spans": [
                  {
                    "byte_end": 815,
                    "byte_start": 792,
                    "column_end": 24,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\buf\\buf_mut.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "pub unsafe trait BufMut {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: struct `UninitSlice` has a public `len` method, but no `is_empty` method\n   --> src\\buf\\uninit_slice.rs:205:5\n    |\n205 |     pub fn len(&self) -> usize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n    = note: `#[warn(clippy::len_without_is_empty)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::len_without_is_empty)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::len_without_is_empty",
                  "explanation": null
                },
                "level": "warning",
                "message": "struct `UninitSlice` has a public `len` method, but no `is_empty` method",
                "spans": [
                  {
                    "byte_end": 6114,
                    "byte_start": 6088,
                    "column_end": 31,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\buf\\uninit_slice.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 205,
                    "line_start": 205,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 5,
                        "text": "    pub fn len(&self) -> usize {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `partial_cmp` on an `Ord` type\n   --> src\\bytes.rs:791:1\n    |\n791 | /  impl PartialOrd for Bytes {\n792 | |      fn partial_cmp(&self, other: &Bytes) -> Option<cmp::Ordering> {\n    | | ___________________________________________________________________-\n793 | ||         self.as_slice().partial_cmp(other.as_slice())\n794 | ||     }\n    | ||_____- help: change this to: `{ Some(self.cmp(other)) }`\n795 | |  }\n    | |__^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n    = note: `#[warn(clippy::non_canonical_partial_ord_impl)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_canonical_partial_ord_impl)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 23436,
                        "byte_start": 23375,
                        "column_end": 6,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\bytes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 794,
                        "line_start": 792,
                        "suggested_replacement": "{ Some(self.cmp(other)) }",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 67,
                            "text": "    fn partial_cmp(&self, other: &Bytes) -> Option<cmp::Ordering> {"
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "        self.as_slice().partial_cmp(other.as_slice())"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_partial_ord_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `partial_cmp` on an `Ord` type",
                "spans": [
                  {
                    "byte_end": 23438,
                    "byte_start": 23281,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\bytes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 795,
                    "line_start": 791,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "impl PartialOrd for Bytes {"
                      },
                      {
                        "highlight_end": 68,
                        "highlight_start": 1,
                        "text": "    fn partial_cmp(&self, other: &Bytes) -> Option<cmp::Ordering> {"
                      },
                      {
                        "highlight_end": 54,
                        "highlight_start": 1,
                        "text": "        self.as_slice().partial_cmp(other.as_slice())"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use `core::ptr::eq` when comparing raw pointers\n    --> src\\bytes.rs:1540:27\n     |\n1540 |             debug_assert!(actual as usize == ptr as usize);\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::ptr::eq(actual, ptr)`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_eq\n     = note: `#[warn(clippy::ptr_eq)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_eq",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::ptr_eq)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 44669,
                        "byte_start": 44638,
                        "column_end": 58,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "src\\bytes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1540,
                        "line_start": 1540,
                        "suggested_replacement": "core::ptr::eq(actual, ptr)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 27,
                            "text": "            debug_assert!(actual as usize == ptr as usize);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::ptr_eq",
                  "explanation": null
                },
                "level": "warning",
                "message": "use `core::ptr::eq` when comparing raw pointers",
                "spans": [
                  {
                    "byte_end": 44669,
                    "byte_start": 44638,
                    "column_end": 58,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\bytes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1540,
                    "line_start": 1540,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 27,
                        "text": "            debug_assert!(actual as usize == ptr as usize);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src\\bytes_mut.rs:528:5\n    |\n528 |     pub unsafe fn set_len(&mut self, len: usize) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::missing_safety_doc",
                  "explanation": null
                },
                "level": "warning",
                "message": "unsafe function's docs are missing a `# Safety` section",
                "spans": [
                  {
                    "byte_end": 15884,
                    "byte_start": 15840,
                    "column_end": 49,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\bytes_mut.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 528,
                    "line_start": 528,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 5,
                        "text": "    pub unsafe fn set_len(&mut self, len: usize) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unneeded `return` statement\n   --> src\\bytes_mut.rs:783:9\n    |\n783 |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n    = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n    |\n783 -         return true;\n783 +         true\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_return)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove `return`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 26651,
                        "byte_start": 26640,
                        "column_end": 20,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\bytes_mut.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 783,
                        "line_start": 783,
                        "suggested_replacement": "true",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 20,
                            "highlight_start": 9,
                            "text": "        return true;"
                          }
                        ]
                      },
                      {
                        "byte_end": 26652,
                        "byte_start": 26651,
                        "column_end": 21,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\bytes_mut.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 783,
                        "line_start": 783,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 20,
                            "text": "        return true;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_return",
                  "explanation": null
                },
                "level": "warning",
                "message": "unneeded `return` statement",
                "spans": [
                  {
                    "byte_end": 26651,
                    "byte_start": 26640,
                    "column_end": 20,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\bytes_mut.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 783,
                    "line_start": 783,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 9,
                        "text": "        return true;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: manual saturating arithmetic\n   --> src\\bytes_mut.rs:989:20\n    |\n989 |         self.len = self.len.checked_sub(count).unwrap_or(0);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `saturating_sub`: `self.len.saturating_sub(count)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n    = note: `#[warn(clippy::manual_saturating_arithmetic)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::manual_saturating_arithmetic)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using `saturating_sub`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 33824,
                        "byte_start": 33784,
                        "column_end": 60,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\bytes_mut.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 989,
                        "line_start": 989,
                        "suggested_replacement": "self.len.saturating_sub(count)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 20,
                            "text": "        self.len = self.len.checked_sub(count).unwrap_or(0);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::manual_saturating_arithmetic",
                  "explanation": null
                },
                "level": "warning",
                "message": "manual saturating arithmetic",
                "spans": [
                  {
                    "byte_end": 33824,
                    "byte_start": 33784,
                    "column_end": 60,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\bytes_mut.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 989,
                    "line_start": 989,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 20,
                        "text": "        self.len = self.len.checked_sub(count).unwrap_or(0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `partial_cmp` on an `Ord` type\n    --> src\\bytes_mut.rs:1285:1\n     |\n1285 | /  impl PartialOrd for BytesMut {\n1286 | |      fn partial_cmp(&self, other: &BytesMut) -> Option<cmp::Ordering> {\n     | | ______________________________________________________________________-\n1287 | ||         self.as_slice().partial_cmp(other.as_slice())\n1288 | ||     }\n     | ||_____- help: change this to: `{ Some(self.cmp(other)) }`\n1289 | |  }\n     | |__^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 41781,
                        "byte_start": 41720,
                        "column_end": 6,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\bytes_mut.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1288,
                        "line_start": 1286,
                        "suggested_replacement": "{ Some(self.cmp(other)) }",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 70,
                            "text": "    fn partial_cmp(&self, other: &BytesMut) -> Option<cmp::Ordering> {"
                          },
                          {
                            "highlight_end": 54,
                            "highlight_start": 1,
                            "text": "        self.as_slice().partial_cmp(other.as_slice())"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_partial_ord_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `partial_cmp` on an `Ord` type",
                "spans": [
                  {
                    "byte_end": 41783,
                    "byte_start": 41620,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\bytes_mut.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1289,
                    "line_start": 1285,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 1,
                        "text": "impl PartialOrd for BytesMut {"
                      },
                      {
                        "highlight_end": 71,
                        "highlight_start": 1,
                        "text": "    fn partial_cmp(&self, other: &BytesMut) -> Option<cmp::Ordering> {"
                      },
                      {
                        "highlight_end": 54,
                        "highlight_start": 1,
                        "text": "        self.as_slice().partial_cmp(other.as_slice())"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casting raw pointers to the same type and constness is unnecessary (`*mut bytes_mut::Shared` -> `*mut bytes_mut::Shared`)\n    --> src\\bytes_mut.rs:1722:26\n     |\n1722 |             let shared = bytes.data as *mut Shared;\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `bytes.data`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n     = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unnecessary_cast)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 53065,
                        "byte_start": 53040,
                        "column_end": 51,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "src\\bytes_mut.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1722,
                        "line_start": 1722,
                        "suggested_replacement": "bytes.data",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 26,
                            "text": "            let shared = bytes.data as *mut Shared;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_cast",
                  "explanation": null
                },
                "level": "warning",
                "message": "casting raw pointers to the same type and constness is unnecessary (`*mut bytes_mut::Shared` -> `*mut bytes_mut::Shared`)",
                "spans": [
                  {
                    "byte_end": 53065,
                    "byte_start": 53040,
                    "column_end": 51,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\bytes_mut.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1722,
                    "line_start": 1722,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 26,
                        "text": "            let shared = bytes.data as *mut Shared;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpwjxcx06w/bytes-1.10.1#bytes@1.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpwjxcx06w\\bytes-1.10.1\\target\\debug\\deps\\libbytes-63f9c325d5c38cb9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 43
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ansi_term",
                    "version": "0.12.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0139",
                    "package": "ansi_term",
                    "title": "ansi_term is Unmaintained",
                    "description": "The maintainer has advised that this crate is deprecated and will not receive any maintenance.\n\nThe crate does not seem to have much dependencies and may or may not be ok to use as-is.\n\nLast release seems to have been three years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ansiterm](https://crates.io/crates/ansiterm)\n - [anstyle](https://github.com/epage/anstyle)\n - [console](https://crates.io/crates/console)\n - [nu-ansi-term](https://crates.io/crates/nu-ansi-term)\n - [owo-colors](https://crates.io/crates/owo-colors)\n - [stylish](https://crates.io/crates/stylish)\n - [yansi](https://crates.io/crates/yansi)\n\n## Dependency Specific Migration(s)\n\n - [structopt, clap2](https://github.com/clap-rs/clap/discussions/4172)",
                    "date": "2021-08-18",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/ogham/rust-ansi-term/issues/72",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "bytes",
          "version": "1.10.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/bytes/latest/bytes/all.html \"show sidebar\")\n# Crate bytesCopy item path\n[Settings](https://docs.rs/bytes/latest/settings.html)\n[Help](https://docs.rs/bytes/latest/help.html)\nSummary[Source](https://docs.rs/bytes/latest/src/bytes/lib.rs.html#1-199)\nExpand description\nProvides abstractions for working with bytes.\nThe `bytes` crate provides an efficient byte buffer structure ([`Bytes`](https://docs.rs/bytes/latest/bytes/struct.Bytes.html \"struct bytes::Bytes\")) and traits for working with buffer implementations ([`Buf`](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\"), [`BufMut`](https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html \"trait bytes::buf::BufMut\")).\n## [\u00a7](https://docs.rs/bytes/latest/bytes/#bytes)`Bytes`\n`Bytes` is an efficient container for storing and operating on contiguous slices of memory. It is intended for use primarily in networking code, but could have applications elsewhere as well.\n`Bytes` values facilitate zero-copy network programming by allowing multiple `Bytes` objects to point to the same underlying memory. This is managed by using a reference count to track when the memory is no longer needed and can be freed.\nA `Bytes` handle can be created directly from an existing byte store (such as `&[u8]` or `Vec<u8>`), but usually a `BytesMut` is used first and written to. For example:\n```\nuse bytes::{BytesMut, BufMut};\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\nbuf.put_u16(1234);\nlet a = buf.split();\nassert_eq!(a, b\"hello world\\x04\\xD2\"[..]);\nbuf.put(&b\"goodbye world\"[..]);\nlet b = buf.split();\nassert_eq!(b, b\"goodbye world\"[..]);\nassert_eq!(buf.capacity(), 998);\n```\n\nIn the above example, only a single buffer of 1024 is allocated. The handles `a` and `b` will share the underlying buffer and maintain indices tracking the view into the buffer represented by the handle.\nSee the [struct docs](https://docs.rs/bytes/latest/bytes/struct.Bytes.html \"struct bytes::Bytes\") for more details.\n## [\u00a7](https://docs.rs/bytes/latest/bytes/#buf-bufmut)`Buf`, `BufMut`\nThese two traits provide read and write access to buffers. The underlying storage may or may not be in contiguous memory. For example, `Bytes` is a buffer that guarantees contiguous memory, but a [rope](https://en.wikipedia.org/wiki/Rope_\\(data_structure\\)) stores the bytes in disjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current position in the underlying byte storage. When bytes are read or written, the cursor is advanced.\n### [\u00a7](https://docs.rs/bytes/latest/bytes/#relation-with-read-and-write)Relation with `Read` and `Write`\nAt first glance, it may seem that `Buf` and `BufMut` overlap in functionality with [`std::io::Read`](https://doc.rust-lang.org/nightly/std/io/trait.Read.html \"trait std::io::Read\") and [`std::io::Write`](https://doc.rust-lang.org/nightly/std/io/trait.Write.html \"trait std::io::Write\"). However, they serve different purposes. A buffer is the value that is provided as an argument to `Read::read` and `Write::write`. `Read` and `Write` may then perform a syscall, which has the potential of failing. Operations on `Buf` and `BufMut` are infallible.\n## Re-exports[\u00a7](https://docs.rs/bytes/latest/bytes/#reexports)\n\n`pub use crate::buf::Buf[](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\");`\n\n\n`pub use crate::buf::BufMut[](https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html \"trait bytes::buf::BufMut\");`\n\n## Modules[\u00a7](https://docs.rs/bytes/latest/bytes/#modules)\n\n[buf](https://docs.rs/bytes/latest/bytes/buf/index.html \"mod bytes::buf\")\n    Utilities for working with buffers.\n## Structs[\u00a7](https://docs.rs/bytes/latest/bytes/#structs)\n\n[Bytes](https://docs.rs/bytes/latest/bytes/struct.Bytes.html \"struct bytes::Bytes\")\n    A cheaply cloneable and sliceable chunk of contiguous memory.\n\n[BytesMut](https://docs.rs/bytes/latest/bytes/struct.BytesMut.html \"struct bytes::BytesMut\")\n    A unique reference to a contiguous slice of memory.\n\n[TryGetError](https://docs.rs/bytes/latest/bytes/struct.TryGetError.html \"struct bytes::TryGetError\")\n    Error type for the `try_get_` methods of [`Buf`](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\"). Indicates that there were not enough remaining bytes in the buffer while attempting to get a value from a [`Buf`](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\") with one of the `try_get_` methods.\n",
            "markdown_with_citations": "[](https://docs.rs/bytes/latest/bytes/all.html \"show sidebar\")\n# Crate bytesCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nProvides abstractions for working with bytes.\nThe `bytes` crate provides an efficient byte buffer structure (`Bytes`\u27e84\u27e9) and traits for working with buffer implementations (`Buf`\u27e85\u27e9, `BufMut`\u27e86\u27e9).\n## \u00a7\u27e87\u27e9`Bytes`\n`Bytes` is an efficient container for storing and operating on contiguous slices of memory. It is intended for use primarily in networking code, but could have applications elsewhere as well.\n`Bytes` values facilitate zero-copy network programming by allowing multiple `Bytes` objects to point to the same underlying memory. This is managed by using a reference count to track when the memory is no longer needed and can be freed.\nA `Bytes` handle can be created directly from an existing byte store (such as `&[u8]` or `Vec<u8>`), but usually a `BytesMut` is used first and written to. For example:\n```\nuse bytes::{BytesMut, BufMut};\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\nbuf.put_u16(1234);\nlet a = buf.split();\nassert_eq!(a, b\"hello world\\x04\\xD2\"[..]);\nbuf.put(&b\"goodbye world\"[..]);\nlet b = buf.split();\nassert_eq!(b, b\"goodbye world\"[..]);\nassert_eq!(buf.capacity(), 998);\n```\n\nIn the above example, only a single buffer of 1024 is allocated. The handles `a` and `b` will share the underlying buffer and maintain indices tracking the view into the buffer represented by the handle.\nSee the struct docs\u27e84\u27e9 for more details.\n## \u00a7\u27e88\u27e9`Buf`, `BufMut`\nThese two traits provide read and write access to buffers. The underlying storage may or may not be in contiguous memory. For example, `Bytes` is a buffer that guarantees contiguous memory, but a rope\u27e89\u27e9) stores the bytes in disjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current position in the underlying byte storage. When bytes are read or written, the cursor is advanced.\n### \u00a7\u27e810\u27e9Relation with `Read` and `Write`\nAt first glance, it may seem that `Buf` and `BufMut` overlap in functionality with `std::io::Read`\u27e811\u27e9 and `std::io::Write`\u27e812\u27e9. However, they serve different purposes. A buffer is the value that is provided as an argument to `Read::read` and `Write::write`. `Read` and `Write` may then perform a syscall, which has the potential of failing. Operations on `Buf` and `BufMut` are infallible.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use crate::buf::Buf[](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\");`\n\n\n`pub use crate::buf::BufMut[](https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html \"trait bytes::buf::BufMut\");`\n\n## Modules\u00a7\u27e814\u27e9\n\nbuf\u27e815\u27e9\n    Utilities for working with buffers.\n## Structs\u00a7\u27e816\u27e9\n\nBytes\u27e84\u27e9\n    A cheaply cloneable and sliceable chunk of contiguous memory.\n\nBytesMut\u27e817\u27e9\n    A unique reference to a contiguous slice of memory.\n\nTryGetError\u27e818\u27e9\n    Error type for the `try_get_` methods of `Buf`\u27e85\u27e9. Indicates that there were not enough remaining bytes in the buffer while attempting to get a value from a `Buf`\u27e85\u27e9 with one of the `try_get_` methods.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bytes/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bytes/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bytes/latest/src/bytes/lib.rs.html#1-199: Source\n\u27e84\u27e9 https://docs.rs/bytes/latest/bytes/struct.Bytes.html: struct bytes::Bytes - `Bytes`\n\u27e85\u27e9 https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html: trait bytes::buf::Buf - `Buf`\n\u27e86\u27e9 https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html: trait bytes::buf::BufMut - `BufMut`\n\u27e87\u27e9 https://docs.rs/bytes/latest/bytes/#bytes: \u00a7\n\u27e88\u27e9 https://docs.rs/bytes/latest/bytes/#buf-bufmut: \u00a7\n\u27e89\u27e9 https://en.wikipedia.org/wiki/Rope_\\(data_structure\\: rope\n\u27e810\u27e9 https://docs.rs/bytes/latest/bytes/#relation-with-read-and-write: \u00a7\n\u27e811\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Read.html: trait std::io::Read - `std::io::Read`\n\u27e812\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Write.html: trait std::io::Write - `std::io::Write`\n\u27e813\u27e9 https://docs.rs/bytes/latest/bytes/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/bytes/latest/bytes/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/bytes/latest/bytes/buf/index.html: mod bytes::buf - buf\n\u27e816\u27e9 https://docs.rs/bytes/latest/bytes/#structs: \u00a7\n\u27e817\u27e9 https://docs.rs/bytes/latest/bytes/struct.BytesMut.html: struct bytes::BytesMut - BytesMut\n\u27e818\u27e9 https://docs.rs/bytes/latest/bytes/struct.TryGetError.html: struct bytes::TryGetError - TryGetError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "bytes",
          "version": "1.10.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/bytes/latest/bytes/all.html \"show sidebar\")\n# Crate bytesCopy item path\n[Settings](https://docs.rs/bytes/latest/settings.html)\n[Help](https://docs.rs/bytes/latest/help.html)\nSummary[Source](https://docs.rs/bytes/latest/src/bytes/lib.rs.html#1-199)\nExpand description\nProvides abstractions for working with bytes.\nThe `bytes` crate provides an efficient byte buffer structure ([`Bytes`](https://docs.rs/bytes/latest/bytes/struct.Bytes.html \"struct bytes::Bytes\")) and traits for working with buffer implementations ([`Buf`](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\"), [`BufMut`](https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html \"trait bytes::buf::BufMut\")).\n## [\u00a7](https://docs.rs/bytes/latest/bytes/#bytes)`Bytes`\n`Bytes` is an efficient container for storing and operating on contiguous slices of memory. It is intended for use primarily in networking code, but could have applications elsewhere as well.\n`Bytes` values facilitate zero-copy network programming by allowing multiple `Bytes` objects to point to the same underlying memory. This is managed by using a reference count to track when the memory is no longer needed and can be freed.\nA `Bytes` handle can be created directly from an existing byte store (such as `&[u8]` or `Vec<u8>`), but usually a `BytesMut` is used first and written to. For example:\n```\nuse bytes::{BytesMut, BufMut};\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\nbuf.put_u16(1234);\nlet a = buf.split();\nassert_eq!(a, b\"hello world\\x04\\xD2\"[..]);\nbuf.put(&b\"goodbye world\"[..]);\nlet b = buf.split();\nassert_eq!(b, b\"goodbye world\"[..]);\nassert_eq!(buf.capacity(), 998);\n```\n\nIn the above example, only a single buffer of 1024 is allocated. The handles `a` and `b` will share the underlying buffer and maintain indices tracking the view into the buffer represented by the handle.\nSee the [struct docs](https://docs.rs/bytes/latest/bytes/struct.Bytes.html \"struct bytes::Bytes\") for more details.\n## [\u00a7](https://docs.rs/bytes/latest/bytes/#buf-bufmut)`Buf`, `BufMut`\nThese two traits provide read and write access to buffers. The underlying storage may or may not be in contiguous memory. For example, `Bytes` is a buffer that guarantees contiguous memory, but a [rope](https://en.wikipedia.org/wiki/Rope_\\(data_structure\\)) stores the bytes in disjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current position in the underlying byte storage. When bytes are read or written, the cursor is advanced.\n### [\u00a7](https://docs.rs/bytes/latest/bytes/#relation-with-read-and-write)Relation with `Read` and `Write`\nAt first glance, it may seem that `Buf` and `BufMut` overlap in functionality with [`std::io::Read`](https://doc.rust-lang.org/nightly/std/io/trait.Read.html \"trait std::io::Read\") and [`std::io::Write`](https://doc.rust-lang.org/nightly/std/io/trait.Write.html \"trait std::io::Write\"). However, they serve different purposes. A buffer is the value that is provided as an argument to `Read::read` and `Write::write`. `Read` and `Write` may then perform a syscall, which has the potential of failing. Operations on `Buf` and `BufMut` are infallible.\n## Re-exports[\u00a7](https://docs.rs/bytes/latest/bytes/#reexports)\n\n`pub use crate::buf::Buf[](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\");`\n\n\n`pub use crate::buf::BufMut[](https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html \"trait bytes::buf::BufMut\");`\n\n## Modules[\u00a7](https://docs.rs/bytes/latest/bytes/#modules)\n\n[buf](https://docs.rs/bytes/latest/bytes/buf/index.html \"mod bytes::buf\")\n    Utilities for working with buffers.\n## Structs[\u00a7](https://docs.rs/bytes/latest/bytes/#structs)\n\n[Bytes](https://docs.rs/bytes/latest/bytes/struct.Bytes.html \"struct bytes::Bytes\")\n    A cheaply cloneable and sliceable chunk of contiguous memory.\n\n[BytesMut](https://docs.rs/bytes/latest/bytes/struct.BytesMut.html \"struct bytes::BytesMut\")\n    A unique reference to a contiguous slice of memory.\n\n[TryGetError](https://docs.rs/bytes/latest/bytes/struct.TryGetError.html \"struct bytes::TryGetError\")\n    Error type for the `try_get_` methods of [`Buf`](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\"). Indicates that there were not enough remaining bytes in the buffer while attempting to get a value from a [`Buf`](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\") with one of the `try_get_` methods.\n",
            "markdown_with_citations": "[](https://docs.rs/bytes/latest/bytes/all.html \"show sidebar\")\n# Crate bytesCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nProvides abstractions for working with bytes.\nThe `bytes` crate provides an efficient byte buffer structure (`Bytes`\u27e84\u27e9) and traits for working with buffer implementations (`Buf`\u27e85\u27e9, `BufMut`\u27e86\u27e9).\n## \u00a7\u27e87\u27e9`Bytes`\n`Bytes` is an efficient container for storing and operating on contiguous slices of memory. It is intended for use primarily in networking code, but could have applications elsewhere as well.\n`Bytes` values facilitate zero-copy network programming by allowing multiple `Bytes` objects to point to the same underlying memory. This is managed by using a reference count to track when the memory is no longer needed and can be freed.\nA `Bytes` handle can be created directly from an existing byte store (such as `&[u8]` or `Vec<u8>`), but usually a `BytesMut` is used first and written to. For example:\n```\nuse bytes::{BytesMut, BufMut};\nlet mut buf = BytesMut::with_capacity(1024);\nbuf.put(&b\"hello world\"[..]);\nbuf.put_u16(1234);\nlet a = buf.split();\nassert_eq!(a, b\"hello world\\x04\\xD2\"[..]);\nbuf.put(&b\"goodbye world\"[..]);\nlet b = buf.split();\nassert_eq!(b, b\"goodbye world\"[..]);\nassert_eq!(buf.capacity(), 998);\n```\n\nIn the above example, only a single buffer of 1024 is allocated. The handles `a` and `b` will share the underlying buffer and maintain indices tracking the view into the buffer represented by the handle.\nSee the struct docs\u27e84\u27e9 for more details.\n## \u00a7\u27e88\u27e9`Buf`, `BufMut`\nThese two traits provide read and write access to buffers. The underlying storage may or may not be in contiguous memory. For example, `Bytes` is a buffer that guarantees contiguous memory, but a rope\u27e89\u27e9) stores the bytes in disjoint chunks. `Buf` and `BufMut` maintain cursors tracking the current position in the underlying byte storage. When bytes are read or written, the cursor is advanced.\n### \u00a7\u27e810\u27e9Relation with `Read` and `Write`\nAt first glance, it may seem that `Buf` and `BufMut` overlap in functionality with `std::io::Read`\u27e811\u27e9 and `std::io::Write`\u27e812\u27e9. However, they serve different purposes. A buffer is the value that is provided as an argument to `Read::read` and `Write::write`. `Read` and `Write` may then perform a syscall, which has the potential of failing. Operations on `Buf` and `BufMut` are infallible.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use crate::buf::Buf[](https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html \"trait bytes::buf::Buf\");`\n\n\n`pub use crate::buf::BufMut[](https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html \"trait bytes::buf::BufMut\");`\n\n## Modules\u00a7\u27e814\u27e9\n\nbuf\u27e815\u27e9\n    Utilities for working with buffers.\n## Structs\u00a7\u27e816\u27e9\n\nBytes\u27e84\u27e9\n    A cheaply cloneable and sliceable chunk of contiguous memory.\n\nBytesMut\u27e817\u27e9\n    A unique reference to a contiguous slice of memory.\n\nTryGetError\u27e818\u27e9\n    Error type for the `try_get_` methods of `Buf`\u27e85\u27e9. Indicates that there were not enough remaining bytes in the buffer while attempting to get a value from a `Buf`\u27e85\u27e9 with one of the `try_get_` methods.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bytes/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bytes/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bytes/latest/src/bytes/lib.rs.html#1-199: Source\n\u27e84\u27e9 https://docs.rs/bytes/latest/bytes/struct.Bytes.html: struct bytes::Bytes - `Bytes`\n\u27e85\u27e9 https://docs.rs/bytes/latest/bytes/buf/trait.Buf.html: trait bytes::buf::Buf - `Buf`\n\u27e86\u27e9 https://docs.rs/bytes/latest/bytes/buf/trait.BufMut.html: trait bytes::buf::BufMut - `BufMut`\n\u27e87\u27e9 https://docs.rs/bytes/latest/bytes/#bytes: \u00a7\n\u27e88\u27e9 https://docs.rs/bytes/latest/bytes/#buf-bufmut: \u00a7\n\u27e89\u27e9 https://en.wikipedia.org/wiki/Rope_\\(data_structure\\: rope\n\u27e810\u27e9 https://docs.rs/bytes/latest/bytes/#relation-with-read-and-write: \u00a7\n\u27e811\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Read.html: trait std::io::Read - `std::io::Read`\n\u27e812\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Write.html: trait std::io::Write - `std::io::Write`\n\u27e813\u27e9 https://docs.rs/bytes/latest/bytes/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/bytes/latest/bytes/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/bytes/latest/bytes/buf/index.html: mod bytes::buf - buf\n\u27e816\u27e9 https://docs.rs/bytes/latest/bytes/#structs: \u00a7\n\u27e817\u27e9 https://docs.rs/bytes/latest/bytes/struct.BytesMut.html: struct bytes::BytesMut - BytesMut\n\u27e818\u27e9 https://docs.rs/bytes/latest/bytes/struct.TryGetError.html: struct bytes::TryGetError - TryGetError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `bytes` crate provides efficient abstractions for working with byte buffers, including the `Bytes` and `BytesMut` structures for handling contiguous slices of memory with zero-copy semantics. It also offers the `Buf` and `BufMut` traits for infallible read/write operations on buffers, supporting both contiguous and non-contiguous storage. Designed primarily for networking, it enables high-performance manipulation of byte data.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Zero-Copy Networking  \n\u2705 Factual: The `bytes` crate facilitates zero-copy network programming by allowing multiple `Bytes` objects to share the same underlying memory, managed through reference counting.  \n\u274c Counterfactual: The `bytes` crate requires copying data between `Bytes` objects to ensure memory safety and does not support zero-copy operations.  \n\n---\n\n### Pair 2: Contiguous Memory Guarantees  \n\u2705 Factual: The `Bytes` struct guarantees that the underlying memory is contiguous, making it suitable for applications like networking where sequential memory access is critical.  \n\u274c Counterfactual: The `Bytes` struct stores data in disjoint chunks, similar to a rope data structure, and does not guarantee contiguous memory.  \n\n---\n\n### Pair 3: Compatibility with `Buf` and `BufMut` Traits  \n\u2705 Factual: The `Buf` and `BufMut` traits in the `bytes` crate provide infallible read and write access to buffers, maintaining cursors for tracking the current position in the underlying storage.  \n\u274c Counterfactual: The `Buf` and `BufMut` traits are designed to replace `std::io::Read` and `std::io::Write` for performing fallible I/O operations directly on buffers.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-277089d9-79de2517-1751260551",
      "timestamp": "2025-06-30T05:15:51.654028+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]