[
  {
    "execution_id": "exec-4171fff9-da03c53b-1751259531",
    "timestamp": "2025-06-30T04:58:51.989465+00:00",
    "sacred_chain": {
      "input_data": "eyre",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'eyre' -> 'eyre'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "eyre",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/eyre",
            "title": "eyre v0.6.12",
            "content": {
              "raw_markdown": "#  eyre v0.6.12\nFlexible concrete Error Reporting type built on std::error::Error with customizable Reports \n  * [ Readme ](https://crates.io/crates/eyre)\n  * [ 32 Versions ](https://crates.io/crates/eyre/versions)\n  * [ Dependencies ](https://crates.io/crates/eyre/dependencies)\n  * [ Dependents ](https://crates.io/crates/eyre/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.65.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n44.3 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add eyre\nOr add the following line to your Cargo.toml:\neyre = \"0.6.12\"\n## Documentation\n[ docs.rs/eyre ](https://docs.rs/eyre)\n## Repository\n[ github.com/eyre-rs/eyre ](https://github.com/eyre-rs/eyre)\n## Owners\n## Categories\n  * [Rust patterns](https://crates.io/categories/rust-patterns)\n\n\n[ Report crate ](https://crates.io/support?crate=eyre&inquire=crate-violation)\n### Stats Overview\n45,886,756 Downloads all time\n32 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  eyre v0.6.12\nFlexible concrete Error Reporting type built on std::error::Error with customizable Reports \n  *  Readme \u27e81\u27e9\n  *  32 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.65.0 \n MIT \u27e85\u27e9 OR  Apache-2.0 \u27e86\u27e9\n44.3 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add eyre\nOr add the following line to your Cargo.toml:\neyre = \"0.6.12\"\n## Documentation\n docs.rs/eyre \u27e87\u27e9\n## Repository\n github.com/eyre-rs/eyre \u27e88\u27e9\n## Owners\n## Categories\n  * Rust patterns\u27e89\u27e9\n\n\n Report crate \u27e810\u27e9\n### Stats Overview\n45,886,756 Downloads all time\n32 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/eyre:  Readme \n\u27e82\u27e9 https://crates.io/crates/eyre/versions:  32 Versions \n\u27e83\u27e9 https://crates.io/crates/eyre/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/eyre/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://docs.rs/eyre:  docs.rs/eyre \n\u27e88\u27e9 https://github.com/eyre-rs/eyre:  github.com/eyre-rs/eyre \n\u27e89\u27e9 https://crates.io/categories/rust-patterns: Rust patterns\n\u27e810\u27e9 https://crates.io/support?crate=eyre&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1131,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113321.8848559"
          },
          "docs_rs": {
            "url": "https://docs.rs/eyre",
            "title": "Crate eyreCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/eyre/latest/eyre/all.html \"show sidebar\")\n# Crate eyreCopy item path\n[Settings](https://docs.rs/eyre/latest/settings.html)\n[Help](https://docs.rs/eyre/latest/help.html)\nSummary[Source](https://docs.rs/eyre/latest/src/eyre/lib.rs.html#1-1322)\nExpand description\nThis library provides [`eyre::Report`](https://docs.rs/eyre/*/eyre/struct.Report.html), a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of [`anyhow`](https://github.com/dtolnay/anyhow) with support for customized error reports. For more details on customization, check out the docs on [`eyre::EyreHandler`](https://docs.rs/eyre/*/eyre/trait.EyreHandler.html).\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#custom-report-handlers)Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * [`stable-eyre`](https://github.com/eyre-rs/stable-eyre): Switches the backtrace type from `std`\u2019s to `backtrace-rs`\u2019s so that it can be captured on stable. The report format is identical to `DefaultHandler`\u2019s report format.\n  * [`color-eyre`](https://github.com/eyre-rs/color-eyre): Captures a `backtrace::Backtrace` and a `tracing_error::SpanTrace`. Provides a `Section` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of [`color-backtrace`](https://github.com/athre0z/color-backtrace), [`color-spantrace`](https://github.com/eyre-rs/color-spantrace), and `ansi_term`. Check out the README on [`color-eyre`](https://github.com/eyre-rs/color-eyre) for details on the report format.\n  * [`simple-eyre`](https://github.com/eyre-rs/simple-eyre): A minimal `EyreHandler` that captures no additional information, for when you do not wish to capture `Backtrace`s with errors.\n  * [`jane-eyre`](https://github.com/yaahc/jane-eyre): A report handler crate that exists purely for the pun. Currently just re-exports `color-eyre`.\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations)Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version[1](https://docs.rs/eyre/latest/eyre/#fn1).\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using `eyre::Report` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn\u2019t mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into undetectable runtime breakage.\n  * If many of your errors are constructed from strings, you encourage your users to use string comparison for reacting to specific errors, which is brittle and turns updating error messages into potentially undetectable runtime breakage.\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#details)Details\n  * Use `Result<T, eyre::Report>`, or equivalently `eyre::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error` trait.\n```\nuse eyre::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\nuse eyre::{WrapErr, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().wrap_err(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .wrap_err_with(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be done by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in [`std::backtrace`](https://doc.rust-lang.org/std/backtrace/index.html#environment-variables):\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\nThe tracking issue for this feature is [rust-lang/rust#53487](https://github.com/rust-lang/rust/issues/53487).\n  * Eyre works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like [thiserror](https://github.com/dtolnay/thiserror).\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `eyre!` macro, which supports string interpolation and produces an `eyre::Report`.\n```\nreturn Err(eyre!(\"Missing attribute: {}\", missing));\n```\n\n  * On newer versions of the compiler (i.e. 1.58 and later) this macro also supports format args captures.\n```\nreturn Err(eyre!(\"Missing attribute: {missing}\"));\n```\n\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#no-std-support)No-std support\nNo-std support was removed in 2020 in [commit 608a16a](https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5) due to unaddressed upstream breakages.\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#comparison-to-failure)Comparison to failure\nThe `eyre::Report` type works something like `failure::Error`, but unlike failure ours is built around the standard library\u2019s `std::error::Error` trait rather than a separate trait `failure::Fail`. The standard library has adopted the necessary improvements for this to be possible as part of [RFC 2504](https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md).\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#comparison-to-thiserror)Comparison to thiserror\nUse `eyre` if you don\u2019t think you\u2019ll do anything with an error other than report it. This is common in application code. Use `thiserror` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don\u2019t know how your users will handle your errors.\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#compatibility-with-anyhow)Compatibility with `anyhow`\nThis crate does its best to be usable as a drop in replacement of `anyhow` and vice-versa by re-exporting all of the renamed APIs with the names used in `anyhow`, though there are some differences still.\n##### [\u00a7](https://docs.rs/eyre/latest/eyre/#context-and-option)`Context` and `Option`\nAs part of renaming `Context` to `WrapErr` we also intentionally do not implement `WrapErr` for `Option`. This decision was made because `wrap_err` implies that you\u2019re creating a new error that saves the old error as its `source`. With `Option` there is no source error to wrap, so `wrap_err` ends up being somewhat meaningless.\nInstead `eyre` offers [`OptionExt::ok_or_eyre`](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre \"method eyre::OptionExt::ok_or_eyre\") to yield _static_ errors from `None`, and intends for users to use the combinator functions provided by `std`, converting `Option`s to `Result`s, for _dynamic_ errors. So where you would write this with anyhow:\n```\nuse anyhow::Context;\nlet opt: Option<()> = None;\nlet result_static = opt.context(\"static error message\");\nlet result_dynamic = opt.with_context(|| format!(\"{} error message\", \"dynamic\"));\n```\n\nWith `eyre` we want users to write:\n```\nuse eyre::{eyre, OptionExt, Result};\nlet opt: Option<()> = None;\nlet result_static: Result<()> = opt.ok_or_eyre(\"static error message\");\nlet result_dynamic: Result<()> = opt.ok_or_else(|| eyre!(\"{} error message\", \"dynamic\"));\n```\n\n**NOTE** : However, to help with porting we do provide a `ContextCompat` trait which implements `context` for options which you can import to make existing `.context` calls compile.\n  1. example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361> [\u21a9](https://docs.rs/eyre/latest/eyre/#fnref1)\n\n\n## Re-exports[\u00a7](https://docs.rs/eyre/latest/eyre/#reexports)\n\n`pub use Report[](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\") as Error;`\n\n\n`pub use WrapErr[](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\") as Context;`\n\n## Macros[\u00a7](https://docs.rs/eyre/latest/eyre/#macros)\n\n[anyhow](https://docs.rs/eyre/latest/eyre/macro.anyhow.html \"macro eyre::anyhow\")\n    Compatibility re-export of `eyre` for interop with `anyhow` Construct an ad-hoc error from a string.\n\n[bail](https://docs.rs/eyre/latest/eyre/macro.bail.html \"macro eyre::bail\")\n    Return early with an error.\n\n[ensure](https://docs.rs/eyre/latest/eyre/macro.ensure.html \"macro eyre::ensure\")\n    Return early with an error if a condition is not satisfied.\n\n[eyre](https://docs.rs/eyre/latest/eyre/macro.eyre.html \"macro eyre::eyre\")\n    Construct an ad-hoc error from a string.\n\n[format_err](https://docs.rs/eyre/latest/eyre/macro.format_err.html \"macro eyre::format_err\")\n    Construct an ad-hoc error from a string.\n## Structs[\u00a7](https://docs.rs/eyre/latest/eyre/#structs)\n\n[Chain](https://docs.rs/eyre/latest/eyre/struct.Chain.html \"struct eyre::Chain\")\n    Iterator of a chain of source errors.\n\n[DefaultHandler](https://docs.rs/eyre/latest/eyre/struct.DefaultHandler.html \"struct eyre::DefaultHandler\")\n    The default provided error report handler for `eyre::Report`.\n\n[InstallError](https://docs.rs/eyre/latest/eyre/struct.InstallError.html \"struct eyre::InstallError\")\n    Error indicating that `set_hook` was unable to install the provided ErrorHook\n\n[Report](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\")\n    The core error reporting type of the library, a wrapper around a dynamic error reporting type.\n## Traits[\u00a7](https://docs.rs/eyre/latest/eyre/#traits)\n\n[ContextCompat](https://docs.rs/eyre/latest/eyre/trait.ContextCompat.html \"trait eyre::ContextCompat\")\n    Provides the `context` method for `Option` when porting from `anyhow`\n\n[EyreHandler](https://docs.rs/eyre/latest/eyre/trait.EyreHandler.html \"trait eyre::EyreHandler\")\n    Error Report Handler trait for customizing `eyre::Report`\n\n[OptionExt](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html \"trait eyre::OptionExt\")\n    Provides the [`ok_or_eyre`](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre \"method eyre::OptionExt::ok_or_eyre\") method for [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\n\n[WrapErr](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\")\n    Provides the `wrap_err` method for `Result`.\n## Functions[\u00a7](https://docs.rs/eyre/latest/eyre/#functions)\n\n[Ok](https://docs.rs/eyre/latest/eyre/fn.Ok.html \"fn eyre::Ok\")\n    Equivalent to Ok::<_, eyre::Error>(value).\n\n[set_hook](https://docs.rs/eyre/latest/eyre/fn.set_hook.html \"fn eyre::set_hook\")\n    Install the provided error hook for constructing EyreHandlers when converting Errors to Reports\n## Type Aliases[\u00a7](https://docs.rs/eyre/latest/eyre/#types)\n\n[Result](https://docs.rs/eyre/latest/eyre/type.Result.html \"type eyre::Result\")\n    type alias for `Result<T, Report>`\n",
              "markdown_with_citations": "[](https://docs.rs/eyre/latest/eyre/all.html \"show sidebar\")\n# Crate eyreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis library provides `eyre::Report`\u27e84\u27e9, a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of `anyhow`\u27e85\u27e9 with support for customized error reports. For more details on customization, check out the docs on `eyre::EyreHandler`\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * `stable-eyre`\u27e88\u27e9: Switches the backtrace type from `std`\u2019s to `backtrace-rs`\u2019s so that it can be captured on stable. The report format is identical to `DefaultHandler`\u2019s report format.\n  * `color-eyre`\u27e89\u27e9: Captures a `backtrace::Backtrace` and a `tracing_error::SpanTrace`. Provides a `Section` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of `color-backtrace`\u27e810\u27e9, `color-spantrace`\u27e811\u27e9, and `ansi_term`. Check out the README on `color-eyre`\u27e89\u27e9 for details on the report format.\n  * `simple-eyre`\u27e812\u27e9: A minimal `EyreHandler` that captures no additional information, for when you do not wish to capture `Backtrace`s with errors.\n  * `jane-eyre`\u27e813\u27e9: A report handler crate that exists purely for the pun. Currently just re-exports `color-eyre`.\n\n\n### \u00a7\u27e814\u27e9Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version1\u27e815\u27e9.\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using `eyre::Report` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn\u2019t mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into undetectable runtime breakage.\n  * If many of your errors are constructed from strings, you encourage your users to use string comparison for reacting to specific errors, which is brittle and turns updating error messages into potentially undetectable runtime breakage.\n\n\n### \u00a7\u27e816\u27e9Details\n  * Use `Result<T, eyre::Report>`, or equivalently `eyre::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error` trait.\n```\nuse eyre::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\nuse eyre::{WrapErr, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().wrap_err(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .wrap_err_with(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be done by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in `std::backtrace`\u27e817\u27e9:\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\nThe tracking issue for this feature is rust-lang/rust#53487\u27e818\u27e9.\n  * Eyre works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like thiserror\u27e819\u27e9.\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `eyre!` macro, which supports string interpolation and produces an `eyre::Report`.\n```\nreturn Err(eyre!(\"Missing attribute: {}\", missing));\n```\n\n  * On newer versions of the compiler (i.e. 1.58 and later) this macro also supports format args captures.\n```\nreturn Err(eyre!(\"Missing attribute: {missing}\"));\n```\n\n\n\n### \u00a7\u27e820\u27e9No-std support\nNo-std support was removed in 2020 in commit 608a16a\u27e821\u27e9 due to unaddressed upstream breakages.\n### \u00a7\u27e822\u27e9Comparison to failure\nThe `eyre::Report` type works something like `failure::Error`, but unlike failure ours is built around the standard library\u2019s `std::error::Error` trait rather than a separate trait `failure::Fail`. The standard library has adopted the necessary improvements for this to be possible as part of RFC 2504\u27e823\u27e9.\n### \u00a7\u27e824\u27e9Comparison to thiserror\nUse `eyre` if you don\u2019t think you\u2019ll do anything with an error other than report it. This is common in application code. Use `thiserror` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don\u2019t know how your users will handle your errors.\n### \u00a7\u27e825\u27e9Compatibility with `anyhow`\nThis crate does its best to be usable as a drop in replacement of `anyhow` and vice-versa by re-exporting all of the renamed APIs with the names used in `anyhow`, though there are some differences still.\n##### \u00a7\u27e826\u27e9`Context` and `Option`\nAs part of renaming `Context` to `WrapErr` we also intentionally do not implement `WrapErr` for `Option`. This decision was made because `wrap_err` implies that you\u2019re creating a new error that saves the old error as its `source`. With `Option` there is no source error to wrap, so `wrap_err` ends up being somewhat meaningless.\nInstead `eyre` offers `OptionExt::ok_or_eyre`\u27e827\u27e9 to yield _static_ errors from `None`, and intends for users to use the combinator functions provided by `std`, converting `Option`s to `Result`s, for _dynamic_ errors. So where you would write this with anyhow:\n```\nuse anyhow::Context;\nlet opt: Option<()> = None;\nlet result_static = opt.context(\"static error message\");\nlet result_dynamic = opt.with_context(|| format!(\"{} error message\", \"dynamic\"));\n```\n\nWith `eyre` we want users to write:\n```\nuse eyre::{eyre, OptionExt, Result};\nlet opt: Option<()> = None;\nlet result_static: Result<()> = opt.ok_or_eyre(\"static error message\");\nlet result_dynamic: Result<()> = opt.ok_or_else(|| eyre!(\"{} error message\", \"dynamic\"));\n```\n\n**NOTE** : However, to help with porting we do provide a `ContextCompat` trait which implements `context` for options which you can import to make existing `.context` calls compile.\n  1. example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361> \u21a9\u27e828\u27e9\n\n\n## Re-exports\u00a7\u27e829\u27e9\n\n`pub use Report[](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\") as Error;`\n\n\n`pub use WrapErr[](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\") as Context;`\n\n## Macros\u00a7\u27e830\u27e9\n\nanyhow\u27e831\u27e9\n    Compatibility re-export of `eyre` for interop with `anyhow` Construct an ad-hoc error from a string.\n\nbail\u27e832\u27e9\n    Return early with an error.\n\nensure\u27e833\u27e9\n    Return early with an error if a condition is not satisfied.\n\neyre\u27e834\u27e9\n    Construct an ad-hoc error from a string.\n\nformat_err\u27e835\u27e9\n    Construct an ad-hoc error from a string.\n## Structs\u00a7\u27e836\u27e9\n\nChain\u27e837\u27e9\n    Iterator of a chain of source errors.\n\nDefaultHandler\u27e838\u27e9\n    The default provided error report handler for `eyre::Report`.\n\nInstallError\u27e839\u27e9\n    Error indicating that `set_hook` was unable to install the provided ErrorHook\n\nReport\u27e840\u27e9\n    The core error reporting type of the library, a wrapper around a dynamic error reporting type.\n## Traits\u00a7\u27e841\u27e9\n\nContextCompat\u27e842\u27e9\n    Provides the `context` method for `Option` when porting from `anyhow`\n\nEyreHandler\u27e843\u27e9\n    Error Report Handler trait for customizing `eyre::Report`\n\nOptionExt\u27e844\u27e9\n    Provides the `ok_or_eyre`\u27e827\u27e9 method for `Option`\u27e845\u27e9.\n\nWrapErr\u27e846\u27e9\n    Provides the `wrap_err` method for `Result`.\n## Functions\u00a7\u27e847\u27e9\n\nOk\u27e848\u27e9\n    Equivalent to Ok::<_, eyre::Error>(value).\n\nset_hook\u27e849\u27e9\n    Install the provided error hook for constructing EyreHandlers when converting Errors to Reports\n## Type Aliases\u00a7\u27e850\u27e9\n\nResult\u27e851\u27e9\n    type alias for `Result<T, Report>`\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/eyre/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/eyre/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/eyre/latest/src/eyre/lib.rs.html#1-1322: Source\n\u27e84\u27e9 https://docs.rs/eyre/*/eyre/struct.Report.html: `eyre::Report`\n\u27e85\u27e9 https://github.com/dtolnay/anyhow: `anyhow`\n\u27e86\u27e9 https://docs.rs/eyre/*/eyre/trait.EyreHandler.html: `eyre::EyreHandler`\n\u27e87\u27e9 https://docs.rs/eyre/latest/eyre/#custom-report-handlers: \u00a7\n\u27e88\u27e9 https://github.com/eyre-rs/stable-eyre: `stable-eyre`\n\u27e89\u27e9 https://github.com/eyre-rs/color-eyre: `color-eyre`\n\u27e810\u27e9 https://github.com/athre0z/color-backtrace: `color-backtrace`\n\u27e811\u27e9 https://github.com/eyre-rs/color-spantrace: `color-spantrace`\n\u27e812\u27e9 https://github.com/eyre-rs/simple-eyre: `simple-eyre`\n\u27e813\u27e9 https://github.com/yaahc/jane-eyre: `jane-eyre`\n\u27e814\u27e9 https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations: \u00a7\n\u27e815\u27e9 https://docs.rs/eyre/latest/eyre/#fn1: 1\n\u27e816\u27e9 https://docs.rs/eyre/latest/eyre/#details: \u00a7\n\u27e817\u27e9 https://doc.rust-lang.org/std/backtrace/index.html#environment-variables: `std::backtrace`\n\u27e818\u27e9 https://github.com/rust-lang/rust/issues/53487: rust-lang/rust#53487\n\u27e819\u27e9 https://github.com/dtolnay/thiserror: thiserror\n\u27e820\u27e9 https://docs.rs/eyre/latest/eyre/#no-std-support: \u00a7\n\u27e821\u27e9 https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5: commit 608a16a\n\u27e822\u27e9 https://docs.rs/eyre/latest/eyre/#comparison-to-failure: \u00a7\n\u27e823\u27e9 https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md: RFC 2504\n\u27e824\u27e9 https://docs.rs/eyre/latest/eyre/#comparison-to-thiserror: \u00a7\n\u27e825\u27e9 https://docs.rs/eyre/latest/eyre/#compatibility-with-anyhow: \u00a7\n\u27e826\u27e9 https://docs.rs/eyre/latest/eyre/#context-and-option: \u00a7\n\u27e827\u27e9 https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre: method eyre::OptionExt::ok_or_eyre - `OptionExt::ok_or_eyre`\n\u27e828\u27e9 https://docs.rs/eyre/latest/eyre/#fnref1: \u21a9\n\u27e829\u27e9 https://docs.rs/eyre/latest/eyre/#reexports: \u00a7\n\u27e830\u27e9 https://docs.rs/eyre/latest/eyre/#macros: \u00a7\n\u27e831\u27e9 https://docs.rs/eyre/latest/eyre/macro.anyhow.html: macro eyre::anyhow - anyhow\n\u27e832\u27e9 https://docs.rs/eyre/latest/eyre/macro.bail.html: macro eyre::bail - bail\n\u27e833\u27e9 https://docs.rs/eyre/latest/eyre/macro.ensure.html: macro eyre::ensure - ensure\n\u27e834\u27e9 https://docs.rs/eyre/latest/eyre/macro.eyre.html: macro eyre::eyre - eyre\n\u27e835\u27e9 https://docs.rs/eyre/latest/eyre/macro.format_err.html: macro eyre::format_err - format_err\n\u27e836\u27e9 https://docs.rs/eyre/latest/eyre/#structs: \u00a7\n\u27e837\u27e9 https://docs.rs/eyre/latest/eyre/struct.Chain.html: struct eyre::Chain - Chain\n\u27e838\u27e9 https://docs.rs/eyre/latest/eyre/struct.DefaultHandler.html: struct eyre::DefaultHandler - DefaultHandler\n\u27e839\u27e9 https://docs.rs/eyre/latest/eyre/struct.InstallError.html: struct eyre::InstallError - InstallError\n\u27e840\u27e9 https://docs.rs/eyre/latest/eyre/struct.Report.html: struct eyre::Report - Report\n\u27e841\u27e9 https://docs.rs/eyre/latest/eyre/#traits: \u00a7\n\u27e842\u27e9 https://docs.rs/eyre/latest/eyre/trait.ContextCompat.html: trait eyre::ContextCompat - ContextCompat\n\u27e843\u27e9 https://docs.rs/eyre/latest/eyre/trait.EyreHandler.html: trait eyre::EyreHandler - EyreHandler\n\u27e844\u27e9 https://docs.rs/eyre/latest/eyre/trait.OptionExt.html: trait eyre::OptionExt - OptionExt\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option`\n\u27e846\u27e9 https://docs.rs/eyre/latest/eyre/trait.WrapErr.html: trait eyre::WrapErr - WrapErr\n\u27e847\u27e9 https://docs.rs/eyre/latest/eyre/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/eyre/latest/eyre/fn.Ok.html: fn eyre::Ok - Ok\n\u27e849\u27e9 https://docs.rs/eyre/latest/eyre/fn.set_hook.html: fn eyre::set_hook - set_hook\n\u27e850\u27e9 https://docs.rs/eyre/latest/eyre/#types: \u00a7\n\u27e851\u27e9 https://docs.rs/eyre/latest/eyre/type.Result.html: type eyre::Result - Result\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 12979,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113322.6106957"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/eyre",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [31 releases](https://lib.rs/crates/eyre/versions)\n0.6.12 |  Jan 31, 2024   \n---|---  \n0.6.11 |  Dec 13, 2023   \n0.6.9 |  Nov 17, 2023   \n0.6.8 |  Apr 4, 2022   \n0.3.5 |  Mar 6, 2020   \n#**11** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 574829/week @ 2025-03-01 603491/week @ 2025-03-08 592596/week @ 2025-03-15 606618/week @ 2025-03-22 582411/week @ 2025-03-29 610285/week @ 2025-04-05 584654/week @ 2025-04-12 618495/week @ 2025-04-19 557692/week @ 2025-04-26 572921/week @ 2025-05-03 602413/week @ 2025-05-10 613486/week @ 2025-05-17 560596/week @ 2025-05-24 613666/week @ 2025-05-31 621180/week @ 2025-06-07 681823/week @ 2025-06-14\n**2,575,462** downloads per month Used in [**2,765** crates (1,058 directly)](https://lib.rs/crates/eyre/rev)\n**MIT/Apache**\n115KB  1.5K  SLoC\n# eyre\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/eyre-rs/eyre/workflows/Continuous%20integration/badge.svg)](https://github.com/eyre-rs/eyre/actions?query=workflow%3A%22Continuous+integration%22) [![Latest Version](https://img.shields.io/crates/v/eyre.svg)](https://crates.io/crates/eyre) [![Rust Documentation](https://img.shields.io/badge/api-rustdoc-blue.svg)](https://docs.rs/eyre) [![Discord chat](https://img.shields.io/discord/960645145018110012?label=eyre%20community%20discord)](https://discord.gg/z94RqmUTKB)\nThis library provides [```eyre`::``Report``](https://docs.rs/eyre/*/eyre/struct.Report.html), a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of [``anyhow``](https://github.com/dtolnay/anyhow) with support for customized error reports. For more details on customization checkout the docs on [```eyre`::``EyreHandler``](https://docs.rs/eyre/*/eyre/trait.EyreHandler.html).\n## Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * [``stable-eyre``](https://github.com/eyre-rs/stable-eyre): Switches the backtrace type from ``std``'s to ``backtrace-rs``'s so that it can be captured on stable. The report format is identical to ``DefaultHandler``'s report format.\n  * [``color-eyre``](https://github.com/eyre-rs/color-eyre): Captures a ```backtrace`::``Backtrace`` and a ```tracing_error`::``SpanTrace``. Provides a ``Help`` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of [``color-backtrace``](https://github.com/athre0z/color-backtrace), [``color-spantrace``](https://github.com/eyre-rs/color-spantrace), and ``ansi_term``. Check out the README on [``color-eyre``](https://github.com/eyre-rs/color-eyre) for details on the report format.\n  * [``simple-eyre``](https://github.com/eyre-rs/simple-eyre): A minimal ``EyreHandler`` that captures no additional information, for when you do not wish to capture ``Backtrace``s with errors.\n  * [``jane-eyre``](https://github.com/yaahc/jane-eyre): A report handler crate that exists purely for the pun of it. Currently just re-exports ``color-eyre``.\n\n\n## Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version[^1].\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using ```eyre`::``Report`` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn't mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into an undetectable runtime breakage.\n  * If many of your errors are constructed from strings you encourage your users to use string comparision for reacting to specific errors which is brittle and turns updating error messages into a potentially undetectable runtime breakage.\n\n\n## Details\n  * Use ````Result``<`T, `eyre`::``Report`>````, or equivalently ```eyre`::``Result``<`T`>````, as the return type of any fallible function.\nWithin the function, use ```?``` to easily propagate any error that implements the ```std`::```error`::``Error`` trait.\n```\n``use` `eyre`::``Result`;`\n``fn` `get_cluster_info`````(````)```` ``->` ``Result``<`ClusterMap`>``` ````{`\n  `let` config `=` `std`::```fs`::``read_to_string`(```\"`cluster.json`\"```)``?``;`\n  `let` map`:` ClusterMap `=` `serde_json`::``from_str`(``&`config`)``?``;`\n  `Ok``(`map`)`\n```}```\n`\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \"No such file or directory\" can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\n``use` `eyre`::````{`WrapErr`,` `Result````}```;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `...`\n  it`.``detach``(``)``.``wrap_err``(```\"`Failed to detach the important thing`\"```)``?``;`\n  `let` content `=` `std`::```fs`::``read`(`path`)`\n    `.``wrap_err_with``(````|``````|`` ```format!``(```\"`Failed to read instrs from `{}``\"```,` path`)```)``?``;`\n  `...`\n```}```\n`\n```\n```\n```Error:``` Failed to read instrs from ./path/to/instrs.json`\n``Caused``` by:`\n  ``No``` such file or directory (os error 2`)\n`\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n```//` If the error was caused by redaction, then return a`\n``//` tombstone instead of the content.`\n`match` root_cause`.``downcast_ref`::````<`DataStoreError`>```(``)` ``{`\n  `Some``(``DataStoreError`::``Censored`(``_``)``)` `=>` `Ok``(``Poll`::``Ready`(``REDACTED_CONTENT``)``)``,`\n  `None` `=>` `Err``(`error`)``,`\n```}``\n`\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in [```std`::``backtrace``](https://doc.rust-lang.org/std/backtrace/index.html#environment-variables):\n    * If you want panics and errors to both have backtraces, set ```RUST_BACKTRACE``=``1```;\n    * If you want only errors to have backtraces, set ```RUST_LIB_BACKTRACE``=``1```;\n    * If you want only panics to have backtraces, set ```RUST_BACKTRACE``=``1``` and ```RUST_LIB_BACKTRACE``=``0```.\nThe tracking issue for this feature is [rust-lang/rust#53487](https://github.com/rust-lang/rust/issues/53487).\n  * Eyre works with any error type that has an impl of ```std`::```error`::``Error``, including ones defined in your crate. We do not bundle a ```derive``(`Error`)``` macro but you can write the impls yourself or use a standalone macro like [thiserror](https://github.com/dtolnay/thiserror).\n```\n``use` `thiserror`::``Error`;`\n``#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `FormatError` ``{`\n  ``#``[``error```(`````\"`Invalid header (expected {expected:?}, got {found:?})`\"`````)```]``\n  InvalidHeader `{`\n    expected`:` `String``,`\n    found`:` `String``,`\n  `}``,`\n  ``#``[``error```(`````\"`Missing attribute: {0}`\"`````)```]``\n  MissingAttribute`(``String``)``,`\n```}```\n`\n```\n\n  * One-off error messages can be constructed using the ``eyre!`` macro, which supports string interpolation and produces an ```eyre`::``Report``.\n```\n``return` `Err``(``eyre!``(```\"`Missing attribute: {}`\"```,` missing`)``)``;`\n`\n```\n\n  * On newer versions of the compiler (e.g. 1.58 and later) this macro also supports format args captures.\n```\n``return` `Err``(``eyre!``(```\"`Missing attribute: {missing}`\"```)``)``;`\n`\n```\n\n\n\n## No-std support\nNo-std support was removed in 2020 in [commit 608a16a] due to unaddressed upstream breakages. [commit 608a16a]: <https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5>\n## Comparison to failure\nThe ```eyre`::``Report`` type works something like ```failure`::``Error``, but unlike failure ours is built around the standard library's ```std`::```error`::``Error`` trait rather than a separate trait ```failure`::``Fail``. The standard library has adopted the necessary improvements for this to be possible as part of [RFC 2504](https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md).\n## Comparison to thiserror\nUse ``eyre`` if you don't think you'll do anything with an error other than report it. This is common in application code. Use ``thiserror`` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don't know how your users will handle your errors.\n## Compatibility with ``anyhow``\nThis crate does its best to be usable as a drop in replacement of ``anyhow`` and vice-versa by ``re-exporting`` all of the renamed APIs with the names used in ``anyhow``, though there are some differences still.\n#### ``Context`` and ```Option```\nAs part of renaming ``Context`` to ``WrapErr`` we also intentionally do not implement ``WrapErr`` for ```Option```. This decision was made because ``wrap_err`` implies that you're creating a new error that saves the old error as its ``source``. With ```Option``` there is no source error to wrap, so ``wrap_err`` ends up being somewhat meaningless.\nInstead ``eyre`` offers [```OptionExt`::``ok_or_eyre``](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre) to yield _static_ errors from ```None```, and intends for users to use the combinator functions provided by ``std``, converting ```Option```s to ```Result```s, for _dynamic_ errors. So where you would write this with anyhow:\n```\n``use` `anyhow`::``Context`;`\n`let` opt`:` ``Option``<``(``)``>`` `=` `None``;`\n`let` result_static `=` opt`.``context``(```\"`static error message`\"```)``;`\n`let` result_dynamic `=` opt`.``with_context``(````|``````|`` ```format!``(```\"``{}` error message`\"```,` ``\"`dynamic`\"```)```)``;`\n`\n```\n\nWith ``eyre`` we want users to write:\n```\n``use` `eyre`::````{`eyre`,` OptionExt`,` `Result````}```;`\n`let` opt`:` ``Option``<``(``)``>`` `=` `None``;`\n`let` result_static`:` ``Result``<``(``)``>`` `=` opt`.``ok_or_eyre``(```\"`static error message`\"```)``;`\n`let` result_dynamic`:` ``Result``<``(``)``>`` `=` opt`.``ok_or_else``(````|``````|`` ```eyre!``(```\"`{} error message`\"```,` ``\"`dynamic`\"```)```)``;`\n`\n```\n\n**NOTE** : However, to help with porting we do provide a ``ContextCompat`` trait which implements ``context`` for options which you can import to make existing ```.`context`` calls compile.\n[^1]: example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361>\n#### License\nLicensed under either of [Apache License, Version 2.0](https://github.com/eyre-rs/eyre/blob/HEAD/LICENSE-APACHE) or [MIT license](https://github.com/eyre-rs/eyre/blob/HEAD/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~0\u20136MB  ~17K SLoC\n  * [indenter](https://lib.rs/crates/indenter \"0.3.0\")\n  * [once_cell](https://lib.rs/crates/once_cell \"1.18.0\")\n  * [ optional ](https://lib.rs/crates/eyre/features#feature-pyo3 \"pyo3 is optional feature\") [pyo3](https://lib.rs/crates/pyo3 \"obsolete\") 0.20\n\n\n  * build `build.rs`\n  * dev  [anyhow](https://lib.rs/crates/anyhow \"1.0.28\")\n  * dev  [backtrace](https://lib.rs/crates/backtrace \"0.3.46\")\n  * dev  [futures](https://lib.rs/crates/futures \"0.3\")\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1.0\")\n  * dev  [syn](https://lib.rs/crates/syn \"2.0\")[+full](https://lib.rs/crates/syn/features#feature-full)\n  * dev  [thiserror](https://lib.rs/crates/thiserror \"outdated\") 1.0\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0.19\")[+diff](https://lib.rs/crates/trybuild/features#feature-diff)\n\n\n#### [Other features](https://lib.rs/crates/eyre/features)\n  * [auto-install](https://lib.rs/crates/eyre/features#feature-auto-install)\n  * [track-caller](https://lib.rs/crates/eyre/features#feature-track-caller)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  31 releases\u27e81\u27e9\n0.6.12 |  Jan 31, 2024   \n---|---  \n0.6.11 |  Dec 13, 2023   \n0.6.9 |  Nov 17, 2023   \n0.6.8 |  Apr 4, 2022   \n0.3.5 |  Mar 6, 2020   \n#**11** in Rust patterns\u27e82\u27e9\nDownload history 574829/week @ 2025-03-01 603491/week @ 2025-03-08 592596/week @ 2025-03-15 606618/week @ 2025-03-22 582411/week @ 2025-03-29 610285/week @ 2025-04-05 584654/week @ 2025-04-12 618495/week @ 2025-04-19 557692/week @ 2025-04-26 572921/week @ 2025-05-03 602413/week @ 2025-05-10 613486/week @ 2025-05-17 560596/week @ 2025-05-24 613666/week @ 2025-05-31 621180/week @ 2025-06-07 681823/week @ 2025-06-14\n**2,575,462** downloads per month Used in **2,765** crates (1,058 directly)\u27e83\u27e9\n**MIT/Apache**\n115KB  1.5K  SLoC\n# eyre\n![Build Status\u27e84\u27e9](https://github.com/eyre-rs/eyre/actions?query=workflow%3A%22Continuous+integration%22) ![Latest Version\u27e85\u27e9](https://crates.io/crates/eyre) ![Rust Documentation\u27e86\u27e9](https://docs.rs/eyre) ![Discord chat\u27e87\u27e9](https://discord.gg/z94RqmUTKB)\nThis library provides ```eyre`::``Report``\u27e88\u27e9, a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of ``anyhow``\u27e89\u27e9 with support for customized error reports. For more details on customization checkout the docs on ```eyre`::``EyreHandler``\u27e810\u27e9.\n## Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * ``stable-eyre``\u27e811\u27e9: Switches the backtrace type from ``std``'s to ``backtrace-rs``'s so that it can be captured on stable. The report format is identical to ``DefaultHandler``'s report format.\n  * ``color-eyre``\u27e812\u27e9: Captures a ```backtrace`::``Backtrace`` and a ```tracing_error`::``SpanTrace``. Provides a ``Help`` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of ``color-backtrace``\u27e813\u27e9, ``color-spantrace``\u27e814\u27e9, and ``ansi_term``. Check out the README on ``color-eyre``\u27e812\u27e9 for details on the report format.\n  * ``simple-eyre``\u27e815\u27e9: A minimal ``EyreHandler`` that captures no additional information, for when you do not wish to capture ``Backtrace``s with errors.\n  * ``jane-eyre``\u27e816\u27e9: A report handler crate that exists purely for the pun of it. Currently just re-exports ``color-eyre``.\n\n\n## Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version[^1].\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using ```eyre`::``Report`` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn't mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into an undetectable runtime breakage.\n  * If many of your errors are constructed from strings you encourage your users to use string comparision for reacting to specific errors which is brittle and turns updating error messages into a potentially undetectable runtime breakage.\n\n\n## Details\n  * Use ````Result``<`T, `eyre`::``Report`>````, or equivalently ```eyre`::``Result``<`T`>````, as the return type of any fallible function.\nWithin the function, use ```?``` to easily propagate any error that implements the ```std`::```error`::``Error`` trait.\n```\n``use` `eyre`::``Result`;`\n``fn` `get_cluster_info`````(````)```` ``->` ``Result``<`ClusterMap`>``` ````{`\n  `let` config `=` `std`::```fs`::``read_to_string`(```\"`cluster.json`\"```)``?``;`\n  `let` map`:` ClusterMap `=` `serde_json`::``from_str`(``&`config`)``?``;`\n  `Ok``(`map`)`\n```}```\n`\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \"No such file or directory\" can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\n``use` `eyre`::````{`WrapErr`,` `Result````}```;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `...`\n  it`.``detach``(``)``.``wrap_err``(```\"`Failed to detach the important thing`\"```)``?``;`\n  `let` content `=` `std`::```fs`::``read`(`path`)`\n    `.``wrap_err_with``(````|``````|`` ```format!``(```\"`Failed to read instrs from `{}``\"```,` path`)```)``?``;`\n  `...`\n```}```\n`\n```\n```\n```Error:``` Failed to read instrs from ./path/to/instrs.json`\n``Caused``` by:`\n  ``No``` such file or directory (os error 2`)\n`\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n```//` If the error was caused by redaction, then return a`\n``//` tombstone instead of the content.`\n`match` root_cause`.``downcast_ref`::````<`DataStoreError`>```(``)` ``{`\n  `Some``(``DataStoreError`::``Censored`(``_``)``)` `=>` `Ok``(``Poll`::``Ready`(``REDACTED_CONTENT``)``)``,`\n  `None` `=>` `Err``(`error`)``,`\n```}``\n`\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in ```std`::``backtrace``\u27e817\u27e9:\n    * If you want panics and errors to both have backtraces, set ```RUST_BACKTRACE``=``1```;\n    * If you want only errors to have backtraces, set ```RUST_LIB_BACKTRACE``=``1```;\n    * If you want only panics to have backtraces, set ```RUST_BACKTRACE``=``1``` and ```RUST_LIB_BACKTRACE``=``0```.\nThe tracking issue for this feature is rust-lang/rust#53487\u27e818\u27e9.\n  * Eyre works with any error type that has an impl of ```std`::```error`::``Error``, including ones defined in your crate. We do not bundle a ```derive``(`Error`)``` macro but you can write the impls yourself or use a standalone macro like thiserror\u27e819\u27e9.\n```\n``use` `thiserror`::``Error`;`\n``#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `FormatError` ``{`\n  ``#``[``error```(`````\"`Invalid header (expected {expected:?}, got {found:?})`\"`````)```]``\n  InvalidHeader `{`\n    expected`:` `String``,`\n    found`:` `String``,`\n  `}``,`\n  ``#``[``error```(`````\"`Missing attribute: {0}`\"`````)```]``\n  MissingAttribute`(``String``)``,`\n```}```\n`\n```\n\n  * One-off error messages can be constructed using the ``eyre!`` macro, which supports string interpolation and produces an ```eyre`::``Report``.\n```\n``return` `Err``(``eyre!``(```\"`Missing attribute: {}`\"```,` missing`)``)``;`\n`\n```\n\n  * On newer versions of the compiler (e.g. 1.58 and later) this macro also supports format args captures.\n```\n``return` `Err``(``eyre!``(```\"`Missing attribute: {missing}`\"```)``)``;`\n`\n```\n\n\n\n## No-std support\nNo-std support was removed in 2020 in [commit 608a16a] due to unaddressed upstream breakages. [commit 608a16a]: <https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5>\n## Comparison to failure\nThe ```eyre`::``Report`` type works something like ```failure`::``Error``, but unlike failure ours is built around the standard library's ```std`::```error`::``Error`` trait rather than a separate trait ```failure`::``Fail``. The standard library has adopted the necessary improvements for this to be possible as part of RFC 2504\u27e820\u27e9.\n## Comparison to thiserror\nUse ``eyre`` if you don't think you'll do anything with an error other than report it. This is common in application code. Use ``thiserror`` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don't know how your users will handle your errors.\n## Compatibility with ``anyhow``\nThis crate does its best to be usable as a drop in replacement of ``anyhow`` and vice-versa by ``re-exporting`` all of the renamed APIs with the names used in ``anyhow``, though there are some differences still.\n#### ``Context`` and ```Option```\nAs part of renaming ``Context`` to ``WrapErr`` we also intentionally do not implement ``WrapErr`` for ```Option```. This decision was made because ``wrap_err`` implies that you're creating a new error that saves the old error as its ``source``. With ```Option``` there is no source error to wrap, so ``wrap_err`` ends up being somewhat meaningless.\nInstead ``eyre`` offers ```OptionExt`::``ok_or_eyre``\u27e821\u27e9 to yield _static_ errors from ```None```, and intends for users to use the combinator functions provided by ``std``, converting ```Option```s to ```Result```s, for _dynamic_ errors. So where you would write this with anyhow:\n```\n``use` `anyhow`::``Context`;`\n`let` opt`:` ``Option``<``(``)``>`` `=` `None``;`\n`let` result_static `=` opt`.``context``(```\"`static error message`\"```)``;`\n`let` result_dynamic `=` opt`.``with_context``(````|``````|`` ```format!``(```\"``{}` error message`\"```,` ``\"`dynamic`\"```)```)``;`\n`\n```\n\nWith ``eyre`` we want users to write:\n```\n``use` `eyre`::````{`eyre`,` OptionExt`,` `Result````}```;`\n`let` opt`:` ``Option``<``(``)``>`` `=` `None``;`\n`let` result_static`:` ``Result``<``(``)``>`` `=` opt`.``ok_or_eyre``(```\"`static error message`\"```)``;`\n`let` result_dynamic`:` ``Result``<``(``)``>`` `=` opt`.``ok_or_else``(````|``````|`` ```eyre!``(```\"`{} error message`\"```,` ``\"`dynamic`\"```)```)``;`\n`\n```\n\n**NOTE** : However, to help with porting we do provide a ``ContextCompat`` trait which implements ``context`` for options which you can import to make existing ```.`context`` calls compile.\n[^1]: example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361>\n#### License\nLicensed under either of Apache License, Version 2.0\u27e822\u27e9 or MIT license\u27e823\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~0\u20136MB  ~17K SLoC\n  * indenter\u27e824\u27e9\n  * once_cell\u27e825\u27e9\n  *  optional \u27e826\u27e9 pyo3\u27e827\u27e9 0.20\n\n\n  * build `build.rs`\n  * dev  anyhow\u27e828\u27e9\n  * dev  backtrace\u27e829\u27e9\n  * dev  futures\u27e830\u27e9\n  * dev  rustversion\u27e831\u27e9\n  * dev  syn\u27e832\u27e9+full\u27e833\u27e9\n  * dev  thiserror\u27e834\u27e9 1.0\n  * dev  trybuild\u27e835\u27e9+diff\u27e836\u27e9\n\n\n#### Other features\u27e837\u27e9\n  * auto-install\u27e838\u27e9\n  * track-caller\u27e839\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/eyre/versions: 31 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/eyre/rev: **2,765** crates (1,058 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/eyre-rs/eyre/workflows/Continuous%20integration/badge.svg: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/eyre.svg: ![Latest Version\n\u27e86\u27e9 https://img.shields.io/badge/api-rustdoc-blue.svg: ![Rust Documentation\n\u27e87\u27e9 https://img.shields.io/discord/960645145018110012?label=eyre%20community%20discord: ![Discord chat\n\u27e88\u27e9 https://docs.rs/eyre/*/eyre/struct.Report.html: ```eyre`::``Report``\n\u27e89\u27e9 https://github.com/dtolnay/anyhow: ``anyhow``\n\u27e810\u27e9 https://docs.rs/eyre/*/eyre/trait.EyreHandler.html: ```eyre`::``EyreHandler``\n\u27e811\u27e9 https://github.com/eyre-rs/stable-eyre: ``stable-eyre``\n\u27e812\u27e9 https://github.com/eyre-rs/color-eyre: ``color-eyre``\n\u27e813\u27e9 https://github.com/athre0z/color-backtrace: ``color-backtrace``\n\u27e814\u27e9 https://github.com/eyre-rs/color-spantrace: ``color-spantrace``\n\u27e815\u27e9 https://github.com/eyre-rs/simple-eyre: ``simple-eyre``\n\u27e816\u27e9 https://github.com/yaahc/jane-eyre: ``jane-eyre``\n\u27e817\u27e9 https://doc.rust-lang.org/std/backtrace/index.html#environment-variables: ```std`::``backtrace``\n\u27e818\u27e9 https://github.com/rust-lang/rust/issues/53487: rust-lang/rust#53487\n\u27e819\u27e9 https://github.com/dtolnay/thiserror: thiserror\n\u27e820\u27e9 https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md: RFC 2504\n\u27e821\u27e9 https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre: ```OptionExt`::``ok_or_eyre``\n\u27e822\u27e9 https://github.com/eyre-rs/eyre/blob/HEAD/LICENSE-APACHE: Apache License, Version 2.0\n\u27e823\u27e9 https://github.com/eyre-rs/eyre/blob/HEAD/LICENSE-MIT: MIT license\n\u27e824\u27e9 https://lib.rs/crates/indenter: 0.3.0 - indenter\n\u27e825\u27e9 https://lib.rs/crates/once_cell: 1.18.0 - once_cell\n\u27e826\u27e9 https://lib.rs/crates/eyre/features#feature-pyo3: pyo3 is optional feature -  optional \n\u27e827\u27e9 https://lib.rs/crates/pyo3: obsolete - pyo3\n\u27e828\u27e9 https://lib.rs/crates/anyhow: 1.0.28 - anyhow\n\u27e829\u27e9 https://lib.rs/crates/backtrace: 0.3.46 - backtrace\n\u27e830\u27e9 https://lib.rs/crates/futures: 0.3 - futures\n\u27e831\u27e9 https://lib.rs/crates/rustversion: 1.0 - rustversion\n\u27e832\u27e9 https://lib.rs/crates/syn: 2.0 - syn\n\u27e833\u27e9 https://lib.rs/crates/syn/features#feature-full: +full\n\u27e834\u27e9 https://lib.rs/crates/thiserror: outdated - thiserror\n\u27e835\u27e9 https://lib.rs/crates/trybuild: 1.0.19 - trybuild\n\u27e836\u27e9 https://lib.rs/crates/trybuild/features#feature-diff: +diff\n\u27e837\u27e9 https://lib.rs/crates/eyre/features: Other features\n\u27e838\u27e9 https://lib.rs/crates/eyre/features#feature-auto-install: auto-install\n\u27e839\u27e9 https://lib.rs/crates/eyre/features#feature-track-caller: track-caller\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 12962,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113323.0527005"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indenter@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indenter-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indenter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indenter-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\deps\\libindenter-413c215e8c882e7e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\deps\\libonce_cell-ac0a519ea1a3af5e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "auto-install",
                "default",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\build\\eyre-ac07aaf4d8e68ab0\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\build\\eyre-ac07aaf4d8e68ab0\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "track_caller",
                "stable"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\build\\eyre-df6a826707c7ae07\\out"
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `nightly`\n   --> src\\lib.rs:323:5\n    |\n323 |     nightly,\n    |     ^^^^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `nightly`",
                "spans": [
                  {
                    "byte_end": 12516,
                    "byte_start": 12509,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 323,
                    "line_start": 323,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    nightly,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n   --> src\\lib.rs:348:13\n    |\n348 | #![cfg_attr(backtrace, feature(backtrace))]\n    |             ^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 13088,
                    "byte_start": 13079,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 348,
                    "line_start": 348,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "#![cfg_attr(backtrace, feature(backtrace))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `doc_cfg`\n   --> src\\lib.rs:349:13\n    |\n349 | #![cfg_attr(doc_cfg, feature(doc_cfg))]\n    |             ^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `doc_cfg`",
                "spans": [
                  {
                    "byte_end": 13130,
                    "byte_start": 13123,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 349,
                    "line_start": 349,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "#![cfg_attr(doc_cfg, feature(doc_cfg))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:587:12\n    |\n587 | #[cfg_attr(track_caller, track_caller)]\n    |            ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 20592,
                    "byte_start": 20580,
                    "column_end": 24,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 587,
                    "line_start": 587,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 12,
                        "text": "#[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:588:16\n    |\n588 | #[cfg_attr(not(track_caller), allow(unused_mut))]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 20636,
                    "byte_start": 20624,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 588,
                    "line_start": 588,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "#[cfg_attr(not(track_caller), allow(unused_mut))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n --> src\\backtrace.rs:1:7\n  |\n1 | #[cfg(backtrace)]\n  |       ^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 15,
                    "byte_start": 6,
                    "column_end": 16,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\backtrace.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 7,
                        "text": "#[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n --> src\\backtrace.rs:4:11\n  |\n4 | #[cfg(not(backtrace))]\n  |           ^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 80,
                    "byte_start": 71,
                    "column_end": 20,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\backtrace.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 4,
                    "line_start": 4,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 11,
                        "text": "#[cfg(not(backtrace))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n --> src\\backtrace.rs:7:7\n  |\n7 | #[cfg(backtrace)]\n  |       ^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 129,
                    "byte_start": 120,
                    "column_end": 16,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\backtrace.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 7,
                    "line_start": 7,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 7,
                        "text": "#[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n  --> src\\backtrace.rs:17:11\n   |\n17 | #[cfg(not(backtrace))]\n   |           ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 337,
                    "byte_start": 328,
                    "column_end": 20,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\backtrace.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 11,
                        "text": "#[cfg(not(backtrace))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n --> src\\context.rs:5:7\n  |\n5 | #[cfg(backtrace)]\n  |       ^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 162,
                    "byte_start": 153,
                    "column_end": 16,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\context.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 5,
                    "line_start": 5,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 7,
                        "text": "#[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\context.rs:12:20\n   |\n12 |         #[cfg_attr(track_caller, track_caller)]\n   |                    ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 282,
                    "byte_start": 270,
                    "column_end": 32,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\context.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 12,
                    "line_start": 12,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 20,
                        "text": "        #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n   --> src\\context.rs:146:11\n    |\n146 |     #[cfg(backtrace)]\n    |           ^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 3269,
                    "byte_start": 3260,
                    "column_end": 20,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\context.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 146,
                    "line_start": 146,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 11,
                        "text": "    #[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\error.rs:20:16\n   |\n20 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 638,
                    "byte_start": 626,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 20,
                    "line_start": 20,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\error.rs:65:16\n   |\n65 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 2157,
                    "byte_start": 2145,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\error.rs:73:16\n   |\n73 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 2350,
                    "byte_start": 2338,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\error.rs:95:16\n   |\n95 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 3156,
                    "byte_start": 3144,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 95,
                    "line_start": 95,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\error.rs:119:16\n    |\n119 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 4125,
                    "byte_start": 4113,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 119,
                    "line_start": 119,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\error.rs:143:16\n    |\n143 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 5105,
                    "byte_start": 5093,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\error.rs:167:16\n    |\n167 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 6040,
                    "byte_start": 6028,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 167,
                    "line_start": 167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\error.rs:494:16\n    |\n494 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 17445,
                    "byte_start": 17433,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 494,
                    "line_start": 494,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\kind.rs:65:16\n   |\n65 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 1999,
                    "byte_start": 1987,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\kind.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\kind.rs:86:16\n   |\n86 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 2385,
                    "byte_start": 2373,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\kind.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 86,
                    "line_start": 86,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\kind.rs:107:16\n    |\n107 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 2732,
                    "byte_start": 2720,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\kind.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n  --> src\\wrapper.rs:85:11\n   |\n85 |     #[cfg(backtrace)]\n   |           ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 1891,
                    "byte_start": 1882,
                    "column_end": 20,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\wrapper.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 85,
                    "line_start": 85,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 11,
                        "text": "    #[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:603:11\n    |\n603 |     #[cfg(track_caller)]\n    |           ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 21130,
                    "byte_start": 21118,
                    "column_end": 23,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 603,
                    "line_start": 603,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 11,
                        "text": "    #[cfg(track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:732:11\n    |\n732 |     #[cfg(track_caller)]\n    |           ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 24813,
                    "byte_start": 24801,
                    "column_end": 23,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 732,
                    "line_start": 732,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 11,
                        "text": "    #[cfg(track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:770:19\n    |\n770 |             #[cfg(track_caller)]\n    |                   ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 26186,
                    "byte_start": 26174,
                    "column_end": 31,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 770,
                    "line_start": 770,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 19,
                        "text": "            #[cfg(track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:842:11\n    |\n842 |     #[cfg(track_caller)]\n    |           ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 28209,
                    "byte_start": 28197,
                    "column_end": 23,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 842,
                    "line_start": 842,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 11,
                        "text": "    #[cfg(track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:817:19\n    |\n817 |         #[cfg(all(track_caller, feature = \"track-caller\"))]\n    |                   ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 27497,
                    "byte_start": 27485,
                    "column_end": 31,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 817,
                    "line_start": 817,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 19,
                        "text": "        #[cfg(all(track_caller, feature = \"track-caller\"))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n   --> src\\lib.rs:825:15\n    |\n825 |         #[cfg(backtrace)]\n    |               ^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 27748,
                    "byte_start": 27739,
                    "column_end": 24,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 825,
                    "line_start": 825,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 15,
                        "text": "        #[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1101:16\n     |\n1101 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 36357,
                    "byte_start": 36345,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1101,
                    "line_start": 1101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1108:16\n     |\n1108 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 36626,
                    "byte_start": 36614,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1108,
                    "line_start": 1108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1115:16\n     |\n1115 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 36881,
                    "byte_start": 36869,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1115,
                    "line_start": 1115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1121:16\n     |\n1121 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 37108,
                    "byte_start": 37096,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1121,
                    "line_start": 1121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1229:16\n     |\n1229 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 40915,
                    "byte_start": 40903,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1229,
                    "line_start": 1229,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1236:16\n     |\n1236 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 41203,
                    "byte_start": 41191,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1236,
                    "line_start": 1236,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1243:16\n     |\n1243 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 41468,
                    "byte_start": 41456,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1243,
                    "line_start": 1243,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1249:16\n     |\n1249 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 41707,
                    "byte_start": 41695,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1249,
                    "line_start": 1249,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1297:16\n     |\n1297 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 43182,
                    "byte_start": 43170,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1297,
                    "line_start": 1297,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1307:16\n     |\n1307 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 43414,
                    "byte_start": 43402,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1307,
                    "line_start": 1307,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `eyre_no_fmt_arguments_as_str`\n    --> src\\lib.rs:1309:15\n     |\n1309 |         #[cfg(eyre_no_fmt_arguments_as_str)]\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(eyre_no_fmt_arguments_as_str)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(eyre_no_fmt_arguments_as_str)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(eyre_no_fmt_arguments_as_str)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(eyre_no_fmt_arguments_as_str)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `eyre_no_fmt_arguments_as_str`",
                "spans": [
                  {
                    "byte_end": 43528,
                    "byte_start": 43500,
                    "column_end": 43,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1309,
                    "line_start": 1309,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 15,
                        "text": "        #[cfg(eyre_no_fmt_arguments_as_str)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `eyre_no_fmt_arguments_as_str`\n    --> src\\lib.rs:1311:19\n     |\n1311 |         #[cfg(not(eyre_no_fmt_arguments_as_str))]\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(eyre_no_fmt_arguments_as_str)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(eyre_no_fmt_arguments_as_str)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(eyre_no_fmt_arguments_as_str)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(eyre_no_fmt_arguments_as_str)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `eyre_no_fmt_arguments_as_str`",
                "spans": [
                  {
                    "byte_end": 43632,
                    "byte_start": 43604,
                    "column_end": 47,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1311,
                    "line_start": 1311,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 19,
                        "text": "        #[cfg(not(eyre_no_fmt_arguments_as_str))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "auto-install",
                "default",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\deps\\libeyre-0f842b0706f742f4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indenter@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indenter-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indenter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indenter-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\deps\\libindenter-413c215e8c882e7e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\deps\\libonce_cell-ac0a519ea1a3af5e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "auto-install",
                "default",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\build\\eyre-52c1de0e3d17e4b3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\build\\eyre-52c1de0e3d17e4b3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "track_caller",
                "stable"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\build\\eyre-976417defb880daa\\out"
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `nightly`\n   --> src\\lib.rs:323:5\n    |\n323 |     nightly,\n    |     ^^^^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(nightly)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(nightly)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `nightly`",
                "spans": [
                  {
                    "byte_end": 12516,
                    "byte_start": 12509,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 323,
                    "line_start": 323,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    nightly,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n   --> src\\lib.rs:348:13\n    |\n348 | #![cfg_attr(backtrace, feature(backtrace))]\n    |             ^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 13088,
                    "byte_start": 13079,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 348,
                    "line_start": 348,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "#![cfg_attr(backtrace, feature(backtrace))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `doc_cfg`\n   --> src\\lib.rs:349:13\n    |\n349 | #![cfg_attr(doc_cfg, feature(doc_cfg))]\n    |             ^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(doc_cfg)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(doc_cfg)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `doc_cfg`",
                "spans": [
                  {
                    "byte_end": 13130,
                    "byte_start": 13123,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 349,
                    "line_start": 349,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "#![cfg_attr(doc_cfg, feature(doc_cfg))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:587:12\n    |\n587 | #[cfg_attr(track_caller, track_caller)]\n    |            ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 20592,
                    "byte_start": 20580,
                    "column_end": 24,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 587,
                    "line_start": 587,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 12,
                        "text": "#[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:588:16\n    |\n588 | #[cfg_attr(not(track_caller), allow(unused_mut))]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 20636,
                    "byte_start": 20624,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 588,
                    "line_start": 588,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "#[cfg_attr(not(track_caller), allow(unused_mut))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n --> src\\backtrace.rs:1:7\n  |\n1 | #[cfg(backtrace)]\n  |       ^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 15,
                    "byte_start": 6,
                    "column_end": 16,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\backtrace.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 7,
                        "text": "#[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n --> src\\backtrace.rs:4:11\n  |\n4 | #[cfg(not(backtrace))]\n  |           ^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 80,
                    "byte_start": 71,
                    "column_end": 20,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\backtrace.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 4,
                    "line_start": 4,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 11,
                        "text": "#[cfg(not(backtrace))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n --> src\\backtrace.rs:7:7\n  |\n7 | #[cfg(backtrace)]\n  |       ^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 129,
                    "byte_start": 120,
                    "column_end": 16,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\backtrace.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 7,
                    "line_start": 7,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 7,
                        "text": "#[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n  --> src\\backtrace.rs:17:11\n   |\n17 | #[cfg(not(backtrace))]\n   |           ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 337,
                    "byte_start": 328,
                    "column_end": 20,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\backtrace.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 11,
                        "text": "#[cfg(not(backtrace))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n --> src\\context.rs:5:7\n  |\n5 | #[cfg(backtrace)]\n  |       ^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 162,
                    "byte_start": 153,
                    "column_end": 16,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\context.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 5,
                    "line_start": 5,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 7,
                        "text": "#[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\context.rs:12:20\n   |\n12 |         #[cfg_attr(track_caller, track_caller)]\n   |                    ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 282,
                    "byte_start": 270,
                    "column_end": 32,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\context.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 12,
                    "line_start": 12,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 20,
                        "text": "        #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n   --> src\\context.rs:146:11\n    |\n146 |     #[cfg(backtrace)]\n    |           ^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 3269,
                    "byte_start": 3260,
                    "column_end": 20,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\context.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 146,
                    "line_start": 146,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 11,
                        "text": "    #[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\error.rs:20:16\n   |\n20 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 638,
                    "byte_start": 626,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 20,
                    "line_start": 20,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\error.rs:65:16\n   |\n65 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 2157,
                    "byte_start": 2145,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\error.rs:73:16\n   |\n73 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 2350,
                    "byte_start": 2338,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\error.rs:95:16\n   |\n95 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 3156,
                    "byte_start": 3144,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 95,
                    "line_start": 95,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\error.rs:119:16\n    |\n119 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 4125,
                    "byte_start": 4113,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 119,
                    "line_start": 119,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\error.rs:143:16\n    |\n143 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 5105,
                    "byte_start": 5093,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\error.rs:167:16\n    |\n167 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 6040,
                    "byte_start": 6028,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 167,
                    "line_start": 167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\error.rs:494:16\n    |\n494 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 17445,
                    "byte_start": 17433,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 494,
                    "line_start": 494,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\kind.rs:65:16\n   |\n65 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 1999,
                    "byte_start": 1987,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\kind.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n  --> src\\kind.rs:86:16\n   |\n86 |     #[cfg_attr(track_caller, track_caller)]\n   |                ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 2385,
                    "byte_start": 2373,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\kind.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 86,
                    "line_start": 86,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\kind.rs:107:16\n    |\n107 |     #[cfg_attr(track_caller, track_caller)]\n    |                ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 2732,
                    "byte_start": 2720,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\kind.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n  --> src\\wrapper.rs:85:11\n   |\n85 |     #[cfg(backtrace)]\n   |           ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 1891,
                    "byte_start": 1882,
                    "column_end": 20,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\wrapper.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 85,
                    "line_start": 85,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 11,
                        "text": "    #[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:603:11\n    |\n603 |     #[cfg(track_caller)]\n    |           ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 21130,
                    "byte_start": 21118,
                    "column_end": 23,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 603,
                    "line_start": 603,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 11,
                        "text": "    #[cfg(track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:732:11\n    |\n732 |     #[cfg(track_caller)]\n    |           ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 24813,
                    "byte_start": 24801,
                    "column_end": 23,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 732,
                    "line_start": 732,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 11,
                        "text": "    #[cfg(track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:770:19\n    |\n770 |             #[cfg(track_caller)]\n    |                   ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 26186,
                    "byte_start": 26174,
                    "column_end": 31,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 770,
                    "line_start": 770,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 19,
                        "text": "            #[cfg(track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:842:11\n    |\n842 |     #[cfg(track_caller)]\n    |           ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 28209,
                    "byte_start": 28197,
                    "column_end": 23,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 842,
                    "line_start": 842,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 11,
                        "text": "    #[cfg(track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n   --> src\\lib.rs:817:19\n    |\n817 |         #[cfg(all(track_caller, feature = \"track-caller\"))]\n    |                   ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 27497,
                    "byte_start": 27485,
                    "column_end": 31,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 817,
                    "line_start": 817,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 19,
                        "text": "        #[cfg(all(track_caller, feature = \"track-caller\"))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `backtrace`\n   --> src\\lib.rs:825:15\n    |\n825 |         #[cfg(backtrace)]\n    |               ^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(backtrace)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(backtrace)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `backtrace`",
                "spans": [
                  {
                    "byte_end": 27748,
                    "byte_start": 27739,
                    "column_end": 24,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 825,
                    "line_start": 825,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 15,
                        "text": "        #[cfg(backtrace)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1101:16\n     |\n1101 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 36357,
                    "byte_start": 36345,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1101,
                    "line_start": 1101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1108:16\n     |\n1108 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 36626,
                    "byte_start": 36614,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1108,
                    "line_start": 1108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1115:16\n     |\n1115 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 36881,
                    "byte_start": 36869,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1115,
                    "line_start": 1115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1121:16\n     |\n1121 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 37108,
                    "byte_start": 37096,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1121,
                    "line_start": 1121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1229:16\n     |\n1229 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 40915,
                    "byte_start": 40903,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1229,
                    "line_start": 1229,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1236:16\n     |\n1236 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 41203,
                    "byte_start": 41191,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1236,
                    "line_start": 1236,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1243:16\n     |\n1243 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 41468,
                    "byte_start": 41456,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1243,
                    "line_start": 1243,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1249:16\n     |\n1249 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 41707,
                    "byte_start": 41695,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1249,
                    "line_start": 1249,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1297:16\n     |\n1297 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 43182,
                    "byte_start": 43170,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1297,
                    "line_start": 1297,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `track_caller`\n    --> src\\lib.rs:1307:16\n     |\n1307 |     #[cfg_attr(track_caller, track_caller)]\n     |                ^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(track_caller)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(track_caller)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `track_caller`",
                "spans": [
                  {
                    "byte_end": 43414,
                    "byte_start": 43402,
                    "column_end": 28,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1307,
                    "line_start": 1307,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 16,
                        "text": "    #[cfg_attr(track_caller, track_caller)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `eyre_no_fmt_arguments_as_str`\n    --> src\\lib.rs:1309:15\n     |\n1309 |         #[cfg(eyre_no_fmt_arguments_as_str)]\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(eyre_no_fmt_arguments_as_str)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(eyre_no_fmt_arguments_as_str)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(eyre_no_fmt_arguments_as_str)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(eyre_no_fmt_arguments_as_str)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `eyre_no_fmt_arguments_as_str`",
                "spans": [
                  {
                    "byte_end": 43528,
                    "byte_start": 43500,
                    "column_end": 43,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1309,
                    "line_start": 1309,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 15,
                        "text": "        #[cfg(eyre_no_fmt_arguments_as_str)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `eyre_no_fmt_arguments_as_str`\n    --> src\\lib.rs:1311:19\n     |\n1311 |         #[cfg(not(eyre_no_fmt_arguments_as_str))]\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: consider using a Cargo feature instead\n     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n              [lints.rust]\n              unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(eyre_no_fmt_arguments_as_str)'] }\n     = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(eyre_no_fmt_arguments_as_str)\");` to the top of the `build.rs`\n     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(eyre_no_fmt_arguments_as_str)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(eyre_no_fmt_arguments_as_str)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `eyre_no_fmt_arguments_as_str`",
                "spans": [
                  {
                    "byte_end": 43632,
                    "byte_start": 43604,
                    "column_end": 47,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1311,
                    "line_start": 1311,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 19,
                        "text": "        #[cfg(not(eyre_no_fmt_arguments_as_str))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\lib.rs:42:5\n   |\n42 | //! accessible via downcast, making it hard for users to react to specific\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n   = note: `#[warn(clippy::doc_lazy_continuation)]` on by default\nhelp: indent this line\n   |\n42 | //!   accessible via downcast, making it hard for users to react to specific\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_lazy_continuation)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2324,
                        "byte_start": 2324,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 42,
                        "line_start": 42,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! accessible via downcast, making it hard for users to react to specific"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 2324,
                    "byte_start": 2324,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 42,
                    "line_start": 42,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! accessible via downcast, making it hard for users to react to specific"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\lib.rs:43:5\n   |\n43 | //! errors while not preventing them from depending on details you didn't mean\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n43 | //!   errors while not preventing them from depending on details you didn't mean\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2399,
                        "byte_start": 2399,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! errors while not preventing them from depending on details you didn't mean"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 2399,
                    "byte_start": 2399,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 43,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! errors while not preventing them from depending on details you didn't mean"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\lib.rs:44:5\n   |\n44 | //! to make part of your public API.\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n44 | //!   to make part of your public API.\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2478,
                        "byte_start": 2478,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 44,
                        "line_start": 44,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! to make part of your public API."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 2478,
                    "byte_start": 2478,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 44,
                    "line_start": 44,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! to make part of your public API."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\lib.rs:46:5\n   |\n46 | //!   your public API as well, and makes changing any of those libraries into\n   |     ^^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n46 | //!     your public API as well, and makes changing any of those libraries into\n   |       ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2595,
                        "byte_start": 2595,
                        "column_end": 7,
                        "column_start": 7,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 7,
                            "highlight_start": 7,
                            "text": "//!   your public API as well, and makes changing any of those libraries into"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 2595,
                    "byte_start": 2593,
                    "column_end": 7,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 46,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 7,
                        "highlight_start": 5,
                        "text": "//!   your public API as well, and makes changing any of those libraries into"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\lib.rs:47:5\n   |\n47 | //!   undetectable runtime breakage.\n   |     ^^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n47 | //!     undetectable runtime breakage.\n   |       ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2673,
                        "byte_start": 2673,
                        "column_end": 7,
                        "column_start": 7,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 7,
                            "highlight_start": 7,
                            "text": "//!   undetectable runtime breakage."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 2673,
                    "byte_start": 2671,
                    "column_end": 7,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 7,
                        "highlight_start": 5,
                        "text": "//!   undetectable runtime breakage."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\lib.rs:49:5\n   |\n49 | //! users to use string comparison for reacting to specific errors, which is\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n49 | //!   users to use string comparison for reacting to specific errors, which is\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2786,
                        "byte_start": 2786,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 49,
                        "line_start": 49,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! users to use string comparison for reacting to specific errors, which is"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 2786,
                    "byte_start": 2786,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! users to use string comparison for reacting to specific errors, which is"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\lib.rs:50:5\n   |\n50 | //! brittle and turns updating error messages into potentially undetectable\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n50 | //!   brittle and turns updating error messages into potentially undetectable\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2863,
                        "byte_start": 2863,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! brittle and turns updating error messages into potentially undetectable"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 2863,
                    "byte_start": 2863,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! brittle and turns updating error messages into potentially undetectable"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\lib.rs:51:5\n   |\n51 | //! runtime breakage.\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n51 | //!   runtime breakage.\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2939,
                        "byte_start": 2939,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! runtime breakage."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 2939,
                    "byte_start": 2939,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 51,
                    "line_start": 51,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! runtime breakage."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty doc comment\n   --> src\\lib.rs:612:5\n    |\n612 |     ///\n    |     ^^^\n    |\n    = help: consider removing or filling it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_docs\n    = note: `#[warn(clippy::empty_docs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider removing or filling it",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_docs",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::empty_docs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::empty_docs",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty doc comment",
                "spans": [
                  {
                    "byte_end": 21252,
                    "byte_start": 21249,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 612,
                    "line_start": 612,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "    ///"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty doc comment\n   --> src\\lib.rs:624:5\n    |\n624 |     ///\n    |     ^^^\n    |\n    = help: consider removing or filling it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_docs\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider removing or filling it",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_docs",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::empty_docs",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty doc comment",
                "spans": [
                  {
                    "byte_end": 21608,
                    "byte_start": 21605,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 624,
                    "line_start": 624,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "    ///"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty doc comment\n   --> src\\lib.rs:633:5\n    |\n633 |     ///\n    |     ^^^\n    |\n    = help: consider removing or filling it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_docs\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider removing or filling it",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_docs",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::empty_docs",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty doc comment",
                "spans": [
                  {
                    "byte_end": 21834,
                    "byte_start": 21831,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 633,
                    "line_start": 633,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "    ///"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:709:9\n    |\n709 |         write!(f, \"{}\", error)?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n709 -         write!(f, \"{}\", error)?;\n709 +         write!(f, \"{error}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 24104,
                        "byte_start": 24104,
                        "column_end": 21,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 709,
                        "line_start": 709,
                        "suggested_replacement": "error",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 21,
                            "text": "        write!(f, \"{}\", error)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 24113,
                        "byte_start": 24106,
                        "column_end": 30,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 709,
                        "line_start": 709,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 23,
                            "text": "        write!(f, \"{}\", error)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 24114,
                    "byte_start": 24092,
                    "column_end": 31,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 709,
                    "line_start": 709,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{}\", error)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:713:17\n    |\n713 |                 write!(f, \": {}\", cause)?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n713 -                 write!(f, \": {}\", cause)?;\n713 +                 write!(f, \": {cause}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 24242,
                        "byte_start": 24242,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 713,
                        "line_start": 713,
                        "suggested_replacement": "cause",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "                write!(f, \": {}\", cause)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 24251,
                        "byte_start": 24244,
                        "column_end": 40,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 713,
                        "line_start": 713,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 33,
                            "text": "                write!(f, \": {}\", cause)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 24252,
                    "byte_start": 24228,
                    "column_end": 41,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 713,
                    "line_start": 713,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 17,
                        "text": "                write!(f, \": {}\", cause)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:802:9\n    |\n802 |         write!(f, \"{}\", error)?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n802 -         write!(f, \"{}\", error)?;\n802 +         write!(f, \"{error}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 26971,
                        "byte_start": 26971,
                        "column_end": 21,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 802,
                        "line_start": 802,
                        "suggested_replacement": "error",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 21,
                            "text": "        write!(f, \"{}\", error)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 26980,
                        "byte_start": 26973,
                        "column_end": 30,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 802,
                        "line_start": 802,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 23,
                            "text": "        write!(f, \"{}\", error)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 26981,
                    "byte_start": 26959,
                    "column_end": 31,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 802,
                    "line_start": 802,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{}\", error)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:810:21\n    |\n810 |                     write!(indenter::indented(f).ind(n), \"{}\", error)?;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n810 -                     write!(indenter::indented(f).ind(n), \"{}\", error)?;\n810 +                     write!(indenter::indented(f).ind(n), \"{error}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 27321,
                        "byte_start": 27321,
                        "column_end": 60,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 810,
                        "line_start": 810,
                        "suggested_replacement": "error",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 60,
                            "text": "                    write!(indenter::indented(f).ind(n), \"{}\", error)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 27330,
                        "byte_start": 27323,
                        "column_end": 69,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 810,
                        "line_start": 810,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 62,
                            "text": "                    write!(indenter::indented(f).ind(n), \"{}\", error)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 27331,
                    "byte_start": 27282,
                    "column_end": 70,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 810,
                    "line_start": 810,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 70,
                        "highlight_start": 21,
                        "text": "                    write!(indenter::indented(f).ind(n), \"{}\", error)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:812:21\n    |\n812 |                     write!(indenter::indented(f), \"{}\", error)?;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n812 -                     write!(indenter::indented(f), \"{}\", error)?;\n812 +                     write!(indenter::indented(f), \"{error}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 27411,
                        "byte_start": 27411,
                        "column_end": 53,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 812,
                        "line_start": 812,
                        "suggested_replacement": "error",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "                    write!(indenter::indented(f), \"{}\", error)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 27420,
                        "byte_start": 27413,
                        "column_end": 62,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 812,
                        "line_start": 812,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 55,
                            "text": "                    write!(indenter::indented(f), \"{}\", error)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 27421,
                    "byte_start": 27379,
                    "column_end": 63,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 812,
                    "line_start": 812,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 21,
                        "text": "                    write!(indenter::indented(f), \"{}\", error)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:821:17\n    |\n821 |                 write!(indenter::indented(f), \"{}\", location)?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n821 -                 write!(indenter::indented(f), \"{}\", location)?;\n821 +                 write!(indenter::indented(f), \"{location}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 27684,
                        "byte_start": 27684,
                        "column_end": 49,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 821,
                        "line_start": 821,
                        "suggested_replacement": "location",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 49,
                            "text": "                write!(indenter::indented(f), \"{}\", location)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 27696,
                        "byte_start": 27686,
                        "column_end": 61,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 821,
                        "line_start": 821,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 51,
                            "text": "                write!(indenter::indented(f), \"{}\", location)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 27697,
                    "byte_start": 27652,
                    "column_end": 62,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 821,
                    "line_start": 821,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 17,
                        "text": "                write!(indenter::indented(f), \"{}\", location)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4uqw6ro0/eyre-0.6.12#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "auto-install",
                "default",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4uqw6ro0\\eyre-0.6.12\\target\\debug\\deps\\libeyre-1663185a6fb79b89.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 59
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 1,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0020",
                    "package": "pyo3",
                    "title": "Risk of buffer overflow in `PyString::from_object`",
                    "description": "`PyString::from_object` took `&str` arguments and forwarded them directly to the Python C API without checking for terminating nul bytes. This could lead the Python interpreter to read beyond the end of the `&str` data and potentially leak contents of the out-of-bounds read (by raising a Python exception containing a copy of the data including the overflow).\n\nIn PyO3 0.24.1 this function will now allocate a `CString` to guarantee a terminating nul bytes. PyO3 0.25 will likely offer an alternative API which takes `&CStr` arguments.",
                    "date": "2025-04-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [
                      "buffer-overflow"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/PyO3/pyo3/issues/5005",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.24.1"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "pyo3::types::PyString::from_object": [
                        "<0.24.1"
                      ],
                      "pyo3::types::PyString::from_object_bound": [
                        "<0.24.1",
                        ">=0.21.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "pyo3",
                    "version": "0.20.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "04e8453b658fe480c3e70c8ed4e3d3ec33eb74988bd186561b0cc66b85c3bc4b",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.150",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "memoffset",
                        "version": "0.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "parking_lot",
                        "version": "0.11.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pyo3-build-config",
                        "version": "0.20.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pyo3-ffi",
                        "version": "0.20.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "instant",
                    "version": "0.1.12",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0384",
                    "package": "instant",
                    "title": "`instant` is unmaintained",
                    "description": "This crate is no longer maintained, and the author recommends using the maintained [`web-time`] crate instead.\n\n[`web-time`]: https://crates.io/crates/web-time",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://crates.io/crates/instant/0.1.13",
                      "https://github.com/sebcrozet/instant/issues/52"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "futures-util",
                    "version": "0.3.29",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "a19526d624e703a3179b3d322efec918b6246ea0fa51d41124525f00f1cc8104",
                    "dependencies": [
                      {
                        "name": "futures-core",
                        "version": "0.3.29",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-sink",
                        "version": "0.3.29",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-task",
                        "version": "0.3.29",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-utils",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "eyre",
          "version": "0.6.12",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/eyre/latest/eyre/all.html \"show sidebar\")\n# Crate eyreCopy item path\n[Settings](https://docs.rs/eyre/latest/settings.html)\n[Help](https://docs.rs/eyre/latest/help.html)\nSummary[Source](https://docs.rs/eyre/latest/src/eyre/lib.rs.html#1-1322)\nExpand description\nThis library provides [`eyre::Report`](https://docs.rs/eyre/*/eyre/struct.Report.html), a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of [`anyhow`](https://github.com/dtolnay/anyhow) with support for customized error reports. For more details on customization, check out the docs on [`eyre::EyreHandler`](https://docs.rs/eyre/*/eyre/trait.EyreHandler.html).\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#custom-report-handlers)Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * [`stable-eyre`](https://github.com/eyre-rs/stable-eyre): Switches the backtrace type from `std`\u2019s to `backtrace-rs`\u2019s so that it can be captured on stable. The report format is identical to `DefaultHandler`\u2019s report format.\n  * [`color-eyre`](https://github.com/eyre-rs/color-eyre): Captures a `backtrace::Backtrace` and a `tracing_error::SpanTrace`. Provides a `Section` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of [`color-backtrace`](https://github.com/athre0z/color-backtrace), [`color-spantrace`](https://github.com/eyre-rs/color-spantrace), and `ansi_term`. Check out the README on [`color-eyre`](https://github.com/eyre-rs/color-eyre) for details on the report format.\n  * [`simple-eyre`](https://github.com/eyre-rs/simple-eyre): A minimal `EyreHandler` that captures no additional information, for when you do not wish to capture `Backtrace`s with errors.\n  * [`jane-eyre`](https://github.com/yaahc/jane-eyre): A report handler crate that exists purely for the pun. Currently just re-exports `color-eyre`.\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations)Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version[1](https://docs.rs/eyre/latest/eyre/#fn1).\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using `eyre::Report` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn\u2019t mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into undetectable runtime breakage.\n  * If many of your errors are constructed from strings, you encourage your users to use string comparison for reacting to specific errors, which is brittle and turns updating error messages into potentially undetectable runtime breakage.\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#details)Details\n  * Use `Result<T, eyre::Report>`, or equivalently `eyre::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error` trait.\n```\nuse eyre::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\nuse eyre::{WrapErr, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().wrap_err(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .wrap_err_with(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be done by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in [`std::backtrace`](https://doc.rust-lang.org/std/backtrace/index.html#environment-variables):\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\nThe tracking issue for this feature is [rust-lang/rust#53487](https://github.com/rust-lang/rust/issues/53487).\n  * Eyre works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like [thiserror](https://github.com/dtolnay/thiserror).\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `eyre!` macro, which supports string interpolation and produces an `eyre::Report`.\n```\nreturn Err(eyre!(\"Missing attribute: {}\", missing));\n```\n\n  * On newer versions of the compiler (i.e. 1.58 and later) this macro also supports format args captures.\n```\nreturn Err(eyre!(\"Missing attribute: {missing}\"));\n```\n\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#no-std-support)No-std support\nNo-std support was removed in 2020 in [commit 608a16a](https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5) due to unaddressed upstream breakages.\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#comparison-to-failure)Comparison to failure\nThe `eyre::Report` type works something like `failure::Error`, but unlike failure ours is built around the standard library\u2019s `std::error::Error` trait rather than a separate trait `failure::Fail`. The standard library has adopted the necessary improvements for this to be possible as part of [RFC 2504](https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md).\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#comparison-to-thiserror)Comparison to thiserror\nUse `eyre` if you don\u2019t think you\u2019ll do anything with an error other than report it. This is common in application code. Use `thiserror` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don\u2019t know how your users will handle your errors.\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#compatibility-with-anyhow)Compatibility with `anyhow`\nThis crate does its best to be usable as a drop in replacement of `anyhow` and vice-versa by re-exporting all of the renamed APIs with the names used in `anyhow`, though there are some differences still.\n##### [\u00a7](https://docs.rs/eyre/latest/eyre/#context-and-option)`Context` and `Option`\nAs part of renaming `Context` to `WrapErr` we also intentionally do not implement `WrapErr` for `Option`. This decision was made because `wrap_err` implies that you\u2019re creating a new error that saves the old error as its `source`. With `Option` there is no source error to wrap, so `wrap_err` ends up being somewhat meaningless.\nInstead `eyre` offers [`OptionExt::ok_or_eyre`](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre \"method eyre::OptionExt::ok_or_eyre\") to yield _static_ errors from `None`, and intends for users to use the combinator functions provided by `std`, converting `Option`s to `Result`s, for _dynamic_ errors. So where you would write this with anyhow:\n```\nuse anyhow::Context;\nlet opt: Option<()> = None;\nlet result_static = opt.context(\"static error message\");\nlet result_dynamic = opt.with_context(|| format!(\"{} error message\", \"dynamic\"));\n```\n\nWith `eyre` we want users to write:\n```\nuse eyre::{eyre, OptionExt, Result};\nlet opt: Option<()> = None;\nlet result_static: Result<()> = opt.ok_or_eyre(\"static error message\");\nlet result_dynamic: Result<()> = opt.ok_or_else(|| eyre!(\"{} error message\", \"dynamic\"));\n```\n\n**NOTE** : However, to help with porting we do provide a `ContextCompat` trait which implements `context` for options which you can import to make existing `.context` calls compile.\n  1. example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361> [\u21a9](https://docs.rs/eyre/latest/eyre/#fnref1)\n\n\n## Re-exports[\u00a7](https://docs.rs/eyre/latest/eyre/#reexports)\n\n`pub use Report[](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\") as Error;`\n\n\n`pub use WrapErr[](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\") as Context;`\n\n## Macros[\u00a7](https://docs.rs/eyre/latest/eyre/#macros)\n\n[anyhow](https://docs.rs/eyre/latest/eyre/macro.anyhow.html \"macro eyre::anyhow\")\n    Compatibility re-export of `eyre` for interop with `anyhow` Construct an ad-hoc error from a string.\n\n[bail](https://docs.rs/eyre/latest/eyre/macro.bail.html \"macro eyre::bail\")\n    Return early with an error.\n\n[ensure](https://docs.rs/eyre/latest/eyre/macro.ensure.html \"macro eyre::ensure\")\n    Return early with an error if a condition is not satisfied.\n\n[eyre](https://docs.rs/eyre/latest/eyre/macro.eyre.html \"macro eyre::eyre\")\n    Construct an ad-hoc error from a string.\n\n[format_err](https://docs.rs/eyre/latest/eyre/macro.format_err.html \"macro eyre::format_err\")\n    Construct an ad-hoc error from a string.\n## Structs[\u00a7](https://docs.rs/eyre/latest/eyre/#structs)\n\n[Chain](https://docs.rs/eyre/latest/eyre/struct.Chain.html \"struct eyre::Chain\")\n    Iterator of a chain of source errors.\n\n[DefaultHandler](https://docs.rs/eyre/latest/eyre/struct.DefaultHandler.html \"struct eyre::DefaultHandler\")\n    The default provided error report handler for `eyre::Report`.\n\n[InstallError](https://docs.rs/eyre/latest/eyre/struct.InstallError.html \"struct eyre::InstallError\")\n    Error indicating that `set_hook` was unable to install the provided ErrorHook\n\n[Report](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\")\n    The core error reporting type of the library, a wrapper around a dynamic error reporting type.\n## Traits[\u00a7](https://docs.rs/eyre/latest/eyre/#traits)\n\n[ContextCompat](https://docs.rs/eyre/latest/eyre/trait.ContextCompat.html \"trait eyre::ContextCompat\")\n    Provides the `context` method for `Option` when porting from `anyhow`\n\n[EyreHandler](https://docs.rs/eyre/latest/eyre/trait.EyreHandler.html \"trait eyre::EyreHandler\")\n    Error Report Handler trait for customizing `eyre::Report`\n\n[OptionExt](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html \"trait eyre::OptionExt\")\n    Provides the [`ok_or_eyre`](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre \"method eyre::OptionExt::ok_or_eyre\") method for [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\n\n[WrapErr](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\")\n    Provides the `wrap_err` method for `Result`.\n## Functions[\u00a7](https://docs.rs/eyre/latest/eyre/#functions)\n\n[Ok](https://docs.rs/eyre/latest/eyre/fn.Ok.html \"fn eyre::Ok\")\n    Equivalent to Ok::<_, eyre::Error>(value).\n\n[set_hook](https://docs.rs/eyre/latest/eyre/fn.set_hook.html \"fn eyre::set_hook\")\n    Install the provided error hook for constructing EyreHandlers when converting Errors to Reports\n## Type Aliases[\u00a7](https://docs.rs/eyre/latest/eyre/#types)\n\n[Result](https://docs.rs/eyre/latest/eyre/type.Result.html \"type eyre::Result\")\n    type alias for `Result<T, Report>`\n",
            "markdown_with_citations": "[](https://docs.rs/eyre/latest/eyre/all.html \"show sidebar\")\n# Crate eyreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis library provides `eyre::Report`\u27e84\u27e9, a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of `anyhow`\u27e85\u27e9 with support for customized error reports. For more details on customization, check out the docs on `eyre::EyreHandler`\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * `stable-eyre`\u27e88\u27e9: Switches the backtrace type from `std`\u2019s to `backtrace-rs`\u2019s so that it can be captured on stable. The report format is identical to `DefaultHandler`\u2019s report format.\n  * `color-eyre`\u27e89\u27e9: Captures a `backtrace::Backtrace` and a `tracing_error::SpanTrace`. Provides a `Section` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of `color-backtrace`\u27e810\u27e9, `color-spantrace`\u27e811\u27e9, and `ansi_term`. Check out the README on `color-eyre`\u27e89\u27e9 for details on the report format.\n  * `simple-eyre`\u27e812\u27e9: A minimal `EyreHandler` that captures no additional information, for when you do not wish to capture `Backtrace`s with errors.\n  * `jane-eyre`\u27e813\u27e9: A report handler crate that exists purely for the pun. Currently just re-exports `color-eyre`.\n\n\n### \u00a7\u27e814\u27e9Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version1\u27e815\u27e9.\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using `eyre::Report` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn\u2019t mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into undetectable runtime breakage.\n  * If many of your errors are constructed from strings, you encourage your users to use string comparison for reacting to specific errors, which is brittle and turns updating error messages into potentially undetectable runtime breakage.\n\n\n### \u00a7\u27e816\u27e9Details\n  * Use `Result<T, eyre::Report>`, or equivalently `eyre::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error` trait.\n```\nuse eyre::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\nuse eyre::{WrapErr, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().wrap_err(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .wrap_err_with(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be done by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in `std::backtrace`\u27e817\u27e9:\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\nThe tracking issue for this feature is rust-lang/rust#53487\u27e818\u27e9.\n  * Eyre works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like thiserror\u27e819\u27e9.\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `eyre!` macro, which supports string interpolation and produces an `eyre::Report`.\n```\nreturn Err(eyre!(\"Missing attribute: {}\", missing));\n```\n\n  * On newer versions of the compiler (i.e. 1.58 and later) this macro also supports format args captures.\n```\nreturn Err(eyre!(\"Missing attribute: {missing}\"));\n```\n\n\n\n### \u00a7\u27e820\u27e9No-std support\nNo-std support was removed in 2020 in commit 608a16a\u27e821\u27e9 due to unaddressed upstream breakages.\n### \u00a7\u27e822\u27e9Comparison to failure\nThe `eyre::Report` type works something like `failure::Error`, but unlike failure ours is built around the standard library\u2019s `std::error::Error` trait rather than a separate trait `failure::Fail`. The standard library has adopted the necessary improvements for this to be possible as part of RFC 2504\u27e823\u27e9.\n### \u00a7\u27e824\u27e9Comparison to thiserror\nUse `eyre` if you don\u2019t think you\u2019ll do anything with an error other than report it. This is common in application code. Use `thiserror` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don\u2019t know how your users will handle your errors.\n### \u00a7\u27e825\u27e9Compatibility with `anyhow`\nThis crate does its best to be usable as a drop in replacement of `anyhow` and vice-versa by re-exporting all of the renamed APIs with the names used in `anyhow`, though there are some differences still.\n##### \u00a7\u27e826\u27e9`Context` and `Option`\nAs part of renaming `Context` to `WrapErr` we also intentionally do not implement `WrapErr` for `Option`. This decision was made because `wrap_err` implies that you\u2019re creating a new error that saves the old error as its `source`. With `Option` there is no source error to wrap, so `wrap_err` ends up being somewhat meaningless.\nInstead `eyre` offers `OptionExt::ok_or_eyre`\u27e827\u27e9 to yield _static_ errors from `None`, and intends for users to use the combinator functions provided by `std`, converting `Option`s to `Result`s, for _dynamic_ errors. So where you would write this with anyhow:\n```\nuse anyhow::Context;\nlet opt: Option<()> = None;\nlet result_static = opt.context(\"static error message\");\nlet result_dynamic = opt.with_context(|| format!(\"{} error message\", \"dynamic\"));\n```\n\nWith `eyre` we want users to write:\n```\nuse eyre::{eyre, OptionExt, Result};\nlet opt: Option<()> = None;\nlet result_static: Result<()> = opt.ok_or_eyre(\"static error message\");\nlet result_dynamic: Result<()> = opt.ok_or_else(|| eyre!(\"{} error message\", \"dynamic\"));\n```\n\n**NOTE** : However, to help with porting we do provide a `ContextCompat` trait which implements `context` for options which you can import to make existing `.context` calls compile.\n  1. example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361> \u21a9\u27e828\u27e9\n\n\n## Re-exports\u00a7\u27e829\u27e9\n\n`pub use Report[](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\") as Error;`\n\n\n`pub use WrapErr[](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\") as Context;`\n\n## Macros\u00a7\u27e830\u27e9\n\nanyhow\u27e831\u27e9\n    Compatibility re-export of `eyre` for interop with `anyhow` Construct an ad-hoc error from a string.\n\nbail\u27e832\u27e9\n    Return early with an error.\n\nensure\u27e833\u27e9\n    Return early with an error if a condition is not satisfied.\n\neyre\u27e834\u27e9\n    Construct an ad-hoc error from a string.\n\nformat_err\u27e835\u27e9\n    Construct an ad-hoc error from a string.\n## Structs\u00a7\u27e836\u27e9\n\nChain\u27e837\u27e9\n    Iterator of a chain of source errors.\n\nDefaultHandler\u27e838\u27e9\n    The default provided error report handler for `eyre::Report`.\n\nInstallError\u27e839\u27e9\n    Error indicating that `set_hook` was unable to install the provided ErrorHook\n\nReport\u27e840\u27e9\n    The core error reporting type of the library, a wrapper around a dynamic error reporting type.\n## Traits\u00a7\u27e841\u27e9\n\nContextCompat\u27e842\u27e9\n    Provides the `context` method for `Option` when porting from `anyhow`\n\nEyreHandler\u27e843\u27e9\n    Error Report Handler trait for customizing `eyre::Report`\n\nOptionExt\u27e844\u27e9\n    Provides the `ok_or_eyre`\u27e827\u27e9 method for `Option`\u27e845\u27e9.\n\nWrapErr\u27e846\u27e9\n    Provides the `wrap_err` method for `Result`.\n## Functions\u00a7\u27e847\u27e9\n\nOk\u27e848\u27e9\n    Equivalent to Ok::<_, eyre::Error>(value).\n\nset_hook\u27e849\u27e9\n    Install the provided error hook for constructing EyreHandlers when converting Errors to Reports\n## Type Aliases\u00a7\u27e850\u27e9\n\nResult\u27e851\u27e9\n    type alias for `Result<T, Report>`\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/eyre/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/eyre/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/eyre/latest/src/eyre/lib.rs.html#1-1322: Source\n\u27e84\u27e9 https://docs.rs/eyre/*/eyre/struct.Report.html: `eyre::Report`\n\u27e85\u27e9 https://github.com/dtolnay/anyhow: `anyhow`\n\u27e86\u27e9 https://docs.rs/eyre/*/eyre/trait.EyreHandler.html: `eyre::EyreHandler`\n\u27e87\u27e9 https://docs.rs/eyre/latest/eyre/#custom-report-handlers: \u00a7\n\u27e88\u27e9 https://github.com/eyre-rs/stable-eyre: `stable-eyre`\n\u27e89\u27e9 https://github.com/eyre-rs/color-eyre: `color-eyre`\n\u27e810\u27e9 https://github.com/athre0z/color-backtrace: `color-backtrace`\n\u27e811\u27e9 https://github.com/eyre-rs/color-spantrace: `color-spantrace`\n\u27e812\u27e9 https://github.com/eyre-rs/simple-eyre: `simple-eyre`\n\u27e813\u27e9 https://github.com/yaahc/jane-eyre: `jane-eyre`\n\u27e814\u27e9 https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations: \u00a7\n\u27e815\u27e9 https://docs.rs/eyre/latest/eyre/#fn1: 1\n\u27e816\u27e9 https://docs.rs/eyre/latest/eyre/#details: \u00a7\n\u27e817\u27e9 https://doc.rust-lang.org/std/backtrace/index.html#environment-variables: `std::backtrace`\n\u27e818\u27e9 https://github.com/rust-lang/rust/issues/53487: rust-lang/rust#53487\n\u27e819\u27e9 https://github.com/dtolnay/thiserror: thiserror\n\u27e820\u27e9 https://docs.rs/eyre/latest/eyre/#no-std-support: \u00a7\n\u27e821\u27e9 https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5: commit 608a16a\n\u27e822\u27e9 https://docs.rs/eyre/latest/eyre/#comparison-to-failure: \u00a7\n\u27e823\u27e9 https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md: RFC 2504\n\u27e824\u27e9 https://docs.rs/eyre/latest/eyre/#comparison-to-thiserror: \u00a7\n\u27e825\u27e9 https://docs.rs/eyre/latest/eyre/#compatibility-with-anyhow: \u00a7\n\u27e826\u27e9 https://docs.rs/eyre/latest/eyre/#context-and-option: \u00a7\n\u27e827\u27e9 https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre: method eyre::OptionExt::ok_or_eyre - `OptionExt::ok_or_eyre`\n\u27e828\u27e9 https://docs.rs/eyre/latest/eyre/#fnref1: \u21a9\n\u27e829\u27e9 https://docs.rs/eyre/latest/eyre/#reexports: \u00a7\n\u27e830\u27e9 https://docs.rs/eyre/latest/eyre/#macros: \u00a7\n\u27e831\u27e9 https://docs.rs/eyre/latest/eyre/macro.anyhow.html: macro eyre::anyhow - anyhow\n\u27e832\u27e9 https://docs.rs/eyre/latest/eyre/macro.bail.html: macro eyre::bail - bail\n\u27e833\u27e9 https://docs.rs/eyre/latest/eyre/macro.ensure.html: macro eyre::ensure - ensure\n\u27e834\u27e9 https://docs.rs/eyre/latest/eyre/macro.eyre.html: macro eyre::eyre - eyre\n\u27e835\u27e9 https://docs.rs/eyre/latest/eyre/macro.format_err.html: macro eyre::format_err - format_err\n\u27e836\u27e9 https://docs.rs/eyre/latest/eyre/#structs: \u00a7\n\u27e837\u27e9 https://docs.rs/eyre/latest/eyre/struct.Chain.html: struct eyre::Chain - Chain\n\u27e838\u27e9 https://docs.rs/eyre/latest/eyre/struct.DefaultHandler.html: struct eyre::DefaultHandler - DefaultHandler\n\u27e839\u27e9 https://docs.rs/eyre/latest/eyre/struct.InstallError.html: struct eyre::InstallError - InstallError\n\u27e840\u27e9 https://docs.rs/eyre/latest/eyre/struct.Report.html: struct eyre::Report - Report\n\u27e841\u27e9 https://docs.rs/eyre/latest/eyre/#traits: \u00a7\n\u27e842\u27e9 https://docs.rs/eyre/latest/eyre/trait.ContextCompat.html: trait eyre::ContextCompat - ContextCompat\n\u27e843\u27e9 https://docs.rs/eyre/latest/eyre/trait.EyreHandler.html: trait eyre::EyreHandler - EyreHandler\n\u27e844\u27e9 https://docs.rs/eyre/latest/eyre/trait.OptionExt.html: trait eyre::OptionExt - OptionExt\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option`\n\u27e846\u27e9 https://docs.rs/eyre/latest/eyre/trait.WrapErr.html: trait eyre::WrapErr - WrapErr\n\u27e847\u27e9 https://docs.rs/eyre/latest/eyre/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/eyre/latest/eyre/fn.Ok.html: fn eyre::Ok - Ok\n\u27e849\u27e9 https://docs.rs/eyre/latest/eyre/fn.set_hook.html: fn eyre::set_hook - set_hook\n\u27e850\u27e9 https://docs.rs/eyre/latest/eyre/#types: \u00a7\n\u27e851\u27e9 https://docs.rs/eyre/latest/eyre/type.Result.html: type eyre::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "eyre",
          "version": "0.6.12",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/eyre/latest/eyre/all.html \"show sidebar\")\n# Crate eyreCopy item path\n[Settings](https://docs.rs/eyre/latest/settings.html)\n[Help](https://docs.rs/eyre/latest/help.html)\nSummary[Source](https://docs.rs/eyre/latest/src/eyre/lib.rs.html#1-1322)\nExpand description\nThis library provides [`eyre::Report`](https://docs.rs/eyre/*/eyre/struct.Report.html), a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of [`anyhow`](https://github.com/dtolnay/anyhow) with support for customized error reports. For more details on customization, check out the docs on [`eyre::EyreHandler`](https://docs.rs/eyre/*/eyre/trait.EyreHandler.html).\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#custom-report-handlers)Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * [`stable-eyre`](https://github.com/eyre-rs/stable-eyre): Switches the backtrace type from `std`\u2019s to `backtrace-rs`\u2019s so that it can be captured on stable. The report format is identical to `DefaultHandler`\u2019s report format.\n  * [`color-eyre`](https://github.com/eyre-rs/color-eyre): Captures a `backtrace::Backtrace` and a `tracing_error::SpanTrace`. Provides a `Section` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of [`color-backtrace`](https://github.com/athre0z/color-backtrace), [`color-spantrace`](https://github.com/eyre-rs/color-spantrace), and `ansi_term`. Check out the README on [`color-eyre`](https://github.com/eyre-rs/color-eyre) for details on the report format.\n  * [`simple-eyre`](https://github.com/eyre-rs/simple-eyre): A minimal `EyreHandler` that captures no additional information, for when you do not wish to capture `Backtrace`s with errors.\n  * [`jane-eyre`](https://github.com/yaahc/jane-eyre): A report handler crate that exists purely for the pun. Currently just re-exports `color-eyre`.\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations)Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version[1](https://docs.rs/eyre/latest/eyre/#fn1).\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using `eyre::Report` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn\u2019t mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into undetectable runtime breakage.\n  * If many of your errors are constructed from strings, you encourage your users to use string comparison for reacting to specific errors, which is brittle and turns updating error messages into potentially undetectable runtime breakage.\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#details)Details\n  * Use `Result<T, eyre::Report>`, or equivalently `eyre::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error` trait.\n```\nuse eyre::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\nuse eyre::{WrapErr, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().wrap_err(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .wrap_err_with(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be done by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in [`std::backtrace`](https://doc.rust-lang.org/std/backtrace/index.html#environment-variables):\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\nThe tracking issue for this feature is [rust-lang/rust#53487](https://github.com/rust-lang/rust/issues/53487).\n  * Eyre works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like [thiserror](https://github.com/dtolnay/thiserror).\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `eyre!` macro, which supports string interpolation and produces an `eyre::Report`.\n```\nreturn Err(eyre!(\"Missing attribute: {}\", missing));\n```\n\n  * On newer versions of the compiler (i.e. 1.58 and later) this macro also supports format args captures.\n```\nreturn Err(eyre!(\"Missing attribute: {missing}\"));\n```\n\n\n\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#no-std-support)No-std support\nNo-std support was removed in 2020 in [commit 608a16a](https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5) due to unaddressed upstream breakages.\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#comparison-to-failure)Comparison to failure\nThe `eyre::Report` type works something like `failure::Error`, but unlike failure ours is built around the standard library\u2019s `std::error::Error` trait rather than a separate trait `failure::Fail`. The standard library has adopted the necessary improvements for this to be possible as part of [RFC 2504](https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md).\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#comparison-to-thiserror)Comparison to thiserror\nUse `eyre` if you don\u2019t think you\u2019ll do anything with an error other than report it. This is common in application code. Use `thiserror` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don\u2019t know how your users will handle your errors.\n### [\u00a7](https://docs.rs/eyre/latest/eyre/#compatibility-with-anyhow)Compatibility with `anyhow`\nThis crate does its best to be usable as a drop in replacement of `anyhow` and vice-versa by re-exporting all of the renamed APIs with the names used in `anyhow`, though there are some differences still.\n##### [\u00a7](https://docs.rs/eyre/latest/eyre/#context-and-option)`Context` and `Option`\nAs part of renaming `Context` to `WrapErr` we also intentionally do not implement `WrapErr` for `Option`. This decision was made because `wrap_err` implies that you\u2019re creating a new error that saves the old error as its `source`. With `Option` there is no source error to wrap, so `wrap_err` ends up being somewhat meaningless.\nInstead `eyre` offers [`OptionExt::ok_or_eyre`](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre \"method eyre::OptionExt::ok_or_eyre\") to yield _static_ errors from `None`, and intends for users to use the combinator functions provided by `std`, converting `Option`s to `Result`s, for _dynamic_ errors. So where you would write this with anyhow:\n```\nuse anyhow::Context;\nlet opt: Option<()> = None;\nlet result_static = opt.context(\"static error message\");\nlet result_dynamic = opt.with_context(|| format!(\"{} error message\", \"dynamic\"));\n```\n\nWith `eyre` we want users to write:\n```\nuse eyre::{eyre, OptionExt, Result};\nlet opt: Option<()> = None;\nlet result_static: Result<()> = opt.ok_or_eyre(\"static error message\");\nlet result_dynamic: Result<()> = opt.ok_or_else(|| eyre!(\"{} error message\", \"dynamic\"));\n```\n\n**NOTE** : However, to help with porting we do provide a `ContextCompat` trait which implements `context` for options which you can import to make existing `.context` calls compile.\n  1. example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361> [\u21a9](https://docs.rs/eyre/latest/eyre/#fnref1)\n\n\n## Re-exports[\u00a7](https://docs.rs/eyre/latest/eyre/#reexports)\n\n`pub use Report[](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\") as Error;`\n\n\n`pub use WrapErr[](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\") as Context;`\n\n## Macros[\u00a7](https://docs.rs/eyre/latest/eyre/#macros)\n\n[anyhow](https://docs.rs/eyre/latest/eyre/macro.anyhow.html \"macro eyre::anyhow\")\n    Compatibility re-export of `eyre` for interop with `anyhow` Construct an ad-hoc error from a string.\n\n[bail](https://docs.rs/eyre/latest/eyre/macro.bail.html \"macro eyre::bail\")\n    Return early with an error.\n\n[ensure](https://docs.rs/eyre/latest/eyre/macro.ensure.html \"macro eyre::ensure\")\n    Return early with an error if a condition is not satisfied.\n\n[eyre](https://docs.rs/eyre/latest/eyre/macro.eyre.html \"macro eyre::eyre\")\n    Construct an ad-hoc error from a string.\n\n[format_err](https://docs.rs/eyre/latest/eyre/macro.format_err.html \"macro eyre::format_err\")\n    Construct an ad-hoc error from a string.\n## Structs[\u00a7](https://docs.rs/eyre/latest/eyre/#structs)\n\n[Chain](https://docs.rs/eyre/latest/eyre/struct.Chain.html \"struct eyre::Chain\")\n    Iterator of a chain of source errors.\n\n[DefaultHandler](https://docs.rs/eyre/latest/eyre/struct.DefaultHandler.html \"struct eyre::DefaultHandler\")\n    The default provided error report handler for `eyre::Report`.\n\n[InstallError](https://docs.rs/eyre/latest/eyre/struct.InstallError.html \"struct eyre::InstallError\")\n    Error indicating that `set_hook` was unable to install the provided ErrorHook\n\n[Report](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\")\n    The core error reporting type of the library, a wrapper around a dynamic error reporting type.\n## Traits[\u00a7](https://docs.rs/eyre/latest/eyre/#traits)\n\n[ContextCompat](https://docs.rs/eyre/latest/eyre/trait.ContextCompat.html \"trait eyre::ContextCompat\")\n    Provides the `context` method for `Option` when porting from `anyhow`\n\n[EyreHandler](https://docs.rs/eyre/latest/eyre/trait.EyreHandler.html \"trait eyre::EyreHandler\")\n    Error Report Handler trait for customizing `eyre::Report`\n\n[OptionExt](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html \"trait eyre::OptionExt\")\n    Provides the [`ok_or_eyre`](https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre \"method eyre::OptionExt::ok_or_eyre\") method for [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\n\n[WrapErr](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\")\n    Provides the `wrap_err` method for `Result`.\n## Functions[\u00a7](https://docs.rs/eyre/latest/eyre/#functions)\n\n[Ok](https://docs.rs/eyre/latest/eyre/fn.Ok.html \"fn eyre::Ok\")\n    Equivalent to Ok::<_, eyre::Error>(value).\n\n[set_hook](https://docs.rs/eyre/latest/eyre/fn.set_hook.html \"fn eyre::set_hook\")\n    Install the provided error hook for constructing EyreHandlers when converting Errors to Reports\n## Type Aliases[\u00a7](https://docs.rs/eyre/latest/eyre/#types)\n\n[Result](https://docs.rs/eyre/latest/eyre/type.Result.html \"type eyre::Result\")\n    type alias for `Result<T, Report>`\n",
            "markdown_with_citations": "[](https://docs.rs/eyre/latest/eyre/all.html \"show sidebar\")\n# Crate eyreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis library provides `eyre::Report`\u27e84\u27e9, a trait object based error handling type for easy idiomatic error handling and reporting in Rust applications.\nThis crate is a fork of `anyhow`\u27e85\u27e9 with support for customized error reports. For more details on customization, check out the docs on `eyre::EyreHandler`\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Custom Report Handlers\nThe heart of this crate is its ability to swap out the Handler type to change what information is carried alongside errors and how the end report is formatted. This crate is meant to be used alongside companion crates that customize its behavior. Below is a list of known crates that export report handlers for eyre and short summaries of what features they provide.\n  * `stable-eyre`\u27e88\u27e9: Switches the backtrace type from `std`\u2019s to `backtrace-rs`\u2019s so that it can be captured on stable. The report format is identical to `DefaultHandler`\u2019s report format.\n  * `color-eyre`\u27e89\u27e9: Captures a `backtrace::Backtrace` and a `tracing_error::SpanTrace`. Provides a `Section` trait for attaching warnings and suggestions to error reports. The end report is then pretty printed with the help of `color-backtrace`\u27e810\u27e9, `color-spantrace`\u27e811\u27e9, and `ansi_term`. Check out the README on `color-eyre`\u27e89\u27e9 for details on the report format.\n  * `simple-eyre`\u27e812\u27e9: A minimal `EyreHandler` that captures no additional information, for when you do not wish to capture `Backtrace`s with errors.\n  * `jane-eyre`\u27e813\u27e9: A report handler crate that exists purely for the pun. Currently just re-exports `color-eyre`.\n\n\n### \u00a7\u27e814\u27e9Usage Recommendations and Stability Considerations\n**We recommend users do not re-export types from this library as part their own public API for libraries with external users.** The main reason for this is that it will make your library API break if we ever bump the major version number on eyre and your users upgrade the eyre version they use in their application code before you upgrade your own eyre dep version1\u27e815\u27e9.\nHowever, even beyond this API stability hazard, there are other good reasons to avoid using `eyre::Report` as your public error type.\n  * You export an undocumented error interface that is otherwise still accessible via downcast, making it hard for users to react to specific errors while not preventing them from depending on details you didn\u2019t mean to make part of your public API. \n    * This in turn makes the error types of all libraries you use a part of your public API as well, and makes changing any of those libraries into undetectable runtime breakage.\n  * If many of your errors are constructed from strings, you encourage your users to use string comparison for reacting to specific errors, which is brittle and turns updating error messages into potentially undetectable runtime breakage.\n\n\n### \u00a7\u27e816\u27e9Details\n  * Use `Result<T, eyre::Report>`, or equivalently `eyre::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error` trait.\n```\nuse eyre::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Wrap a lower level error with a new error created from a message to help the person troubleshooting understand the chain of failures that occurred. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more information about what higher level step the application was in the middle of.\n```\nuse eyre::{WrapErr, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().wrap_err(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .wrap_err_with(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be done by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using the nightly channel, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in `std::backtrace`\u27e817\u27e9:\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\nThe tracking issue for this feature is rust-lang/rust#53487\u27e818\u27e9.\n  * Eyre works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like thiserror\u27e819\u27e9.\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `eyre!` macro, which supports string interpolation and produces an `eyre::Report`.\n```\nreturn Err(eyre!(\"Missing attribute: {}\", missing));\n```\n\n  * On newer versions of the compiler (i.e. 1.58 and later) this macro also supports format args captures.\n```\nreturn Err(eyre!(\"Missing attribute: {missing}\"));\n```\n\n\n\n### \u00a7\u27e820\u27e9No-std support\nNo-std support was removed in 2020 in commit 608a16a\u27e821\u27e9 due to unaddressed upstream breakages.\n### \u00a7\u27e822\u27e9Comparison to failure\nThe `eyre::Report` type works something like `failure::Error`, but unlike failure ours is built around the standard library\u2019s `std::error::Error` trait rather than a separate trait `failure::Fail`. The standard library has adopted the necessary improvements for this to be possible as part of RFC 2504\u27e823\u27e9.\n### \u00a7\u27e824\u27e9Comparison to thiserror\nUse `eyre` if you don\u2019t think you\u2019ll do anything with an error other than report it. This is common in application code. Use `thiserror` if you think you need an error type that can be handled via match or reported. This is common in library crates where you don\u2019t know how your users will handle your errors.\n### \u00a7\u27e825\u27e9Compatibility with `anyhow`\nThis crate does its best to be usable as a drop in replacement of `anyhow` and vice-versa by re-exporting all of the renamed APIs with the names used in `anyhow`, though there are some differences still.\n##### \u00a7\u27e826\u27e9`Context` and `Option`\nAs part of renaming `Context` to `WrapErr` we also intentionally do not implement `WrapErr` for `Option`. This decision was made because `wrap_err` implies that you\u2019re creating a new error that saves the old error as its `source`. With `Option` there is no source error to wrap, so `wrap_err` ends up being somewhat meaningless.\nInstead `eyre` offers `OptionExt::ok_or_eyre`\u27e827\u27e9 to yield _static_ errors from `None`, and intends for users to use the combinator functions provided by `std`, converting `Option`s to `Result`s, for _dynamic_ errors. So where you would write this with anyhow:\n```\nuse anyhow::Context;\nlet opt: Option<()> = None;\nlet result_static = opt.context(\"static error message\");\nlet result_dynamic = opt.with_context(|| format!(\"{} error message\", \"dynamic\"));\n```\n\nWith `eyre` we want users to write:\n```\nuse eyre::{eyre, OptionExt, Result};\nlet opt: Option<()> = None;\nlet result_static: Result<()> = opt.ok_or_eyre(\"static error message\");\nlet result_dynamic: Result<()> = opt.ok_or_else(|| eyre!(\"{} error message\", \"dynamic\"));\n```\n\n**NOTE** : However, to help with porting we do provide a `ContextCompat` trait which implements `context` for options which you can import to make existing `.context` calls compile.\n  1. example and explanation of breakage <https://github.com/eyre-rs/eyre/issues/30#issuecomment-647650361> \u21a9\u27e828\u27e9\n\n\n## Re-exports\u00a7\u27e829\u27e9\n\n`pub use Report[](https://docs.rs/eyre/latest/eyre/struct.Report.html \"struct eyre::Report\") as Error;`\n\n\n`pub use WrapErr[](https://docs.rs/eyre/latest/eyre/trait.WrapErr.html \"trait eyre::WrapErr\") as Context;`\n\n## Macros\u00a7\u27e830\u27e9\n\nanyhow\u27e831\u27e9\n    Compatibility re-export of `eyre` for interop with `anyhow` Construct an ad-hoc error from a string.\n\nbail\u27e832\u27e9\n    Return early with an error.\n\nensure\u27e833\u27e9\n    Return early with an error if a condition is not satisfied.\n\neyre\u27e834\u27e9\n    Construct an ad-hoc error from a string.\n\nformat_err\u27e835\u27e9\n    Construct an ad-hoc error from a string.\n## Structs\u00a7\u27e836\u27e9\n\nChain\u27e837\u27e9\n    Iterator of a chain of source errors.\n\nDefaultHandler\u27e838\u27e9\n    The default provided error report handler for `eyre::Report`.\n\nInstallError\u27e839\u27e9\n    Error indicating that `set_hook` was unable to install the provided ErrorHook\n\nReport\u27e840\u27e9\n    The core error reporting type of the library, a wrapper around a dynamic error reporting type.\n## Traits\u00a7\u27e841\u27e9\n\nContextCompat\u27e842\u27e9\n    Provides the `context` method for `Option` when porting from `anyhow`\n\nEyreHandler\u27e843\u27e9\n    Error Report Handler trait for customizing `eyre::Report`\n\nOptionExt\u27e844\u27e9\n    Provides the `ok_or_eyre`\u27e827\u27e9 method for `Option`\u27e845\u27e9.\n\nWrapErr\u27e846\u27e9\n    Provides the `wrap_err` method for `Result`.\n## Functions\u00a7\u27e847\u27e9\n\nOk\u27e848\u27e9\n    Equivalent to Ok::<_, eyre::Error>(value).\n\nset_hook\u27e849\u27e9\n    Install the provided error hook for constructing EyreHandlers when converting Errors to Reports\n## Type Aliases\u00a7\u27e850\u27e9\n\nResult\u27e851\u27e9\n    type alias for `Result<T, Report>`\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/eyre/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/eyre/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/eyre/latest/src/eyre/lib.rs.html#1-1322: Source\n\u27e84\u27e9 https://docs.rs/eyre/*/eyre/struct.Report.html: `eyre::Report`\n\u27e85\u27e9 https://github.com/dtolnay/anyhow: `anyhow`\n\u27e86\u27e9 https://docs.rs/eyre/*/eyre/trait.EyreHandler.html: `eyre::EyreHandler`\n\u27e87\u27e9 https://docs.rs/eyre/latest/eyre/#custom-report-handlers: \u00a7\n\u27e88\u27e9 https://github.com/eyre-rs/stable-eyre: `stable-eyre`\n\u27e89\u27e9 https://github.com/eyre-rs/color-eyre: `color-eyre`\n\u27e810\u27e9 https://github.com/athre0z/color-backtrace: `color-backtrace`\n\u27e811\u27e9 https://github.com/eyre-rs/color-spantrace: `color-spantrace`\n\u27e812\u27e9 https://github.com/eyre-rs/simple-eyre: `simple-eyre`\n\u27e813\u27e9 https://github.com/yaahc/jane-eyre: `jane-eyre`\n\u27e814\u27e9 https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations: \u00a7\n\u27e815\u27e9 https://docs.rs/eyre/latest/eyre/#fn1: 1\n\u27e816\u27e9 https://docs.rs/eyre/latest/eyre/#details: \u00a7\n\u27e817\u27e9 https://doc.rust-lang.org/std/backtrace/index.html#environment-variables: `std::backtrace`\n\u27e818\u27e9 https://github.com/rust-lang/rust/issues/53487: rust-lang/rust#53487\n\u27e819\u27e9 https://github.com/dtolnay/thiserror: thiserror\n\u27e820\u27e9 https://docs.rs/eyre/latest/eyre/#no-std-support: \u00a7\n\u27e821\u27e9 https://github.com/eyre-rs/eyre/pull/29/commits/608a16aa2c2c27eca6c88001cc94c6973c18f1d5: commit 608a16a\n\u27e822\u27e9 https://docs.rs/eyre/latest/eyre/#comparison-to-failure: \u00a7\n\u27e823\u27e9 https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md: RFC 2504\n\u27e824\u27e9 https://docs.rs/eyre/latest/eyre/#comparison-to-thiserror: \u00a7\n\u27e825\u27e9 https://docs.rs/eyre/latest/eyre/#compatibility-with-anyhow: \u00a7\n\u27e826\u27e9 https://docs.rs/eyre/latest/eyre/#context-and-option: \u00a7\n\u27e827\u27e9 https://docs.rs/eyre/latest/eyre/trait.OptionExt.html#tymethod.ok_or_eyre: method eyre::OptionExt::ok_or_eyre - `OptionExt::ok_or_eyre`\n\u27e828\u27e9 https://docs.rs/eyre/latest/eyre/#fnref1: \u21a9\n\u27e829\u27e9 https://docs.rs/eyre/latest/eyre/#reexports: \u00a7\n\u27e830\u27e9 https://docs.rs/eyre/latest/eyre/#macros: \u00a7\n\u27e831\u27e9 https://docs.rs/eyre/latest/eyre/macro.anyhow.html: macro eyre::anyhow - anyhow\n\u27e832\u27e9 https://docs.rs/eyre/latest/eyre/macro.bail.html: macro eyre::bail - bail\n\u27e833\u27e9 https://docs.rs/eyre/latest/eyre/macro.ensure.html: macro eyre::ensure - ensure\n\u27e834\u27e9 https://docs.rs/eyre/latest/eyre/macro.eyre.html: macro eyre::eyre - eyre\n\u27e835\u27e9 https://docs.rs/eyre/latest/eyre/macro.format_err.html: macro eyre::format_err - format_err\n\u27e836\u27e9 https://docs.rs/eyre/latest/eyre/#structs: \u00a7\n\u27e837\u27e9 https://docs.rs/eyre/latest/eyre/struct.Chain.html: struct eyre::Chain - Chain\n\u27e838\u27e9 https://docs.rs/eyre/latest/eyre/struct.DefaultHandler.html: struct eyre::DefaultHandler - DefaultHandler\n\u27e839\u27e9 https://docs.rs/eyre/latest/eyre/struct.InstallError.html: struct eyre::InstallError - InstallError\n\u27e840\u27e9 https://docs.rs/eyre/latest/eyre/struct.Report.html: struct eyre::Report - Report\n\u27e841\u27e9 https://docs.rs/eyre/latest/eyre/#traits: \u00a7\n\u27e842\u27e9 https://docs.rs/eyre/latest/eyre/trait.ContextCompat.html: trait eyre::ContextCompat - ContextCompat\n\u27e843\u27e9 https://docs.rs/eyre/latest/eyre/trait.EyreHandler.html: trait eyre::EyreHandler - EyreHandler\n\u27e844\u27e9 https://docs.rs/eyre/latest/eyre/trait.OptionExt.html: trait eyre::OptionExt - OptionExt\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option`\n\u27e846\u27e9 https://docs.rs/eyre/latest/eyre/trait.WrapErr.html: trait eyre::WrapErr - WrapErr\n\u27e847\u27e9 https://docs.rs/eyre/latest/eyre/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/eyre/latest/eyre/fn.Ok.html: fn eyre::Ok - Ok\n\u27e849\u27e9 https://docs.rs/eyre/latest/eyre/fn.set_hook.html: fn eyre::set_hook - set_hook\n\u27e850\u27e9 https://docs.rs/eyre/latest/eyre/#types: \u00a7\n\u27e851\u27e9 https://docs.rs/eyre/latest/eyre/type.Result.html: type eyre::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `eyre` crate provides `eyre::Report`, a flexible, trait-object-based error handling type for idiomatic error reporting in Rust applications. It supports error wrapping, downcasting, and integration with custom report handlers for enhanced formatting and diagnostics (e.g., `color-eyre` for colorful reports). Additionally, it offers ergonomic utilities like the `eyre!` macro for one-off error creation and compatibility with `std::error::Error`-based error types.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Error Handling and API Design  \n\u2705 **Factual**: The `eyre` crate provides the `eyre::Report` type for idiomatic error handling in Rust applications, but it is not recommended to use `eyre::Report` as a public error type in library APIs due to potential API stability hazards.  \n\u274c **Counterfactual**: The `eyre` crate explicitly encourages developers to re-export `eyre::Report` as part of their library's public API to simplify error handling for external users.  \n\n---\n\n### Pair 2: Custom Report Handlers  \n\u2705 **Factual**: The `eyre` crate supports custom report handlers, such as `color-eyre` for colorful error reports and `stable-eyre` for capturing backtraces on stable Rust.  \n\u274c **Counterfactual**: The `eyre` crate does not support custom report handlers, and users must rely solely on the default error reporting format provided by the crate.  \n\n---\n\n### Pair 3: Downcasting Errors  \n\u2705 **Factual**: The `eyre` crate allows downcasting errors by value, shared reference, or mutable reference, enabling users to inspect specific error types and handle them accordingly.  \n\u274c **Counterfactual**: The `eyre` crate does not support downcasting errors, forcing users to rely exclusively on string comparisons to identify specific error types.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-4171fff9-da03c53b-1751259531",
      "timestamp": "2025-06-30T04:58:51.989465+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]